

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Feb  2 21:20:18 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataBANK0
    75  000FD4                     __pidataBANK0:
    76                           	opt callstack 0
    77                           
    78                           ;initializer for _BallDispensed
    79  000FD4  0001               	dw	1
    80  000FD6  0001               	dw	1
    81  000FD8  0001               	dw	1
    82  000FDA  0000               	dw	0
    83  000FDC  0000               	dw	0
    84  000FDE  0001               	dw	1
    85  000FE0  0001               	dw	1
    86  000FE2  0000               	dw	0
    87  000FE4  FFFF               	dw	65535
    88  000FE6  FFFF               	dw	65535
    89                           
    90                           ;initializer for _DistanceCanister
    91  000FE8  0014               	dw	20
    92  000FEA  001E               	dw	30
    93  000FEC  0028               	dw	40
    94  000FEE  003B               	dw	59
    95  000FF0  007B               	dw	123
    96  000FF2  00D4               	dw	212
    97  000FF4  014C               	dw	332
    98  000FF6  0190               	dw	400
    99  000FF8  FFFF               	dw	65535
   100  000FFA  FFFF               	dw	65535
   101                           
   102                           ;initializer for _State
   103  000FFC  0001               	dw	1
   104  000FFE  0001               	dw	1
   105  001000  0001               	dw	1
   106  001002  0000               	dw	0
   107  001004  0000               	dw	0
   108  001006  0001               	dw	1
   109  001008  0001               	dw	1
   110  00100A  0000               	dw	0
   111  00100C  FFFF               	dw	65535
   112  00100E  FFFF               	dw	65535
   113                           
   114                           ;initializer for _balls
   115  001010  0005               	dw	5
   116                           
   117                           ;initializer for _Canister
   118  001012  0008               	dw	8
   119                           
   120                           ;initializer for _time
   121  001014  001E               	dw	30
   122                           
   123                           	psect	mediumconst
   124  00FEC6                     __pmediumconst:
   125                           	opt callstack 0
   126  00FEC6  00                 	db	0
   127  00FEC7                     _keys:
   128                           	opt callstack 0
   129  00FEC7  31                 	db	49
   130  00FEC8  32                 	db	50
   131  00FEC9  33                 	db	51
   132  00FECA  41                 	db	65
   133  00FECB  34                 	db	52
   134  00FECC  35                 	db	53
   135  00FECD  36                 	db	54
   136  00FECE  42                 	db	66
   137  00FECF  37                 	db	55
   138  00FED0  38                 	db	56
   139  00FED1  39                 	db	57
   140  00FED2  43                 	db	67
   141  00FED3  2A                 	db	42
   142  00FED4  30                 	db	48
   143  00FED5  23                 	db	35
   144  00FED6  44                 	db	68
   145  00FED7  00                 	db	0
   146  00FED8                     __end_of_keys:
   147                           	opt callstack 0
   148  00FED8  50                 	db	80
   149  00FED9                     __end_of_LCD_LINE4_ADDR:
   150                           	opt callstack 0
   151  00FED9  10                 	db	16
   152  00FEDA                     __end_of_LCD_LINE3_ADDR:
   153                           	opt callstack 0
   154  00FEDA  40                 	db	64
   155  00FEDB                     __end_of_LCD_LINE2_ADDR:
   156                           	opt callstack 0
   157  00FEDB  00                 	db	0
   158  00FEDC                     __end_of_LCD_LINE1_ADDR:
   159                           	opt callstack 0
   160  00FEDC                     _LCD_SIZE_VERT:
   161                           	opt callstack 0
   162  00FEDC  04                 	db	4
   163  00FEDD                     __end_of_LCD_SIZE_VERT:
   164                           	opt callstack 0
   165  00FEDD                     _LCD_SIZE_HORZ:
   166                           	opt callstack 0
   167  00FEDD  10                 	db	16
   168  00FEDE                     __end_of_LCD_SIZE_HORZ:
   169                           	opt callstack 0
   170  0000                     _PORTB	set	3969
   171  0000                     _ADCON1	set	4033
   172  0000                     _TRISD	set	3989
   173  0000                     _LATD	set	3980
   174  0000                     _LATDbits	set	3980
   175  0000                     _INTCONbits	set	4082
   176  0000                     _INT1IF	set	32640
   177  0000                     _INT1IE	set	32643
   178  00FEDE                     STR_4:
   179  00FEDE  41                 	db	65	;'A'
   180  00FEDF  6C                 	db	108	;'l'
   181  00FEE0  69                 	db	105	;'i'
   182  00FEE1  27                 	db	39
   183  00FEE2  73                 	db	115	;'s'
   184  00FEE3  20                 	db	32
   185  00FEE4  67                 	db	103	;'g'
   186  00FEE5  65                 	db	101	;'e'
   187  00FEE6  74                 	db	116	;'t'
   188  00FEE7  74                 	db	116	;'t'
   189  00FEE8  69                 	db	105	;'i'
   190  00FEE9  6E                 	db	110	;'n'
   191  00FEEA  67                 	db	103	;'g'
   192  00FEEB  20                 	db	32
   193  00FEEC  68                 	db	104	;'h'
   194  00FEED  6F                 	db	111	;'o'
   195  00FEEE  74                 	db	116	;'t'
   196  00FEEF  20                 	db	32
   197  00FEF0  00                 	db	0
   198  00FEF1                     STR_3:
   199  00FEF1  49                 	db	73	;'I'
   200  00FEF2  74                 	db	116	;'t'
   201  00FEF3  27                 	db	39
   202  00FEF4  73                 	db	115	;'s'
   203  00FEF5  20                 	db	32
   204  00FEF6  79                 	db	121	;'y'
   205  00FEF7  61                 	db	97	;'a'
   206  00FEF8  20                 	db	32
   207  00FEF9  62                 	db	98	;'b'
   208  00FEFA  6F                 	db	111	;'o'
   209  00FEFB  79                 	db	121	;'y'
   210  00FEFC  20                 	db	32
   211  00FEFD  41                 	db	65	;'A'
   212  00FEFE  6C                 	db	108	;'l'
   213  00FEFF  69                 	db	105	;'i'
   214  00FF00  21                 	db	33
   215  00FF01  00                 	db	0
   216  00FF02                     STR_14:
   217  00FF02  49                 	db	73	;'I'
   218  00FF03  6E                 	db	110	;'n'
   219  00FF04  64                 	db	100	;'d'
   220  00FF05  69                 	db	105	;'i'
   221  00FF06  76                 	db	118	;'v'
   222  00FF07  69                 	db	105	;'i'
   223  00FF08  64                 	db	100	;'d'
   224  00FF09  75                 	db	117	;'u'
   225  00FF0A  61                 	db	97	;'a'
   226  00FF0B  6C                 	db	108	;'l'
   227  00FF0C  20                 	db	32
   228  00FF0D  49                 	db	73	;'I'
   229  00FF0E  6E                 	db	110	;'n'
   230  00FF0F  66                 	db	102	;'f'
   231  00FF10  6F                 	db	111	;'o'
   232  00FF11  00                 	db	0
   233  00FF12                     STR_16:
   234  00FF12  50                 	db	80	;'P'
   235  00FF13  72                 	db	114	;'r'
   236  00FF14  65                 	db	101	;'e'
   237  00FF15  73                 	db	115	;'s'
   238  00FF16  73                 	db	115	;'s'
   239  00FF17  20                 	db	32
   240  00FF18  30                 	db	48	;'0'
   241  00FF19  20                 	db	32
   242  00FF1A  74                 	db	116	;'t'
   243  00FF1B  6F                 	db	111	;'o'
   244  00FF1C  20                 	db	32
   245  00FF1D  25                 	db	37
   246  00FF1E  64                 	db	100	;'d'
   247  00FF1F  20                 	db	32
   248  00FF20  00                 	db	0
   249  00FF21                     STR_7:
   250  00FF21  4F                 	db	79	;'O'
   251  00FF22  70                 	db	112	;'p'
   252  00FF23  65                 	db	101	;'e'
   253  00FF24  72                 	db	114	;'r'
   254  00FF25  61                 	db	97	;'a'
   255  00FF26  74                 	db	116	;'t'
   256  00FF27  69                 	db	105	;'i'
   257  00FF28  6F                 	db	111	;'o'
   258  00FF29  6E                 	db	110	;'n'
   259  00FF2A  20                 	db	32
   260  00FF2B  54                 	db	84	;'T'
   261  00FF2C  69                 	db	105	;'i'
   262  00FF2D  6D                 	db	109	;'m'
   263  00FF2E  65                 	db	101	;'e'
   264  00FF2F  00                 	db	0
   265  00FF30                     STR_18:
   266  00FF30  44                 	db	68	;'D'
   267  00FF31  69                 	db	105	;'i'
   268  00FF32  73                 	db	115	;'s'
   269  00FF33  74                 	db	116	;'t'
   270  00FF34  61                 	db	97	;'a'
   271  00FF35  6E                 	db	110	;'n'
   272  00FF36  63                 	db	99	;'c'
   273  00FF37  65                 	db	101	;'e'
   274  00FF38  20                 	db	32
   275  00FF39  25                 	db	37
   276  00FF3A  64                 	db	100	;'d'
   277  00FF3B  20                 	db	32
   278  00FF3C  63                 	db	99	;'c'
   279  00FF3D  6D                 	db	109	;'m'
   280  00FF3E  00                 	db	0
   281  00FF3F                     STR_9:
   282  00FF3F  23                 	db	35
   283  00FF40  20                 	db	32
   284  00FF41  6F                 	db	111	;'o'
   285  00FF42  66                 	db	102	;'f'
   286  00FF43  20                 	db	32
   287  00FF44  43                 	db	67	;'C'
   288  00FF45  61                 	db	97	;'a'
   289  00FF46  6E                 	db	110	;'n'
   290  00FF47  69                 	db	105	;'i'
   291  00FF48  73                 	db	115	;'s'
   292  00FF49  74                 	db	116	;'t'
   293  00FF4A  65                 	db	101	;'e'
   294  00FF4B  72                 	db	114	;'r'
   295  00FF4C  73                 	db	115	;'s'
   296  00FF4D  00                 	db	0
   297  00FF4E                     STR_22:
   298  00FF4E  43                 	db	67	;'C'
   299  00FF4F  61                 	db	97	;'a'
   300  00FF50  6E                 	db	110	;'n'
   301  00FF51  69                 	db	105	;'i'
   302  00FF52  73                 	db	115	;'s'
   303  00FF53  74                 	db	116	;'t'
   304  00FF54  65                 	db	101	;'e'
   305  00FF55  72                 	db	114	;'r'
   306  00FF56  20                 	db	32
   307  00FF57  45                 	db	69	;'E'
   308  00FF58  6D                 	db	109	;'m'
   309  00FF59  70                 	db	112	;'p'
   310  00FF5A  74                 	db	116	;'t'
   311  00FF5B  79                 	db	121	;'y'
   312  00FF5C  00                 	db	0
   313  00FF5D                     STR_26:
   314  00FF5D  4E                 	db	78	;'N'
   315  00FF5E  6F                 	db	111	;'o'
   316  00FF5F  20                 	db	32
   317  00FF60  42                 	db	66	;'B'
   318  00FF61  61                 	db	97	;'a'
   319  00FF62  6C                 	db	108	;'l'
   320  00FF63  6C                 	db	108	;'l'
   321  00FF64  20                 	db	32
   322  00FF65  41                 	db	65	;'A'
   323  00FF66  64                 	db	100	;'d'
   324  00FF67  64                 	db	100	;'d'
   325  00FF68  65                 	db	101	;'e'
   326  00FF69  64                 	db	100	;'d'
   327  00FF6A  00                 	db	0
   328  00FF6B                     STR_21:
   329  00FF6B  43                 	db	67	;'C'
   330  00FF6C  61                 	db	97	;'a'
   331  00FF6D  6E                 	db	110	;'n'
   332  00FF6E  69                 	db	105	;'i'
   333  00FF6F  73                 	db	115	;'s'
   334  00FF70  74                 	db	116	;'t'
   335  00FF71  65                 	db	101	;'e'
   336  00FF72  72                 	db	114	;'r'
   337  00FF73  20                 	db	32
   338  00FF74  46                 	db	70	;'F'
   339  00FF75  75                 	db	117	;'u'
   340  00FF76  6C                 	db	108	;'l'
   341  00FF77  6C                 	db	108	;'l'
   342  00FF78  00                 	db	0
   343  00FF79                     STR_2:
   344  00FF79  41                 	db	65	;'A'
   345  00FF7A  20                 	db	32
   346  00FF7B  66                 	db	102	;'f'
   347  00FF7C  6F                 	db	111	;'o'
   348  00FF7D  72                 	db	114	;'r'
   349  00FF7E  20                 	db	32
   350  00FF7F  41                 	db	65	;'A'
   351  00FF80  6C                 	db	108	;'l'
   352  00FF81  69                 	db	105	;'i'
   353  00FF82  20                 	db	32
   354  00FF83  3B                 	db	59	;';'
   355  00FF84  29                 	db	41
   356  00FF85  00                 	db	0
   357  00FF86                     STR_10:
   358  00FF86  25                 	db	37
   359  00FF87  64                 	db	100	;'d'
   360  00FF88  20                 	db	32
   361  00FF89  43                 	db	67	;'C'
   362  00FF8A  61                 	db	97	;'a'
   363  00FF8B  6E                 	db	110	;'n'
   364  00FF8C  69                 	db	105	;'i'
   365  00FF8D  73                 	db	115	;'s'
   366  00FF8E  74                 	db	116	;'t'
   367  00FF8F  65                 	db	101	;'e'
   368  00FF90  72                 	db	114	;'r'
   369  00FF91  73                 	db	115	;'s'
   370  00FF92  00                 	db	0
   371  00FF93                     STR_17:
   372  00FF93  43                 	db	67	;'C'
   373  00FF94  61                 	db	97	;'a'
   374  00FF95  6E                 	db	110	;'n'
   375  00FF96  73                 	db	115	;'s'
   376  00FF97  69                 	db	105	;'i'
   377  00FF98  74                 	db	116	;'t'
   378  00FF99  65                 	db	101	;'e'
   379  00FF9A  72                 	db	114	;'r'
   380  00FF9B  20                 	db	32
   381  00FF9C  25                 	db	37
   382  00FF9D  63                 	db	99	;'c'
   383  00FF9E  00                 	db	0
   384  00FF9F                     STR_6:
   385  00FF9F  41                 	db	65	;'A'
   386  00FFA0  6C                 	db	108	;'l'
   387  00FFA1  6D                 	db	109	;'m'
   388  00FFA2  6F                 	db	111	;'o'
   389  00FFA3  73                 	db	115	;'s'
   390  00FFA4  74                 	db	116	;'t'
   391  00FFA5  20                 	db	32
   392  00FFA6  64                 	db	100	;'d'
   393  00FFA7  6F                 	db	111	;'o'
   394  00FFA8  6E                 	db	110	;'n'
   395  00FFA9  65                 	db	101	;'e'
   396  00FFAA  00                 	db	0
   397  00FFAB                     STR_15:
   398  00FFAB  6F                 	db	111	;'o'
   399  00FFAC  66                 	db	102	;'f'
   400  00FFAD  20                 	db	32
   401  00FFAE  43                 	db	67	;'C'
   402  00FFAF  61                 	db	97	;'a'
   403  00FFB0  6E                 	db	110	;'n'
   404  00FFB1  69                 	db	105	;'i'
   405  00FFB2  73                 	db	115	;'s'
   406  00FFB3  74                 	db	116	;'t'
   407  00FFB4  65                 	db	101	;'e'
   408  00FFB5  72                 	db	114	;'r'
   409  00FFB6  00                 	db	0
   410  00FFB7                     STR_8:
   411  00FFB7  25                 	db	37
   412  00FFB8  64                 	db	100	;'d'
   413  00FFB9  20                 	db	32
   414  00FFBA  73                 	db	115	;'s'
   415  00FFBB  65                 	db	101	;'e'
   416  00FFBC  63                 	db	99	;'c'
   417  00FFBD  6F                 	db	111	;'o'
   418  00FFBE  6E                 	db	110	;'n'
   419  00FFBF  64                 	db	100	;'d'
   420  00FFC0  73                 	db	115	;'s'
   421  00FFC1  00                 	db	0
   422  00FFC2                     STR_11:
   423  00FFC2  23                 	db	35
   424  00FFC3  20                 	db	32
   425  00FFC4  6F                 	db	111	;'o'
   426  00FFC5  66                 	db	102	;'f'
   427  00FFC6  20                 	db	32
   428  00FFC7  42                 	db	66	;'B'
   429  00FFC8  61                 	db	97	;'a'
   430  00FFC9  6C                 	db	108	;'l'
   431  00FFCA  6C                 	db	108	;'l'
   432  00FFCB  73                 	db	115	;'s'
   433  00FFCC  00                 	db	0
   434  00FFCD                     STR_1:
   435  00FFCD  41                 	db	65	;'A'
   436  00FFCE  20                 	db	32
   437  00FFCF  74                 	db	116	;'t'
   438  00FFD0  6F                 	db	111	;'o'
   439  00FFD1  20                 	db	32
   440  00FFD2  73                 	db	115	;'s'
   441  00FFD3  74                 	db	116	;'t'
   442  00FFD4  61                 	db	97	;'a'
   443  00FFD5  72                 	db	114	;'r'
   444  00FFD6  74                 	db	116	;'t'
   445  00FFD7  00                 	db	0
   446  00FFD8                     STR_5:
   447  00FFD8  48                 	db	72	;'H'
   448  00FFD9  69                 	db	105	;'i'
   449  00FFDA  20                 	db	32
   450  00FFDB  43                 	db	67	;'C'
   451  00FFDC  75                 	db	117	;'u'
   452  00FFDD  6C                 	db	108	;'l'
   453  00FFDE  6C                 	db	108	;'l'
   454  00FFDF  20                 	db	32
   455  00FFE0  21                 	db	33
   456  00FFE1  00                 	db	0
   457  00FFE2                     STR_19:
   458  00FFE2  2A                 	db	42
   459  00FFE3  20                 	db	32
   460  00FFE4  74                 	db	116	;'t'
   461  00FFE5  6F                 	db	111	;'o'
   462  00FFE6  20                 	db	32
   463  00FFE7  65                 	db	101	;'e'
   464  00FFE8  78                 	db	120	;'x'
   465  00FFE9  69                 	db	105	;'i'
   466  00FFEA  74                 	db	116	;'t'
   467  00FFEB  00                 	db	0
   468  00FFEC                     STR_12:
   469  00FFEC  73                 	db	115	;'s'
   470  00FFED  75                 	db	117	;'u'
   471  00FFEE  70                 	db	112	;'p'
   472  00FFEF  70                 	db	112	;'p'
   473  00FFF0  6C                 	db	108	;'l'
   474  00FFF1  69                 	db	105	;'i'
   475  00FFF2  65                 	db	101	;'e'
   476  00FFF3  64                 	db	100	;'d'
   477  00FFF4  00                 	db	0
   478  00FFF5                     STR_13:
   479  00FFF5  25                 	db	37
   480  00FFF6  64                 	db	100	;'d'
   481  00FFF7  20                 	db	32
   482  00FFF8  62                 	db	98	;'b'
   483  00FFF9  61                 	db	97	;'a'
   484  00FFFA  6C                 	db	108	;'l'
   485  00FFFB  6C                 	db	108	;'l'
   486  00FFFC  73                 	db	115	;'s'
   487  00FFFD  00                 	db	0
   488  0000                     
   489                           ; #config settings
   490  00FFFE  00                 	db	0	; dummy byte at the end
   491  0000                     
   492                           	psect	cinit
   493  000F8E                     __pcinit:
   494                           	opt callstack 0
   495  000F8E                     start_initialization:
   496                           	opt callstack 0
   497  000F8E                     __initialization:
   498                           	opt callstack 0
   499                           
   500                           ; Initialize objects allocated to BANK0 (66 bytes)
   501                           ; load TBLPTR registers with __pidataBANK0
   502  000F8E  0ED4               	movlw	low __pidataBANK0
   503  000F90  6EF6               	movwf	tblptrl,c
   504  000F92  0E0F               	movlw	high __pidataBANK0
   505  000F94  6EF7               	movwf	tblptrh,c
   506  000F96  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   507  000F98  6EF8               	movwf	tblptru,c
   508  000F9A  EE00  F080         	lfsr	0,__pdataBANK0
   509  000F9E  EE10 F042          	lfsr	1,66
   510  000FA2                     copy_data0:
   511  000FA2  0009               	tblrd		*+
   512  000FA4  CFF5 FFEE          	movff	tablat,postinc0
   513  000FA8  50E5               	movf	postdec1,w,c
   514  000FAA  50E1               	movf	fsr1l,w,c
   515  000FAC  E1FA               	bnz	copy_data0
   516                           
   517                           ; Clear objects allocated to BANK0 (35 bytes)
   518  000FAE  EE00  F0C2         	lfsr	0,__pbssBANK0
   519  000FB2  0E23               	movlw	35
   520  000FB4                     clear_0:
   521  000FB4  6AEE               	clrf	postinc0,c
   522  000FB6  06E8               	decf	wreg,f,c
   523  000FB8  E1FD               	bnz	clear_0
   524                           
   525                           ; Clear objects allocated to COMRAM (8 bytes)
   526  000FBA  EE00  F06C         	lfsr	0,__pbssCOMRAM
   527  000FBE  0E08               	movlw	8
   528  000FC0                     clear_1:
   529  000FC0  6AEE               	clrf	postinc0,c
   530  000FC2  06E8               	decf	wreg,f,c
   531  000FC4  E1FD               	bnz	clear_1
   532  000FC6                     end_of_initialization:
   533                           	opt callstack 0
   534  000FC6                     __end_of__initialization:
   535                           	opt callstack 0
   536  000FC6  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   537  000FC8  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   538  000FCA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   539  000FCC  6EF8               	movwf	tblptru,c
   540  000FCE  0100               	movlb	0
   541  000FD0  EF09  F000         	goto	_main	;jump to C main() function
   542                           
   543                           	psect	bssCOMRAM
   544  00006C                     __pbssCOMRAM:
   545                           	opt callstack 0
   546  00006C                     _nout:
   547                           	opt callstack 0
   548  00006C                     	ds	2
   549  00006E                     _width:
   550                           	opt callstack 0
   551  00006E                     	ds	2
   552  000070                     _prec:
   553                           	opt callstack 0
   554  000070                     	ds	2
   555  000072                     _flags:
   556                           	opt callstack 0
   557  000072                     	ds	2
   558                           
   559                           	psect	bssBANK0
   560  0000C2                     __pbssBANK0:
   561                           	opt callstack 0
   562  0000C2                     _start:
   563                           	opt callstack 0
   564  0000C2                     	ds	1
   565  0000C3                     _exit_key:
   566                           	opt callstack 0
   567  0000C3                     	ds	1
   568  0000C4                     _key_was_pressed:
   569                           	opt callstack 0
   570  0000C4                     	ds	1
   571  0000C5                     _dbuf:
   572                           	opt callstack 0
   573  0000C5                     	ds	32
   574                           
   575                           	psect	dataBANK0
   576  000080                     __pdataBANK0:
   577                           	opt callstack 0
   578  000080                     _BallDispensed:
   579                           	opt callstack 0
   580  000080                     	ds	20
   581  000094                     _DistanceCanister:
   582                           	opt callstack 0
   583  000094                     	ds	20
   584  0000A8                     _State:
   585                           	opt callstack 0
   586  0000A8                     	ds	20
   587  0000BC                     _balls:
   588                           	opt callstack 0
   589  0000BC                     	ds	2
   590  0000BE                     _Canister:
   591                           	opt callstack 0
   592  0000BE                     	ds	2
   593  0000C0                     _time:
   594                           	opt callstack 0
   595  0000C0                     	ds	2
   596                           
   597                           	psect	cstackBANK0
   598  0000E5                     __pcstackBANK0:
   599                           	opt callstack 0
   600  0000E5                     	ds	2
   601  0000E7                     printf@ap:
   602                           	opt callstack 0
   603                           
   604                           ; 2 bytes @ 0x2
   605  0000E7                     	ds	2
   606  0000E9                     ??_main:
   607                           
   608                           ; 1 bytes @ 0x4
   609  0000E9                     	ds	2
   610  0000EB                     main@tick:
   611                           	opt callstack 0
   612                           
   613                           ; 2 bytes @ 0x6
   614  0000EB                     	ds	2
   615  0000ED                     main@miniTick:
   616                           	opt callstack 0
   617                           
   618                           ; 2 bytes @ 0x8
   619  0000ED                     	ds	2
   620  0000EF                     main@number_pressed:
   621                           	opt callstack 0
   622                           
   623                           ; 2 bytes @ 0xA
   624  0000EF                     	ds	2
   625  0000F1                     main@miniClear:
   626                           	opt callstack 0
   627                           
   628                           ; 2 bytes @ 0xC
   629  0000F1                     	ds	2
   630  0000F3                     main@keypress:
   631                           	opt callstack 0
   632                           
   633                           ; 1 bytes @ 0xE
   634  0000F3                     	ds	1
   635  0000F4                     main@miniState:
   636                           	opt callstack 0
   637                           
   638                           ; 2 bytes @ 0xF
   639  0000F4                     	ds	2
   640  0000F6                     main@clear:
   641                           	opt callstack 0
   642                           
   643                           ; 2 bytes @ 0x11
   644  0000F6                     	ds	2
   645  0000F8                     main@state:
   646                           	opt callstack 0
   647                           
   648                           ; 2 bytes @ 0x13
   649  0000F8                     	ds	2
   650                           
   651                           	psect	cstackCOMRAM
   652  000001                     __pcstackCOMRAM:
   653                           	opt callstack 0
   654  000001                     ??_interruptHandler:
   655                           
   656                           ; 1 bytes @ 0x0
   657  000001                     	ds	8
   658  000009                     interruptHandler@i:
   659                           	opt callstack 0
   660                           
   661                           ; 2 bytes @ 0x8
   662  000009                     	ds	2
   663  00000B                     interruptHandler@keypress:
   664                           	opt callstack 0
   665                           
   666                           ; 1 bytes @ 0xA
   667  00000B                     	ds	1
   668  00000C                     ?_strlen:
   669                           	opt callstack 0
   670  00000C                     ?___awmod:
   671                           	opt callstack 0
   672  00000C                     ?___aodiv:
   673                           	opt callstack 0
   674  00000C                     ?___aomod:
   675                           	opt callstack 0
   676  00000C                     pulse_e@interruptState:
   677                           	opt callstack 0
   678  00000C                     ___awmod@dividend:
   679                           	opt callstack 0
   680  00000C                     strlen@s:
   681                           	opt callstack 0
   682  00000C                     ___aodiv@dividend:
   683                           	opt callstack 0
   684  00000C                     ___aomod@dividend:
   685                           	opt callstack 0
   686                           
   687                           ; 8 bytes @ 0xB
   688  00000C                     	ds	1
   689  00000D                     send_nibble@data:
   690                           	opt callstack 0
   691                           
   692                           ; 1 bytes @ 0xC
   693  00000D                     	ds	1
   694  00000E                     send_byte@data:
   695                           	opt callstack 0
   696  00000E                     ___awmod@divisor:
   697                           	opt callstack 0
   698  00000E                     strlen@a:
   699                           	opt callstack 0
   700                           
   701                           ; 2 bytes @ 0xD
   702  00000E                     	ds	1
   703  00000F                     lcdInst@data:
   704                           	opt callstack 0
   705  00000F                     putch@data:
   706                           	opt callstack 0
   707                           
   708                           ; 1 bytes @ 0xE
   709  00000F                     	ds	1
   710  000010                     ??_initLCD:
   711  000010                     ___awmod@counter:
   712                           	opt callstack 0
   713  000010                     fputc@c:
   714                           	opt callstack 0
   715                           
   716                           ; 2 bytes @ 0xF
   717  000010                     	ds	1
   718  000011                     ___awmod@sign:
   719                           	opt callstack 0
   720                           
   721                           ; 1 bytes @ 0x10
   722  000011                     	ds	1
   723  000012                     fputc@fp:
   724                           	opt callstack 0
   725                           
   726                           ; 2 bytes @ 0x11
   727  000012                     	ds	2
   728  000014                     ??_fputc:
   729  000014                     ___aodiv@divisor:
   730                           	opt callstack 0
   731  000014                     ___aomod@divisor:
   732                           	opt callstack 0
   733                           
   734                           ; 8 bytes @ 0x13
   735  000014                     	ds	5
   736  000019                     fputs@s:
   737                           	opt callstack 0
   738                           
   739                           ; 2 bytes @ 0x18
   740  000019                     	ds	2
   741  00001B                     fputs@fp:
   742                           	opt callstack 0
   743                           
   744                           ; 2 bytes @ 0x1A
   745  00001B                     	ds	1
   746  00001C                     ___aodiv@counter:
   747                           	opt callstack 0
   748  00001C                     ___aomod@counter:
   749                           	opt callstack 0
   750                           
   751                           ; 1 bytes @ 0x1B
   752  00001C                     	ds	1
   753  00001D                     ___aodiv@sign:
   754                           	opt callstack 0
   755  00001D                     ___aomod@sign:
   756                           	opt callstack 0
   757  00001D                     fputs@c:
   758                           	opt callstack 0
   759                           
   760                           ; 1 bytes @ 0x1C
   761  00001D                     	ds	1
   762  00001E                     ?_abs:
   763                           	opt callstack 0
   764  00001E                     abs@a:
   765                           	opt callstack 0
   766  00001E                     fputs@i:
   767                           	opt callstack 0
   768  00001E                     ___aodiv@quotient:
   769                           	opt callstack 0
   770                           
   771                           ; 8 bytes @ 0x1D
   772  00001E                     	ds	2
   773  000020                     ??_abs:
   774  000020                     ?_pad:
   775                           	opt callstack 0
   776  000020                     pad@fp:
   777                           	opt callstack 0
   778                           
   779                           ; 2 bytes @ 0x1F
   780  000020                     	ds	2
   781  000022                     pad@buf:
   782                           	opt callstack 0
   783                           
   784                           ; 2 bytes @ 0x21
   785  000022                     	ds	2
   786  000024                     pad@p:
   787                           	opt callstack 0
   788                           
   789                           ; 2 bytes @ 0x23
   790  000024                     	ds	2
   791  000026                     ??_pad:
   792                           
   793                           ; 1 bytes @ 0x25
   794  000026                     	ds	1
   795  000027                     pad@i:
   796                           	opt callstack 0
   797                           
   798                           ; 2 bytes @ 0x26
   799  000027                     	ds	2
   800  000029                     pad@w:
   801                           	opt callstack 0
   802                           
   803                           ; 2 bytes @ 0x28
   804  000029                     	ds	2
   805  00002B                     ?_ctoa:
   806                           	opt callstack 0
   807  00002B                     ?_dtoa:
   808                           	opt callstack 0
   809  00002B                     ctoa@fp:
   810                           	opt callstack 0
   811  00002B                     dtoa@fp:
   812                           	opt callstack 0
   813                           
   814                           ; 2 bytes @ 0x2A
   815  00002B                     	ds	2
   816  00002D                     ctoa@c:
   817                           	opt callstack 0
   818  00002D                     dtoa@d:
   819                           	opt callstack 0
   820                           
   821                           ; 8 bytes @ 0x2C
   822  00002D                     	ds	1
   823  00002E                     ctoa@w:
   824                           	opt callstack 0
   825                           
   826                           ; 2 bytes @ 0x2D
   827  00002E                     	ds	7
   828  000035                     ??_dtoa:
   829                           
   830                           ; 1 bytes @ 0x34
   831  000035                     	ds	8
   832  00003D                     _dtoa$326:
   833                           	opt callstack 0
   834                           
   835                           ; 2 bytes @ 0x3C
   836  00003D                     	ds	2
   837  00003F                     dtoa@p:
   838                           	opt callstack 0
   839                           
   840                           ; 2 bytes @ 0x3E
   841  00003F                     	ds	2
   842  000041                     dtoa@w:
   843                           	opt callstack 0
   844                           
   845                           ; 2 bytes @ 0x40
   846  000041                     	ds	2
   847  000043                     dtoa@s:
   848                           	opt callstack 0
   849                           
   850                           ; 2 bytes @ 0x42
   851  000043                     	ds	2
   852  000045                     dtoa@n:
   853                           	opt callstack 0
   854                           
   855                           ; 8 bytes @ 0x44
   856  000045                     	ds	8
   857  00004D                     dtoa@i:
   858                           	opt callstack 0
   859                           
   860                           ; 2 bytes @ 0x4C
   861  00004D                     	ds	2
   862  00004F                     ?_vfpfcnvrt:
   863                           	opt callstack 0
   864  00004F                     vfpfcnvrt@fp:
   865                           	opt callstack 0
   866                           
   867                           ; 2 bytes @ 0x4E
   868  00004F                     	ds	2
   869  000051                     vfpfcnvrt@fmt:
   870                           	opt callstack 0
   871                           
   872                           ; 2 bytes @ 0x50
   873  000051                     	ds	2
   874  000053                     vfpfcnvrt@ap:
   875                           	opt callstack 0
   876                           
   877                           ; 2 bytes @ 0x52
   878  000053                     	ds	2
   879  000055                     ??_vfpfcnvrt:
   880                           
   881                           ; 1 bytes @ 0x54
   882  000055                     	ds	2
   883  000057                     vfpfcnvrt@ll:
   884                           	opt callstack 0
   885                           
   886                           ; 8 bytes @ 0x56
   887  000057                     	ds	8
   888  00005F                     vfpfcnvrt@c:
   889                           	opt callstack 0
   890                           
   891                           ; 1 bytes @ 0x5E
   892  00005F                     	ds	1
   893  000060                     ?_vfprintf:
   894                           	opt callstack 0
   895  000060                     vfprintf@fp:
   896                           	opt callstack 0
   897                           
   898                           ; 2 bytes @ 0x5F
   899  000060                     	ds	2
   900  000062                     vfprintf@fmt:
   901                           	opt callstack 0
   902                           
   903                           ; 2 bytes @ 0x61
   904  000062                     	ds	2
   905  000064                     vfprintf@ap:
   906                           	opt callstack 0
   907                           
   908                           ; 2 bytes @ 0x63
   909  000064                     	ds	2
   910  000066                     vfprintf@cfmt:
   911                           	opt callstack 0
   912                           
   913                           ; 2 bytes @ 0x65
   914  000066                     	ds	2
   915  000068                     ?_printf:
   916                           	opt callstack 0
   917  000068                     printf@fmt:
   918                           	opt callstack 0
   919                           
   920                           ; 2 bytes @ 0x67
   921  000068                     	ds	4
   922  00006C                     
   923                           ; 1 bytes @ 0x6B
   924 ;;
   925 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   926 ;;
   927 ;; *************** function _main *****************
   928 ;; Defined at:
   929 ;;		line 37 in file "main.c"
   930 ;; Parameters:    Size  Location     Type
   931 ;;		None
   932 ;; Auto vars:     Size  Location     Type
   933 ;;  miniState       2   15[BANK0 ] int 
   934 ;;  miniClear       2   12[BANK0 ] int 
   935 ;;  number_press    2   10[BANK0 ] int 
   936 ;;  miniTick        2    8[BANK0 ] int 
   937 ;;  keypress        1   14[BANK0 ] unsigned char 
   938 ;;  state           2   19[BANK0 ] int 
   939 ;;  clear           2   17[BANK0 ] int 
   940 ;;  tick            2    6[BANK0 ] int 
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   945 ;; Tracked objects:
   946 ;;		On entry : 0/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   951 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   952 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   953 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   954 ;;Total ram usage:       17 bytes
   955 ;; Hardware stack levels required when called:   12
   956 ;; This function calls:
   957 ;;		___awmod
   958 ;;		_initLCD
   959 ;;		_lcdInst
   960 ;;		_printf
   961 ;; This function is called by:
   962 ;;		Startup code after reset
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text0
   967  000012                     __ptext0:
   968                           	opt callstack 0
   969  000012                     _main:
   970                           	opt callstack 19
   971                           
   972                           ;main.c: 41:     LATD = 0x00;
   973                           
   974                           ;incstack = 0
   975  000012  0E00               	movlw	0
   976  000014  6E8C               	movwf	3980,c	;volatile
   977                           
   978                           ;main.c: 42:     TRISD = 0x00;
   979  000016  0E00               	movlw	0
   980  000018  6E95               	movwf	3989,c	;volatile
   981                           
   982                           ;main.c: 45:     ADCON1 = 0b00001111;
   983  00001A  0E0F               	movlw	15
   984  00001C  6EC1               	movwf	4033,c	;volatile
   985                           
   986                           ;main.c: 48:     INT1IE = 1;
   987  00001E  86F0               	bsf	4080,3,c	;volatile
   988                           
   989                           ;main.c: 51:     initLCD();
   990  000020  EC42  F007         	call	_initLCD	;wreg free
   991                           
   992                           ;main.c: 54:     (INTCONbits.GIE = 1);
   993  000024  8EF2               	bsf	4082,7,c	;volatile
   994                           
   995                           ;main.c: 57:     int state = 0;
   996  000026  0E00               	movlw	0
   997  000028  0100               	movlb	0	; () banked
   998  00002A  6FF9               	movwf	(main@state+1)& (0+255),b
   999  00002C  0E00               	movlw	0
  1000  00002E  6FF8               	movwf	main@state& (0+255),b
  1001                           
  1002                           ; BSR set to: 0
  1003                           ;main.c: 58:     int tick = 0;
  1004  000030  0E00               	movlw	0
  1005  000032  6FEC               	movwf	(main@tick+1)& (0+255),b
  1006  000034  0E00               	movlw	0
  1007  000036  6FEB               	movwf	main@tick& (0+255),b
  1008                           
  1009                           ; BSR set to: 0
  1010                           ;main.c: 59:     int clear = 1;
  1011  000038  0E00               	movlw	0
  1012  00003A  6FF7               	movwf	(main@clear+1)& (0+255),b
  1013  00003C  0E01               	movlw	1
  1014  00003E  6FF6               	movwf	main@clear& (0+255),b
  1015                           
  1016                           ;main.c: 64:     { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
  1017  000040  0E0C               	movlw	12
  1018  000042  EC98  F008         	call	_lcdInst
  1019                           
  1020                           ;main.c: 65:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1021  000046  0E01               	movlw	1
  1022  000048  EC98  F008         	call	_lcdInst
  1023  00004C  0E11               	movlw	17
  1024  00004E  0100               	movlb	0	; () banked
  1025  000050  6FE9               	movwf	??_main& (0+255),b
  1026  000052  0E3A               	movlw	58
  1027  000054                     u2337:
  1028  000054  2EE8               	decfsz	wreg,f,c
  1029  000056  D7FE               	bra	u2337
  1030  000058  2FE9               	decfsz	??_main& (0+255),f,b
  1031  00005A  D7FC               	bra	u2337
  1032  00005C  F000               	nop	
  1033                           
  1034                           ;main.c: 66:     printf("A to start");
  1035  00005E  0ECD               	movlw	low STR_1
  1036  000060  6E68               	movwf	printf@fmt,c
  1037  000062  0EFF               	movlw	high STR_1
  1038  000064  6E69               	movwf	printf@fmt+1,c
  1039  000066  EC6A  F008         	call	_printf	;wreg free
  1040  00006A  0E90               	movlw	144
  1041  00006C  EC98  F008         	call	_lcdInst
  1042                           
  1043                           ;main.c: 68:     printf("A for Ali ;)");
  1044  000070  0E79               	movlw	low STR_2
  1045  000072  6E68               	movwf	printf@fmt,c
  1046  000074  0EFF               	movlw	high STR_2
  1047  000076  6E69               	movwf	printf@fmt+1,c
  1048  000078  EC6A  F008         	call	_printf	;wreg free
  1049  00007C                     l2598:
  1050  00007C  0100               	movlb	0	; () banked
  1051  00007E  51C2               	movf	_start& (0+255),w,b	;volatile
  1052  000080  B4D8               	btfsc	status,2,c
  1053  000082  D7FC               	goto	l2598
  1054                           
  1055                           ; BSR set to: 0
  1056                           ;main.c: 72:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1057  000084  0E01               	movlw	1
  1058  000086  EC98  F008         	call	_lcdInst
  1059  00008A  0E11               	movlw	17
  1060  00008C  0100               	movlb	0	; () banked
  1061  00008E  6FE9               	movwf	??_main& (0+255),b
  1062  000090  0E3A               	movlw	58
  1063  000092                     u2347:
  1064  000092  2EE8               	decfsz	wreg,f,c
  1065  000094  D7FE               	bra	u2347
  1066  000096  2FE9               	decfsz	??_main& (0+255),f,b
  1067  000098  D7FC               	bra	u2347
  1068  00009A  F000               	nop	
  1069                           
  1070                           ;main.c: 73:     printf("It's ya boy Ali!");
  1071  00009C  0EF1               	movlw	low STR_3
  1072  00009E  6E68               	movwf	printf@fmt,c
  1073  0000A0  0EFE               	movlw	high STR_3
  1074  0000A2  6E69               	movwf	printf@fmt+1,c
  1075  0000A4  EC6A  F008         	call	_printf	;wreg free
  1076                           
  1077                           ;main.c: 74:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1078  0000A8  0E33               	movlw	51
  1079  0000AA  0100               	movlb	0	; () banked
  1080  0000AC  6FEA               	movwf	(??_main+1)& (0+255),b
  1081  0000AE  0EBB               	movlw	187
  1082  0000B0  6FE9               	movwf	??_main& (0+255),b
  1083  0000B2  0EDF               	movlw	223
  1084  0000B4                     u2357:
  1085  0000B4  2EE8               	decfsz	wreg,f,c
  1086  0000B6  D7FE               	bra	u2357
  1087  0000B8  2FE9               	decfsz	??_main& (0+255),f,b
  1088  0000BA  D7FC               	bra	u2357
  1089  0000BC  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1090  0000BE  D7FA               	bra	u2357
  1091  0000C0  D000               	nop2	
  1092  0000C2  0E90               	movlw	144
  1093  0000C4  EC98  F008         	call	_lcdInst
  1094                           
  1095                           ;main.c: 76:     printf("Ali's getting hot ");
  1096  0000C8  0EDE               	movlw	low STR_4
  1097  0000CA  6E68               	movwf	printf@fmt,c
  1098  0000CC  0EFE               	movlw	high STR_4
  1099  0000CE  6E69               	movwf	printf@fmt+1,c
  1100  0000D0  EC6A  F008         	call	_printf	;wreg free
  1101                           
  1102                           ;main.c: 77:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1103  0000D4  0E33               	movlw	51
  1104  0000D6  0100               	movlb	0	; () banked
  1105  0000D8  6FEA               	movwf	(??_main+1)& (0+255),b
  1106  0000DA  0EBB               	movlw	187
  1107  0000DC  6FE9               	movwf	??_main& (0+255),b
  1108  0000DE  0EDF               	movlw	223
  1109  0000E0                     u2367:
  1110  0000E0  2EE8               	decfsz	wreg,f,c
  1111  0000E2  D7FE               	bra	u2367
  1112  0000E4  2FE9               	decfsz	??_main& (0+255),f,b
  1113  0000E6  D7FC               	bra	u2367
  1114  0000E8  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1115  0000EA  D7FA               	bra	u2367
  1116  0000EC  D000               	nop2	
  1117                           
  1118                           ;main.c: 79:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1119  0000EE  0E01               	movlw	1
  1120  0000F0  EC98  F008         	call	_lcdInst
  1121  0000F4  0E11               	movlw	17
  1122  0000F6  0100               	movlb	0	; () banked
  1123  0000F8  6FE9               	movwf	??_main& (0+255),b
  1124  0000FA  0E3A               	movlw	58
  1125  0000FC                     u2377:
  1126  0000FC  2EE8               	decfsz	wreg,f,c
  1127  0000FE  D7FE               	bra	u2377
  1128  000100  2FE9               	decfsz	??_main& (0+255),f,b
  1129  000102  D7FC               	bra	u2377
  1130  000104  F000               	nop	
  1131                           
  1132                           ;main.c: 80:     printf("Hi Cull !");
  1133  000106  0ED8               	movlw	low STR_5
  1134  000108  6E68               	movwf	printf@fmt,c
  1135  00010A  0EFF               	movlw	high STR_5
  1136  00010C  6E69               	movwf	printf@fmt+1,c
  1137  00010E  EC6A  F008         	call	_printf	;wreg free
  1138                           
  1139                           ;main.c: 81:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1140  000112  0E33               	movlw	51
  1141  000114  0100               	movlb	0	; () banked
  1142  000116  6FEA               	movwf	(??_main+1)& (0+255),b
  1143  000118  0EBB               	movlw	187
  1144  00011A  6FE9               	movwf	??_main& (0+255),b
  1145  00011C  0EDF               	movlw	223
  1146  00011E                     u2387:
  1147  00011E  2EE8               	decfsz	wreg,f,c
  1148  000120  D7FE               	bra	u2387
  1149  000122  2FE9               	decfsz	??_main& (0+255),f,b
  1150  000124  D7FC               	bra	u2387
  1151  000126  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1152  000128  D7FA               	bra	u2387
  1153  00012A  D000               	nop2	
  1154  00012C  0E90               	movlw	144
  1155  00012E  EC98  F008         	call	_lcdInst
  1156                           
  1157                           ;main.c: 83:     printf("Almost done");
  1158  000132  0E9F               	movlw	low STR_6
  1159  000134  6E68               	movwf	printf@fmt,c
  1160  000136  0EFF               	movlw	high STR_6
  1161  000138  6E69               	movwf	printf@fmt+1,c
  1162  00013A  EC6A  F008         	call	_printf	;wreg free
  1163                           
  1164                           ;main.c: 84:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1165  00013E  0E33               	movlw	51
  1166  000140  0100               	movlb	0	; () banked
  1167  000142  6FEA               	movwf	(??_main+1)& (0+255),b
  1168  000144  0EBB               	movlw	187
  1169  000146  6FE9               	movwf	??_main& (0+255),b
  1170  000148  0EDF               	movlw	223
  1171  00014A                     u2397:
  1172  00014A  2EE8               	decfsz	wreg,f,c
  1173  00014C  D7FE               	bra	u2397
  1174  00014E  2FE9               	decfsz	??_main& (0+255),f,b
  1175  000150  D7FC               	bra	u2397
  1176  000152  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1177  000154  D7FA               	bra	u2397
  1178  000156  D000               	nop2	
  1179                           
  1180                           ;main.c: 94:         if (state == 0 & clear == 1) {
  1181  000158  0100               	movlb	0	; () banked
  1182  00015A  51F8               	movf	main@state& (0+255),w,b
  1183  00015C  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1184  00015E  A4D8               	btfss	status,2,c
  1185  000160  D028               	goto	l2642
  1186                           
  1187                           ; BSR set to: 0
  1188  000162  05F6               	decf	main@clear& (0+255),w,b
  1189  000164  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1190  000166  A4D8               	btfss	status,2,c
  1191  000168  D024               	goto	l2642
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;main.c: 95:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1195  00016A  0E01               	movlw	1
  1196  00016C  EC98  F008         	call	_lcdInst
  1197  000170  0E11               	movlw	17
  1198  000172  0100               	movlb	0	; () banked
  1199  000174  6FE9               	movwf	??_main& (0+255),b
  1200  000176  0E3A               	movlw	58
  1201  000178                     u2407:
  1202  000178  2EE8               	decfsz	wreg,f,c
  1203  00017A  D7FE               	bra	u2407
  1204  00017C  2FE9               	decfsz	??_main& (0+255),f,b
  1205  00017E  D7FC               	bra	u2407
  1206  000180  F000               	nop	
  1207                           
  1208                           ;main.c: 96:         printf("Operation Time");
  1209  000182  0E21               	movlw	low STR_7
  1210  000184  6E68               	movwf	printf@fmt,c
  1211  000186  0EFF               	movlw	high STR_7
  1212  000188  6E69               	movwf	printf@fmt+1,c
  1213  00018A  EC6A  F008         	call	_printf	;wreg free
  1214  00018E  0E90               	movlw	144
  1215  000190  EC98  F008         	call	_lcdInst
  1216                           
  1217                           ;main.c: 98:         printf("%d seconds", time);
  1218  000194  0EB7               	movlw	low STR_8
  1219  000196  6E68               	movwf	printf@fmt,c
  1220  000198  0EFF               	movlw	high STR_8
  1221  00019A  6E69               	movwf	printf@fmt+1,c
  1222  00019C  0E00               	movlw	0
  1223  00019E  6E6B               	movwf	?_printf+3,c
  1224  0001A0  0E1E               	movlw	30
  1225  0001A2  6E6A               	movwf	?_printf+2,c
  1226  0001A4  EC6A  F008         	call	_printf	;wreg free
  1227                           
  1228                           ;main.c: 99:         clear = 0;
  1229  0001A8  0E00               	movlw	0
  1230  0001AA  0100               	movlb	0	; () banked
  1231  0001AC  6FF7               	movwf	(main@clear+1)& (0+255),b
  1232  0001AE  0E00               	movlw	0
  1233  0001B0  6FF6               	movwf	main@clear& (0+255),b
  1234  0001B2                     l2642:
  1235                           
  1236                           ; BSR set to: 0
  1237                           ;main.c: 103:         if (state == 1 & clear == 1) {
  1238  0001B2  05F8               	decf	main@state& (0+255),w,b
  1239  0001B4  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1240  0001B6  A4D8               	btfss	status,2,c
  1241  0001B8  D02B               	goto	l2660
  1242                           
  1243                           ; BSR set to: 0
  1244  0001BA  05F6               	decf	main@clear& (0+255),w,b
  1245  0001BC  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1246  0001BE  A4D8               	btfss	status,2,c
  1247  0001C0  D027               	goto	l2660
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;main.c: 105:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1251  0001C2  0E01               	movlw	1
  1252  0001C4  EC98  F008         	call	_lcdInst
  1253  0001C8  0E11               	movlw	17
  1254  0001CA  0100               	movlb	0	; () banked
  1255  0001CC  6FE9               	movwf	??_main& (0+255),b
  1256  0001CE  0E3A               	movlw	58
  1257  0001D0                     u2417:
  1258  0001D0  2EE8               	decfsz	wreg,f,c
  1259  0001D2  D7FE               	bra	u2417
  1260  0001D4  2FE9               	decfsz	??_main& (0+255),f,b
  1261  0001D6  D7FC               	bra	u2417
  1262  0001D8  F000               	nop	
  1263                           
  1264                           ;main.c: 106:             { lcdInst(0x80 | LCD_LINE1_ADDR);};
  1265  0001DA  0E80               	movlw	128
  1266  0001DC  EC98  F008         	call	_lcdInst
  1267                           
  1268                           ;main.c: 107:             printf("# of Canisters");
  1269  0001E0  0E3F               	movlw	low STR_9
  1270  0001E2  6E68               	movwf	printf@fmt,c
  1271  0001E4  0EFF               	movlw	high STR_9
  1272  0001E6  6E69               	movwf	printf@fmt+1,c
  1273  0001E8  EC6A  F008         	call	_printf	;wreg free
  1274  0001EC  0E90               	movlw	144
  1275  0001EE  EC98  F008         	call	_lcdInst
  1276                           
  1277                           ;main.c: 109:             printf("%d Canisters", Canister);
  1278  0001F2  0E86               	movlw	low STR_10
  1279  0001F4  6E68               	movwf	printf@fmt,c
  1280  0001F6  0EFF               	movlw	high STR_10
  1281  0001F8  6E69               	movwf	printf@fmt+1,c
  1282  0001FA  C0BE  F06A         	movff	_Canister,?_printf+2
  1283  0001FE  C0BF  F06B         	movff	_Canister+1,?_printf+3
  1284  000202  EC6A  F008         	call	_printf	;wreg free
  1285                           
  1286                           ;main.c: 110:             clear = 0;
  1287  000206  0E00               	movlw	0
  1288  000208  0100               	movlb	0	; () banked
  1289  00020A  6FF7               	movwf	(main@clear+1)& (0+255),b
  1290  00020C  0E00               	movlw	0
  1291  00020E  6FF6               	movwf	main@clear& (0+255),b
  1292  000210                     l2660:
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;main.c: 114:         if (state == 2 & clear == 1) {
  1296  000210  0E02               	movlw	2
  1297  000212  19F8               	xorwf	main@state& (0+255),w,b
  1298  000214  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1299  000216  A4D8               	btfss	status,2,c
  1300  000218  D031               	goto	l2680
  1301                           
  1302                           ; BSR set to: 0
  1303  00021A  05F6               	decf	main@clear& (0+255),w,b
  1304  00021C  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1305  00021E  A4D8               	btfss	status,2,c
  1306  000220  D02D               	goto	l2680
  1307                           
  1308                           ; BSR set to: 0
  1309                           ;main.c: 116:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1310  000222  0E01               	movlw	1
  1311  000224  EC98  F008         	call	_lcdInst
  1312  000228  0E11               	movlw	17
  1313  00022A  0100               	movlb	0	; () banked
  1314  00022C  6FE9               	movwf	??_main& (0+255),b
  1315  00022E  0E3A               	movlw	58
  1316  000230                     u2427:
  1317  000230  2EE8               	decfsz	wreg,f,c
  1318  000232  D7FE               	bra	u2427
  1319  000234  2FE9               	decfsz	??_main& (0+255),f,b
  1320  000236  D7FC               	bra	u2427
  1321  000238  F000               	nop	
  1322                           
  1323                           ;main.c: 117:             printf("# of Balls");
  1324  00023A  0EC2               	movlw	low STR_11
  1325  00023C  6E68               	movwf	printf@fmt,c
  1326  00023E  0EFF               	movlw	high STR_11
  1327  000240  6E69               	movwf	printf@fmt+1,c
  1328  000242  EC6A  F008         	call	_printf	;wreg free
  1329  000246  0EC0               	movlw	192
  1330  000248  EC98  F008         	call	_lcdInst
  1331                           
  1332                           ;main.c: 119:             printf("supplied");
  1333  00024C  0EEC               	movlw	low STR_12
  1334  00024E  6E68               	movwf	printf@fmt,c
  1335  000250  0EFF               	movlw	high STR_12
  1336  000252  6E69               	movwf	printf@fmt+1,c
  1337  000254  EC6A  F008         	call	_printf	;wreg free
  1338  000258  0ED0               	movlw	208
  1339  00025A  EC98  F008         	call	_lcdInst
  1340                           
  1341                           ;main.c: 121:             printf("%d balls", balls);
  1342  00025E  0EF5               	movlw	low STR_13
  1343  000260  6E68               	movwf	printf@fmt,c
  1344  000262  0EFF               	movlw	high STR_13
  1345  000264  6E69               	movwf	printf@fmt+1,c
  1346  000266  0E00               	movlw	0
  1347  000268  6E6B               	movwf	?_printf+3,c
  1348  00026A  0E05               	movlw	5
  1349  00026C  6E6A               	movwf	?_printf+2,c
  1350  00026E  EC6A  F008         	call	_printf	;wreg free
  1351                           
  1352                           ;main.c: 122:             clear = 0;
  1353  000272  0E00               	movlw	0
  1354  000274  0100               	movlb	0	; () banked
  1355  000276  6FF7               	movwf	(main@clear+1)& (0+255),b
  1356  000278  0E00               	movlw	0
  1357  00027A  6FF6               	movwf	main@clear& (0+255),b
  1358  00027C                     l2680:
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;main.c: 126:         if (state == 3 & clear == 1) {
  1362  00027C  0E03               	movlw	3
  1363  00027E  19F8               	xorwf	main@state& (0+255),w,b
  1364  000280  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1365  000282  A4D8               	btfss	status,2,c
  1366  000284  D034               	goto	l2700
  1367                           
  1368                           ; BSR set to: 0
  1369  000286  05F6               	decf	main@clear& (0+255),w,b
  1370  000288  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1371  00028A  A4D8               	btfss	status,2,c
  1372  00028C  D030               	goto	l2700
  1373                           
  1374                           ; BSR set to: 0
  1375                           ;main.c: 128:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1376  00028E  0E01               	movlw	1
  1377  000290  EC98  F008         	call	_lcdInst
  1378  000294  0E11               	movlw	17
  1379  000296  0100               	movlb	0	; () banked
  1380  000298  6FE9               	movwf	??_main& (0+255),b
  1381  00029A  0E3A               	movlw	58
  1382  00029C                     u2437:
  1383  00029C  2EE8               	decfsz	wreg,f,c
  1384  00029E  D7FE               	bra	u2437
  1385  0002A0  2FE9               	decfsz	??_main& (0+255),f,b
  1386  0002A2  D7FC               	bra	u2437
  1387  0002A4  F000               	nop	
  1388                           
  1389                           ;main.c: 129:             printf("Individual Info");
  1390  0002A6  0E02               	movlw	low STR_14
  1391  0002A8  6E68               	movwf	printf@fmt,c
  1392  0002AA  0EFF               	movlw	high STR_14
  1393  0002AC  6E69               	movwf	printf@fmt+1,c
  1394  0002AE  EC6A  F008         	call	_printf	;wreg free
  1395  0002B2  0EC0               	movlw	192
  1396  0002B4  EC98  F008         	call	_lcdInst
  1397                           
  1398                           ;main.c: 131:             printf("of Canister");
  1399  0002B8  0EAB               	movlw	low STR_15
  1400  0002BA  6E68               	movwf	printf@fmt,c
  1401  0002BC  0EFF               	movlw	high STR_15
  1402  0002BE  6E69               	movwf	printf@fmt+1,c
  1403  0002C0  EC6A  F008         	call	_printf	;wreg free
  1404  0002C4  0ED0               	movlw	208
  1405  0002C6  EC98  F008         	call	_lcdInst
  1406                           
  1407                           ;main.c: 133:             printf("Press 0 to %d ", Canister-1);
  1408  0002CA  0E12               	movlw	low STR_16
  1409  0002CC  6E68               	movwf	printf@fmt,c
  1410  0002CE  0EFF               	movlw	high STR_16
  1411  0002D0  6E69               	movwf	printf@fmt+1,c
  1412  0002D2  0EFF               	movlw	255
  1413  0002D4  0100               	movlb	0	; () banked
  1414  0002D6  25BE               	addwf	_Canister& (0+255),w,b
  1415  0002D8  6E6A               	movwf	?_printf+2,c
  1416  0002DA  0EFF               	movlw	255
  1417  0002DC  21BF               	addwfc	(_Canister+1)& (0+255),w,b
  1418  0002DE  6E6B               	movwf	?_printf+3,c
  1419  0002E0  EC6A  F008         	call	_printf	;wreg free
  1420                           
  1421                           ;main.c: 134:             clear = 0;
  1422  0002E4  0E00               	movlw	0
  1423  0002E6  0100               	movlb	0	; () banked
  1424  0002E8  6FF7               	movwf	(main@clear+1)& (0+255),b
  1425  0002EA  0E00               	movlw	0
  1426  0002EC  6FF6               	movwf	main@clear& (0+255),b
  1427  0002EE                     l2700:
  1428                           
  1429                           ; BSR set to: 0
  1430                           ;main.c: 138:         if(key_was_pressed){
  1431  0002EE  51C4               	movf	_key_was_pressed& (0+255),w,b	;volatile
  1432  0002F0  B4D8               	btfsc	status,2,c
  1433  0002F2  D140               	goto	l2798
  1434                           
  1435                           ; BSR set to: 0
  1436                           ;main.c: 140:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  1437  0002F4  3881               	swapf	3969,w,c	;volatile
  1438  0002F6  0B0F               	andlw	15
  1439  0002F8  0B0F               	andlw	15
  1440  0002FA  6FF3               	movwf	main@keypress& (0+255),b
  1441                           
  1442                           ; BSR set to: 0
  1443                           ;main.c: 141:             int miniTick = 0;
  1444  0002FC  0E00               	movlw	0
  1445  0002FE  6FEE               	movwf	(main@miniTick+1)& (0+255),b
  1446  000300  0E00               	movlw	0
  1447  000302  6FED               	movwf	main@miniTick& (0+255),b
  1448                           
  1449                           ; BSR set to: 0
  1450                           ;main.c: 142:             int miniState = 0;
  1451  000304  0E00               	movlw	0
  1452  000306  6FF5               	movwf	(main@miniState+1)& (0+255),b
  1453  000308  0E00               	movlw	0
  1454  00030A  6FF4               	movwf	main@miniState& (0+255),b
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;main.c: 143:             int miniClear = 1;
  1458  00030C  0E00               	movlw	0
  1459  00030E  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1460  000310  0E01               	movlw	1
  1461  000312  6FF1               	movwf	main@miniClear& (0+255),b
  1462                           
  1463                           ; BSR set to: 0
  1464                           ;main.c: 145:             int number_pressed = (int) (keys[keypress] - '0');
  1465  000314  0EC7               	movlw	low _keys
  1466  000316  25F3               	addwf	main@keypress& (0+255),w,b
  1467  000318  6EF6               	movwf	tblptrl,c
  1468  00031A  6AF7               	clrf	tblptrh,c
  1469  00031C  0EFE               	movlw	high _keys
  1470  00031E  22F7               	addwfc	tblptrh,f,c
  1471  000320                     	if	0	;There are less than 3 active tblptr bytes
  1472  000320                     	endif
  1473  000320  0008               	tblrd		*
  1474  000322  CFF5 F0E9          	movff	tablat,??_main
  1475  000326  0ED0               	movlw	208
  1476  000328  25E9               	addwf	??_main& (0+255),w,b
  1477  00032A  6FEF               	movwf	main@number_pressed& (0+255),b
  1478  00032C  6BF0               	clrf	(main@number_pressed+1)& (0+255),b
  1479  00032E  0EFF               	movlw	255
  1480  000330  23F0               	addwfc	(main@number_pressed+1)& (0+255),f,b
  1481                           
  1482                           ;main.c: 147:             while(!exit_key) {
  1483  000332  D118               	goto	l2794
  1484  000334                     l2712:
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;main.c: 149:                 if (miniState == 0 & miniClear == 1) {
  1488  000334  51F4               	movf	main@miniState& (0+255),w,b
  1489  000336  11F5               	iorwf	(main@miniState+1)& (0+255),w,b
  1490  000338  A4D8               	btfss	status,2,c
  1491  00033A  D046               	goto	l2732
  1492                           
  1493                           ; BSR set to: 0
  1494  00033C  05F1               	decf	main@miniClear& (0+255),w,b
  1495  00033E  11F2               	iorwf	(main@miniClear+1)& (0+255),w,b
  1496  000340  A4D8               	btfss	status,2,c
  1497  000342  D042               	goto	l2732
  1498                           
  1499                           ; BSR set to: 0
  1500                           ;main.c: 151:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1501  000344  0E01               	movlw	1
  1502  000346  EC98  F008         	call	_lcdInst
  1503  00034A  0E11               	movlw	17
  1504  00034C  0100               	movlb	0	; () banked
  1505  00034E  6FE9               	movwf	??_main& (0+255),b
  1506  000350  0E3A               	movlw	58
  1507  000352                     u2447:
  1508  000352  2EE8               	decfsz	wreg,f,c
  1509  000354  D7FE               	bra	u2447
  1510  000356  2FE9               	decfsz	??_main& (0+255),f,b
  1511  000358  D7FC               	bra	u2447
  1512  00035A  F000               	nop	
  1513                           
  1514                           ;main.c: 152:                     printf("Cansiter %c", keys[keypress]);
  1515  00035C  0E93               	movlw	low STR_17
  1516  00035E  6E68               	movwf	printf@fmt,c
  1517  000360  0EFF               	movlw	high STR_17
  1518  000362  6E69               	movwf	printf@fmt+1,c
  1519  000364  0EC7               	movlw	low _keys
  1520  000366  0100               	movlb	0	; () banked
  1521  000368  25F3               	addwf	main@keypress& (0+255),w,b
  1522  00036A  6EF6               	movwf	tblptrl,c
  1523  00036C  6AF7               	clrf	tblptrh,c
  1524  00036E  0EFE               	movlw	high _keys
  1525  000370  22F7               	addwfc	tblptrh,f,c
  1526  000372                     	if	0	;There are less than 3 active tblptr bytes
  1527  000372                     	endif
  1528  000372  0008               	tblrd		*
  1529  000374  50F5               	movf	tablat,w,c
  1530  000376  6E6A               	movwf	?_printf+2,c
  1531  000378  6A6B               	clrf	?_printf+3,c
  1532  00037A  EC6A  F008         	call	_printf	;wreg free
  1533  00037E  0E90               	movlw	144
  1534  000380  EC98  F008         	call	_lcdInst
  1535                           
  1536                           ;main.c: 154:                     printf("Distance %d cm", DistanceCanister[number_press
      +                          ed] );
  1537  000384  0E30               	movlw	low STR_18
  1538  000386  6E68               	movwf	printf@fmt,c
  1539  000388  0EFF               	movlw	high STR_18
  1540  00038A  6E69               	movwf	printf@fmt+1,c
  1541  00038C  90D8               	bcf	status,0,c
  1542  00038E  0100               	movlb	0	; () banked
  1543  000390  35EF               	rlcf	main@number_pressed& (0+255),w,b
  1544  000392  6ED9               	movwf	fsr2l,c
  1545  000394  35F0               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1546  000396  6EDA               	movwf	fsr2h,c
  1547  000398  0E94               	movlw	low _DistanceCanister
  1548  00039A  26D9               	addwf	fsr2l,f,c
  1549  00039C  0E00               	movlw	high _DistanceCanister
  1550  00039E  22DA               	addwfc	fsr2h,f,c
  1551  0003A0  CFDE F06A          	movff	postinc2,?_printf+2
  1552  0003A4  CFDD F06B          	movff	postdec2,?_printf+3
  1553  0003A8  EC6A  F008         	call	_printf	;wreg free
  1554  0003AC  0ED0               	movlw	208
  1555  0003AE  EC98  F008         	call	_lcdInst
  1556                           
  1557                           ;main.c: 156:                     printf("* to exit");
  1558  0003B2  0EE2               	movlw	low STR_19
  1559  0003B4  6E68               	movwf	printf@fmt,c
  1560  0003B6  0EFF               	movlw	high STR_19
  1561  0003B8  6E69               	movwf	printf@fmt+1,c
  1562  0003BA  EC6A  F008         	call	_printf	;wreg free
  1563                           
  1564                           ;main.c: 157:                     miniClear = 0;
  1565  0003BE  0E00               	movlw	0
  1566  0003C0  0100               	movlb	0	; () banked
  1567  0003C2  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1568  0003C4  0E00               	movlw	0
  1569  0003C6  6FF1               	movwf	main@miniClear& (0+255),b
  1570  0003C8                     l2732:
  1571                           
  1572                           ; BSR set to: 0
  1573                           ;main.c: 160:                 if (miniState == 1 & miniClear == 1) {
  1574  0003C8  05F4               	decf	main@miniState& (0+255),w,b
  1575  0003CA  11F5               	iorwf	(main@miniState+1)& (0+255),w,b
  1576  0003CC  A4D8               	btfss	status,2,c
  1577  0003CE  D04D               	goto	l2756
  1578                           
  1579                           ; BSR set to: 0
  1580  0003D0  05F1               	decf	main@miniClear& (0+255),w,b
  1581  0003D2  11F2               	iorwf	(main@miniClear+1)& (0+255),w,b
  1582  0003D4  A4D8               	btfss	status,2,c
  1583  0003D6  D049               	goto	l2756
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;main.c: 162:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1587  0003D8  0E01               	movlw	1
  1588  0003DA  EC98  F008         	call	_lcdInst
  1589  0003DE  0E11               	movlw	17
  1590  0003E0  0100               	movlb	0	; () banked
  1591  0003E2  6FE9               	movwf	??_main& (0+255),b
  1592  0003E4  0E3A               	movlw	58
  1593  0003E6                     u2457:
  1594  0003E6  2EE8               	decfsz	wreg,f,c
  1595  0003E8  D7FE               	bra	u2457
  1596  0003EA  2FE9               	decfsz	??_main& (0+255),f,b
  1597  0003EC  D7FC               	bra	u2457
  1598  0003EE  F000               	nop	
  1599                           
  1600                           ;main.c: 163:                     printf("Cansiter %c", keys[keypress]);
  1601  0003F0  0E93               	movlw	low STR_17
  1602  0003F2  6E68               	movwf	printf@fmt,c
  1603  0003F4  0EFF               	movlw	high STR_17
  1604  0003F6  6E69               	movwf	printf@fmt+1,c
  1605  0003F8  0EC7               	movlw	low _keys
  1606  0003FA  0100               	movlb	0	; () banked
  1607  0003FC  25F3               	addwf	main@keypress& (0+255),w,b
  1608  0003FE  6EF6               	movwf	tblptrl,c
  1609  000400  6AF7               	clrf	tblptrh,c
  1610  000402  0EFE               	movlw	high _keys
  1611  000404  22F7               	addwfc	tblptrh,f,c
  1612  000406                     	if	0	;There are less than 3 active tblptr bytes
  1613  000406                     	endif
  1614  000406  0008               	tblrd		*
  1615  000408  50F5               	movf	tablat,w,c
  1616  00040A  6E6A               	movwf	?_printf+2,c
  1617  00040C  6A6B               	clrf	?_printf+3,c
  1618  00040E  EC6A  F008         	call	_printf	;wreg free
  1619  000412  0E90               	movlw	144
  1620  000414  EC98  F008         	call	_lcdInst
  1621                           
  1622                           ;main.c: 165:                     if (State[number_pressed] == 1)
  1623  000418  90D8               	bcf	status,0,c
  1624  00041A  0100               	movlb	0	; () banked
  1625  00041C  35EF               	rlcf	main@number_pressed& (0+255),w,b
  1626  00041E  6ED9               	movwf	fsr2l,c
  1627  000420  35F0               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1628  000422  6EDA               	movwf	fsr2h,c
  1629  000424  0EA8               	movlw	low _State
  1630  000426  26D9               	addwf	fsr2l,f,c
  1631  000428  0E00               	movlw	high _State
  1632  00042A  22DA               	addwfc	fsr2h,f,c
  1633  00042C  04DE               	decf	postinc2,w,c
  1634  00042E  10DE               	iorwf	postinc2,w,c
  1635  000430  A4D8               	btfss	status,2,c
  1636  000432  D007               	goto	l2748
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;main.c: 166:                         printf("Canister Full");
  1640  000434  0E6B               	movlw	low STR_21
  1641  000436  6E68               	movwf	printf@fmt,c
  1642  000438  0EFF               	movlw	high STR_21
  1643  00043A  6E69               	movwf	printf@fmt+1,c
  1644  00043C  EC6A  F008         	call	_printf	;wreg free
  1645  000440  D006               	goto	l2750
  1646  000442                     l2748:
  1647                           
  1648                           ; BSR set to: 0
  1649                           ;main.c: 168:                         printf("Canister Empty");
  1650  000442  0E4E               	movlw	low STR_22
  1651  000444  6E68               	movwf	printf@fmt,c
  1652  000446  0EFF               	movlw	high STR_22
  1653  000448  6E69               	movwf	printf@fmt+1,c
  1654  00044A  EC6A  F008         	call	_printf	;wreg free
  1655  00044E                     l2750:
  1656  00044E  0ED0               	movlw	208
  1657  000450  EC98  F008         	call	_lcdInst
  1658                           
  1659                           ;main.c: 170:                     printf("* to exit");
  1660  000454  0EE2               	movlw	low STR_19
  1661  000456  6E68               	movwf	printf@fmt,c
  1662  000458  0EFF               	movlw	high STR_19
  1663  00045A  6E69               	movwf	printf@fmt+1,c
  1664  00045C  EC6A  F008         	call	_printf	;wreg free
  1665                           
  1666                           ;main.c: 171:                     miniClear = 0;
  1667  000460  0E00               	movlw	0
  1668  000462  0100               	movlb	0	; () banked
  1669  000464  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1670  000466  0E00               	movlw	0
  1671  000468  6FF1               	movwf	main@miniClear& (0+255),b
  1672  00046A                     l2756:
  1673                           
  1674                           ; BSR set to: 0
  1675                           ;main.c: 174:                 if (miniState == 2 & miniClear == 1) {
  1676  00046A  0E02               	movlw	2
  1677  00046C  19F4               	xorwf	main@miniState& (0+255),w,b
  1678  00046E  11F5               	iorwf	(main@miniState+1)& (0+255),w,b
  1679  000470  A4D8               	btfss	status,2,c
  1680  000472  D04D               	goto	l2780
  1681                           
  1682                           ; BSR set to: 0
  1683  000474  05F1               	decf	main@miniClear& (0+255),w,b
  1684  000476  11F2               	iorwf	(main@miniClear+1)& (0+255),w,b
  1685  000478  A4D8               	btfss	status,2,c
  1686  00047A  D049               	goto	l2780
  1687                           
  1688                           ; BSR set to: 0
  1689                           ;main.c: 176:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1690  00047C  0E01               	movlw	1
  1691  00047E  EC98  F008         	call	_lcdInst
  1692  000482  0E11               	movlw	17
  1693  000484  0100               	movlb	0	; () banked
  1694  000486  6FE9               	movwf	??_main& (0+255),b
  1695  000488  0E3A               	movlw	58
  1696  00048A                     u2467:
  1697  00048A  2EE8               	decfsz	wreg,f,c
  1698  00048C  D7FE               	bra	u2467
  1699  00048E  2FE9               	decfsz	??_main& (0+255),f,b
  1700  000490  D7FC               	bra	u2467
  1701  000492  F000               	nop	
  1702                           
  1703                           ;main.c: 177:                     printf("Cansiter %c", keys[keypress]);
  1704  000494  0E93               	movlw	low STR_17
  1705  000496  6E68               	movwf	printf@fmt,c
  1706  000498  0EFF               	movlw	high STR_17
  1707  00049A  6E69               	movwf	printf@fmt+1,c
  1708  00049C  0EC7               	movlw	low _keys
  1709  00049E  0100               	movlb	0	; () banked
  1710  0004A0  25F3               	addwf	main@keypress& (0+255),w,b
  1711  0004A2  6EF6               	movwf	tblptrl,c
  1712  0004A4  6AF7               	clrf	tblptrh,c
  1713  0004A6  0EFE               	movlw	high _keys
  1714  0004A8  22F7               	addwfc	tblptrh,f,c
  1715  0004AA                     	if	0	;There are less than 3 active tblptr bytes
  1716  0004AA                     	endif
  1717  0004AA  0008               	tblrd		*
  1718  0004AC  50F5               	movf	tablat,w,c
  1719  0004AE  6E6A               	movwf	?_printf+2,c
  1720  0004B0  6A6B               	clrf	?_printf+3,c
  1721  0004B2  EC6A  F008         	call	_printf	;wreg free
  1722  0004B6  0E90               	movlw	144
  1723  0004B8  EC98  F008         	call	_lcdInst
  1724                           
  1725                           ;main.c: 179:                     if (BallDispensed[number_pressed] == 1)
  1726  0004BC  90D8               	bcf	status,0,c
  1727  0004BE  0100               	movlb	0	; () banked
  1728  0004C0  35EF               	rlcf	main@number_pressed& (0+255),w,b
  1729  0004C2  6ED9               	movwf	fsr2l,c
  1730  0004C4  35F0               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1731  0004C6  6EDA               	movwf	fsr2h,c
  1732  0004C8  0E80               	movlw	low _BallDispensed
  1733  0004CA  26D9               	addwf	fsr2l,f,c
  1734  0004CC  0E00               	movlw	high _BallDispensed
  1735  0004CE  22DA               	addwfc	fsr2h,f,c
  1736  0004D0  04DE               	decf	postinc2,w,c
  1737  0004D2  10DE               	iorwf	postinc2,w,c
  1738  0004D4  A4D8               	btfss	status,2,c
  1739  0004D6  D007               	goto	l2772
  1740                           
  1741                           ; BSR set to: 0
  1742                           ;main.c: 180:                         printf("Ball Added");
  1743  0004D8  0E60               	movlw	low (STR_26+3)
  1744  0004DA  6E68               	movwf	printf@fmt,c
  1745  0004DC  0EFF               	movlw	high (STR_26+3)
  1746  0004DE  6E69               	movwf	printf@fmt+1,c
  1747  0004E0  EC6A  F008         	call	_printf	;wreg free
  1748  0004E4  D006               	goto	l2774
  1749  0004E6                     l2772:
  1750                           
  1751                           ; BSR set to: 0
  1752                           ;main.c: 182:                         printf("No Ball Added");
  1753  0004E6  0E5D               	movlw	low STR_26
  1754  0004E8  6E68               	movwf	printf@fmt,c
  1755  0004EA  0EFF               	movlw	high STR_26
  1756  0004EC  6E69               	movwf	printf@fmt+1,c
  1757  0004EE  EC6A  F008         	call	_printf	;wreg free
  1758  0004F2                     l2774:
  1759  0004F2  0ED0               	movlw	208
  1760  0004F4  EC98  F008         	call	_lcdInst
  1761                           
  1762                           ;main.c: 184:                     printf("* to exit");
  1763  0004F8  0EE2               	movlw	low STR_19
  1764  0004FA  6E68               	movwf	printf@fmt,c
  1765  0004FC  0EFF               	movlw	high STR_19
  1766  0004FE  6E69               	movwf	printf@fmt+1,c
  1767  000500  EC6A  F008         	call	_printf	;wreg free
  1768                           
  1769                           ;main.c: 187:                     miniClear = 0;
  1770  000504  0E00               	movlw	0
  1771  000506  0100               	movlb	0	; () banked
  1772  000508  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1773  00050A  0E00               	movlw	0
  1774  00050C  6FF1               	movwf	main@miniClear& (0+255),b
  1775  00050E                     l2780:
  1776                           
  1777                           ; BSR set to: 0
  1778                           ;main.c: 190:                 if (miniTick == 3000) {
  1779  00050E  0EB8               	movlw	184
  1780  000510  19ED               	xorwf	main@miniTick& (0+255),w,b
  1781  000512  E11D               	bnz	l2790
  1782  000514  0E0B               	movlw	11
  1783  000516  19EE               	xorwf	(main@miniTick+1)& (0+255),w,b
  1784  000518  A4D8               	btfss	status,2,c
  1785  00051A  D019               	goto	l2790
  1786                           
  1787                           ; BSR set to: 0
  1788                           ;main.c: 191:                     miniClear = 1;
  1789  00051C  0E00               	movlw	0
  1790  00051E  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1791  000520  0E01               	movlw	1
  1792  000522  6FF1               	movwf	main@miniClear& (0+255),b
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;main.c: 192:                     miniState++;
  1796  000524  4BF4               	infsnz	main@miniState& (0+255),f,b
  1797  000526  2BF5               	incf	(main@miniState+1)& (0+255),f,b
  1798                           
  1799                           ; BSR set to: 0
  1800                           ;main.c: 193:                     miniState = miniState % 3;
  1801  000528  C0F4  F00C         	movff	main@miniState,___awmod@dividend
  1802  00052C  C0F5  F00D         	movff	main@miniState+1,___awmod@dividend+1
  1803  000530  0E00               	movlw	0
  1804  000532  6E0F               	movwf	___awmod@divisor+1,c
  1805  000534  0E03               	movlw	3
  1806  000536  6E0E               	movwf	___awmod@divisor,c
  1807  000538  ECD4  F006         	call	___awmod	;wreg free
  1808  00053C  C00C  F0F4         	movff	?___awmod,main@miniState
  1809  000540  C00D  F0F5         	movff	?___awmod+1,main@miniState+1
  1810                           
  1811                           ;main.c: 194:                     miniTick = 0;
  1812  000544  0E00               	movlw	0
  1813  000546  0100               	movlb	0	; () banked
  1814  000548  6FEE               	movwf	(main@miniTick+1)& (0+255),b
  1815  00054A  0E00               	movlw	0
  1816  00054C  6FED               	movwf	main@miniTick& (0+255),b
  1817  00054E                     l2790:
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;main.c: 197:                 miniTick++;
  1821  00054E  4BED               	infsnz	main@miniTick& (0+255),f,b
  1822  000550  2BEE               	incf	(main@miniTick+1)& (0+255),f,b
  1823                           
  1824                           ; BSR set to: 0
  1825                           ;main.c: 198:                 _delay((unsigned long)((1)*(10000000/4000.0)));
  1826  000552  0E04               	movlw	4
  1827  000554  0100               	movlb	0	; () banked
  1828  000556  6FE9               	movwf	??_main& (0+255),b
  1829  000558  0E3D               	movlw	61
  1830  00055A                     u2477:
  1831  00055A  2EE8               	decfsz	wreg,f,c
  1832  00055C  D7FE               	bra	u2477
  1833  00055E  2FE9               	decfsz	??_main& (0+255),f,b
  1834  000560  D7FC               	bra	u2477
  1835  000562  D000               	nop2	
  1836  000564                     l2794:
  1837                           
  1838                           ;main.c: 147:             while(!exit_key) {
  1839  000564  0100               	movlb	0	; () banked
  1840  000566  51C3               	movf	_exit_key& (0+255),w,b	;volatile
  1841  000568  B4D8               	btfsc	status,2,c
  1842  00056A  D6E4               	goto	l2712
  1843                           
  1844                           ; BSR set to: 0
  1845                           ;main.c: 203:             key_was_pressed = 0;
  1846  00056C  0E00               	movlw	0
  1847  00056E  6FC4               	movwf	_key_was_pressed& (0+255),b	;volatile
  1848                           
  1849                           ;main.c: 204:             exit_key = 0;
  1850  000570  0E00               	movlw	0
  1851  000572  6FC3               	movwf	_exit_key& (0+255),b	;volatile
  1852  000574                     l2798:
  1853                           
  1854                           ; BSR set to: 0
  1855                           ;main.c: 208:         if (tick == 2000) {
  1856  000574  0ED0               	movlw	208
  1857  000576  19EB               	xorwf	main@tick& (0+255),w,b
  1858  000578  E112               	bnz	l2808
  1859  00057A  0E07               	movlw	7
  1860  00057C  19EC               	xorwf	(main@tick+1)& (0+255),w,b
  1861  00057E  A4D8               	btfss	status,2,c
  1862  000580  D00E               	goto	l2808
  1863                           
  1864                           ; BSR set to: 0
  1865                           ;main.c: 209:             clear = 1;
  1866  000582  0E00               	movlw	0
  1867  000584  6FF7               	movwf	(main@clear+1)& (0+255),b
  1868  000586  0E01               	movlw	1
  1869  000588  6FF6               	movwf	main@clear& (0+255),b
  1870                           
  1871                           ; BSR set to: 0
  1872                           ;main.c: 210:             state++;
  1873  00058A  4BF8               	infsnz	main@state& (0+255),f,b
  1874  00058C  2BF9               	incf	(main@state+1)& (0+255),f,b
  1875                           
  1876                           ; BSR set to: 0
  1877                           ;main.c: 211:             state = state % 4;
  1878  00058E  0E03               	movlw	3
  1879  000590  15F8               	andwf	main@state& (0+255),w,b
  1880  000592  6FF8               	movwf	main@state& (0+255),b
  1881  000594  6BF9               	clrf	(main@state+1)& (0+255),b
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;main.c: 212:             tick = 0;
  1885  000596  0E00               	movlw	0
  1886  000598  6FEC               	movwf	(main@tick+1)& (0+255),b
  1887  00059A  0E00               	movlw	0
  1888  00059C  6FEB               	movwf	main@tick& (0+255),b
  1889  00059E                     l2808:
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;main.c: 215:         tick++;
  1893  00059E  4BEB               	infsnz	main@tick& (0+255),f,b
  1894  0005A0  2BEC               	incf	(main@tick+1)& (0+255),f,b
  1895                           
  1896                           ; BSR set to: 0
  1897                           ;main.c: 216:         _delay((unsigned long)((1)*(10000000/4000.0)));
  1898  0005A2  0E04               	movlw	4
  1899  0005A4  0100               	movlb	0	; () banked
  1900  0005A6  6FE9               	movwf	??_main& (0+255),b
  1901  0005A8  0E3D               	movlw	61
  1902  0005AA                     u2487:
  1903  0005AA  2EE8               	decfsz	wreg,f,c
  1904  0005AC  D7FE               	bra	u2487
  1905  0005AE  2FE9               	decfsz	??_main& (0+255),f,b
  1906  0005B0  D7FC               	bra	u2487
  1907  0005B2  D5D1               	goto	L1
  1908  0005B4                     __end_of_main:
  1909                           	opt callstack 0
  1910                           
  1911 ;; *************** function _printf *****************
  1912 ;; Defined at:
  1913 ;;		line 5 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/printf.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;  fmt             2  103[COMRAM] PTR const unsigned char 
  1916 ;;		 -> STR_27(10), STR_26(14), STR_25(11), STR_24(12), 
  1917 ;;		 -> STR_23(10), STR_22(15), STR_21(14), STR_20(12), 
  1918 ;;		 -> STR_19(10), STR_18(15), STR_17(12), STR_16(15), 
  1919 ;;		 -> STR_15(12), STR_14(16), STR_13(9), STR_12(9), 
  1920 ;;		 -> STR_11(11), STR_10(13), STR_9(15), STR_8(11), 
  1921 ;;		 -> STR_7(15), STR_6(12), STR_5(10), STR_4(19), 
  1922 ;;		 -> STR_3(17), STR_2(13), STR_1(11), 
  1923 ;; Auto vars:     Size  Location     Type
  1924 ;;  ap              2    2[BANK0 ] PTR void [1]
  1925 ;;		 -> ?_printf(2), 
  1926 ;;  ret             2    0        int 
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  2  103[COMRAM] int 
  1929 ;; Registers used:
  1930 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1936 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1937 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1939 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1940 ;;Total ram usage:        8 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:   11
  1943 ;; This function calls:
  1944 ;;		_vfprintf
  1945 ;; This function is called by:
  1946 ;;		_main
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           	psect	text1
  1951  0010D4                     __ptext1:
  1952                           	opt callstack 0
  1953  0010D4                     _printf:
  1954                           	opt callstack 19
  1955                           
  1956                           ;incstack = 0
  1957  0010D4  0E6A               	movlw	low (?_printf+2)
  1958  0010D6  0100               	movlb	0	; () banked
  1959  0010D8  6FE7               	movwf	printf@ap& (0+255),b
  1960  0010DA  0E00               	movlw	high (?_printf+2)
  1961  0010DC  6FE8               	movwf	(printf@ap+1)& (0+255),b
  1962                           
  1963                           ; BSR set to: 0
  1964  0010DE  0E00               	movlw	0
  1965  0010E0  6E60               	movwf	vfprintf@fp,c
  1966  0010E2  0E00               	movlw	0
  1967  0010E4  6E61               	movwf	vfprintf@fp+1,c
  1968  0010E6  C068  F062         	movff	printf@fmt,vfprintf@fmt
  1969  0010EA  C069  F063         	movff	printf@fmt+1,vfprintf@fmt+1
  1970  0010EE  0EE7               	movlw	low printf@ap
  1971  0010F0  6E64               	movwf	vfprintf@ap,c
  1972  0010F2  0E00               	movlw	high printf@ap
  1973  0010F4  6E65               	movwf	vfprintf@ap+1,c
  1974  0010F6  EC77  F007         	call	_vfprintf	;wreg free
  1975  0010FA  0012               	return		;funcret
  1976  0010FC                     __end_of_printf:
  1977                           	opt callstack 0
  1978                           
  1979 ;; *************** function _vfprintf *****************
  1980 ;; Defined at:
  1981 ;;		line 1368 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;  fp              2   95[COMRAM] PTR struct _IO_FILE
  1984 ;;		 -> NULL(0), 
  1985 ;;  fmt             2   97[COMRAM] PTR const unsigned char 
  1986 ;;		 -> STR_27(10), STR_26(14), STR_25(11), STR_24(12), 
  1987 ;;		 -> STR_23(10), STR_22(15), STR_21(14), STR_20(12), 
  1988 ;;		 -> STR_19(10), STR_18(15), STR_17(12), STR_16(15), 
  1989 ;;		 -> STR_15(12), STR_14(16), STR_13(9), STR_12(9), 
  1990 ;;		 -> STR_11(11), STR_10(13), STR_9(15), STR_8(11), 
  1991 ;;		 -> STR_7(15), STR_6(12), STR_5(10), STR_4(19), 
  1992 ;;		 -> STR_3(17), STR_2(13), STR_1(11), 
  1993 ;;  ap              2   99[COMRAM] PTR PTR void 
  1994 ;;		 -> printf@ap(2), 
  1995 ;; Auto vars:     Size  Location     Type
  1996 ;;  cfmt            2  101[COMRAM] PTR unsigned char 
  1997 ;;		 -> STR_27(10), STR_26(14), STR_25(11), STR_24(12), 
  1998 ;;		 -> STR_23(10), STR_22(15), STR_21(14), STR_20(12), 
  1999 ;;		 -> STR_19(10), STR_18(15), STR_17(12), STR_16(15), 
  2000 ;;		 -> STR_15(12), STR_14(16), STR_13(9), STR_12(9), 
  2001 ;;		 -> STR_11(11), STR_10(13), STR_9(15), STR_8(11), 
  2002 ;;		 -> STR_7(15), STR_6(12), STR_5(10), STR_4(19), 
  2003 ;;		 -> STR_3(17), STR_2(13), STR_1(11), 
  2004 ;; Return value:  Size  Location     Type
  2005 ;;                  2   95[COMRAM] int 
  2006 ;; Registers used:
  2007 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2008 ;; Tracked objects:
  2009 ;;		On entry : 0/0
  2010 ;;		On exit  : 0/0
  2011 ;;		Unchanged: 0/0
  2012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2013 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2014 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2015 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2016 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2017 ;;Total ram usage:        8 bytes
  2018 ;; Hardware stack levels used:    1
  2019 ;; Hardware stack levels required when called:   10
  2020 ;; This function calls:
  2021 ;;		_vfpfcnvrt
  2022 ;; This function is called by:
  2023 ;;		_printf
  2024 ;; This function uses a non-reentrant model
  2025 ;;
  2026                           
  2027                           	psect	text2
  2028  000EEE                     __ptext2:
  2029                           	opt callstack 0
  2030  000EEE                     _vfprintf:
  2031                           	opt callstack 19
  2032                           
  2033                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
  2034                           
  2035                           ;incstack = 0
  2036  000EEE  C062  F066         	movff	vfprintf@fmt,vfprintf@cfmt
  2037  000EF2  C063  F067         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2038                           
  2039                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  2040  000EF6  0E00               	movlw	0
  2041  000EF8  6E6D               	movwf	_nout+1,c
  2042  000EFA  0E00               	movlw	0
  2043  000EFC  6E6C               	movwf	_nout,c
  2044                           
  2045                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  2046  000EFE  D012               	goto	l2524
  2047  000F00                     l2522:
  2048                           
  2049                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
  2050  000F00  C060  F04F         	movff	vfprintf@fp,vfpfcnvrt@fp
  2051  000F04  C061  F050         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2052  000F08  0E66               	movlw	low vfprintf@cfmt
  2053  000F0A  6E51               	movwf	vfpfcnvrt@fmt,c
  2054  000F0C  0E00               	movlw	high vfprintf@cfmt
  2055  000F0E  6E52               	movwf	vfpfcnvrt@fmt+1,c
  2056  000F10  C064  F053         	movff	vfprintf@ap,vfpfcnvrt@ap
  2057  000F14  C065  F054         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2058  000F18  ECFB  F003         	call	_vfpfcnvrt	;wreg free
  2059  000F1C  504F               	movf	?_vfpfcnvrt,w,c
  2060  000F1E  266C               	addwf	_nout,f,c
  2061  000F20  5050               	movf	?_vfpfcnvrt+1,w,c
  2062  000F22  226D               	addwfc	_nout+1,f,c
  2063  000F24                     l2524:
  2064                           
  2065                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  2066  000F24  C066  FFF6         	movff	vfprintf@cfmt,tblptrl
  2067  000F28  C067  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2068  000F2C                     	if	0	;tblptru may be non-zero
  2069  000F2C                     	endif
  2070  000F2C                     	if	0	;tblptru may be non-zero
  2071  000F2C                     	endif
  2072  000F2C  0008               	tblrd		*
  2073  000F2E  50F5               	movf	tablat,w,c
  2074  000F30  0900               	iorlw	0
  2075  000F32  A4D8               	btfss	status,2,c
  2076  000F34  D7E5               	goto	l2522
  2077                           
  2078                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
  2079  000F36  C06C  F060         	movff	_nout,?_vfprintf
  2080  000F3A  C06D  F061         	movff	_nout+1,?_vfprintf+1
  2081  000F3E  0012               	return		;funcret
  2082  000F40                     __end_of_vfprintf:
  2083                           	opt callstack 0
  2084                           
  2085 ;; *************** function _vfpfcnvrt *****************
  2086 ;; Defined at:
  2087 ;;		line 670 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2088 ;; Parameters:    Size  Location     Type
  2089 ;;  fp              2   78[COMRAM] PTR struct _IO_FILE
  2090 ;;		 -> NULL(0), 
  2091 ;;  fmt             2   80[COMRAM] PTR PTR unsigned char 
  2092 ;;		 -> vfprintf@cfmt(2), 
  2093 ;;  ap              2   82[COMRAM] PTR PTR void 
  2094 ;;		 -> printf@ap(2), 
  2095 ;; Auto vars:     Size  Location     Type
  2096 ;;  ll              8   86[COMRAM] long long 
  2097 ;;  llu             8    0        unsigned long long 
  2098 ;;  f               4    0        unsigned long long 
  2099 ;;  vp              3    0        PTR void 
  2100 ;;  ct              3    0        unsigned char [3]
  2101 ;;  cp              3    0        PTR unsigned char 
  2102 ;;  i               2    0        int 
  2103 ;;  done            2    0        int 
  2104 ;;  c               1   94[COMRAM] unsigned char 
  2105 ;; Return value:  Size  Location     Type
  2106 ;;                  2   78[COMRAM] int 
  2107 ;; Registers used:
  2108 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2109 ;; Tracked objects:
  2110 ;;		On entry : 0/0
  2111 ;;		On exit  : 0/0
  2112 ;;		Unchanged: 0/0
  2113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2114 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;Total ram usage:       17 bytes
  2119 ;; Hardware stack levels used:    1
  2120 ;; Hardware stack levels required when called:    9
  2121 ;; This function calls:
  2122 ;;		_ctoa
  2123 ;;		_dtoa
  2124 ;;		_fputc
  2125 ;; This function is called by:
  2126 ;;		_vfprintf
  2127 ;; This function uses a non-reentrant model
  2128 ;;
  2129                           
  2130                           	psect	text3
  2131  0007F6                     __ptext3:
  2132                           	opt callstack 0
  2133  0007F6                     _vfpfcnvrt:
  2134                           	opt callstack 19
  2135                           
  2136                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.05/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.05/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
  2137                           
  2138                           ;incstack = 0
  2139  0007F6  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2140  0007FA  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2141  0007FE  CFDE FFF6          	movff	postinc2,tblptrl
  2142  000802  CFDD FFF7          	movff	postdec2,tblptrh
  2143  000806                     	if	0	;tblptru may be non-zero
  2144  000806                     	endif
  2145  000806                     	if	0	;tblptru may be non-zero
  2146  000806                     	endif
  2147  000806  0008               	tblrd		*
  2148  000808  50F5               	movf	tablat,w,c
  2149  00080A  0A25               	xorlw	37
  2150  00080C  A4D8               	btfss	status,2,c
  2151  00080E  D0CC               	goto	l2506
  2152                           
  2153                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  2154  000810  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2155  000814  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2156  000818  2ADE               	incf	postinc2,f,c
  2157  00081A  0E00               	movlw	0
  2158  00081C  22DD               	addwfc	postdec2,f,c
  2159                           
  2160                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
  2161  00081E  0E00               	movlw	0
  2162  000820  6E6F               	movwf	_width+1,c
  2163  000822  0E00               	movlw	0
  2164  000824  6E6E               	movwf	_width,c
  2165  000826  C06E  F072         	movff	_width,_flags
  2166  00082A  C06F  F073         	movff	_width+1,_flags+1
  2167                           
  2168                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
  2169  00082E  6870               	setf	_prec,c
  2170  000830  6871               	setf	_prec+1,c
  2171                           
  2172                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 792:         if (*fm
      +                          t[0] == 'c') {
  2173  000832  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2174  000836  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2175  00083A  CFDE FFF6          	movff	postinc2,tblptrl
  2176  00083E  CFDD FFF7          	movff	postdec2,tblptrh
  2177  000842                     	if	0	;tblptru may be non-zero
  2178  000842                     	endif
  2179  000842                     	if	0	;tblptru may be non-zero
  2180  000842                     	endif
  2181  000842  0008               	tblrd		*
  2182  000844  50F5               	movf	tablat,w,c
  2183  000846  0A63               	xorlw	99
  2184  000848  A4D8               	btfss	status,2,c
  2185  00084A  D026               	goto	l2480
  2186                           
  2187                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 793:             ++*
      +                          fmt;
  2188  00084C  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2189  000850  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2190  000854  2ADE               	incf	postinc2,f,c
  2191  000856  0E00               	movlw	0
  2192  000858  22DD               	addwfc	postdec2,f,c
  2193                           
  2194                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 794:             c =
      +                           (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  2195  00085A  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2196  00085E  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2197  000862  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2198  000866  0E02               	movlw	2
  2199  000868  26DE               	addwf	postinc2,f,c
  2200  00086A  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2201  00086E  0E00               	movlw	0
  2202  000870  22DD               	addwfc	postdec2,f,c
  2203  000872  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2204  000876  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2205  00087A  50DF               	movf	indf2,w,c
  2206  00087C  6E5F               	movwf	vfpfcnvrt@c,c
  2207                           
  2208                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 795:             ret
      +                          urn ctoa(fp, c);
  2209  00087E  C04F  F02B         	movff	vfpfcnvrt@fp,ctoa@fp
  2210  000882  C050  F02C         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  2211  000886  C05F  F02D         	movff	vfpfcnvrt@c,ctoa@c
  2212  00088A  ECA0  F007         	call	_ctoa	;wreg free
  2213  00088E  C02B  F04F         	movff	?_ctoa,?_vfpfcnvrt
  2214  000892  C02C  F050         	movff	?_ctoa+1,?_vfpfcnvrt+1
  2215  000896  0012               	return	
  2216  000898                     l2480:
  2217                           
  2218                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 825:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
  2219  000898  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2220  00089C  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2221  0008A0  CFDE FFF6          	movff	postinc2,tblptrl
  2222  0008A4  CFDD FFF7          	movff	postdec2,tblptrh
  2223  0008A8                     	if	0	;tblptru may be non-zero
  2224  0008A8                     	endif
  2225  0008A8                     	if	0	;tblptru may be non-zero
  2226  0008A8                     	endif
  2227  0008A8  0008               	tblrd		*
  2228  0008AA  50F5               	movf	tablat,w,c
  2229  0008AC  0A64               	xorlw	100
  2230  0008AE  B4D8               	btfsc	status,2,c
  2231  0008B0  D00D               	goto	u2070
  2232  0008B2  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2233  0008B6  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2234  0008BA  CFDE FFF6          	movff	postinc2,tblptrl
  2235  0008BE  CFDD FFF7          	movff	postdec2,tblptrh
  2236  0008C2                     	if	0	;tblptru may be non-zero
  2237  0008C2                     	endif
  2238  0008C2                     	if	0	;tblptru may be non-zero
  2239  0008C2                     	endif
  2240  0008C2  0008               	tblrd		*
  2241  0008C4  50F5               	movf	tablat,w,c
  2242  0008C6  0A69               	xorlw	105
  2243  0008C8  A4D8               	btfss	status,2,c
  2244  0008CA  D03F               	goto	l2490
  2245  0008CC                     u2070:
  2246                           
  2247                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 827:             ++*
      +                          fmt;
  2248  0008CC  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2249  0008D0  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2250  0008D4  2ADE               	incf	postinc2,f,c
  2251  0008D6  0E00               	movlw	0
  2252  0008D8  22DD               	addwfc	postdec2,f,c
  2253                           
  2254                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 828:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2255  0008DA  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2256  0008DE  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2257  0008E2  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2258  0008E6  0E02               	movlw	2
  2259  0008E8  26DE               	addwf	postinc2,f,c
  2260  0008EA  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2261  0008EE  0E00               	movlw	0
  2262  0008F0  22DD               	addwfc	postdec2,f,c
  2263  0008F2  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2264  0008F6  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2265  0008FA  CFDE F057          	movff	postinc2,vfpfcnvrt@ll
  2266  0008FE  CFDD F058          	movff	postdec2,vfpfcnvrt@ll+1
  2267  000902  0E00               	movlw	0
  2268  000904  BE58               	btfsc	vfpfcnvrt@ll+1,7,c
  2269  000906  0EFF               	movlw	-1
  2270  000908  6E59               	movwf	vfpfcnvrt@ll+2,c
  2271  00090A  6E5A               	movwf	vfpfcnvrt@ll+3,c
  2272  00090C  6E5B               	movwf	vfpfcnvrt@ll+4,c
  2273  00090E  6E5C               	movwf	vfpfcnvrt@ll+5,c
  2274  000910  6E5D               	movwf	vfpfcnvrt@ll+6,c
  2275  000912  6E5E               	movwf	vfpfcnvrt@ll+7,c
  2276                           
  2277                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 830:             ret
      +                          urn dtoa(fp, ll);
  2278  000914  C04F  F02B         	movff	vfpfcnvrt@fp,dtoa@fp
  2279  000918  C050  F02C         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2280  00091C  C057  F02D         	movff	vfpfcnvrt@ll,dtoa@d
  2281  000920  C058  F02E         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2282  000924  C059  F02F         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2283  000928  C05A  F030         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2284  00092C  C05B  F031         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2285  000930  C05C  F032         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2286  000934  C05D  F033         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2287  000938  C05E  F034         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2288  00093C  ECDA  F002         	call	_dtoa	;wreg free
  2289  000940  C02B  F04F         	movff	?_dtoa,?_vfpfcnvrt
  2290  000944  C02C  F050         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2291  000948  0012               	return	
  2292  00094A                     l2490:
  2293                           
  2294                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
  2295  00094A  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2296  00094E  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2297  000952  CFDE FFF6          	movff	postinc2,tblptrl
  2298  000956  CFDD FFF7          	movff	postdec2,tblptrh
  2299  00095A                     	if	0	;tblptru may be non-zero
  2300  00095A                     	endif
  2301  00095A                     	if	0	;tblptru may be non-zero
  2302  00095A                     	endif
  2303  00095A  0008               	tblrd		*
  2304  00095C  50F5               	movf	tablat,w,c
  2305  00095E  0A25               	xorlw	37
  2306  000960  A4D8               	btfss	status,2,c
  2307  000962  D016               	goto	l2500
  2308                           
  2309                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
  2310  000964  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2311  000968  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2312  00096C  2ADE               	incf	postinc2,f,c
  2313  00096E  0E00               	movlw	0
  2314  000970  22DD               	addwfc	postdec2,f,c
  2315                           
  2316                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
  2317  000972  0E00               	movlw	0
  2318  000974  6E11               	movwf	fputc@c+1,c
  2319  000976  0E25               	movlw	37
  2320  000978  6E10               	movwf	fputc@c,c
  2321  00097A  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2322  00097E  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2323  000982  EC0C  F007         	call	_fputc	;wreg free
  2324  000986                     l2496:
  2325                           
  2326                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
  2327  000986  0E00               	movlw	0
  2328  000988  6E50               	movwf	?_vfpfcnvrt+1,c
  2329  00098A  0E01               	movlw	1
  2330  00098C  6E4F               	movwf	?_vfpfcnvrt,c
  2331  00098E  0012               	return	
  2332  000990                     l2500:
  2333                           
  2334                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  2335  000990  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2336  000994  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2337  000998  2ADE               	incf	postinc2,f,c
  2338  00099A  0E00               	movlw	0
  2339  00099C  22DD               	addwfc	postdec2,f,c
  2340                           
  2341                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  2342  00099E  0E00               	movlw	0
  2343  0009A0  6E50               	movwf	?_vfpfcnvrt+1,c
  2344  0009A2  0E00               	movlw	0
  2345  0009A4  6E4F               	movwf	?_vfpfcnvrt,c
  2346  0009A6  0012               	return	
  2347  0009A8                     l2506:
  2348                           
  2349                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  2350  0009A8  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2351  0009AC  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2352  0009B0  CFDE FFF6          	movff	postinc2,tblptrl
  2353  0009B4  CFDD FFF7          	movff	postdec2,tblptrh
  2354  0009B8                     	if	0	;tblptru may be non-zero
  2355  0009B8                     	endif
  2356  0009B8                     	if	0	;tblptru may be non-zero
  2357  0009B8                     	endif
  2358  0009B8  0008               	tblrd		*
  2359  0009BA  50F5               	movf	tablat,w,c
  2360  0009BC  6E10               	movwf	fputc@c,c
  2361  0009BE  6A11               	clrf	fputc@c+1,c
  2362  0009C0  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2363  0009C4  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2364  0009C8  EC0C  F007         	call	_fputc	;wreg free
  2365                           
  2366                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  2367  0009CC  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2368  0009D0  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2369  0009D4  2ADE               	incf	postinc2,f,c
  2370  0009D6  0E00               	movlw	0
  2371  0009D8  22DD               	addwfc	postdec2,f,c
  2372  0009DA  D7D5               	goto	l2496
  2373  0009DC                     __end_of_vfpfcnvrt:
  2374                           	opt callstack 0
  2375                           
  2376 ;; *************** function _dtoa *****************
  2377 ;; Defined at:
  2378 ;;		line 274 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2379 ;; Parameters:    Size  Location     Type
  2380 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  2381 ;;		 -> NULL(0), 
  2382 ;;  d               8   44[COMRAM] long long 
  2383 ;; Auto vars:     Size  Location     Type
  2384 ;;  n               8   68[COMRAM] long long 
  2385 ;;  i               2   76[COMRAM] int 
  2386 ;;  s               2   66[COMRAM] int 
  2387 ;;  w               2   64[COMRAM] int 
  2388 ;;  p               2   62[COMRAM] int 
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  2   42[COMRAM] int 
  2391 ;; Registers used:
  2392 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2398 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;Total ram usage:       36 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    8
  2405 ;; This function calls:
  2406 ;;		___aodiv
  2407 ;;		___aomod
  2408 ;;		_abs
  2409 ;;		_pad
  2410 ;; This function is called by:
  2411 ;;		_vfpfcnvrt
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text4
  2416  0005B4                     __ptext4:
  2417                           	opt callstack 0
  2418  0005B4                     _dtoa:
  2419                           	opt callstack 19
  2420                           
  2421                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 274: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.
      +                          c: 275: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 276:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 277:   
      +                            long long n;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 280:  
      +                             n = d;
  2422                           
  2423                           ;incstack = 0
  2424  0005B4  C02D  F045         	movff	dtoa@d,dtoa@n
  2425  0005B8  C02E  F046         	movff	dtoa@d+1,dtoa@n+1
  2426  0005BC  C02F  F047         	movff	dtoa@d+2,dtoa@n+2
  2427  0005C0  C030  F048         	movff	dtoa@d+3,dtoa@n+3
  2428  0005C4  C031  F049         	movff	dtoa@d+4,dtoa@n+4
  2429  0005C8  C032  F04A         	movff	dtoa@d+5,dtoa@n+5
  2430  0005CC  C033  F04B         	movff	dtoa@d+6,dtoa@n+6
  2431  0005D0  C034  F04C         	movff	dtoa@d+7,dtoa@n+7
  2432                           
  2433                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ?
      +                           1 : 0;
  2434  0005D4  AE4C               	btfss	dtoa@n+7,7,c
  2435  0005D6  D002               	goto	u1890
  2436  0005D8  0E01               	movlw	1
  2437  0005DA  D001               	goto	u1900
  2438  0005DC                     u1890:
  2439  0005DC  0E00               	movlw	0
  2440  0005DE                     u1900:
  2441  0005DE  6E43               	movwf	dtoa@s,c
  2442  0005E0  6A44               	clrf	dtoa@s+1,c
  2443                           
  2444                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  2445  0005E2  5043               	movf	dtoa@s,w,c
  2446  0005E4  1044               	iorwf	dtoa@s+1,w,c
  2447  0005E6  B4D8               	btfsc	status,2,c
  2448  0005E8  D010               	goto	l2408
  2449                           
  2450                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  2451  0005EA  1E4C               	comf	dtoa@n+7,f,c
  2452  0005EC  1E4B               	comf	dtoa@n+6,f,c
  2453  0005EE  1E4A               	comf	dtoa@n+5,f,c
  2454  0005F0  1E49               	comf	dtoa@n+4,f,c
  2455  0005F2  1E48               	comf	dtoa@n+3,f,c
  2456  0005F4  1E47               	comf	dtoa@n+2,f,c
  2457  0005F6  1E46               	comf	dtoa@n+1,f,c
  2458  0005F8  6C45               	negf	dtoa@n,c
  2459  0005FA  0E00               	movlw	0
  2460  0005FC  2246               	addwfc	dtoa@n+1,f,c
  2461  0005FE  2247               	addwfc	dtoa@n+2,f,c
  2462  000600  2248               	addwfc	dtoa@n+3,f,c
  2463  000602  2249               	addwfc	dtoa@n+4,f,c
  2464  000604  224A               	addwfc	dtoa@n+5,f,c
  2465  000606  224B               	addwfc	dtoa@n+6,f,c
  2466  000608  224C               	addwfc	dtoa@n+7,f,c
  2467  00060A                     l2408:
  2468                           
  2469                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 287:     if (!(prec 
      +                          < 0)) {
  2470  00060A  AE71               	btfss	_prec+1,7,c
  2471                           
  2472                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 288:         flags &
      +                          = ~(1 << 1);
  2473  00060C  9272               	bcf	_flags,1,c
  2474                           
  2475                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 290:     p = (0 < pr
      +                          ec) ? prec : 1;
  2476  00060E  BE71               	btfsc	_prec+1,7,c
  2477  000610  D005               	goto	u1930
  2478  000612  5071               	movf	_prec+1,w,c
  2479  000614  E108               	bnz	l183
  2480  000616  0470               	decf	_prec,w,c
  2481  000618  B0D8               	btfsc	status,0,c
  2482  00061A  D005               	goto	l183
  2483  00061C                     u1930:
  2484  00061C  0E00               	movlw	0
  2485  00061E  6E40               	movwf	dtoa@p+1,c
  2486  000620  0E01               	movlw	1
  2487  000622  6E3F               	movwf	dtoa@p,c
  2488  000624  D004               	goto	l185
  2489  000626                     l183:
  2490  000626  C070  F03F         	movff	_prec,dtoa@p
  2491  00062A  C071  F040         	movff	_prec+1,dtoa@p+1
  2492  00062E                     l185:
  2493                           
  2494                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 291:     w = width;
  2495  00062E  C06E  F041         	movff	_width,dtoa@w
  2496  000632  C06F  F042         	movff	_width+1,dtoa@w+1
  2497                           
  2498                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 292:     if (s || (f
      +                          lags & (1 << 2))) {
  2499  000636  5043               	movf	dtoa@s,w,c
  2500  000638  1044               	iorwf	dtoa@s+1,w,c
  2501  00063A  A4D8               	btfss	status,2,c
  2502  00063C  D002               	goto	u1950
  2503  00063E  A472               	btfss	_flags,2,c
  2504  000640  D003               	goto	l2422
  2505  000642                     u1950:
  2506                           
  2507                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 293:         --w;
  2508  000642  0641               	decf	dtoa@w,f,c
  2509  000644  A0D8               	btfss	status,0,c
  2510  000646  0642               	decf	dtoa@w+1,f,c
  2511  000648                     l2422:
  2512                           
  2513                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(
      +                          dbuf) - 1;
  2514  000648  0E00               	movlw	0
  2515  00064A  6E4E               	movwf	dtoa@i+1,c
  2516  00064C  0E1F               	movlw	31
  2517  00064E  6E4D               	movwf	dtoa@i,c
  2518                           
  2519                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '
      +                          \0';
  2520  000650  0E00               	movlw	0
  2521  000652  0100               	movlb	0	; () banked
  2522  000654  6FE4               	movwf	(_dbuf+31)& (0+255),b
  2523                           
  2524                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2525  000656  D07C               	goto	l2436
  2526  000658                     l2426:
  2527                           
  2528                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 300:         --i;
  2529  000658  064D               	decf	dtoa@i,f,c
  2530  00065A  A0D8               	btfss	status,0,c
  2531  00065C  064E               	decf	dtoa@i+1,f,c
  2532                           
  2533                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 301:         dbuf[i]
      +                           = '0' + abs(n % 10);
  2534  00065E  0EC5               	movlw	low _dbuf
  2535  000660  244D               	addwf	dtoa@i,w,c
  2536  000662  6ED9               	movwf	fsr2l,c
  2537  000664  0E00               	movlw	high _dbuf
  2538  000666  204E               	addwfc	dtoa@i+1,w,c
  2539  000668  6EDA               	movwf	fsr2h,c
  2540  00066A  C045  F00C         	movff	dtoa@n,___aomod@dividend
  2541  00066E  C046  F00D         	movff	dtoa@n+1,___aomod@dividend+1
  2542  000672  C047  F00E         	movff	dtoa@n+2,___aomod@dividend+2
  2543  000676  C048  F00F         	movff	dtoa@n+3,___aomod@dividend+3
  2544  00067A  C049  F010         	movff	dtoa@n+4,___aomod@dividend+4
  2545  00067E  C04A  F011         	movff	dtoa@n+5,___aomod@dividend+5
  2546  000682  C04B  F012         	movff	dtoa@n+6,___aomod@dividend+6
  2547  000686  C04C  F013         	movff	dtoa@n+7,___aomod@dividend+7
  2548  00068A  0E0A               	movlw	10
  2549  00068C  6E14               	movwf	___aomod@divisor,c
  2550  00068E  0E00               	movlw	0
  2551  000690  6E15               	movwf	___aomod@divisor+1,c
  2552  000692  0E00               	movlw	0
  2553  000694  6E16               	movwf	___aomod@divisor+2,c
  2554  000696  0E00               	movlw	0
  2555  000698  6E17               	movwf	___aomod@divisor+3,c
  2556  00069A  0E00               	movlw	0
  2557  00069C  6E18               	movwf	___aomod@divisor+4,c
  2558  00069E  0E00               	movlw	0
  2559  0006A0  6E19               	movwf	___aomod@divisor+5,c
  2560  0006A2  0E00               	movlw	0
  2561  0006A4  6E1A               	movwf	___aomod@divisor+6,c
  2562  0006A6  0E00               	movlw	0
  2563  0006A8  6E1B               	movwf	___aomod@divisor+7,c
  2564  0006AA  EC92  F005         	call	___aomod	;wreg free
  2565  0006AE  C00C  F035         	movff	?___aomod,??_dtoa
  2566  0006B2  C00D  F036         	movff	?___aomod+1,??_dtoa+1
  2567  0006B6  C00E  F037         	movff	?___aomod+2,??_dtoa+2
  2568  0006BA  C00F  F038         	movff	?___aomod+3,??_dtoa+3
  2569  0006BE  C010  F039         	movff	?___aomod+4,??_dtoa+4
  2570  0006C2  C011  F03A         	movff	?___aomod+5,??_dtoa+5
  2571  0006C6  C012  F03B         	movff	?___aomod+6,??_dtoa+6
  2572  0006CA  C013  F03C         	movff	?___aomod+7,??_dtoa+7
  2573  0006CE  C035  F01E         	movff	??_dtoa,abs@a
  2574  0006D2  C037  F01F         	movff	??_dtoa+2,abs@a+1
  2575  0006D6  EC27  F008         	call	_abs	;wreg free
  2576  0006DA  501E               	movf	?_abs,w,c
  2577  0006DC  0F30               	addlw	48
  2578  0006DE  6EDF               	movwf	indf2,c
  2579                           
  2580                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 302:         --p;
  2581  0006E0  063F               	decf	dtoa@p,f,c
  2582  0006E2  A0D8               	btfss	status,0,c
  2583  0006E4  0640               	decf	dtoa@p+1,f,c
  2584                           
  2585                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 303:         --w;
  2586  0006E6  0641               	decf	dtoa@w,f,c
  2587  0006E8  A0D8               	btfss	status,0,c
  2588  0006EA  0642               	decf	dtoa@w+1,f,c
  2589                           
  2590                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 304:         n = n /
      +                           10;
  2591  0006EC  C045  F00C         	movff	dtoa@n,___aodiv@dividend
  2592  0006F0  C046  F00D         	movff	dtoa@n+1,___aodiv@dividend+1
  2593  0006F4  C047  F00E         	movff	dtoa@n+2,___aodiv@dividend+2
  2594  0006F8  C048  F00F         	movff	dtoa@n+3,___aodiv@dividend+3
  2595  0006FC  C049  F010         	movff	dtoa@n+4,___aodiv@dividend+4
  2596  000700  C04A  F011         	movff	dtoa@n+5,___aodiv@dividend+5
  2597  000704  C04B  F012         	movff	dtoa@n+6,___aodiv@dividend+6
  2598  000708  C04C  F013         	movff	dtoa@n+7,___aodiv@dividend+7
  2599  00070C  0E0A               	movlw	10
  2600  00070E  6E14               	movwf	___aodiv@divisor,c
  2601  000710  0E00               	movlw	0
  2602  000712  6E15               	movwf	___aodiv@divisor+1,c
  2603  000714  0E00               	movlw	0
  2604  000716  6E16               	movwf	___aodiv@divisor+2,c
  2605  000718  0E00               	movlw	0
  2606  00071A  6E17               	movwf	___aodiv@divisor+3,c
  2607  00071C  0E00               	movlw	0
  2608  00071E  6E18               	movwf	___aodiv@divisor+4,c
  2609  000720  0E00               	movlw	0
  2610  000722  6E19               	movwf	___aodiv@divisor+5,c
  2611  000724  0E00               	movlw	0
  2612  000726  6E1A               	movwf	___aodiv@divisor+6,c
  2613  000728  0E00               	movlw	0
  2614  00072A  6E1B               	movwf	___aodiv@divisor+7,c
  2615  00072C  ECEE  F004         	call	___aodiv	;wreg free
  2616  000730  C00C  F045         	movff	?___aodiv,dtoa@n
  2617  000734  C00D  F046         	movff	?___aodiv+1,dtoa@n+1
  2618  000738  C00E  F047         	movff	?___aodiv+2,dtoa@n+2
  2619  00073C  C00F  F048         	movff	?___aodiv+3,dtoa@n+3
  2620  000740  C010  F049         	movff	?___aodiv+4,dtoa@n+4
  2621  000744  C011  F04A         	movff	?___aodiv+5,dtoa@n+5
  2622  000748  C012  F04B         	movff	?___aodiv+6,dtoa@n+6
  2623  00074C  C013  F04C         	movff	?___aodiv+7,dtoa@n+7
  2624  000750                     l2436:
  2625                           
  2626                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2627  000750  BE4E               	btfsc	dtoa@i+1,7,c
  2628  000752  D01F               	goto	u2000
  2629  000754  504E               	movf	dtoa@i+1,w,c
  2630  000756  E103               	bnz	u1960
  2631  000758  044D               	decf	dtoa@i,w,c
  2632  00075A  A0D8               	btfss	status,0,c
  2633  00075C  D01A               	goto	u2000
  2634  00075E                     u1960:
  2635  00075E  5045               	movf	dtoa@n,w,c
  2636  000760  1046               	iorwf	dtoa@n+1,w,c
  2637  000762  1047               	iorwf	dtoa@n+2,w,c
  2638  000764  1048               	iorwf	dtoa@n+3,w,c
  2639  000766  1049               	iorwf	dtoa@n+4,w,c
  2640  000768  104A               	iorwf	dtoa@n+5,w,c
  2641  00076A  104B               	iorwf	dtoa@n+6,w,c
  2642  00076C  104C               	iorwf	dtoa@n+7,w,c
  2643  00076E  A4D8               	btfss	status,2,c
  2644  000770  D773               	goto	l2426
  2645  000772  BE40               	btfsc	dtoa@p+1,7,c
  2646  000774  D005               	goto	u1980
  2647  000776  5040               	movf	dtoa@p+1,w,c
  2648  000778  E102               	bnz	u1981
  2649  00077A  043F               	decf	dtoa@p,w,c
  2650  00077C  B0D8               	btfsc	status,0,c
  2651  00077E                     u1981:
  2652  00077E  D76C               	goto	l2426
  2653  000780                     u1980:
  2654  000780  BE42               	btfsc	dtoa@w+1,7,c
  2655  000782  D007               	goto	u2000
  2656  000784  5042               	movf	dtoa@w+1,w,c
  2657  000786  E103               	bnz	u1990
  2658  000788  0441               	decf	dtoa@w,w,c
  2659  00078A  A0D8               	btfss	status,0,c
  2660  00078C  D002               	goto	u2000
  2661  00078E                     u1990:
  2662  00078E  B272               	btfsc	_flags,1,c
  2663  000790  D763               	goto	l2426
  2664  000792                     u2000:
  2665                           
  2666                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 308:     if (s || (f
      +                          lags & (1 << 2))) {
  2667  000792  5043               	movf	dtoa@s,w,c
  2668  000794  1044               	iorwf	dtoa@s+1,w,c
  2669  000796  A4D8               	btfss	status,2,c
  2670  000798  D002               	goto	u2020
  2671  00079A  A472               	btfss	_flags,2,c
  2672  00079C  D017               	goto	l2460
  2673  00079E                     u2020:
  2674                           
  2675                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 309:         --i;
  2676  00079E  064D               	decf	dtoa@i,f,c
  2677  0007A0  A0D8               	btfss	status,0,c
  2678  0007A2  064E               	decf	dtoa@i+1,f,c
  2679                           
  2680                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 310:         dbuf[i]
      +                           = s ? '-' : '+';
  2681  0007A4  5043               	movf	dtoa@s,w,c
  2682  0007A6  1044               	iorwf	dtoa@s+1,w,c
  2683  0007A8  A4D8               	btfss	status,2,c
  2684  0007AA  D004               	goto	l2456
  2685  0007AC  0E00               	movlw	0
  2686  0007AE  6E3E               	movwf	_dtoa$326+1,c
  2687  0007B0  0E2B               	movlw	43
  2688  0007B2  D003               	goto	L2
  2689  0007B4                     l2456:
  2690  0007B4  0E00               	movlw	0
  2691  0007B6  6E3E               	movwf	_dtoa$326+1,c
  2692  0007B8  0E2D               	movlw	45
  2693  0007BA                     L2:
  2694  0007BA  6E3D               	movwf	_dtoa$326,c
  2695  0007BC  0EC5               	movlw	low _dbuf
  2696  0007BE  244D               	addwf	dtoa@i,w,c
  2697  0007C0  6ED9               	movwf	fsr2l,c
  2698  0007C2  0E00               	movlw	high _dbuf
  2699  0007C4  204E               	addwfc	dtoa@i+1,w,c
  2700  0007C6  6EDA               	movwf	fsr2h,c
  2701  0007C8  C03D  FFDF         	movff	_dtoa$326,indf2
  2702  0007CC                     l2460:
  2703                           
  2704                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 314:     return pad(
      +                          fp, &dbuf[i], w);
  2705  0007CC  C02B  F020         	movff	dtoa@fp,pad@fp
  2706  0007D0  C02C  F021         	movff	dtoa@fp+1,pad@fp+1
  2707  0007D4  0EC5               	movlw	low _dbuf
  2708  0007D6  244D               	addwf	dtoa@i,w,c
  2709  0007D8  6E22               	movwf	pad@buf,c
  2710  0007DA  0E00               	movlw	high _dbuf
  2711  0007DC  204E               	addwfc	dtoa@i+1,w,c
  2712  0007DE  6E23               	movwf	pad@buf+1,c
  2713  0007E0  C041  F024         	movff	dtoa@w,pad@p
  2714  0007E4  C042  F025         	movff	dtoa@w+1,pad@p+1
  2715  0007E8  EC89  F006         	call	_pad	;wreg free
  2716  0007EC  C020  F02B         	movff	?_pad,?_dtoa
  2717  0007F0  C021  F02C         	movff	?_pad+1,?_dtoa+1
  2718  0007F4  0012               	return		;funcret
  2719  0007F6                     __end_of_dtoa:
  2720                           	opt callstack 0
  2721                           
  2722 ;; *************** function _abs *****************
  2723 ;; Defined at:
  2724 ;;		line 1 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/abs.c"
  2725 ;; Parameters:    Size  Location     Type
  2726 ;;  a               2   29[COMRAM] int 
  2727 ;; Auto vars:     Size  Location     Type
  2728 ;;		None
  2729 ;; Return value:  Size  Location     Type
  2730 ;;                  2   29[COMRAM] int 
  2731 ;; Registers used:
  2732 ;;		wreg, status,2, status,0
  2733 ;; Tracked objects:
  2734 ;;		On entry : 0/0
  2735 ;;		On exit  : 0/0
  2736 ;;		Unchanged: 0/0
  2737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2738 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2742 ;;Total ram usage:        4 bytes
  2743 ;; Hardware stack levels used:    1
  2744 ;; Hardware stack levels required when called:    1
  2745 ;; This function calls:
  2746 ;;		Nothing
  2747 ;; This function is called by:
  2748 ;;		_dtoa
  2749 ;; This function uses a non-reentrant model
  2750 ;;
  2751                           
  2752                           	psect	text5
  2753  00104E                     __ptext5:
  2754                           	opt callstack 0
  2755  00104E                     _abs:
  2756                           	opt callstack 25
  2757                           
  2758                           ;incstack = 0
  2759  00104E  BE1F               	btfsc	abs@a+1,7,c
  2760  001050  D005               	goto	u1740
  2761  001052  501F               	movf	abs@a+1,w,c
  2762  001054  E110               	bnz	l896
  2763  001056  041E               	decf	abs@a,w,c
  2764  001058  B0D8               	btfsc	status,0,c
  2765  00105A  D00D               	goto	l896
  2766  00105C                     u1740:
  2767  00105C  C01E  F020         	movff	abs@a,??_abs
  2768  001060  C01F  F021         	movff	abs@a+1,??_abs+1
  2769  001064  1E20               	comf	??_abs,f,c
  2770  001066  1E21               	comf	??_abs+1,f,c
  2771  001068  4A20               	infsnz	??_abs,f,c
  2772  00106A  2A21               	incf	??_abs+1,f,c
  2773  00106C  C020  F01E         	movff	??_abs,?_abs
  2774  001070  C021  F01F         	movff	??_abs+1,?_abs+1
  2775  001074  0012               	return	
  2776  001076                     l896:
  2777  001076  C01E  F01E         	movff	abs@a,?_abs
  2778  00107A  C01F  F01F         	movff	abs@a+1,?_abs+1
  2779  00107E  0012               	return		;funcret
  2780  001080                     __end_of_abs:
  2781                           	opt callstack 0
  2782                           
  2783 ;; *************** function ___aomod *****************
  2784 ;; Defined at:
  2785 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aomod.c"
  2786 ;; Parameters:    Size  Location     Type
  2787 ;;  dividend        8   11[COMRAM] long long 
  2788 ;;  divisor         8   19[COMRAM] long long 
  2789 ;; Auto vars:     Size  Location     Type
  2790 ;;  sign            1   28[COMRAM] unsigned char 
  2791 ;;  counter         1   27[COMRAM] unsigned char 
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  8   11[COMRAM] long long 
  2794 ;; Registers used:
  2795 ;;		wreg, status,2, status,0
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2801 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2802 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2803 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2804 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;Total ram usage:       18 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    1
  2808 ;; This function calls:
  2809 ;;		Nothing
  2810 ;; This function is called by:
  2811 ;;		_dtoa
  2812 ;; This function uses a non-reentrant model
  2813 ;;
  2814                           
  2815                           	psect	text6
  2816  000B24                     __ptext6:
  2817                           	opt callstack 0
  2818  000B24                     ___aomod:
  2819                           	opt callstack 25
  2820                           
  2821                           ;incstack = 0
  2822  000B24  0E00               	movlw	0
  2823  000B26  6E1D               	movwf	___aomod@sign,c
  2824  000B28  AE13               	btfss	___aomod@dividend+7,7,c
  2825  000B2A  D012               	goto	l2360
  2826  000B2C  1E13               	comf	___aomod@dividend+7,f,c
  2827  000B2E  1E12               	comf	___aomod@dividend+6,f,c
  2828  000B30  1E11               	comf	___aomod@dividend+5,f,c
  2829  000B32  1E10               	comf	___aomod@dividend+4,f,c
  2830  000B34  1E0F               	comf	___aomod@dividend+3,f,c
  2831  000B36  1E0E               	comf	___aomod@dividend+2,f,c
  2832  000B38  1E0D               	comf	___aomod@dividend+1,f,c
  2833  000B3A  6C0C               	negf	___aomod@dividend,c
  2834  000B3C  0E00               	movlw	0
  2835  000B3E  220D               	addwfc	___aomod@dividend+1,f,c
  2836  000B40  220E               	addwfc	___aomod@dividend+2,f,c
  2837  000B42  220F               	addwfc	___aomod@dividend+3,f,c
  2838  000B44  2210               	addwfc	___aomod@dividend+4,f,c
  2839  000B46  2211               	addwfc	___aomod@dividend+5,f,c
  2840  000B48  2212               	addwfc	___aomod@dividend+6,f,c
  2841  000B4A  2213               	addwfc	___aomod@dividend+7,f,c
  2842  000B4C  0E01               	movlw	1
  2843  000B4E  6E1D               	movwf	___aomod@sign,c
  2844  000B50                     l2360:
  2845  000B50  AE1B               	btfss	___aomod@divisor+7,7,c
  2846  000B52  D010               	goto	l2364
  2847  000B54  1E1B               	comf	___aomod@divisor+7,f,c
  2848  000B56  1E1A               	comf	___aomod@divisor+6,f,c
  2849  000B58  1E19               	comf	___aomod@divisor+5,f,c
  2850  000B5A  1E18               	comf	___aomod@divisor+4,f,c
  2851  000B5C  1E17               	comf	___aomod@divisor+3,f,c
  2852  000B5E  1E16               	comf	___aomod@divisor+2,f,c
  2853  000B60  1E15               	comf	___aomod@divisor+1,f,c
  2854  000B62  6C14               	negf	___aomod@divisor,c
  2855  000B64  0E00               	movlw	0
  2856  000B66  2215               	addwfc	___aomod@divisor+1,f,c
  2857  000B68  2216               	addwfc	___aomod@divisor+2,f,c
  2858  000B6A  2217               	addwfc	___aomod@divisor+3,f,c
  2859  000B6C  2218               	addwfc	___aomod@divisor+4,f,c
  2860  000B6E  2219               	addwfc	___aomod@divisor+5,f,c
  2861  000B70  221A               	addwfc	___aomod@divisor+6,f,c
  2862  000B72  221B               	addwfc	___aomod@divisor+7,f,c
  2863  000B74                     l2364:
  2864  000B74  5014               	movf	___aomod@divisor,w,c
  2865  000B76  1015               	iorwf	___aomod@divisor+1,w,c
  2866  000B78  1016               	iorwf	___aomod@divisor+2,w,c
  2867  000B7A  1017               	iorwf	___aomod@divisor+3,w,c
  2868  000B7C  1018               	iorwf	___aomod@divisor+4,w,c
  2869  000B7E  1019               	iorwf	___aomod@divisor+5,w,c
  2870  000B80  101A               	iorwf	___aomod@divisor+6,w,c
  2871  000B82  101B               	iorwf	___aomod@divisor+7,w,c
  2872  000B84  B4D8               	btfsc	status,2,c
  2873  000B86  D03C               	goto	l2380
  2874  000B88  0E01               	movlw	1
  2875  000B8A  6E1C               	movwf	___aomod@counter,c
  2876  000B8C  D00A               	goto	l2370
  2877  000B8E                     l2368:
  2878  000B8E  90D8               	bcf	status,0,c
  2879  000B90  3614               	rlcf	___aomod@divisor,f,c
  2880  000B92  3615               	rlcf	___aomod@divisor+1,f,c
  2881  000B94  3616               	rlcf	___aomod@divisor+2,f,c
  2882  000B96  3617               	rlcf	___aomod@divisor+3,f,c
  2883  000B98  3618               	rlcf	___aomod@divisor+4,f,c
  2884  000B9A  3619               	rlcf	___aomod@divisor+5,f,c
  2885  000B9C  361A               	rlcf	___aomod@divisor+6,f,c
  2886  000B9E  361B               	rlcf	___aomod@divisor+7,f,c
  2887  000BA0  2A1C               	incf	___aomod@counter,f,c
  2888  000BA2                     l2370:
  2889  000BA2  AE1B               	btfss	___aomod@divisor+7,7,c
  2890  000BA4  D7F4               	goto	l2368
  2891  000BA6                     u1850:
  2892  000BA6  5014               	movf	___aomod@divisor,w,c
  2893  000BA8  5C0C               	subwf	___aomod@dividend,w,c
  2894  000BAA  5015               	movf	___aomod@divisor+1,w,c
  2895  000BAC  580D               	subwfb	___aomod@dividend+1,w,c
  2896  000BAE  5016               	movf	___aomod@divisor+2,w,c
  2897  000BB0  580E               	subwfb	___aomod@dividend+2,w,c
  2898  000BB2  5017               	movf	___aomod@divisor+3,w,c
  2899  000BB4  580F               	subwfb	___aomod@dividend+3,w,c
  2900  000BB6  5018               	movf	___aomod@divisor+4,w,c
  2901  000BB8  5810               	subwfb	___aomod@dividend+4,w,c
  2902  000BBA  5019               	movf	___aomod@divisor+5,w,c
  2903  000BBC  5811               	subwfb	___aomod@dividend+5,w,c
  2904  000BBE  501A               	movf	___aomod@divisor+6,w,c
  2905  000BC0  5812               	subwfb	___aomod@dividend+6,w,c
  2906  000BC2  501B               	movf	___aomod@divisor+7,w,c
  2907  000BC4  5813               	subwfb	___aomod@dividend+7,w,c
  2908  000BC6  A0D8               	btfss	status,0,c
  2909  000BC8  D010               	goto	l2376
  2910  000BCA  5014               	movf	___aomod@divisor,w,c
  2911  000BCC  5E0C               	subwf	___aomod@dividend,f,c
  2912  000BCE  5015               	movf	___aomod@divisor+1,w,c
  2913  000BD0  5A0D               	subwfb	___aomod@dividend+1,f,c
  2914  000BD2  5016               	movf	___aomod@divisor+2,w,c
  2915  000BD4  5A0E               	subwfb	___aomod@dividend+2,f,c
  2916  000BD6  5017               	movf	___aomod@divisor+3,w,c
  2917  000BD8  5A0F               	subwfb	___aomod@dividend+3,f,c
  2918  000BDA  5018               	movf	___aomod@divisor+4,w,c
  2919  000BDC  5A10               	subwfb	___aomod@dividend+4,f,c
  2920  000BDE  5019               	movf	___aomod@divisor+5,w,c
  2921  000BE0  5A11               	subwfb	___aomod@dividend+5,f,c
  2922  000BE2  501A               	movf	___aomod@divisor+6,w,c
  2923  000BE4  5A12               	subwfb	___aomod@dividend+6,f,c
  2924  000BE6  501B               	movf	___aomod@divisor+7,w,c
  2925  000BE8  5A13               	subwfb	___aomod@dividend+7,f,c
  2926  000BEA                     l2376:
  2927  000BEA  90D8               	bcf	status,0,c
  2928  000BEC  321B               	rrcf	___aomod@divisor+7,f,c
  2929  000BEE  321A               	rrcf	___aomod@divisor+6,f,c
  2930  000BF0  3219               	rrcf	___aomod@divisor+5,f,c
  2931  000BF2  3218               	rrcf	___aomod@divisor+4,f,c
  2932  000BF4  3217               	rrcf	___aomod@divisor+3,f,c
  2933  000BF6  3216               	rrcf	___aomod@divisor+2,f,c
  2934  000BF8  3215               	rrcf	___aomod@divisor+1,f,c
  2935  000BFA  3214               	rrcf	___aomod@divisor,f,c
  2936  000BFC  2E1C               	decfsz	___aomod@counter,f,c
  2937  000BFE  D7D3               	goto	u1850
  2938  000C00                     l2380:
  2939  000C00  501D               	movf	___aomod@sign,w,c
  2940  000C02  B4D8               	btfsc	status,2,c
  2941  000C04  D010               	goto	l2384
  2942  000C06  1E13               	comf	___aomod@dividend+7,f,c
  2943  000C08  1E12               	comf	___aomod@dividend+6,f,c
  2944  000C0A  1E11               	comf	___aomod@dividend+5,f,c
  2945  000C0C  1E10               	comf	___aomod@dividend+4,f,c
  2946  000C0E  1E0F               	comf	___aomod@dividend+3,f,c
  2947  000C10  1E0E               	comf	___aomod@dividend+2,f,c
  2948  000C12  1E0D               	comf	___aomod@dividend+1,f,c
  2949  000C14  6C0C               	negf	___aomod@dividend,c
  2950  000C16  0E00               	movlw	0
  2951  000C18  220D               	addwfc	___aomod@dividend+1,f,c
  2952  000C1A  220E               	addwfc	___aomod@dividend+2,f,c
  2953  000C1C  220F               	addwfc	___aomod@dividend+3,f,c
  2954  000C1E  2210               	addwfc	___aomod@dividend+4,f,c
  2955  000C20  2211               	addwfc	___aomod@dividend+5,f,c
  2956  000C22  2212               	addwfc	___aomod@dividend+6,f,c
  2957  000C24  2213               	addwfc	___aomod@dividend+7,f,c
  2958  000C26                     l2384:
  2959  000C26  C00C  F00C         	movff	___aomod@dividend,?___aomod
  2960  000C2A  C00D  F00D         	movff	___aomod@dividend+1,?___aomod+1
  2961  000C2E  C00E  F00E         	movff	___aomod@dividend+2,?___aomod+2
  2962  000C32  C00F  F00F         	movff	___aomod@dividend+3,?___aomod+3
  2963  000C36  C010  F010         	movff	___aomod@dividend+4,?___aomod+4
  2964  000C3A  C011  F011         	movff	___aomod@dividend+5,?___aomod+5
  2965  000C3E  C012  F012         	movff	___aomod@dividend+6,?___aomod+6
  2966  000C42  C013  F013         	movff	___aomod@dividend+7,?___aomod+7
  2967  000C46  0012               	return		;funcret
  2968  000C48                     __end_of___aomod:
  2969                           	opt callstack 0
  2970                           
  2971 ;; *************** function ___aodiv *****************
  2972 ;; Defined at:
  2973 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aodiv.c"
  2974 ;; Parameters:    Size  Location     Type
  2975 ;;  dividend        8   11[COMRAM] long long 
  2976 ;;  divisor         8   19[COMRAM] long long 
  2977 ;; Auto vars:     Size  Location     Type
  2978 ;;  quotient        8   29[COMRAM] long long 
  2979 ;;  sign            1   28[COMRAM] unsigned char 
  2980 ;;  counter         1   27[COMRAM] unsigned char 
  2981 ;; Return value:  Size  Location     Type
  2982 ;;                  8   11[COMRAM] long long 
  2983 ;; Registers used:
  2984 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2990 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2991 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2993 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2994 ;;Total ram usage:       26 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    1
  2997 ;; This function calls:
  2998 ;;		Nothing
  2999 ;; This function is called by:
  3000 ;;		_dtoa
  3001 ;; This function uses a non-reentrant model
  3002 ;;
  3003                           
  3004                           	psect	text7
  3005  0009DC                     __ptext7:
  3006                           	opt callstack 0
  3007  0009DC                     ___aodiv:
  3008                           	opt callstack 25
  3009                           
  3010                           ;incstack = 0
  3011  0009DC  0E00               	movlw	0
  3012  0009DE  6E1D               	movwf	___aodiv@sign,c
  3013  0009E0  AE1B               	btfss	___aodiv@divisor+7,7,c
  3014  0009E2  D012               	goto	l2316
  3015  0009E4  1E1B               	comf	___aodiv@divisor+7,f,c
  3016  0009E6  1E1A               	comf	___aodiv@divisor+6,f,c
  3017  0009E8  1E19               	comf	___aodiv@divisor+5,f,c
  3018  0009EA  1E18               	comf	___aodiv@divisor+4,f,c
  3019  0009EC  1E17               	comf	___aodiv@divisor+3,f,c
  3020  0009EE  1E16               	comf	___aodiv@divisor+2,f,c
  3021  0009F0  1E15               	comf	___aodiv@divisor+1,f,c
  3022  0009F2  6C14               	negf	___aodiv@divisor,c
  3023  0009F4  0E00               	movlw	0
  3024  0009F6  2215               	addwfc	___aodiv@divisor+1,f,c
  3025  0009F8  2216               	addwfc	___aodiv@divisor+2,f,c
  3026  0009FA  2217               	addwfc	___aodiv@divisor+3,f,c
  3027  0009FC  2218               	addwfc	___aodiv@divisor+4,f,c
  3028  0009FE  2219               	addwfc	___aodiv@divisor+5,f,c
  3029  000A00  221A               	addwfc	___aodiv@divisor+6,f,c
  3030  000A02  221B               	addwfc	___aodiv@divisor+7,f,c
  3031  000A04  0E01               	movlw	1
  3032  000A06  6E1D               	movwf	___aodiv@sign,c
  3033  000A08                     l2316:
  3034  000A08  AE13               	btfss	___aodiv@dividend+7,7,c
  3035  000A0A  D012               	goto	l2322
  3036  000A0C  1E13               	comf	___aodiv@dividend+7,f,c
  3037  000A0E  1E12               	comf	___aodiv@dividend+6,f,c
  3038  000A10  1E11               	comf	___aodiv@dividend+5,f,c
  3039  000A12  1E10               	comf	___aodiv@dividend+4,f,c
  3040  000A14  1E0F               	comf	___aodiv@dividend+3,f,c
  3041  000A16  1E0E               	comf	___aodiv@dividend+2,f,c
  3042  000A18  1E0D               	comf	___aodiv@dividend+1,f,c
  3043  000A1A  6C0C               	negf	___aodiv@dividend,c
  3044  000A1C  0E00               	movlw	0
  3045  000A1E  220D               	addwfc	___aodiv@dividend+1,f,c
  3046  000A20  220E               	addwfc	___aodiv@dividend+2,f,c
  3047  000A22  220F               	addwfc	___aodiv@dividend+3,f,c
  3048  000A24  2210               	addwfc	___aodiv@dividend+4,f,c
  3049  000A26  2211               	addwfc	___aodiv@dividend+5,f,c
  3050  000A28  2212               	addwfc	___aodiv@dividend+6,f,c
  3051  000A2A  2213               	addwfc	___aodiv@dividend+7,f,c
  3052  000A2C  0E01               	movlw	1
  3053  000A2E  1A1D               	xorwf	___aodiv@sign,f,c
  3054  000A30                     l2322:
  3055  000A30  EE20  F01E         	lfsr	2,___aodiv@quotient
  3056  000A34  0E07               	movlw	7
  3057  000A36                     u1771:
  3058  000A36  6ADE               	clrf	postinc2,c
  3059  000A38  06E8               	decf	wreg,f,c
  3060  000A3A  E2FD               	bc	u1771
  3061  000A3C  5014               	movf	___aodiv@divisor,w,c
  3062  000A3E  1015               	iorwf	___aodiv@divisor+1,w,c
  3063  000A40  1016               	iorwf	___aodiv@divisor+2,w,c
  3064  000A42  1017               	iorwf	___aodiv@divisor+3,w,c
  3065  000A44  1018               	iorwf	___aodiv@divisor+4,w,c
  3066  000A46  1019               	iorwf	___aodiv@divisor+5,w,c
  3067  000A48  101A               	iorwf	___aodiv@divisor+6,w,c
  3068  000A4A  101B               	iorwf	___aodiv@divisor+7,w,c
  3069  000A4C  B4D8               	btfsc	status,2,c
  3070  000A4E  D046               	goto	l2344
  3071  000A50  0E01               	movlw	1
  3072  000A52  6E1C               	movwf	___aodiv@counter,c
  3073  000A54  D00A               	goto	l2330
  3074  000A56                     l2328:
  3075  000A56  90D8               	bcf	status,0,c
  3076  000A58  3614               	rlcf	___aodiv@divisor,f,c
  3077  000A5A  3615               	rlcf	___aodiv@divisor+1,f,c
  3078  000A5C  3616               	rlcf	___aodiv@divisor+2,f,c
  3079  000A5E  3617               	rlcf	___aodiv@divisor+3,f,c
  3080  000A60  3618               	rlcf	___aodiv@divisor+4,f,c
  3081  000A62  3619               	rlcf	___aodiv@divisor+5,f,c
  3082  000A64  361A               	rlcf	___aodiv@divisor+6,f,c
  3083  000A66  361B               	rlcf	___aodiv@divisor+7,f,c
  3084  000A68  2A1C               	incf	___aodiv@counter,f,c
  3085  000A6A                     l2330:
  3086  000A6A  AE1B               	btfss	___aodiv@divisor+7,7,c
  3087  000A6C  D7F4               	goto	l2328
  3088  000A6E                     u1790:
  3089  000A6E  90D8               	bcf	status,0,c
  3090  000A70  361E               	rlcf	___aodiv@quotient,f,c
  3091  000A72  361F               	rlcf	___aodiv@quotient+1,f,c
  3092  000A74  3620               	rlcf	___aodiv@quotient+2,f,c
  3093  000A76  3621               	rlcf	___aodiv@quotient+3,f,c
  3094  000A78  3622               	rlcf	___aodiv@quotient+4,f,c
  3095  000A7A  3623               	rlcf	___aodiv@quotient+5,f,c
  3096  000A7C  3624               	rlcf	___aodiv@quotient+6,f,c
  3097  000A7E  3625               	rlcf	___aodiv@quotient+7,f,c
  3098  000A80  5014               	movf	___aodiv@divisor,w,c
  3099  000A82  5C0C               	subwf	___aodiv@dividend,w,c
  3100  000A84  5015               	movf	___aodiv@divisor+1,w,c
  3101  000A86  580D               	subwfb	___aodiv@dividend+1,w,c
  3102  000A88  5016               	movf	___aodiv@divisor+2,w,c
  3103  000A8A  580E               	subwfb	___aodiv@dividend+2,w,c
  3104  000A8C  5017               	movf	___aodiv@divisor+3,w,c
  3105  000A8E  580F               	subwfb	___aodiv@dividend+3,w,c
  3106  000A90  5018               	movf	___aodiv@divisor+4,w,c
  3107  000A92  5810               	subwfb	___aodiv@dividend+4,w,c
  3108  000A94  5019               	movf	___aodiv@divisor+5,w,c
  3109  000A96  5811               	subwfb	___aodiv@dividend+5,w,c
  3110  000A98  501A               	movf	___aodiv@divisor+6,w,c
  3111  000A9A  5812               	subwfb	___aodiv@dividend+6,w,c
  3112  000A9C  501B               	movf	___aodiv@divisor+7,w,c
  3113  000A9E  5813               	subwfb	___aodiv@dividend+7,w,c
  3114  000AA0  A0D8               	btfss	status,0,c
  3115  000AA2  D011               	goto	l2340
  3116  000AA4  5014               	movf	___aodiv@divisor,w,c
  3117  000AA6  5E0C               	subwf	___aodiv@dividend,f,c
  3118  000AA8  5015               	movf	___aodiv@divisor+1,w,c
  3119  000AAA  5A0D               	subwfb	___aodiv@dividend+1,f,c
  3120  000AAC  5016               	movf	___aodiv@divisor+2,w,c
  3121  000AAE  5A0E               	subwfb	___aodiv@dividend+2,f,c
  3122  000AB0  5017               	movf	___aodiv@divisor+3,w,c
  3123  000AB2  5A0F               	subwfb	___aodiv@dividend+3,f,c
  3124  000AB4  5018               	movf	___aodiv@divisor+4,w,c
  3125  000AB6  5A10               	subwfb	___aodiv@dividend+4,f,c
  3126  000AB8  5019               	movf	___aodiv@divisor+5,w,c
  3127  000ABA  5A11               	subwfb	___aodiv@dividend+5,f,c
  3128  000ABC  501A               	movf	___aodiv@divisor+6,w,c
  3129  000ABE  5A12               	subwfb	___aodiv@dividend+6,f,c
  3130  000AC0  501B               	movf	___aodiv@divisor+7,w,c
  3131  000AC2  5A13               	subwfb	___aodiv@dividend+7,f,c
  3132  000AC4  801E               	bsf	___aodiv@quotient,0,c
  3133  000AC6                     l2340:
  3134  000AC6  90D8               	bcf	status,0,c
  3135  000AC8  321B               	rrcf	___aodiv@divisor+7,f,c
  3136  000ACA  321A               	rrcf	___aodiv@divisor+6,f,c
  3137  000ACC  3219               	rrcf	___aodiv@divisor+5,f,c
  3138  000ACE  3218               	rrcf	___aodiv@divisor+4,f,c
  3139  000AD0  3217               	rrcf	___aodiv@divisor+3,f,c
  3140  000AD2  3216               	rrcf	___aodiv@divisor+2,f,c
  3141  000AD4  3215               	rrcf	___aodiv@divisor+1,f,c
  3142  000AD6  3214               	rrcf	___aodiv@divisor,f,c
  3143  000AD8  2E1C               	decfsz	___aodiv@counter,f,c
  3144  000ADA  D7C9               	goto	u1790
  3145  000ADC                     l2344:
  3146  000ADC  501D               	movf	___aodiv@sign,w,c
  3147  000ADE  B4D8               	btfsc	status,2,c
  3148  000AE0  D010               	goto	l2348
  3149  000AE2  1E25               	comf	___aodiv@quotient+7,f,c
  3150  000AE4  1E24               	comf	___aodiv@quotient+6,f,c
  3151  000AE6  1E23               	comf	___aodiv@quotient+5,f,c
  3152  000AE8  1E22               	comf	___aodiv@quotient+4,f,c
  3153  000AEA  1E21               	comf	___aodiv@quotient+3,f,c
  3154  000AEC  1E20               	comf	___aodiv@quotient+2,f,c
  3155  000AEE  1E1F               	comf	___aodiv@quotient+1,f,c
  3156  000AF0  6C1E               	negf	___aodiv@quotient,c
  3157  000AF2  0E00               	movlw	0
  3158  000AF4  221F               	addwfc	___aodiv@quotient+1,f,c
  3159  000AF6  2220               	addwfc	___aodiv@quotient+2,f,c
  3160  000AF8  2221               	addwfc	___aodiv@quotient+3,f,c
  3161  000AFA  2222               	addwfc	___aodiv@quotient+4,f,c
  3162  000AFC  2223               	addwfc	___aodiv@quotient+5,f,c
  3163  000AFE  2224               	addwfc	___aodiv@quotient+6,f,c
  3164  000B00  2225               	addwfc	___aodiv@quotient+7,f,c
  3165  000B02                     l2348:
  3166  000B02  C01E  F00C         	movff	___aodiv@quotient,?___aodiv
  3167  000B06  C01F  F00D         	movff	___aodiv@quotient+1,?___aodiv+1
  3168  000B0A  C020  F00E         	movff	___aodiv@quotient+2,?___aodiv+2
  3169  000B0E  C021  F00F         	movff	___aodiv@quotient+3,?___aodiv+3
  3170  000B12  C022  F010         	movff	___aodiv@quotient+4,?___aodiv+4
  3171  000B16  C023  F011         	movff	___aodiv@quotient+5,?___aodiv+5
  3172  000B1A  C024  F012         	movff	___aodiv@quotient+6,?___aodiv+6
  3173  000B1E  C025  F013         	movff	___aodiv@quotient+7,?___aodiv+7
  3174  000B22  0012               	return		;funcret
  3175  000B24                     __end_of___aodiv:
  3176                           	opt callstack 0
  3177                           
  3178 ;; *************** function _ctoa *****************
  3179 ;; Defined at:
  3180 ;;		line 259 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3181 ;; Parameters:    Size  Location     Type
  3182 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  3183 ;;		 -> NULL(0), 
  3184 ;;  c               1   44[COMRAM] unsigned char 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;  w               2   45[COMRAM] int 
  3187 ;;  l               2    0        int 
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  2   42[COMRAM] int 
  3190 ;; Registers used:
  3191 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3197 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3198 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3199 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3200 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3201 ;;Total ram usage:        5 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    8
  3204 ;; This function calls:
  3205 ;;		_pad
  3206 ;; This function is called by:
  3207 ;;		_vfpfcnvrt
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text8
  3212  000F40                     __ptext8:
  3213                           	opt callstack 0
  3214  000F40                     _ctoa:
  3215                           	opt callstack 19
  3216                           
  3217                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 259: static int ctoa
      +                          (FILE *fp, char c);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 26
      +                          0: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 261:     int l, 
      +                          w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 264:     w = width
      +                           ? width - 1 : width;
  3218                           
  3219                           ;incstack = 0
  3220  000F40  506E               	movf	_width,w,c
  3221  000F42  106F               	iorwf	_width+1,w,c
  3222  000F44  A4D8               	btfss	status,2,c
  3223  000F46  D005               	goto	l2392
  3224  000F48  C06E  F02E         	movff	_width,ctoa@w
  3225  000F4C  C06F  F02F         	movff	_width+1,ctoa@w+1
  3226  000F50  D006               	goto	l2394
  3227  000F52                     l2392:
  3228  000F52  0EFF               	movlw	255
  3229  000F54  246E               	addwf	_width,w,c
  3230  000F56  6E2E               	movwf	ctoa@w,c
  3231  000F58  0EFF               	movlw	255
  3232  000F5A  206F               	addwfc	_width+1,w,c
  3233  000F5C  6E2F               	movwf	ctoa@w+1,c
  3234  000F5E                     l2394:
  3235                           
  3236                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 267:     dbuf[0] = c
      +                          ;
  3237  000F5E  C02D  F0C5         	movff	ctoa@c,_dbuf
  3238                           
  3239                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 268:     dbuf[1] = '
      +                          \0';
  3240  000F62  0E00               	movlw	0
  3241  000F64  0100               	movlb	0	; () banked
  3242  000F66  6FC6               	movwf	(_dbuf+1)& (0+255),b
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 269:     return pad(
      +                          fp, &dbuf[0], w);
  3246  000F68  C02B  F020         	movff	ctoa@fp,pad@fp
  3247  000F6C  C02C  F021         	movff	ctoa@fp+1,pad@fp+1
  3248  000F70  0EC5               	movlw	low _dbuf
  3249  000F72  6E22               	movwf	pad@buf,c
  3250  000F74  0E00               	movlw	high _dbuf
  3251  000F76  6E23               	movwf	pad@buf+1,c
  3252  000F78  C02E  F024         	movff	ctoa@w,pad@p
  3253  000F7C  C02F  F025         	movff	ctoa@w+1,pad@p+1
  3254  000F80  EC89  F006         	call	_pad	;wreg free
  3255  000F84  C020  F02B         	movff	?_pad,?_ctoa
  3256  000F88  C021  F02C         	movff	?_pad+1,?_ctoa+1
  3257  000F8C  0012               	return		;funcret
  3258  000F8E                     __end_of_ctoa:
  3259                           	opt callstack 0
  3260                           
  3261 ;; *************** function _pad *****************
  3262 ;; Defined at:
  3263 ;;		line 72 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  3266 ;;		 -> NULL(0), 
  3267 ;;  buf             2   33[COMRAM] PTR unsigned char 
  3268 ;;		 -> dbuf(32), 
  3269 ;;  p               2   35[COMRAM] int 
  3270 ;; Auto vars:     Size  Location     Type
  3271 ;;  w               2   40[COMRAM] int 
  3272 ;;  i               2   38[COMRAM] int 
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  2   31[COMRAM] int 
  3275 ;; Registers used:
  3276 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3277 ;; Tracked objects:
  3278 ;;		On entry : 0/0
  3279 ;;		On exit  : 0/0
  3280 ;;		Unchanged: 0/0
  3281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3282 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3283 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;Total ram usage:       11 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    7
  3289 ;; This function calls:
  3290 ;;		_fputc
  3291 ;;		_fputs
  3292 ;;		_strlen
  3293 ;; This function is called by:
  3294 ;;		_ctoa
  3295 ;;		_dtoa
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           	psect	text9
  3300  000D12                     __ptext9:
  3301                           	opt callstack 0
  3302  000D12                     _pad:
  3303                           	opt callstack 19
  3304                           
  3305                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  3306                           
  3307                           ;incstack = 0
  3308  000D12  A072               	btfss	_flags,0,c
  3309  000D14  D00A               	goto	l2286
  3310                           
  3311                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  3312  000D16  C022  F019         	movff	pad@buf,fputs@s
  3313  000D1A  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3314  000D1E  C020  F01B         	movff	pad@fp,fputs@fp
  3315  000D22  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3316  000D26  EC0B  F008         	call	_fputs	;wreg free
  3317  000D2A                     l2286:
  3318                           
  3319                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  3320  000D2A  BE25               	btfsc	pad@p+1,7,c
  3321  000D2C  D005               	goto	l2290
  3322  000D2E  C024  F029         	movff	pad@p,pad@w
  3323  000D32  C025  F02A         	movff	pad@p+1,pad@w+1
  3324  000D36  D004               	goto	l165
  3325  000D38                     l2290:
  3326  000D38  0E00               	movlw	0
  3327  000D3A  6E2A               	movwf	pad@w+1,c
  3328  000D3C  0E00               	movlw	0
  3329  000D3E  6E29               	movwf	pad@w,c
  3330  000D40                     l165:
  3331                           
  3332                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  3333  000D40  0E00               	movlw	0
  3334  000D42  6E28               	movwf	pad@i+1,c
  3335  000D44  0E00               	movlw	0
  3336  000D46  6E27               	movwf	pad@i,c
  3337                           
  3338                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3339  000D48  D00C               	goto	l2296
  3340  000D4A                     l2292:
  3341                           
  3342                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  3343  000D4A  0E00               	movlw	0
  3344  000D4C  6E11               	movwf	fputc@c+1,c
  3345  000D4E  0E20               	movlw	32
  3346  000D50  6E10               	movwf	fputc@c,c
  3347  000D52  C020  F012         	movff	pad@fp,fputc@fp
  3348  000D56  C021  F013         	movff	pad@fp+1,fputc@fp+1
  3349  000D5A  EC0C  F007         	call	_fputc	;wreg free
  3350                           
  3351                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 86:         ++i;
  3352  000D5E  4A27               	infsnz	pad@i,f,c
  3353  000D60  2A28               	incf	pad@i+1,f,c
  3354  000D62                     l2296:
  3355                           
  3356                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3357  000D62  5029               	movf	pad@w,w,c
  3358  000D64  5C27               	subwf	pad@i,w,c
  3359  000D66  5028               	movf	pad@i+1,w,c
  3360  000D68  0A80               	xorlw	128
  3361  000D6A  6E26               	movwf	??_pad& (0+255),c
  3362  000D6C  502A               	movf	pad@w+1,w,c
  3363  000D6E  0A80               	xorlw	128
  3364  000D70  5826               	subwfb	??_pad& (0+255),w,c
  3365  000D72  A0D8               	btfss	status,0,c
  3366  000D74  D7EA               	goto	l2292
  3367                           
  3368                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  3369  000D76  B072               	btfsc	_flags,0,c
  3370  000D78  D00A               	goto	l2300
  3371                           
  3372                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  3373  000D7A  C022  F019         	movff	pad@buf,fputs@s
  3374  000D7E  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3375  000D82  C020  F01B         	movff	pad@fp,fputs@fp
  3376  000D86  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3377  000D8A  EC0B  F008         	call	_fputs	;wreg free
  3378  000D8E                     l2300:
  3379                           
  3380                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 94:     return strle
      +                          n(buf) + w;
  3381  000D8E  C022  F00C         	movff	pad@buf,strlen@s
  3382  000D92  C023  F00D         	movff	pad@buf+1,strlen@s+1
  3383  000D96  EC40  F008         	call	_strlen	;wreg free
  3384  000D9A  5029               	movf	pad@w,w,c
  3385  000D9C  240C               	addwf	?_strlen,w,c
  3386  000D9E  6E20               	movwf	?_pad,c
  3387  000DA0  502A               	movf	pad@w+1,w,c
  3388  000DA2  200D               	addwfc	?_strlen+1,w,c
  3389  000DA4  6E21               	movwf	?_pad+1,c
  3390  000DA6  0012               	return		;funcret
  3391  000DA8                     __end_of_pad:
  3392                           	opt callstack 0
  3393                           
  3394 ;; *************** function _strlen *****************
  3395 ;; Defined at:
  3396 ;;		line 12 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/strlen.c"
  3397 ;; Parameters:    Size  Location     Type
  3398 ;;  s               2   11[COMRAM] PTR const unsigned char 
  3399 ;;		 -> dbuf(32), 
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;  a               2   13[COMRAM] PTR const unsigned char 
  3402 ;;		 -> dbuf(32), 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  2   11[COMRAM] unsigned int 
  3405 ;; Registers used:
  3406 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3412 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3413 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;Total ram usage:        4 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; Hardware stack levels required when called:    1
  3419 ;; This function calls:
  3420 ;;		Nothing
  3421 ;; This function is called by:
  3422 ;;		_pad
  3423 ;; This function uses a non-reentrant model
  3424 ;;
  3425                           
  3426                           	psect	text10
  3427  001080                     __ptext10:
  3428                           	opt callstack 0
  3429  001080                     _strlen:
  3430                           	opt callstack 24
  3431                           
  3432                           ;incstack = 0
  3433  001080  C00C  F00E         	movff	strlen@s,strlen@a
  3434  001084  C00D  F00F         	movff	strlen@s+1,strlen@a+1
  3435  001088  D002               	goto	l2276
  3436  00108A                     l2274:
  3437  00108A  4A0C               	infsnz	strlen@s,f,c
  3438  00108C  2A0D               	incf	strlen@s+1,f,c
  3439  00108E                     l2276:
  3440  00108E  C00C  FFD9         	movff	strlen@s,fsr2l
  3441  001092  C00D  FFDA         	movff	strlen@s+1,fsr2h
  3442  001096  50DF               	movf	indf2,w,c
  3443  001098  A4D8               	btfss	status,2,c
  3444  00109A  D7F7               	goto	l2274
  3445  00109C  500E               	movf	strlen@a,w,c
  3446  00109E  5C0C               	subwf	strlen@s,w,c
  3447  0010A0  6E0C               	movwf	?_strlen,c
  3448  0010A2  500F               	movf	strlen@a+1,w,c
  3449  0010A4  580D               	subwfb	strlen@s+1,w,c
  3450  0010A6  6E0D               	movwf	?_strlen+1,c
  3451  0010A8  0012               	return		;funcret
  3452  0010AA                     __end_of_strlen:
  3453                           	opt callstack 0
  3454                           
  3455 ;; *************** function _fputs *****************
  3456 ;; Defined at:
  3457 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputs.c"
  3458 ;; Parameters:    Size  Location     Type
  3459 ;;  s               2   24[COMRAM] PTR const unsigned char 
  3460 ;;		 -> dbuf(32), 
  3461 ;;  fp              2   26[COMRAM] PTR struct _IO_FILE
  3462 ;;		 -> NULL(0), 
  3463 ;; Auto vars:     Size  Location     Type
  3464 ;;  i               2   29[COMRAM] int 
  3465 ;;  c               1   28[COMRAM] unsigned char 
  3466 ;; Return value:  Size  Location     Type
  3467 ;;                  2   24[COMRAM] int 
  3468 ;; Registers used:
  3469 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3470 ;; Tracked objects:
  3471 ;;		On entry : 0/0
  3472 ;;		On exit  : 0/0
  3473 ;;		Unchanged: 0/0
  3474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3475 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3476 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3478 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;Total ram usage:        7 bytes
  3480 ;; Hardware stack levels used:    1
  3481 ;; Hardware stack levels required when called:    6
  3482 ;; This function calls:
  3483 ;;		_fputc
  3484 ;; This function is called by:
  3485 ;;		_pad
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           	psect	text11
  3490  001016                     __ptext11:
  3491                           	opt callstack 0
  3492  001016                     _fputs:
  3493                           	opt callstack 19
  3494                           
  3495                           ;incstack = 0
  3496  001016  0E00               	movlw	0
  3497  001018  6E1F               	movwf	fputs@i+1,c
  3498  00101A  0E00               	movlw	0
  3499  00101C  6E1E               	movwf	fputs@i,c
  3500  00101E  D00B               	goto	l2270
  3501  001020                     l2266:
  3502  001020  C01D  F010         	movff	fputs@c,fputc@c
  3503  001024  6A11               	clrf	fputc@c+1,c
  3504  001026  C01B  F012         	movff	fputs@fp,fputc@fp
  3505  00102A  C01C  F013         	movff	fputs@fp+1,fputc@fp+1
  3506  00102E  EC0C  F007         	call	_fputc	;wreg free
  3507  001032  4A1E               	infsnz	fputs@i,f,c
  3508  001034  2A1F               	incf	fputs@i+1,f,c
  3509  001036                     l2270:
  3510  001036  501E               	movf	fputs@i,w,c
  3511  001038  2419               	addwf	fputs@s,w,c
  3512  00103A  6ED9               	movwf	fsr2l,c
  3513  00103C  501F               	movf	fputs@i+1,w,c
  3514  00103E  201A               	addwfc	fputs@s+1,w,c
  3515  001040  6EDA               	movwf	fsr2h,c
  3516  001042  50DF               	movf	indf2,w,c
  3517  001044  6E1D               	movwf	fputs@c,c
  3518  001046  501D               	movf	fputs@c,w,c
  3519  001048  B4D8               	btfsc	status,2,c
  3520  00104A  0012               	return	
  3521  00104C  D7E9               	goto	l2266
  3522  00104E                     __end_of_fputs:
  3523                           	opt callstack 0
  3524                           
  3525 ;; *************** function _fputc *****************
  3526 ;; Defined at:
  3527 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputc.c"
  3528 ;; Parameters:    Size  Location     Type
  3529 ;;  c               2   15[COMRAM] int 
  3530 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  3531 ;;		 -> NULL(0), 
  3532 ;; Auto vars:     Size  Location     Type
  3533 ;;		None
  3534 ;; Return value:  Size  Location     Type
  3535 ;;                  2   15[COMRAM] int 
  3536 ;; Registers used:
  3537 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3538 ;; Tracked objects:
  3539 ;;		On entry : 0/0
  3540 ;;		On exit  : 0/0
  3541 ;;		Unchanged: 0/0
  3542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3543 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3544 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3545 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3546 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3547 ;;Total ram usage:        9 bytes
  3548 ;; Hardware stack levels used:    1
  3549 ;; Hardware stack levels required when called:    5
  3550 ;; This function calls:
  3551 ;;		_putch
  3552 ;; This function is called by:
  3553 ;;		_pad
  3554 ;;		_vfpfcnvrt
  3555 ;;		_fputs
  3556 ;; This function uses a non-reentrant model
  3557 ;;
  3558                           
  3559                           	psect	text12
  3560  000E18                     __ptext12:
  3561                           	opt callstack 0
  3562  000E18                     _fputc:
  3563                           	opt callstack 22
  3564                           
  3565                           ;incstack = 0
  3566  000E18  5012               	movf	fputc@fp,w,c
  3567  000E1A  1013               	iorwf	fputc@fp+1,w,c
  3568  000E1C  B4D8               	btfsc	status,2,c
  3569  000E1E  D004               	goto	u1650
  3570  000E20  5012               	movf	fputc@fp,w,c
  3571  000E22  1013               	iorwf	fputc@fp+1,w,c
  3572  000E24  A4D8               	btfss	status,2,c
  3573  000E26  D004               	goto	l2256
  3574  000E28                     u1650:
  3575  000E28  5010               	movf	fputc@c,w,c
  3576  000E2A  EC92  F008         	call	_putch
  3577  000E2E  0012               	return	
  3578  000E30                     l2256:
  3579  000E30  EE20 F004          	lfsr	2,4
  3580  000E34  5012               	movf	fputc@fp,w,c
  3581  000E36  26D9               	addwf	fsr2l,f,c
  3582  000E38  5013               	movf	fputc@fp+1,w,c
  3583  000E3A  22DA               	addwfc	fsr2h,f,c
  3584  000E3C  50DE               	movf	postinc2,w,c
  3585  000E3E  10DE               	iorwf	postinc2,w,c
  3586  000E40  B4D8               	btfsc	status,2,c
  3587  000E42  D016               	goto	u1670
  3588  000E44  EE20 F004          	lfsr	2,4
  3589  000E48  5012               	movf	fputc@fp,w,c
  3590  000E4A  26D9               	addwf	fsr2l,f,c
  3591  000E4C  5013               	movf	fputc@fp+1,w,c
  3592  000E4E  22DA               	addwfc	fsr2h,f,c
  3593  000E50  EE10 F002          	lfsr	1,2
  3594  000E54  5012               	movf	fputc@fp,w,c
  3595  000E56  26E1               	addwf	fsr1l,f,c
  3596  000E58  5013               	movf	fputc@fp+1,w,c
  3597  000E5A  22E2               	addwfc	fsr1h,f,c
  3598  000E5C  50DE               	movf	postinc2,w,c
  3599  000E5E  5CE6               	subwf	postinc1,w,c
  3600  000E60  50E6               	movf	postinc1,w,c
  3601  000E62  0A80               	xorlw	128
  3602  000E64  6E18               	movwf	(??_fputc+4)& (0+255),c
  3603  000E66  50DE               	movf	postinc2,w,c
  3604  000E68  0A80               	xorlw	128
  3605  000E6A  5818               	subwfb	(??_fputc+4)& (0+255),w,c
  3606  000E6C  B0D8               	btfsc	status,0,c
  3607  000E6E  0012               	return	
  3608  000E70                     u1670:
  3609  000E70  EE20 F002          	lfsr	2,2
  3610  000E74  5012               	movf	fputc@fp,w,c
  3611  000E76  26D9               	addwf	fsr2l,f,c
  3612  000E78  5013               	movf	fputc@fp+1,w,c
  3613  000E7A  22DA               	addwfc	fsr2h,f,c
  3614  000E7C  2ADE               	incf	postinc2,f,c
  3615  000E7E  0E00               	movlw	0
  3616  000E80  22DD               	addwfc	postdec2,f,c
  3617  000E82  0012               	return		;funcret
  3618  000E84                     __end_of_fputc:
  3619                           	opt callstack 0
  3620                           
  3621 ;; *************** function _putch *****************
  3622 ;; Defined at:
  3623 ;;		line 102 in file "lcd.c"
  3624 ;; Parameters:    Size  Location     Type
  3625 ;;  data            1    wreg     unsigned char 
  3626 ;; Auto vars:     Size  Location     Type
  3627 ;;  data            1   14[COMRAM] unsigned char 
  3628 ;; Return value:  Size  Location     Type
  3629 ;;                  1    wreg      void 
  3630 ;; Registers used:
  3631 ;;		wreg, status,2, status,0, cstack
  3632 ;; Tracked objects:
  3633 ;;		On entry : 0/0
  3634 ;;		On exit  : 0/0
  3635 ;;		Unchanged: 0/0
  3636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3638 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3640 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3641 ;;Total ram usage:        1 bytes
  3642 ;; Hardware stack levels used:    1
  3643 ;; Hardware stack levels required when called:    4
  3644 ;; This function calls:
  3645 ;;		_send_byte
  3646 ;; This function is called by:
  3647 ;;		_fputc
  3648 ;; This function uses a non-reentrant model
  3649 ;;
  3650                           
  3651                           	psect	text13
  3652  001124                     __ptext13:
  3653                           	opt callstack 0
  3654  001124                     _putch:
  3655                           	opt callstack 22
  3656                           
  3657                           ;incstack = 0
  3658                           ;putch@data stored from wreg
  3659  001124  6E0F               	movwf	putch@data,c
  3660                           
  3661                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  3662  001126  848C               	bsf	3980,2,c	;volatile
  3663                           
  3664                           ;lcd.c: 104:     send_byte((unsigned char)data);
  3665  001128  500F               	movf	putch@data,w,c
  3666  00112A  EC89  F008         	call	_send_byte
  3667  00112E  0012               	return		;funcret
  3668  001130                     __end_of_putch:
  3669                           	opt callstack 0
  3670                           
  3671 ;; *************** function _initLCD *****************
  3672 ;; Defined at:
  3673 ;;		line 69 in file "lcd.c"
  3674 ;; Parameters:    Size  Location     Type
  3675 ;;		None
  3676 ;; Auto vars:     Size  Location     Type
  3677 ;;		None
  3678 ;; Return value:  Size  Location     Type
  3679 ;;                  1    wreg      void 
  3680 ;; Registers used:
  3681 ;;		wreg, status,2, status,0, cstack
  3682 ;; Tracked objects:
  3683 ;;		On entry : 0/0
  3684 ;;		On exit  : 0/0
  3685 ;;		Unchanged: 0/0
  3686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3689 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3690 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3691 ;;Total ram usage:        1 bytes
  3692 ;; Hardware stack levels used:    1
  3693 ;; Hardware stack levels required when called:    5
  3694 ;; This function calls:
  3695 ;;		_lcdInst
  3696 ;;		_send_byte
  3697 ;;		_send_nibble
  3698 ;; This function is called by:
  3699 ;;		_main
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702                           
  3703                           	psect	text14
  3704  000E84                     __ptext14:
  3705                           	opt callstack 0
  3706  000E84                     _initLCD:
  3707                           	opt callstack 25
  3708                           
  3709                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3710                           
  3711                           ;incstack = 0
  3712  000E84  0E31               	movlw	49
  3713  000E86  6E10               	movwf	??_initLCD& (0+255),c
  3714  000E88  0EB2               	movlw	178
  3715  000E8A                     u2497:
  3716  000E8A  2EE8               	decfsz	wreg,f,c
  3717  000E8C  D7FE               	bra	u2497
  3718  000E8E  2E10               	decfsz	??_initLCD& (0+255),f,c
  3719  000E90  D7FC               	bra	u2497
  3720  000E92  D000               	nop2	
  3721                           
  3722                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  3723  000E94  948C               	bcf	3980,2,c	;volatile
  3724                           
  3725                           ;lcd.c: 74:     send_nibble(0b0011);
  3726  000E96  0E03               	movlw	3
  3727  000E98  EC7E  F008         	call	_send_nibble
  3728                           
  3729                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3730  000E9C  0E11               	movlw	17
  3731  000E9E  6E10               	movwf	??_initLCD& (0+255),c
  3732  000EA0  0E3A               	movlw	58
  3733  000EA2                     u2507:
  3734  000EA2  2EE8               	decfsz	wreg,f,c
  3735  000EA4  D7FE               	bra	u2507
  3736  000EA6  2E10               	decfsz	??_initLCD& (0+255),f,c
  3737  000EA8  D7FC               	bra	u2507
  3738  000EAA  D000               	nop2	
  3739                           
  3740                           ;lcd.c: 76:     send_nibble(0b0011);
  3741  000EAC  0E03               	movlw	3
  3742  000EAE  EC7E  F008         	call	_send_nibble
  3743                           
  3744                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  3745  000EB2  0E7D               	movlw	125
  3746  000EB4                     u2517:
  3747  000EB4  2EE8               	decfsz	wreg,f,c
  3748  000EB6  D7FE               	bra	u2517
  3749                           
  3750                           ;lcd.c: 78:     send_byte(0b00110010);
  3751  000EB8  0E32               	movlw	50
  3752  000EBA  EC89  F008         	call	_send_byte
  3753                           
  3754                           ;lcd.c: 80:     send_byte(0b00101000);
  3755  000EBE  0E28               	movlw	40
  3756  000EC0  EC89  F008         	call	_send_byte
  3757                           
  3758                           ;lcd.c: 81:     send_byte(0b00001000);
  3759  000EC4  0E08               	movlw	8
  3760  000EC6  EC89  F008         	call	_send_byte
  3761                           
  3762                           ;lcd.c: 82:     send_byte(0b00000001);
  3763  000ECA  0E01               	movlw	1
  3764  000ECC  EC89  F008         	call	_send_byte
  3765                           
  3766                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3767  000ED0  0E11               	movlw	17
  3768  000ED2  6E10               	movwf	??_initLCD& (0+255),c
  3769  000ED4  0E3A               	movlw	58
  3770  000ED6                     u2527:
  3771  000ED6  2EE8               	decfsz	wreg,f,c
  3772  000ED8  D7FE               	bra	u2527
  3773  000EDA  2E10               	decfsz	??_initLCD& (0+255),f,c
  3774  000EDC  D7FC               	bra	u2527
  3775  000EDE  D000               	nop2	
  3776                           
  3777                           ;lcd.c: 84:     send_byte(0b00000110);
  3778  000EE0  0E06               	movlw	6
  3779  000EE2  EC89  F008         	call	_send_byte
  3780                           
  3781                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  3782  000EE6  0E0F               	movlw	15
  3783  000EE8  EC98  F008         	call	_lcdInst
  3784  000EEC  0012               	return		;funcret
  3785  000EEE                     __end_of_initLCD:
  3786                           	opt callstack 0
  3787                           
  3788 ;; *************** function _lcdInst *****************
  3789 ;; Defined at:
  3790 ;;		line 64 in file "lcd.c"
  3791 ;; Parameters:    Size  Location     Type
  3792 ;;  data            1    wreg     unsigned char 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  data            1   14[COMRAM] unsigned char 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  1    wreg      void 
  3797 ;; Registers used:
  3798 ;;		wreg, status,2, status,0, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 0/0
  3801 ;;		On exit  : 0/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3805 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3807 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3808 ;;Total ram usage:        1 bytes
  3809 ;; Hardware stack levels used:    1
  3810 ;; Hardware stack levels required when called:    4
  3811 ;; This function calls:
  3812 ;;		_send_byte
  3813 ;; This function is called by:
  3814 ;;		_initLCD
  3815 ;;		_main
  3816 ;;		_lcd_shift_cursor
  3817 ;;		_lcd_shift_display
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text15
  3822  001130                     __ptext15:
  3823                           	opt callstack 0
  3824  001130                     _lcdInst:
  3825                           	opt callstack 26
  3826                           
  3827                           ;incstack = 0
  3828                           ;lcdInst@data stored from wreg
  3829  001130  6E0F               	movwf	lcdInst@data,c
  3830                           
  3831                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  3832  001132  948C               	bcf	3980,2,c	;volatile
  3833                           
  3834                           ;lcd.c: 66:     send_byte(data);
  3835  001134  500F               	movf	lcdInst@data,w,c
  3836  001136  EC89  F008         	call	_send_byte
  3837  00113A  0012               	return		;funcret
  3838  00113C                     __end_of_lcdInst:
  3839                           	opt callstack 0
  3840                           
  3841 ;; *************** function _send_byte *****************
  3842 ;; Defined at:
  3843 ;;		line 55 in file "lcd.c"
  3844 ;; Parameters:    Size  Location     Type
  3845 ;;  data            1    wreg     unsigned char 
  3846 ;; Auto vars:     Size  Location     Type
  3847 ;;  data            1   13[COMRAM] unsigned char 
  3848 ;; Return value:  Size  Location     Type
  3849 ;;                  1    wreg      void 
  3850 ;; Registers used:
  3851 ;;		wreg, status,2, status,0, cstack
  3852 ;; Tracked objects:
  3853 ;;		On entry : 0/0
  3854 ;;		On exit  : 0/0
  3855 ;;		Unchanged: 0/0
  3856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3860 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3861 ;;Total ram usage:        1 bytes
  3862 ;; Hardware stack levels used:    1
  3863 ;; Hardware stack levels required when called:    3
  3864 ;; This function calls:
  3865 ;;		_send_nibble
  3866 ;; This function is called by:
  3867 ;;		_lcdInst
  3868 ;;		_initLCD
  3869 ;;		_putch
  3870 ;; This function uses a non-reentrant model
  3871 ;;
  3872                           
  3873                           	psect	text16
  3874  001112                     __ptext16:
  3875                           	opt callstack 0
  3876  001112                     _send_byte:
  3877                           	opt callstack 22
  3878                           
  3879                           ;incstack = 0
  3880                           ;send_byte@data stored from wreg
  3881  001112  6E0E               	movwf	send_byte@data,c
  3882                           
  3883                           ;lcd.c: 57:     send_nibble(data >> 4);
  3884  001114  380E               	swapf	send_byte@data,w,c
  3885  001116  0B0F               	andlw	15
  3886  001118  EC7E  F008         	call	_send_nibble
  3887                           
  3888                           ;lcd.c: 60:     send_nibble(data);
  3889  00111C  500E               	movf	send_byte@data,w,c
  3890  00111E  EC7E  F008         	call	_send_nibble
  3891  001122  0012               	return		;funcret
  3892  001124                     __end_of_send_byte:
  3893                           	opt callstack 0
  3894                           
  3895 ;; *************** function _send_nibble *****************
  3896 ;; Defined at:
  3897 ;;		line 44 in file "lcd.c"
  3898 ;; Parameters:    Size  Location     Type
  3899 ;;  data            1    wreg     unsigned char 
  3900 ;; Auto vars:     Size  Location     Type
  3901 ;;  data            1   12[COMRAM] unsigned char 
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      void 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 0/0
  3909 ;;		Unchanged: 0/0
  3910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3912 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;Total ram usage:        1 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    2
  3918 ;; This function calls:
  3919 ;;		_pulse_e
  3920 ;; This function is called by:
  3921 ;;		_send_byte
  3922 ;;		_initLCD
  3923 ;; This function uses a non-reentrant model
  3924 ;;
  3925                           
  3926                           	psect	text17
  3927  0010FC                     __ptext17:
  3928                           	opt callstack 0
  3929  0010FC                     _send_nibble:
  3930                           	opt callstack 22
  3931                           
  3932                           ;incstack = 0
  3933                           ;send_nibble@data stored from wreg
  3934  0010FC  6E0D               	movwf	send_nibble@data,c
  3935                           
  3936                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  3937  0010FE  508C               	movf	3980,w,c	;volatile
  3938  001100  0B0F               	andlw	15
  3939  001102  6E8C               	movwf	3980,c	;volatile
  3940                           
  3941                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  3942  001104  380D               	swapf	send_nibble@data,w,c
  3943  001106  0BF0               	andlw	240
  3944  001108  108C               	iorwf	3980,w,c	;volatile
  3945  00110A  6E8C               	movwf	3980,c	;volatile
  3946                           
  3947                           ;lcd.c: 48:     pulse_e();
  3948  00110C  EC55  F008         	call	_pulse_e	;wreg free
  3949  001110  0012               	return		;funcret
  3950  001112                     __end_of_send_nibble:
  3951                           	opt callstack 0
  3952                           
  3953 ;; *************** function _pulse_e *****************
  3954 ;; Defined at:
  3955 ;;		line 28 in file "lcd.c"
  3956 ;; Parameters:    Size  Location     Type
  3957 ;;		None
  3958 ;; Auto vars:     Size  Location     Type
  3959 ;;  interruptSta    1   11[COMRAM] unsigned char 
  3960 ;; Return value:  Size  Location     Type
  3961 ;;                  1    wreg      void 
  3962 ;; Registers used:
  3963 ;;		wreg
  3964 ;; Tracked objects:
  3965 ;;		On entry : 0/0
  3966 ;;		On exit  : 0/0
  3967 ;;		Unchanged: 0/0
  3968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3972 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3973 ;;Total ram usage:        1 bytes
  3974 ;; Hardware stack levels used:    1
  3975 ;; Hardware stack levels required when called:    1
  3976 ;; This function calls:
  3977 ;;		Nothing
  3978 ;; This function is called by:
  3979 ;;		_send_nibble
  3980 ;; This function uses a non-reentrant model
  3981 ;;
  3982                           
  3983                           	psect	text18
  3984  0010AA                     __ptext18:
  3985                           	opt callstack 0
  3986  0010AA                     _pulse_e:
  3987                           	opt callstack 22
  3988                           
  3989                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  3990                           
  3991                           ;incstack = 0
  3992  0010AA  0E00               	movlw	0
  3993  0010AC  BEF2               	btfsc	4082,7,c	;volatile
  3994  0010AE  0E01               	movlw	1
  3995  0010B0  6E0C               	movwf	pulse_e@interruptState,c
  3996                           
  3997                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  3998  0010B2  9EF2               	bcf	4082,7,c	;volatile
  3999                           
  4000                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  4001  0010B4  868C               	bsf	3980,3,c	;volatile
  4002                           
  4003                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  4004  0010B6  0E14               	movlw	20
  4005  0010B8                     u2537:
  4006  0010B8  2EE8               	decfsz	wreg,f,c
  4007  0010BA  D7FE               	bra	u2537
  4008  0010BC  D000               	nop2	
  4009                           
  4010                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  4011  0010BE  968C               	bcf	3980,3,c	;volatile
  4012                           
  4013                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  4014  0010C0  0E53               	movlw	83
  4015  0010C2                     u2547:
  4016  0010C2  2EE8               	decfsz	wreg,f,c
  4017  0010C4  D7FE               	bra	u2547
  4018  0010C6  F000               	nop	
  4019                           
  4020                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  4021  0010C8  B00C               	btfsc	pulse_e@interruptState,0,c
  4022  0010CA  D002               	bra	u1635
  4023  0010CC  9EF2               	bcf	4082,7,c	;volatile
  4024  0010CE  D001               	bra	u1636
  4025  0010D0                     u1635:
  4026  0010D0  8EF2               	bsf	4082,7,c	;volatile
  4027  0010D2                     u1636:
  4028  0010D2  0012               	return		;funcret
  4029  0010D4                     __end_of_pulse_e:
  4030                           	opt callstack 0
  4031                           
  4032 ;; *************** function ___awmod *****************
  4033 ;; Defined at:
  4034 ;;		line 7 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/awmod.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;  dividend        2   11[COMRAM] int 
  4037 ;;  divisor         2   13[COMRAM] int 
  4038 ;; Auto vars:     Size  Location     Type
  4039 ;;  sign            1   16[COMRAM] unsigned char 
  4040 ;;  counter         1   15[COMRAM] unsigned char 
  4041 ;; Return value:  Size  Location     Type
  4042 ;;                  2   11[COMRAM] int 
  4043 ;; Registers used:
  4044 ;;		wreg, status,2, status,0
  4045 ;; Tracked objects:
  4046 ;;		On entry : 0/0
  4047 ;;		On exit  : 0/0
  4048 ;;		Unchanged: 0/0
  4049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4050 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4051 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4053 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4054 ;;Total ram usage:        6 bytes
  4055 ;; Hardware stack levels used:    1
  4056 ;; Hardware stack levels required when called:    1
  4057 ;; This function calls:
  4058 ;;		Nothing
  4059 ;; This function is called by:
  4060 ;;		_main
  4061 ;; This function uses a non-reentrant model
  4062 ;;
  4063                           
  4064                           	psect	text19
  4065  000DA8                     __ptext19:
  4066                           	opt callstack 0
  4067  000DA8                     ___awmod:
  4068                           	opt callstack 29
  4069                           
  4070                           ;incstack = 0
  4071  000DA8  0E00               	movlw	0
  4072  000DAA  6E11               	movwf	___awmod@sign,c
  4073  000DAC  AE0D               	btfss	___awmod@dividend+1,7,c
  4074  000DAE  D006               	goto	l1912
  4075  000DB0  6C0C               	negf	___awmod@dividend,c
  4076  000DB2  1E0D               	comf	___awmod@dividend+1,f,c
  4077  000DB4  B0D8               	btfsc	status,0,c
  4078  000DB6  2A0D               	incf	___awmod@dividend+1,f,c
  4079  000DB8  0E01               	movlw	1
  4080  000DBA  6E11               	movwf	___awmod@sign,c
  4081  000DBC                     l1912:
  4082  000DBC  AE0F               	btfss	___awmod@divisor+1,7,c
  4083  000DBE  D004               	goto	l1916
  4084  000DC0  6C0E               	negf	___awmod@divisor,c
  4085  000DC2  1E0F               	comf	___awmod@divisor+1,f,c
  4086  000DC4  B0D8               	btfsc	status,0,c
  4087  000DC6  2A0F               	incf	___awmod@divisor+1,f,c
  4088  000DC8                     l1916:
  4089  000DC8  500E               	movf	___awmod@divisor,w,c
  4090  000DCA  100F               	iorwf	___awmod@divisor+1,w,c
  4091  000DCC  B4D8               	btfsc	status,2,c
  4092  000DCE  D018               	goto	l1932
  4093  000DD0  0E01               	movlw	1
  4094  000DD2  6E10               	movwf	___awmod@counter,c
  4095  000DD4  D004               	goto	l1922
  4096  000DD6                     l1920:
  4097  000DD6  90D8               	bcf	status,0,c
  4098  000DD8  360E               	rlcf	___awmod@divisor,f,c
  4099  000DDA  360F               	rlcf	___awmod@divisor+1,f,c
  4100  000DDC  2A10               	incf	___awmod@counter,f,c
  4101  000DDE                     l1922:
  4102  000DDE  AE0F               	btfss	___awmod@divisor+1,7,c
  4103  000DE0  D7FA               	goto	l1920
  4104  000DE2                     u1320:
  4105  000DE2  500E               	movf	___awmod@divisor,w,c
  4106  000DE4  5C0C               	subwf	___awmod@dividend,w,c
  4107  000DE6  500F               	movf	___awmod@divisor+1,w,c
  4108  000DE8  580D               	subwfb	___awmod@dividend+1,w,c
  4109  000DEA  A0D8               	btfss	status,0,c
  4110  000DEC  D004               	goto	l1928
  4111  000DEE  500E               	movf	___awmod@divisor,w,c
  4112  000DF0  5E0C               	subwf	___awmod@dividend,f,c
  4113  000DF2  500F               	movf	___awmod@divisor+1,w,c
  4114  000DF4  5A0D               	subwfb	___awmod@dividend+1,f,c
  4115  000DF6                     l1928:
  4116  000DF6  90D8               	bcf	status,0,c
  4117  000DF8  320F               	rrcf	___awmod@divisor+1,f,c
  4118  000DFA  320E               	rrcf	___awmod@divisor,f,c
  4119  000DFC  2E10               	decfsz	___awmod@counter,f,c
  4120  000DFE  D7F1               	goto	u1320
  4121  000E00                     l1932:
  4122  000E00  5011               	movf	___awmod@sign,w,c
  4123  000E02  B4D8               	btfsc	status,2,c
  4124  000E04  D004               	goto	l1936
  4125  000E06  6C0C               	negf	___awmod@dividend,c
  4126  000E08  1E0D               	comf	___awmod@dividend+1,f,c
  4127  000E0A  B0D8               	btfsc	status,0,c
  4128  000E0C  2A0D               	incf	___awmod@dividend+1,f,c
  4129  000E0E                     l1936:
  4130  000E0E  C00C  F00C         	movff	___awmod@dividend,?___awmod
  4131  000E12  C00D  F00D         	movff	___awmod@dividend+1,?___awmod+1
  4132  000E16  0012               	return		;funcret
  4133  000E18                     __end_of___awmod:
  4134                           	opt callstack 0
  4135                           
  4136 ;; *************** function _interruptHandler *****************
  4137 ;; Defined at:
  4138 ;;		line 224 in file "main.c"
  4139 ;; Parameters:    Size  Location     Type
  4140 ;;		None
  4141 ;; Auto vars:     Size  Location     Type
  4142 ;;  i               2    8[COMRAM] int 
  4143 ;;  keypress        1   10[COMRAM] unsigned char 
  4144 ;; Return value:  Size  Location     Type
  4145 ;;                  1    wreg      void 
  4146 ;; Registers used:
  4147 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4148 ;; Tracked objects:
  4149 ;;		On entry : 0/0
  4150 ;;		On exit  : 0/0
  4151 ;;		Unchanged: 0/0
  4152 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4154 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4155 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4156 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4157 ;;Total ram usage:       11 bytes
  4158 ;; Hardware stack levels used:    1
  4159 ;; This function calls:
  4160 ;;		Nothing
  4161 ;; This function is called by:
  4162 ;;		Interrupt level 2
  4163 ;; This function uses a non-reentrant model
  4164 ;;
  4165                           
  4166                           	psect	intcode
  4167  000008                     __pintcode:
  4168                           	opt callstack 0
  4169  000008                     _interruptHandler:
  4170                           	opt callstack 19
  4171                           
  4172                           ;incstack = 0
  4173  000008  8274               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4174  00000A  ED24  F006         	call	int_func,f	;refresh shadow registers
  4175                           
  4176                           	psect	intcode_body
  4177  000C48                     __pintcode_body:
  4178                           	opt callstack 19
  4179  000C48                     int_func:
  4180                           	opt callstack 19
  4181  000C48  0006               	pop		; remove dummy address from shadow register refresh
  4182  000C4A  CFF6 F005          	movff	tblptrl,??_interruptHandler+4
  4183  000C4E  CFF7 F006          	movff	tblptrh,??_interruptHandler+5
  4184  000C52  CFF8 F007          	movff	tblptru,??_interruptHandler+6
  4185  000C56  CFF5 F008          	movff	tablat,??_interruptHandler+7
  4186                           
  4187                           ;main.c: 226:     if(INT1IF){
  4188  000C5A  A0F0               	btfss	4080,0,c	;volatile
  4189  000C5C  D050               	goto	i2u162_40
  4190                           
  4191                           ;main.c: 230:         INT1IF = 0;
  4192  000C5E  90F0               	bcf	4080,0,c	;volatile
  4193                           
  4194                           ;main.c: 232:         unsigned char keypress = (PORTB & 0xF0) >> 4;
  4195  000C60  3881               	swapf	3969,w,c	;volatile
  4196  000C62  0B0F               	andlw	15
  4197  000C64  0B0F               	andlw	15
  4198  000C66  6E0B               	movwf	interruptHandler@keypress,c
  4199                           
  4200                           ;main.c: 234:         if (keys[keypress] == 'A') {
  4201  000C68  0EC7               	movlw	low _keys
  4202  000C6A  240B               	addwf	interruptHandler@keypress,w,c
  4203  000C6C  6EF6               	movwf	tblptrl,c
  4204  000C6E  6AF7               	clrf	tblptrh,c
  4205  000C70  0EFE               	movlw	high _keys
  4206  000C72  22F7               	addwfc	tblptrh,f,c
  4207  000C74                     	if	0	;There are less than 3 active tblptr bytes
  4208  000C74                     	endif
  4209  000C74  0008               	tblrd		*
  4210  000C76  50F5               	movf	tablat,w,c
  4211  000C78  0A41               	xorlw	65
  4212  000C7A  A4D8               	btfss	status,2,c
  4213  000C7C  D004               	goto	i2l2212
  4214                           
  4215                           ;main.c: 236:             start = 1;
  4216  000C7E  0E01               	movlw	1
  4217  000C80  0100               	movlb	0	; () banked
  4218  000C82  6FC2               	movwf	_start& (0+255),b	;volatile
  4219  000C84  D03C               	goto	i2u162_40
  4220  000C86                     i2l2212:
  4221                           
  4222                           ;main.c: 240:         if (keys[keypress] == '*') {
  4223  000C86  0EC7               	movlw	low _keys
  4224  000C88  240B               	addwf	interruptHandler@keypress,w,c
  4225  000C8A  6EF6               	movwf	tblptrl,c
  4226  000C8C  6AF7               	clrf	tblptrh,c
  4227  000C8E  0EFE               	movlw	high _keys
  4228  000C90  22F7               	addwfc	tblptrh,f,c
  4229  000C92                     	if	0	;There are less than 3 active tblptr bytes
  4230  000C92                     	endif
  4231  000C92  0008               	tblrd		*
  4232  000C94  50F5               	movf	tablat,w,c
  4233  000C96  0A2A               	xorlw	42
  4234  000C98  A4D8               	btfss	status,2,c
  4235  000C9A  D004               	goto	i2l2218
  4236                           
  4237                           ;main.c: 242:             exit_key = 1;
  4238  000C9C  0E01               	movlw	1
  4239  000C9E  0100               	movlb	0	; () banked
  4240  000CA0  6FC3               	movwf	_exit_key& (0+255),b	;volatile
  4241  000CA2  D02D               	goto	i2u162_40
  4242  000CA4                     i2l2218:
  4243                           
  4244                           ;main.c: 246:         for ( int i = 0; i < Canister; i++ ) {
  4245  000CA4  0E00               	movlw	0
  4246  000CA6  6E0A               	movwf	interruptHandler@i+1,c
  4247  000CA8  0E00               	movlw	0
  4248  000CAA  6E09               	movwf	interruptHandler@i,c
  4249  000CAC  D01D               	goto	i2l2228
  4250  000CAE                     i2l2220:
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;main.c: 248:             if ((char)i + '0' == keys[keypress]) {
  4254  000CAE  0EC7               	movlw	low _keys
  4255  000CB0  240B               	addwf	interruptHandler@keypress,w,c
  4256  000CB2  6EF6               	movwf	tblptrl,c
  4257  000CB4  6AF7               	clrf	tblptrh,c
  4258  000CB6  0EFE               	movlw	high _keys
  4259  000CB8  22F7               	addwfc	tblptrh,f,c
  4260  000CBA                     	if	0	;There are less than 3 active tblptr bytes
  4261  000CBA                     	endif
  4262  000CBA  0008               	tblrd		*
  4263  000CBC  50F5               	movf	tablat,w,c
  4264  000CBE  6E01               	movwf	??_interruptHandler& (0+255),c
  4265  000CC0  6A02               	clrf	(??_interruptHandler+1)& (0+255),c
  4266  000CC2  5009               	movf	interruptHandler@i,w,c
  4267  000CC4  6E03               	movwf	(??_interruptHandler+2)& (0+255),c
  4268  000CC6  6A04               	clrf	(??_interruptHandler+3)& (0+255),c
  4269  000CC8  0E30               	movlw	48
  4270  000CCA  2603               	addwf	??_interruptHandler+2,f,c
  4271  000CCC  0E00               	movlw	0
  4272  000CCE  2204               	addwfc	??_interruptHandler+3,f,c
  4273  000CD0  5001               	movf	??_interruptHandler,w,c
  4274  000CD2  1803               	xorwf	??_interruptHandler+2,w,c
  4275  000CD4  E107               	bnz	i2l2226
  4276  000CD6  5002               	movf	??_interruptHandler+1,w,c
  4277  000CD8  1804               	xorwf	??_interruptHandler+3,w,c
  4278  000CDA  A4D8               	btfss	status,2,c
  4279  000CDC  D003               	goto	i2l2226
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;main.c: 249:                 key_was_pressed = 1;
  4283  000CDE  0E01               	movlw	1
  4284  000CE0  6FC4               	movwf	_key_was_pressed& (0+255),b	;volatile
  4285  000CE2  D00D               	goto	i2u162_40
  4286  000CE4                     i2l2226:
  4287                           
  4288                           ; BSR set to: 0
  4289                           ;main.c: 253:         }
  4290  000CE4  4A09               	infsnz	interruptHandler@i,f,c
  4291  000CE6  2A0A               	incf	interruptHandler@i+1,f,c
  4292  000CE8                     i2l2228:
  4293  000CE8  0100               	movlb	0	; () banked
  4294  000CEA  51BE               	movf	_Canister& (0+255),w,b
  4295  000CEC  5C09               	subwf	interruptHandler@i,w,c
  4296  000CEE  500A               	movf	interruptHandler@i+1,w,c
  4297  000CF0  0A80               	xorlw	128
  4298  000CF2  6E01               	movwf	??_interruptHandler& (0+255),c
  4299  000CF4  51BF               	movf	(_Canister+1)& (0+255),w,b
  4300  000CF6  0A80               	xorlw	128
  4301  000CF8  5801               	subwfb	??_interruptHandler& (0+255),w,c
  4302  000CFA  A0D8               	btfss	status,0,c
  4303  000CFC  D7D8               	goto	i2l2220
  4304  000CFE                     i2u162_40:
  4305  000CFE  C008  FFF5         	movff	??_interruptHandler+7,tablat
  4306  000D02  C007  FFF8         	movff	??_interruptHandler+6,tblptru
  4307  000D06  C006  FFF7         	movff	??_interruptHandler+5,tblptrh
  4308  000D0A  C005  FFF6         	movff	??_interruptHandler+4,tblptrl
  4309  000D0E  9274               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4310  000D10  0011               	retfie		f
  4311  000D12                     __end_of_interruptHandler:
  4312                           	opt callstack 0
  4313                           
  4314                           	psect	rparam
  4315  0000                     
  4316                           	psect	temp
  4317  000074                     btemp:
  4318                           	opt callstack 0
  4319  000074                     	ds	1
  4320  0000                     int$flags	set	btemp
  4321  0000                     wtemp8	set	btemp+1
  4322  0000                     ttemp5	set	btemp+1
  4323  0000                     ttemp6	set	btemp+4
  4324  0000                     ttemp7	set	btemp+8
  4325                           tosu	equ	0xFFF
  4326                           tosh	equ	0xFFE
  4327                           tosl	equ	0xFFD
  4328                           stkptr	equ	0xFFC
  4329                           pclatu	equ	0xFFB
  4330                           pclath	equ	0xFFA
  4331                           pcl	equ	0xFF9
  4332                           tblptru	equ	0xFF8
  4333                           tblptrh	equ	0xFF7
  4334                           tblptrl	equ	0xFF6
  4335                           tablat	equ	0xFF5
  4336                           prodh	equ	0xFF4
  4337                           prodl	equ	0xFF3
  4338                           indf0	equ	0xFEF
  4339                           postinc0	equ	0xFEE
  4340                           postdec0	equ	0xFED
  4341                           preinc0	equ	0xFEC
  4342                           plusw0	equ	0xFEB
  4343                           fsr0h	equ	0xFEA
  4344                           fsr0l	equ	0xFE9
  4345                           wreg	equ	0xFE8
  4346                           indf1	equ	0xFE7
  4347                           postinc1	equ	0xFE6
  4348                           postdec1	equ	0xFE5
  4349                           preinc1	equ	0xFE4
  4350                           plusw1	equ	0xFE3
  4351                           fsr1h	equ	0xFE2
  4352                           fsr1l	equ	0xFE1
  4353                           bsr	equ	0xFE0
  4354                           indf2	equ	0xFDF
  4355                           postinc2	equ	0xFDE
  4356                           postdec2	equ	0xFDD
  4357                           preinc2	equ	0xFDC
  4358                           plusw2	equ	0xFDB
  4359                           fsr2h	equ	0xFDA
  4360                           fsr2l	equ	0xFD9
  4361                           status	equ	0xFD8


Data Sizes:
    Strings     288
    Constant    23
    Data        66
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    107     115
    BANK0           128     21     122
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_27(CODE[10]), STR_26(CODE[14]), STR_25(CODE[11]), STR_24(CODE[12]), 
		 -> STR_23(CODE[10]), STR_22(CODE[15]), STR_21(CODE[14]), STR_20(CODE[12]), 
		 -> STR_19(CODE[10]), STR_18(CODE[15]), STR_17(CODE[12]), STR_16(CODE[15]), 
		 -> STR_15(CODE[12]), STR_14(CODE[16]), STR_13(CODE[9]), STR_12(CODE[9]), 
		 -> STR_11(CODE[11]), STR_10(CODE[13]), STR_9(CODE[15]), STR_8(CODE[11]), 
		 -> STR_7(CODE[15]), STR_6(CODE[12]), STR_5(CODE[10]), STR_4(CODE[19]), 
		 -> STR_3(CODE[17]), STR_2(CODE[13]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S787_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 19
		 -> STR_27(CODE[10]), STR_26(CODE[14]), STR_25(CODE[11]), STR_24(CODE[12]), 
		 -> STR_23(CODE[10]), STR_22(CODE[15]), STR_21(CODE[14]), STR_20(CODE[12]), 
		 -> STR_19(CODE[10]), STR_18(CODE[15]), STR_17(CODE[12]), STR_16(CODE[15]), 
		 -> STR_15(CODE[12]), STR_14(CODE[16]), STR_13(CODE[9]), STR_12(CODE[9]), 
		 -> STR_11(CODE[11]), STR_10(CODE[13]), STR_9(CODE[15]), STR_8(CODE[11]), 
		 -> STR_7(CODE[15]), STR_6(CODE[12]), STR_5(CODE[10]), STR_4(CODE[19]), 
		 -> STR_3(CODE[17]), STR_2(CODE[13]), STR_1(CODE[11]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 19
		 -> STR_27(CODE[10]), STR_26(CODE[14]), STR_25(CODE[11]), STR_24(CODE[12]), 
		 -> STR_23(CODE[10]), STR_22(CODE[15]), STR_21(CODE[14]), STR_20(CODE[12]), 
		 -> STR_19(CODE[10]), STR_18(CODE[15]), STR_17(CODE[12]), STR_16(CODE[15]), 
		 -> STR_15(CODE[12]), STR_14(CODE[16]), STR_13(CODE[9]), STR_12(CODE[9]), 
		 -> STR_11(CODE[11]), STR_10(CODE[13]), STR_9(CODE[15]), STR_8(CODE[11]), 
		 -> STR_7(CODE[15]), STR_6(CODE[12]), STR_5(CODE[10]), STR_4(CODE[19]), 
		 -> STR_3(CODE[17]), STR_2(CODE[13]), STR_1(CODE[11]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   16982
                                              4 BANK0     17    17      0
                            ___awmod
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4   15176
                                            103 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   12659
                                             95 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6   12177
                                             78 COMRAM    17    11      6
                               _ctoa
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    6083
                                             42 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             29 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                             11 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                             11 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     4      3    4096
                                             42 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3817
                                             31 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1602
                                             24 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1102
                                             15 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     350
                                             15 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _send_byte                                            1     1      0     127
                                             13 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (7) _send_nibble                                          1     1      0      65
                                             12 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (8) _pulse_e                                              1     1      0      34
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     448
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _interruptHandler                                   11    11      0     113
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     15      7A       5       95.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6B      73       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      ED      34        0.0%
DATA                 0      0      ED       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Feb  2 21:20:18 2019

              __CFG_CPD$ON 000000                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l165 0D40                        l183 0626  
                      l185 062E                        l896 1076               __CFG_CPB$OFF 000000  
                      _abs 104E                        _pad 0D12               ___awmod@sign 0011  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     ?_abs 001E                       l2300 0D8E                       l2330 0A6A  
                     l2322 0A30                       l2340 0AC6                       l2316 0A08  
                     l2500 0990                       l2270 1036                       l2422 0648  
                     l2256 0E30                       l2328 0A56                       l2344 0ADC  
                     l2360 0B50                       l2408 060A                       l2266 1020  
                     l2274 108A                       l2290 0D38                       l2370 0BA2  
                     l2426 0658                       l2506 09A8                       l2522 0F00  
                     l2276 108E                       l2292 0D4A                       l2348 0B02  
                     l2380 0C00                       l2364 0B74                       l2460 07CC  
                     l2436 0750                       l2524 0F24                       l2700 02EE  
                     l2286 0D2A                       l1920 0DD6                       l1912 0DBC  
                     l2296 0D62                       l2392 0F52                       l2384 0C26  
                     l2376 0BEA                       l2368 0B8E                       l2456 07B4  
                     l2480 0898                       l2712 0334                       l1922 0DDE  
                     l2394 0F5E                       l2490 094A                       l2642 01B2  
                     l1932 0E00                       l1916 0DC8                       l2732 03C8  
                     l2660 0210                       l2750 044E                       l1936 0E0E  
                     l1928 0DF6                       l2496 0986                       l2808 059E  
                     l2680 027C                       l2772 04E6                       l2780 050E  
                     l2748 0442                       l2756 046A                       l2790 054E  
                     l2774 04F2                       l2598 007C                       ?_pad 0020  
                     l2794 0564                       l2798 0574                       STR_1 FFCD  
                     STR_2 FF79                       STR_3 FEF1                       STR_4 FEDE  
                     STR_5 FFD8                       STR_6 FF9F                       STR_7 FF21  
                     STR_8 FFB7                       STR_9 FF3F                       u2000 0792  
                     u2020 079E                       u1320 0DE2                       u2070 08CC  
                     _LATD 000F8C                       u2407 0178                       u2417 01D0  
                     u2337 0054                       u1650 0E28                       u1635 10D0  
                     u2507 0EA2                       u2427 0230                       u2347 0092  
                     u1636 10D2                       u1740 105C                       u1900 05DE  
                     u2517 0EB4                       u2437 029C                       u2357 00B4  
                     u1670 0E70                       u2527 0ED6                       u2447 0352  
                     u2367 00E0                       u2537 10B8                       u2457 03E6  
                     u2377 00FC                       u1850 0BA6                       u1930 061C  
                     u2547 10C2                       u1771 0A36                       u2467 048A  
                     u2387 011E                       u2477 055A                       u2397 014A  
                     u1790 0A6E                       u1950 0642                       u2487 05AA  
                     u1960 075E                       u2497 0E8A                       u1890 05DC  
                     u1980 0780                       u1981 077E                       u1990 078E  
                     abs@a 001E                       _dbuf 00C5                       _ctoa 0F40  
                     _main 0012                       _dtoa 05B4   __end_of_interruptHandler 0D12  
                     _keys FEC7                       _prec 0070                       _time 00C0  
                     _nout 006C                       pad@i 0027                       pad@p 0024  
                     fsr1h 000FE2                       fsr2h 000FDA                       indf2 000FDF  
                     fsr1l 000FE1                       pad@w 0029                       fsr2l 000FD9  
                     btemp 0074                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                      ??_abs 0020  
                    ??_pad 0026            __end_of___aodiv 0B24                      ?_ctoa 002B  
                    ?_main 0001                      ?_dtoa 002B            __end_of___aomod 0C48  
                    STR_10 FF86                      STR_11 FFC2                      STR_20 FF93  
                    STR_12 FFEC                      STR_13 FFF5                      STR_21 FF6B  
                    STR_22 FF4E                      STR_14 FF02                      STR_23 FFE2  
                    STR_15 FFAB                      STR_24 FF93                      STR_16 FF12  
                    STR_25 FF60                      STR_17 FF93                      STR_26 FF5D  
                    STR_18 FF30                      STR_27 FFE2                      STR_19 FFE2  
          __end_of___awmod 0E18               vfpfcnvrt@fmt 0051                      _PORTB 000F81  
                    _TRISD 000F95              __CFG_PWRT$OFF 000000               main@miniTick 00ED  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 113C             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
             main@keypress 00F3             __CFG_EBTR3$OFF 000000                      _State 00A8  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
                    _balls 00BC            __end_of_initLCD 0EEE             __CFG_EBTRB$OFF 000000  
                    _flags 0072              _BallDispensed 0080                      _fputc 0E18  
                    _fputs 1016                      pad@fp 0020                      _width 006E  
                    ctoa@c 002D                      _putch 1124                      _start 00C2  
                    ctoa@w 002E                      dtoa@d 002D                      dtoa@i 004D  
                    dtoa@n 0045                      dtoa@p 003F                      dtoa@s 0043  
                    dtoa@w 0041                      tablat 000FF5            send_nibble@data 000D  
          __end_of_pulse_e 10D4                      ttemp5 0075                      ttemp6 0078  
                    ttemp7 007C                      status 000FD8                      wtemp8 0075  
           __CFG_PBADEN$ON 000000         main@number_pressed 00EF            __initialization 0F8E  
             __end_of_ctoa 0F8E               __end_of_main 05B4               __end_of_dtoa 07F6  
             __end_of_keys FED8                     ??_ctoa 002E                     ??_main 00E9  
                   ??_dtoa 0035              __activetblptr 000002                     _ADCON1 000FC1  
             ?_send_nibble 0001                     ?_fputc 0010                     ?_fputs 0019  
                   ?_putch 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l2220 0CAE                     i2l2212 0C86                     i2l2226 0CE4  
                   i2l2218 0CA4                     i2l2228 0CE8              main@miniClear 00F1  
            main@miniState 00F4             __CFG_XINST$OFF 000000               vfprintf@cfmt 0066  
                ??___aodiv 001C                  ??___aomod 001C             __CFG_STVREN$ON 000000  
                ??___awmod 0010                     clear_0 0FB4                     clear_1 0FC0  
          ___awmod@divisor 000E            ___awmod@counter 0010                  ??_lcdInst 000F  
                   _printf 10D4                     pad@buf 0022                     ctoa@fp 002B  
                   dtoa@fp 002B                     _strlen 1080                  ??_initLCD 0010  
                   fputc@c 0010                     fputs@c 001D                     fputs@i 001E  
                   fputs@s 0019               __mediumconst FEC6                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8           __end_of_vfprintf 0F40  
                ??_pulse_e 000C      pulse_e@interruptState 000C                 __accesstop 0080  
  __end_of__initialization 0FC6              ___rparam_used 000001             __pcstackCOMRAM 0001  
             __pidataBANK0 0FD4              __end_of_fputc 0E84              __end_of_fputs 104E  
            __end_of_putch 1130            _key_was_pressed 00C4                    ??_fputc 0014  
                  ??_fputs 001D                    ??_putch 000F                 __pbssBANK0 00C2  
        ?_interruptHandler 0001         ??_interruptHandler 0001         __size_of_send_byte 0012  
                  ?_printf 0068                    ?_strlen 000C         __size_of_vfpfcnvrt 01E6  
     __size_of_send_nibble 0016           _DistanceCanister 0094                    __Hparam 0000  
                  __Lparam 0000                    ___aodiv 09DC                    ___aomod 0B24  
                  ___awmod 0DA8                  ?_vfprintf 0060   interruptHandler@keypress 000B  
                  __pcinit 0F8E                    __ramtop 1000                    _lcdInst 1130  
                  __ptext0 0012                    __ptext1 10D4                    __ptext2 0EEE  
                  __ptext3 07F6                    __ptext4 05B4                    __ptext5 104E  
                  __ptext6 0B24                    __ptext7 09DC                    __ptext8 0F40  
                  __ptext9 0D12            __size_of_printf 0028            __size_of_strlen 002A  
                  _initLCD 0E84               __size_of_abs 0032               __size_of_pad 0096  
         ___awmod@dividend 000C                    _pulse_e 10AA             __pintcode_body 0C48  
     end_of_initialization 0FC6      __end_of_LCD_SIZE_HORZ FEDE          __end_of_send_byte 1124  
    __end_of_LCD_SIZE_VERT FEDD                    fputc@fp 0012              __Lmediumconst FEC6  
                  int_func 0C48                    fputs@fp 001B          __end_of_vfpfcnvrt 09DC  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                 ??_vfprintf 0066  
                  strlen@a 000E                    strlen@s 000C              send_byte@data 000E  
              vfpfcnvrt@ap 0053                vfpfcnvrt@fp 004F                vfpfcnvrt@ll 0057  
           __end_of_printf 10FC             __end_of_strlen 10AA        start_initialization 0F8E  
              __end_of_abs 1080                __end_of_pad 0DA8          interruptHandler@i 0009  
              vfprintf@fmt 0062                __pdataBANK0 0080           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 006C  __size_of_interruptHandler 0D0A                   ??_strlen 000E  
              __pbssCOMRAM 006C              __pcstackBANK0 00E5           ___aodiv@dividend 000C  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008              __pmediumconst FEC6  
                 ?___aodiv 000C                   ?___aomod 000C           ___aodiv@quotient 001E  
                 ?___awmod 000C                   ?_lcdInst 0001          __size_of_vfprintf 0052  
                 ?_initLCD 0001              ??_send_nibble 000D                   ?_pulse_e 0001  
           __size_of_fputc 006C             __size_of_fputs 0038             __size_of_putch 000C  
                 _LATDbits 000F8C                  _send_byte 1112             _LCD_LINE1_ADDR FEDB  
           _LCD_LINE2_ADDR FEDA             _LCD_LINE3_ADDR FED9             _LCD_LINE4_ADDR FED8  
                 i2u162_40 0CFE           __CFG_WDTPS$32768 000000                  _vfpfcnvrt 07F6  
                main@clear 00F6                   _Canister 00BE                  main@state 00F8  
               vfpfcnvrt@c 005F                  copy_data0 0FA2     __end_of_LCD_LINE1_ADDR FEDC  
   __end_of_LCD_LINE2_ADDR FEDB     __end_of_LCD_LINE3_ADDR FEDA     __end_of_LCD_LINE4_ADDR FED9  
      __end_of_send_nibble 1112                 ?_send_byte 0001                   __Hrparam 0000  
               vfprintf@ap 0064                   __Lrparam 0000                 vfprintf@fp 0060  
       __CFG_BOREN$SBORDIS 000000           __size_of___aodiv 0148           __size_of___aomod 0124  
         __size_of___awmod 0070                 ?_vfpfcnvrt 004F            ___aodiv@divisor 0014  
         _interruptHandler 0008            ___aodiv@counter 001C           __size_of_lcdInst 000C  
         __size_of_initLCD 006A                   _dtoa$326 003D                   __ptext10 1080  
                 __ptext11 1016                   __ptext12 0E18                   __ptext13 1124  
                 __ptext14 0E84                   __ptext15 1130                   __ptext16 1112  
                 __ptext17 10FC                   __ptext18 10AA                   __ptext19 0DA8  
         __size_of_pulse_e 002A              __size_of_ctoa 004E              __size_of_main 05A2  
            __size_of_dtoa 0242                   _exit_key 00C3                   int$flags 0074  
                 _vfprintf 0EEE                  printf@fmt 0068                   main@tick 00EB  
         ___aomod@dividend 000C                  putch@data 000F                 _INTCONbits 000FF2  
              _send_nibble 10FC                   intlevel2 0000              _LCD_SIZE_HORZ FEDD  
            _LCD_SIZE_VERT FEDC                ??_send_byte 000E                   printf@ap 00E7  
          ___aomod@divisor 0014                ??_vfpfcnvrt 0055                lcdInst@data 000F  
          ___aomod@counter 001C               ___aodiv@sign 001D               ___aomod@sign 001D  
