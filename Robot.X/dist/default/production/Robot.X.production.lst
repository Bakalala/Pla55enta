

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Feb  2 21:21:35 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataBANK0
    75  000FE6                     __pidataBANK0:
    76                           	opt callstack 0
    77                           
    78                           ;initializer for _BallDispensed
    79  000FE6  0001               	dw	1
    80  000FE8  0001               	dw	1
    81  000FEA  0001               	dw	1
    82  000FEC  0000               	dw	0
    83  000FEE  0000               	dw	0
    84  000FF0  0001               	dw	1
    85  000FF2  0001               	dw	1
    86  000FF4  0000               	dw	0
    87  000FF6  FFFF               	dw	65535
    88  000FF8  FFFF               	dw	65535
    89                           
    90                           ;initializer for _DistanceCanister
    91  000FFA  0014               	dw	20
    92  000FFC  001E               	dw	30
    93  000FFE  0028               	dw	40
    94  001000  003B               	dw	59
    95  001002  007B               	dw	123
    96  001004  00D4               	dw	212
    97  001006  014C               	dw	332
    98  001008  0190               	dw	400
    99  00100A  FFFF               	dw	65535
   100  00100C  FFFF               	dw	65535
   101                           
   102                           ;initializer for _State
   103  00100E  0001               	dw	1
   104  001010  0001               	dw	1
   105  001012  0001               	dw	1
   106  001014  0000               	dw	0
   107  001016  0000               	dw	0
   108  001018  0001               	dw	1
   109  00101A  0001               	dw	1
   110  00101C  0000               	dw	0
   111  00101E  FFFF               	dw	65535
   112  001020  FFFF               	dw	65535
   113                           
   114                           ;initializer for _balls
   115  001022  0005               	dw	5
   116                           
   117                           ;initializer for _Canister
   118  001024  0008               	dw	8
   119                           
   120                           ;initializer for _time
   121  001026  001E               	dw	30
   122                           
   123                           	psect	mediumconst
   124  00FEC2                     __pmediumconst:
   125                           	opt callstack 0
   126  00FEC2  00                 	db	0
   127  00FEC3                     _keys:
   128                           	opt callstack 0
   129  00FEC3  31                 	db	49
   130  00FEC4  32                 	db	50
   131  00FEC5  33                 	db	51
   132  00FEC6  41                 	db	65
   133  00FEC7  34                 	db	52
   134  00FEC8  35                 	db	53
   135  00FEC9  36                 	db	54
   136  00FECA  42                 	db	66
   137  00FECB  37                 	db	55
   138  00FECC  38                 	db	56
   139  00FECD  39                 	db	57
   140  00FECE  43                 	db	67
   141  00FECF  2A                 	db	42
   142  00FED0  30                 	db	48
   143  00FED1  23                 	db	35
   144  00FED2  44                 	db	68
   145  00FED3  00                 	db	0
   146  00FED4                     __end_of_keys:
   147                           	opt callstack 0
   148  00FED4  50                 	db	80
   149  00FED5                     __end_of_LCD_LINE4_ADDR:
   150                           	opt callstack 0
   151  00FED5  10                 	db	16
   152  00FED6                     __end_of_LCD_LINE3_ADDR:
   153                           	opt callstack 0
   154  00FED6  40                 	db	64
   155  00FED7                     __end_of_LCD_LINE2_ADDR:
   156                           	opt callstack 0
   157  00FED7  00                 	db	0
   158  00FED8                     __end_of_LCD_LINE1_ADDR:
   159                           	opt callstack 0
   160  00FED8                     _LCD_SIZE_VERT:
   161                           	opt callstack 0
   162  00FED8  04                 	db	4
   163  00FED9                     __end_of_LCD_SIZE_VERT:
   164                           	opt callstack 0
   165  00FED9                     _LCD_SIZE_HORZ:
   166                           	opt callstack 0
   167  00FED9  10                 	db	16
   168  00FEDA                     __end_of_LCD_SIZE_HORZ:
   169                           	opt callstack 0
   170  0000                     _PORTB	set	3969
   171  0000                     _ADCON1	set	4033
   172  0000                     _TRISD	set	3989
   173  0000                     _LATD	set	3980
   174  0000                     _LATDbits	set	3980
   175  0000                     _INTCONbits	set	4082
   176  0000                     _INT1IF	set	32640
   177  0000                     _INT1IE	set	32643
   178  00FEDA                     STR_3:
   179  00FEDA  49                 	db	73	;'I'
   180  00FEDB  74                 	db	116	;'t'
   181  00FEDC  27                 	db	39
   182  00FEDD  73                 	db	115	;'s'
   183  00FEDE  20                 	db	32
   184  00FEDF  79                 	db	121	;'y'
   185  00FEE0  61                 	db	97	;'a'
   186  00FEE1  20                 	db	32
   187  00FEE2  62                 	db	98	;'b'
   188  00FEE3  6F                 	db	111	;'o'
   189  00FEE4  79                 	db	121	;'y'
   190  00FEE5  20                 	db	32
   191  00FEE6  41                 	db	65	;'A'
   192  00FEE7  6C                 	db	108	;'l'
   193  00FEE8  69                 	db	105	;'i'
   194  00FEE9  21                 	db	33
   195  00FEEA  00                 	db	0
   196  00FEEB                     STR_15:
   197  00FEEB  49                 	db	73	;'I'
   198  00FEEC  6E                 	db	110	;'n'
   199  00FEED  64                 	db	100	;'d'
   200  00FEEE  69                 	db	105	;'i'
   201  00FEEF  76                 	db	118	;'v'
   202  00FEF0  69                 	db	105	;'i'
   203  00FEF1  64                 	db	100	;'d'
   204  00FEF2  75                 	db	117	;'u'
   205  00FEF3  61                 	db	97	;'a'
   206  00FEF4  6C                 	db	108	;'l'
   207  00FEF5  20                 	db	32
   208  00FEF6  49                 	db	73	;'I'
   209  00FEF7  6E                 	db	110	;'n'
   210  00FEF8  66                 	db	102	;'f'
   211  00FEF9  6F                 	db	111	;'o'
   212  00FEFA  00                 	db	0
   213  00FEFB                     STR_17:
   214  00FEFB  50                 	db	80	;'P'
   215  00FEFC  72                 	db	114	;'r'
   216  00FEFD  65                 	db	101	;'e'
   217  00FEFE  73                 	db	115	;'s'
   218  00FEFF  73                 	db	115	;'s'
   219  00FF00  20                 	db	32
   220  00FF01  30                 	db	48	;'0'
   221  00FF02  20                 	db	32
   222  00FF03  74                 	db	116	;'t'
   223  00FF04  6F                 	db	111	;'o'
   224  00FF05  20                 	db	32
   225  00FF06  25                 	db	37
   226  00FF07  64                 	db	100	;'d'
   227  00FF08  20                 	db	32
   228  00FF09  00                 	db	0
   229  00FF0A                     STR_4:
   230  00FF0A  48                 	db	72	;'H'
   231  00FF0B  65                 	db	101	;'e'
   232  00FF0C  20                 	db	32
   233  00FF0D  67                 	db	103	;'g'
   234  00FF0E  65                 	db	101	;'e'
   235  00FF0F  74                 	db	116	;'t'
   236  00FF10  74                 	db	116	;'t'
   237  00FF11  69                 	db	105	;'i'
   238  00FF12  6E                 	db	110	;'n'
   239  00FF13  20                 	db	32
   240  00FF14  68                 	db	104	;'h'
   241  00FF15  6F                 	db	111	;'o'
   242  00FF16  74                 	db	116	;'t'
   243  00FF17  20                 	db	32
   244  00FF18  00                 	db	0
   245  00FF19                     STR_8:
   246  00FF19  4F                 	db	79	;'O'
   247  00FF1A  70                 	db	112	;'p'
   248  00FF1B  65                 	db	101	;'e'
   249  00FF1C  72                 	db	114	;'r'
   250  00FF1D  61                 	db	97	;'a'
   251  00FF1E  74                 	db	116	;'t'
   252  00FF1F  69                 	db	105	;'i'
   253  00FF20  6F                 	db	111	;'o'
   254  00FF21  6E                 	db	110	;'n'
   255  00FF22  20                 	db	32
   256  00FF23  54                 	db	84	;'T'
   257  00FF24  69                 	db	105	;'i'
   258  00FF25  6D                 	db	109	;'m'
   259  00FF26  65                 	db	101	;'e'
   260  00FF27  00                 	db	0
   261  00FF28                     STR_19:
   262  00FF28  44                 	db	68	;'D'
   263  00FF29  69                 	db	105	;'i'
   264  00FF2A  73                 	db	115	;'s'
   265  00FF2B  74                 	db	116	;'t'
   266  00FF2C  61                 	db	97	;'a'
   267  00FF2D  6E                 	db	110	;'n'
   268  00FF2E  63                 	db	99	;'c'
   269  00FF2F  65                 	db	101	;'e'
   270  00FF30  20                 	db	32
   271  00FF31  25                 	db	37
   272  00FF32  64                 	db	100	;'d'
   273  00FF33  20                 	db	32
   274  00FF34  63                 	db	99	;'c'
   275  00FF35  6D                 	db	109	;'m'
   276  00FF36  00                 	db	0
   277  00FF37                     STR_10:
   278  00FF37  23                 	db	35
   279  00FF38  20                 	db	32
   280  00FF39  6F                 	db	111	;'o'
   281  00FF3A  66                 	db	102	;'f'
   282  00FF3B  20                 	db	32
   283  00FF3C  43                 	db	67	;'C'
   284  00FF3D  61                 	db	97	;'a'
   285  00FF3E  6E                 	db	110	;'n'
   286  00FF3F  69                 	db	105	;'i'
   287  00FF40  73                 	db	115	;'s'
   288  00FF41  74                 	db	116	;'t'
   289  00FF42  65                 	db	101	;'e'
   290  00FF43  72                 	db	114	;'r'
   291  00FF44  73                 	db	115	;'s'
   292  00FF45  00                 	db	0
   293  00FF46                     STR_23:
   294  00FF46  43                 	db	67	;'C'
   295  00FF47  61                 	db	97	;'a'
   296  00FF48  6E                 	db	110	;'n'
   297  00FF49  69                 	db	105	;'i'
   298  00FF4A  73                 	db	115	;'s'
   299  00FF4B  74                 	db	116	;'t'
   300  00FF4C  65                 	db	101	;'e'
   301  00FF4D  72                 	db	114	;'r'
   302  00FF4E  20                 	db	32
   303  00FF4F  45                 	db	69	;'E'
   304  00FF50  6D                 	db	109	;'m'
   305  00FF51  70                 	db	112	;'p'
   306  00FF52  74                 	db	116	;'t'
   307  00FF53  79                 	db	121	;'y'
   308  00FF54  00                 	db	0
   309  00FF55                     STR_27:
   310  00FF55  4E                 	db	78	;'N'
   311  00FF56  6F                 	db	111	;'o'
   312  00FF57  20                 	db	32
   313  00FF58  42                 	db	66	;'B'
   314  00FF59  61                 	db	97	;'a'
   315  00FF5A  6C                 	db	108	;'l'
   316  00FF5B  6C                 	db	108	;'l'
   317  00FF5C  20                 	db	32
   318  00FF5D  41                 	db	65	;'A'
   319  00FF5E  64                 	db	100	;'d'
   320  00FF5F  64                 	db	100	;'d'
   321  00FF60  65                 	db	101	;'e'
   322  00FF61  64                 	db	100	;'d'
   323  00FF62  00                 	db	0
   324  00FF63                     STR_22:
   325  00FF63  43                 	db	67	;'C'
   326  00FF64  61                 	db	97	;'a'
   327  00FF65  6E                 	db	110	;'n'
   328  00FF66  69                 	db	105	;'i'
   329  00FF67  73                 	db	115	;'s'
   330  00FF68  74                 	db	116	;'t'
   331  00FF69  65                 	db	101	;'e'
   332  00FF6A  72                 	db	114	;'r'
   333  00FF6B  20                 	db	32
   334  00FF6C  46                 	db	70	;'F'
   335  00FF6D  75                 	db	117	;'u'
   336  00FF6E  6C                 	db	108	;'l'
   337  00FF6F  6C                 	db	108	;'l'
   338  00FF70  00                 	db	0
   339  00FF71                     STR_2:
   340  00FF71  41                 	db	65	;'A'
   341  00FF72  20                 	db	32
   342  00FF73  66                 	db	102	;'f'
   343  00FF74  6F                 	db	111	;'o'
   344  00FF75  72                 	db	114	;'r'
   345  00FF76  20                 	db	32
   346  00FF77  41                 	db	65	;'A'
   347  00FF78  6C                 	db	108	;'l'
   348  00FF79  69                 	db	105	;'i'
   349  00FF7A  20                 	db	32
   350  00FF7B  3B                 	db	59	;';'
   351  00FF7C  29                 	db	41
   352  00FF7D  00                 	db	0
   353  00FF7E                     STR_11:
   354  00FF7E  25                 	db	37
   355  00FF7F  64                 	db	100	;'d'
   356  00FF80  20                 	db	32
   357  00FF81  43                 	db	67	;'C'
   358  00FF82  61                 	db	97	;'a'
   359  00FF83  6E                 	db	110	;'n'
   360  00FF84  69                 	db	105	;'i'
   361  00FF85  73                 	db	115	;'s'
   362  00FF86  74                 	db	116	;'t'
   363  00FF87  65                 	db	101	;'e'
   364  00FF88  72                 	db	114	;'r'
   365  00FF89  73                 	db	115	;'s'
   366  00FF8A  00                 	db	0
   367  00FF8B                     STR_18:
   368  00FF8B  43                 	db	67	;'C'
   369  00FF8C  61                 	db	97	;'a'
   370  00FF8D  6E                 	db	110	;'n'
   371  00FF8E  73                 	db	115	;'s'
   372  00FF8F  69                 	db	105	;'i'
   373  00FF90  74                 	db	116	;'t'
   374  00FF91  65                 	db	101	;'e'
   375  00FF92  72                 	db	114	;'r'
   376  00FF93  20                 	db	32
   377  00FF94  25                 	db	37
   378  00FF95  63                 	db	99	;'c'
   379  00FF96  00                 	db	0
   380  00FF97                     STR_6:
   381  00FF97  41                 	db	65	;'A'
   382  00FF98  6C                 	db	108	;'l'
   383  00FF99  6D                 	db	109	;'m'
   384  00FF9A  6F                 	db	111	;'o'
   385  00FF9B  73                 	db	115	;'s'
   386  00FF9C  74                 	db	116	;'t'
   387  00FF9D  20                 	db	32
   388  00FF9E  64                 	db	100	;'d'
   389  00FF9F  6F                 	db	111	;'o'
   390  00FFA0  6E                 	db	110	;'n'
   391  00FFA1  65                 	db	101	;'e'
   392  00FFA2  00                 	db	0
   393  00FFA3                     STR_16:
   394  00FFA3  6F                 	db	111	;'o'
   395  00FFA4  66                 	db	102	;'f'
   396  00FFA5  20                 	db	32
   397  00FFA6  43                 	db	67	;'C'
   398  00FFA7  61                 	db	97	;'a'
   399  00FFA8  6E                 	db	110	;'n'
   400  00FFA9  69                 	db	105	;'i'
   401  00FFAA  73                 	db	115	;'s'
   402  00FFAB  74                 	db	116	;'t'
   403  00FFAC  65                 	db	101	;'e'
   404  00FFAD  72                 	db	114	;'r'
   405  00FFAE  00                 	db	0
   406  00FFAF                     STR_9:
   407  00FFAF  25                 	db	37
   408  00FFB0  64                 	db	100	;'d'
   409  00FFB1  20                 	db	32
   410  00FFB2  73                 	db	115	;'s'
   411  00FFB3  65                 	db	101	;'e'
   412  00FFB4  63                 	db	99	;'c'
   413  00FFB5  6F                 	db	111	;'o'
   414  00FFB6  6E                 	db	110	;'n'
   415  00FFB7  64                 	db	100	;'d'
   416  00FFB8  73                 	db	115	;'s'
   417  00FFB9  00                 	db	0
   418  00FFBA                     STR_12:
   419  00FFBA  23                 	db	35
   420  00FFBB  20                 	db	32
   421  00FFBC  6F                 	db	111	;'o'
   422  00FFBD  66                 	db	102	;'f'
   423  00FFBE  20                 	db	32
   424  00FFBF  42                 	db	66	;'B'
   425  00FFC0  61                 	db	97	;'a'
   426  00FFC1  6C                 	db	108	;'l'
   427  00FFC2  6C                 	db	108	;'l'
   428  00FFC3  73                 	db	115	;'s'
   429  00FFC4  00                 	db	0
   430  00FFC5                     STR_1:
   431  00FFC5  41                 	db	65	;'A'
   432  00FFC6  20                 	db	32
   433  00FFC7  74                 	db	116	;'t'
   434  00FFC8  6F                 	db	111	;'o'
   435  00FFC9  20                 	db	32
   436  00FFCA  73                 	db	115	;'s'
   437  00FFCB  74                 	db	116	;'t'
   438  00FFCC  61                 	db	97	;'a'
   439  00FFCD  72                 	db	114	;'r'
   440  00FFCE  74                 	db	116	;'t'
   441  00FFCF  00                 	db	0
   442  00FFD0                     STR_5:
   443  00FFD0  48                 	db	72	;'H'
   444  00FFD1  69                 	db	105	;'i'
   445  00FFD2  20                 	db	32
   446  00FFD3  43                 	db	67	;'C'
   447  00FFD4  75                 	db	117	;'u'
   448  00FFD5  6C                 	db	108	;'l'
   449  00FFD6  6C                 	db	108	;'l'
   450  00FFD7  20                 	db	32
   451  00FFD8  21                 	db	33
   452  00FFD9  00                 	db	0
   453  00FFDA                     STR_20:
   454  00FFDA  2A                 	db	42
   455  00FFDB  20                 	db	32
   456  00FFDC  74                 	db	116	;'t'
   457  00FFDD  6F                 	db	111	;'o'
   458  00FFDE  20                 	db	32
   459  00FFDF  65                 	db	101	;'e'
   460  00FFE0  78                 	db	120	;'x'
   461  00FFE1  69                 	db	105	;'i'
   462  00FFE2  74                 	db	116	;'t'
   463  00FFE3  00                 	db	0
   464  00FFE4                     STR_7:
   465  00FFE4  41                 	db	65	;'A'
   466  00FFE5  4E                 	db	78	;'N'
   467  00FFE6  44                 	db	68	;'D'
   468  00FFE7  20                 	db	32
   469  00FFE8  44                 	db	68	;'D'
   470  00FFE9  4F                 	db	79	;'O'
   471  00FFEA  4E                 	db	78	;'N'
   472  00FFEB  45                 	db	69	;'E'
   473  00FFEC  00                 	db	0
   474  00FFED                     STR_13:
   475  00FFED  73                 	db	115	;'s'
   476  00FFEE  75                 	db	117	;'u'
   477  00FFEF  70                 	db	112	;'p'
   478  00FFF0  70                 	db	112	;'p'
   479  00FFF1  6C                 	db	108	;'l'
   480  00FFF2  69                 	db	105	;'i'
   481  00FFF3  65                 	db	101	;'e'
   482  00FFF4  64                 	db	100	;'d'
   483  00FFF5  00                 	db	0
   484  00FFF6                     STR_14:
   485  00FFF6  25                 	db	37
   486  00FFF7  64                 	db	100	;'d'
   487  00FFF8  20                 	db	32
   488  00FFF9  62                 	db	98	;'b'
   489  00FFFA  61                 	db	97	;'a'
   490  00FFFB  6C                 	db	108	;'l'
   491  00FFFC  6C                 	db	108	;'l'
   492  00FFFD  73                 	db	115	;'s'
   493  00FFFE  00                 	db	0
   494  0000                     
   495                           ; #config settings
   496  00FFFF  00                 	db	0	; dummy byte at the end
   497  0000                     
   498                           	psect	cinit
   499  000FA0                     __pcinit:
   500                           	opt callstack 0
   501  000FA0                     start_initialization:
   502                           	opt callstack 0
   503  000FA0                     __initialization:
   504                           	opt callstack 0
   505                           
   506                           ; Initialize objects allocated to BANK0 (66 bytes)
   507                           ; load TBLPTR registers with __pidataBANK0
   508  000FA0  0EE6               	movlw	low __pidataBANK0
   509  000FA2  6EF6               	movwf	tblptrl,c
   510  000FA4  0E0F               	movlw	high __pidataBANK0
   511  000FA6  6EF7               	movwf	tblptrh,c
   512  000FA8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   513  000FAA  6EF8               	movwf	tblptru,c
   514  000FAC  EE00  F080         	lfsr	0,__pdataBANK0
   515  000FB0  EE10 F042          	lfsr	1,66
   516  000FB4                     copy_data0:
   517  000FB4  0009               	tblrd		*+
   518  000FB6  CFF5 FFEE          	movff	tablat,postinc0
   519  000FBA  50E5               	movf	postdec1,w,c
   520  000FBC  50E1               	movf	fsr1l,w,c
   521  000FBE  E1FA               	bnz	copy_data0
   522                           
   523                           ; Clear objects allocated to BANK0 (35 bytes)
   524  000FC0  EE00  F0C2         	lfsr	0,__pbssBANK0
   525  000FC4  0E23               	movlw	35
   526  000FC6                     clear_0:
   527  000FC6  6AEE               	clrf	postinc0,c
   528  000FC8  06E8               	decf	wreg,f,c
   529  000FCA  E1FD               	bnz	clear_0
   530                           
   531                           ; Clear objects allocated to COMRAM (8 bytes)
   532  000FCC  EE00  F06C         	lfsr	0,__pbssCOMRAM
   533  000FD0  0E08               	movlw	8
   534  000FD2                     clear_1:
   535  000FD2  6AEE               	clrf	postinc0,c
   536  000FD4  06E8               	decf	wreg,f,c
   537  000FD6  E1FD               	bnz	clear_1
   538  000FD8                     end_of_initialization:
   539                           	opt callstack 0
   540  000FD8                     __end_of__initialization:
   541                           	opt callstack 0
   542  000FD8  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   543  000FDA  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   544  000FDC  0E00               	movlw	low (__Lmediumconst shr (0+16))
   545  000FDE  6EF8               	movwf	tblptru,c
   546  000FE0  0100               	movlb	0
   547  000FE2  EF09  F000         	goto	_main	;jump to C main() function
   548                           
   549                           	psect	bssCOMRAM
   550  00006C                     __pbssCOMRAM:
   551                           	opt callstack 0
   552  00006C                     _nout:
   553                           	opt callstack 0
   554  00006C                     	ds	2
   555  00006E                     _width:
   556                           	opt callstack 0
   557  00006E                     	ds	2
   558  000070                     _prec:
   559                           	opt callstack 0
   560  000070                     	ds	2
   561  000072                     _flags:
   562                           	opt callstack 0
   563  000072                     	ds	2
   564                           
   565                           	psect	bssBANK0
   566  0000C2                     __pbssBANK0:
   567                           	opt callstack 0
   568  0000C2                     _start:
   569                           	opt callstack 0
   570  0000C2                     	ds	1
   571  0000C3                     _exit_key:
   572                           	opt callstack 0
   573  0000C3                     	ds	1
   574  0000C4                     _key_was_pressed:
   575                           	opt callstack 0
   576  0000C4                     	ds	1
   577  0000C5                     _dbuf:
   578                           	opt callstack 0
   579  0000C5                     	ds	32
   580                           
   581                           	psect	dataBANK0
   582  000080                     __pdataBANK0:
   583                           	opt callstack 0
   584  000080                     _BallDispensed:
   585                           	opt callstack 0
   586  000080                     	ds	20
   587  000094                     _DistanceCanister:
   588                           	opt callstack 0
   589  000094                     	ds	20
   590  0000A8                     _State:
   591                           	opt callstack 0
   592  0000A8                     	ds	20
   593  0000BC                     _balls:
   594                           	opt callstack 0
   595  0000BC                     	ds	2
   596  0000BE                     _Canister:
   597                           	opt callstack 0
   598  0000BE                     	ds	2
   599  0000C0                     _time:
   600                           	opt callstack 0
   601  0000C0                     	ds	2
   602                           
   603                           	psect	cstackBANK0
   604  0000E5                     __pcstackBANK0:
   605                           	opt callstack 0
   606  0000E5                     	ds	2
   607  0000E7                     printf@ap:
   608                           	opt callstack 0
   609                           
   610                           ; 2 bytes @ 0x2
   611  0000E7                     	ds	2
   612  0000E9                     ??_main:
   613                           
   614                           ; 1 bytes @ 0x4
   615  0000E9                     	ds	2
   616  0000EB                     main@tick:
   617                           	opt callstack 0
   618                           
   619                           ; 2 bytes @ 0x6
   620  0000EB                     	ds	2
   621  0000ED                     main@miniTick:
   622                           	opt callstack 0
   623                           
   624                           ; 2 bytes @ 0x8
   625  0000ED                     	ds	2
   626  0000EF                     main@number_pressed:
   627                           	opt callstack 0
   628                           
   629                           ; 2 bytes @ 0xA
   630  0000EF                     	ds	2
   631  0000F1                     main@miniClear:
   632                           	opt callstack 0
   633                           
   634                           ; 2 bytes @ 0xC
   635  0000F1                     	ds	2
   636  0000F3                     main@keypress:
   637                           	opt callstack 0
   638                           
   639                           ; 1 bytes @ 0xE
   640  0000F3                     	ds	1
   641  0000F4                     main@miniState:
   642                           	opt callstack 0
   643                           
   644                           ; 2 bytes @ 0xF
   645  0000F4                     	ds	2
   646  0000F6                     main@clear:
   647                           	opt callstack 0
   648                           
   649                           ; 2 bytes @ 0x11
   650  0000F6                     	ds	2
   651  0000F8                     main@state:
   652                           	opt callstack 0
   653                           
   654                           ; 2 bytes @ 0x13
   655  0000F8                     	ds	2
   656                           
   657                           	psect	cstackCOMRAM
   658  000001                     __pcstackCOMRAM:
   659                           	opt callstack 0
   660  000001                     ??_interruptHandler:
   661                           
   662                           ; 1 bytes @ 0x0
   663  000001                     	ds	8
   664  000009                     interruptHandler@i:
   665                           	opt callstack 0
   666                           
   667                           ; 2 bytes @ 0x8
   668  000009                     	ds	2
   669  00000B                     interruptHandler@keypress:
   670                           	opt callstack 0
   671                           
   672                           ; 1 bytes @ 0xA
   673  00000B                     	ds	1
   674  00000C                     ?_strlen:
   675                           	opt callstack 0
   676  00000C                     ?___awmod:
   677                           	opt callstack 0
   678  00000C                     ?___aodiv:
   679                           	opt callstack 0
   680  00000C                     ?___aomod:
   681                           	opt callstack 0
   682  00000C                     pulse_e@interruptState:
   683                           	opt callstack 0
   684  00000C                     ___awmod@dividend:
   685                           	opt callstack 0
   686  00000C                     strlen@s:
   687                           	opt callstack 0
   688  00000C                     ___aodiv@dividend:
   689                           	opt callstack 0
   690  00000C                     ___aomod@dividend:
   691                           	opt callstack 0
   692                           
   693                           ; 8 bytes @ 0xB
   694  00000C                     	ds	1
   695  00000D                     send_nibble@data:
   696                           	opt callstack 0
   697                           
   698                           ; 1 bytes @ 0xC
   699  00000D                     	ds	1
   700  00000E                     send_byte@data:
   701                           	opt callstack 0
   702  00000E                     ___awmod@divisor:
   703                           	opt callstack 0
   704  00000E                     strlen@a:
   705                           	opt callstack 0
   706                           
   707                           ; 2 bytes @ 0xD
   708  00000E                     	ds	1
   709  00000F                     lcdInst@data:
   710                           	opt callstack 0
   711  00000F                     putch@data:
   712                           	opt callstack 0
   713                           
   714                           ; 1 bytes @ 0xE
   715  00000F                     	ds	1
   716  000010                     ??_initLCD:
   717  000010                     ___awmod@counter:
   718                           	opt callstack 0
   719  000010                     fputc@c:
   720                           	opt callstack 0
   721                           
   722                           ; 2 bytes @ 0xF
   723  000010                     	ds	1
   724  000011                     ___awmod@sign:
   725                           	opt callstack 0
   726                           
   727                           ; 1 bytes @ 0x10
   728  000011                     	ds	1
   729  000012                     fputc@fp:
   730                           	opt callstack 0
   731                           
   732                           ; 2 bytes @ 0x11
   733  000012                     	ds	2
   734  000014                     ??_fputc:
   735  000014                     ___aodiv@divisor:
   736                           	opt callstack 0
   737  000014                     ___aomod@divisor:
   738                           	opt callstack 0
   739                           
   740                           ; 8 bytes @ 0x13
   741  000014                     	ds	5
   742  000019                     fputs@s:
   743                           	opt callstack 0
   744                           
   745                           ; 2 bytes @ 0x18
   746  000019                     	ds	2
   747  00001B                     fputs@fp:
   748                           	opt callstack 0
   749                           
   750                           ; 2 bytes @ 0x1A
   751  00001B                     	ds	1
   752  00001C                     ___aodiv@counter:
   753                           	opt callstack 0
   754  00001C                     ___aomod@counter:
   755                           	opt callstack 0
   756                           
   757                           ; 1 bytes @ 0x1B
   758  00001C                     	ds	1
   759  00001D                     ___aodiv@sign:
   760                           	opt callstack 0
   761  00001D                     ___aomod@sign:
   762                           	opt callstack 0
   763  00001D                     fputs@c:
   764                           	opt callstack 0
   765                           
   766                           ; 1 bytes @ 0x1C
   767  00001D                     	ds	1
   768  00001E                     ?_abs:
   769                           	opt callstack 0
   770  00001E                     abs@a:
   771                           	opt callstack 0
   772  00001E                     fputs@i:
   773                           	opt callstack 0
   774  00001E                     ___aodiv@quotient:
   775                           	opt callstack 0
   776                           
   777                           ; 8 bytes @ 0x1D
   778  00001E                     	ds	2
   779  000020                     ??_abs:
   780  000020                     ?_pad:
   781                           	opt callstack 0
   782  000020                     pad@fp:
   783                           	opt callstack 0
   784                           
   785                           ; 2 bytes @ 0x1F
   786  000020                     	ds	2
   787  000022                     pad@buf:
   788                           	opt callstack 0
   789                           
   790                           ; 2 bytes @ 0x21
   791  000022                     	ds	2
   792  000024                     pad@p:
   793                           	opt callstack 0
   794                           
   795                           ; 2 bytes @ 0x23
   796  000024                     	ds	2
   797  000026                     ??_pad:
   798                           
   799                           ; 1 bytes @ 0x25
   800  000026                     	ds	1
   801  000027                     pad@i:
   802                           	opt callstack 0
   803                           
   804                           ; 2 bytes @ 0x26
   805  000027                     	ds	2
   806  000029                     pad@w:
   807                           	opt callstack 0
   808                           
   809                           ; 2 bytes @ 0x28
   810  000029                     	ds	2
   811  00002B                     ?_ctoa:
   812                           	opt callstack 0
   813  00002B                     ?_dtoa:
   814                           	opt callstack 0
   815  00002B                     ctoa@fp:
   816                           	opt callstack 0
   817  00002B                     dtoa@fp:
   818                           	opt callstack 0
   819                           
   820                           ; 2 bytes @ 0x2A
   821  00002B                     	ds	2
   822  00002D                     ctoa@c:
   823                           	opt callstack 0
   824  00002D                     dtoa@d:
   825                           	opt callstack 0
   826                           
   827                           ; 8 bytes @ 0x2C
   828  00002D                     	ds	1
   829  00002E                     ctoa@w:
   830                           	opt callstack 0
   831                           
   832                           ; 2 bytes @ 0x2D
   833  00002E                     	ds	7
   834  000035                     ??_dtoa:
   835                           
   836                           ; 1 bytes @ 0x34
   837  000035                     	ds	8
   838  00003D                     _dtoa$327:
   839                           	opt callstack 0
   840                           
   841                           ; 2 bytes @ 0x3C
   842  00003D                     	ds	2
   843  00003F                     dtoa@p:
   844                           	opt callstack 0
   845                           
   846                           ; 2 bytes @ 0x3E
   847  00003F                     	ds	2
   848  000041                     dtoa@w:
   849                           	opt callstack 0
   850                           
   851                           ; 2 bytes @ 0x40
   852  000041                     	ds	2
   853  000043                     dtoa@s:
   854                           	opt callstack 0
   855                           
   856                           ; 2 bytes @ 0x42
   857  000043                     	ds	2
   858  000045                     dtoa@n:
   859                           	opt callstack 0
   860                           
   861                           ; 8 bytes @ 0x44
   862  000045                     	ds	8
   863  00004D                     dtoa@i:
   864                           	opt callstack 0
   865                           
   866                           ; 2 bytes @ 0x4C
   867  00004D                     	ds	2
   868  00004F                     ?_vfpfcnvrt:
   869                           	opt callstack 0
   870  00004F                     vfpfcnvrt@fp:
   871                           	opt callstack 0
   872                           
   873                           ; 2 bytes @ 0x4E
   874  00004F                     	ds	2
   875  000051                     vfpfcnvrt@fmt:
   876                           	opt callstack 0
   877                           
   878                           ; 2 bytes @ 0x50
   879  000051                     	ds	2
   880  000053                     vfpfcnvrt@ap:
   881                           	opt callstack 0
   882                           
   883                           ; 2 bytes @ 0x52
   884  000053                     	ds	2
   885  000055                     ??_vfpfcnvrt:
   886                           
   887                           ; 1 bytes @ 0x54
   888  000055                     	ds	2
   889  000057                     vfpfcnvrt@ll:
   890                           	opt callstack 0
   891                           
   892                           ; 8 bytes @ 0x56
   893  000057                     	ds	8
   894  00005F                     vfpfcnvrt@c:
   895                           	opt callstack 0
   896                           
   897                           ; 1 bytes @ 0x5E
   898  00005F                     	ds	1
   899  000060                     ?_vfprintf:
   900                           	opt callstack 0
   901  000060                     vfprintf@fp:
   902                           	opt callstack 0
   903                           
   904                           ; 2 bytes @ 0x5F
   905  000060                     	ds	2
   906  000062                     vfprintf@fmt:
   907                           	opt callstack 0
   908                           
   909                           ; 2 bytes @ 0x61
   910  000062                     	ds	2
   911  000064                     vfprintf@ap:
   912                           	opt callstack 0
   913                           
   914                           ; 2 bytes @ 0x63
   915  000064                     	ds	2
   916  000066                     vfprintf@cfmt:
   917                           	opt callstack 0
   918                           
   919                           ; 2 bytes @ 0x65
   920  000066                     	ds	2
   921  000068                     ?_printf:
   922                           	opt callstack 0
   923  000068                     printf@fmt:
   924                           	opt callstack 0
   925                           
   926                           ; 2 bytes @ 0x67
   927  000068                     	ds	4
   928  00006C                     
   929                           ; 1 bytes @ 0x6B
   930 ;;
   931 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   932 ;;
   933 ;; *************** function _main *****************
   934 ;; Defined at:
   935 ;;		line 37 in file "main.c"
   936 ;; Parameters:    Size  Location     Type
   937 ;;		None
   938 ;; Auto vars:     Size  Location     Type
   939 ;;  miniState       2   15[BANK0 ] int 
   940 ;;  miniClear       2   12[BANK0 ] int 
   941 ;;  number_press    2   10[BANK0 ] int 
   942 ;;  miniTick        2    8[BANK0 ] int 
   943 ;;  keypress        1   14[BANK0 ] unsigned char 
   944 ;;  state           2   19[BANK0 ] int 
   945 ;;  clear           2   17[BANK0 ] int 
   946 ;;  tick            2    6[BANK0 ] int 
   947 ;; Return value:  Size  Location     Type
   948 ;;                  1    wreg      void 
   949 ;; Registers used:
   950 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   957 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   958 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   959 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   960 ;;Total ram usage:       17 bytes
   961 ;; Hardware stack levels required when called:   12
   962 ;; This function calls:
   963 ;;		___awmod
   964 ;;		_initLCD
   965 ;;		_lcdInst
   966 ;;		_printf
   967 ;; This function is called by:
   968 ;;		Startup code after reset
   969 ;; This function uses a non-reentrant model
   970 ;;
   971                           
   972                           	psect	text0
   973  000012                     __ptext0:
   974                           	opt callstack 0
   975  000012                     _main:
   976                           	opt callstack 19
   977                           
   978                           ;main.c: 41:     LATD = 0x00;
   979                           
   980                           ;incstack = 0
   981  000012  0E00               	movlw	0
   982  000014  6E8C               	movwf	3980,c	;volatile
   983                           
   984                           ;main.c: 42:     TRISD = 0x00;
   985  000016  0E00               	movlw	0
   986  000018  6E95               	movwf	3989,c	;volatile
   987                           
   988                           ;main.c: 45:     ADCON1 = 0b00001111;
   989  00001A  0E0F               	movlw	15
   990  00001C  6EC1               	movwf	4033,c	;volatile
   991                           
   992                           ;main.c: 48:     INT1IE = 1;
   993  00001E  86F0               	bsf	4080,3,c	;volatile
   994                           
   995                           ;main.c: 51:     initLCD();
   996  000020  EC4B  F007         	call	_initLCD	;wreg free
   997                           
   998                           ;main.c: 54:     (INTCONbits.GIE = 1);
   999  000024  8EF2               	bsf	4082,7,c	;volatile
  1000                           
  1001                           ;main.c: 57:     int state = 0;
  1002  000026  0E00               	movlw	0
  1003  000028  0100               	movlb	0	; () banked
  1004  00002A  6FF9               	movwf	(main@state+1)& (0+255),b
  1005  00002C  0E00               	movlw	0
  1006  00002E  6FF8               	movwf	main@state& (0+255),b
  1007                           
  1008                           ; BSR set to: 0
  1009                           ;main.c: 58:     int tick = 0;
  1010  000030  0E00               	movlw	0
  1011  000032  6FEC               	movwf	(main@tick+1)& (0+255),b
  1012  000034  0E00               	movlw	0
  1013  000036  6FEB               	movwf	main@tick& (0+255),b
  1014                           
  1015                           ; BSR set to: 0
  1016                           ;main.c: 59:     int clear = 1;
  1017  000038  0E00               	movlw	0
  1018  00003A  6FF7               	movwf	(main@clear+1)& (0+255),b
  1019  00003C  0E01               	movlw	1
  1020  00003E  6FF6               	movwf	main@clear& (0+255),b
  1021                           
  1022                           ;main.c: 64:     { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
  1023  000040  0E0C               	movlw	12
  1024  000042  ECA1  F008         	call	_lcdInst
  1025                           
  1026                           ;main.c: 65:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1027  000046  0E01               	movlw	1
  1028  000048  ECA1  F008         	call	_lcdInst
  1029  00004C  0E11               	movlw	17
  1030  00004E  0100               	movlb	0	; () banked
  1031  000050  6FE9               	movwf	??_main& (0+255),b
  1032  000052  0E3A               	movlw	58
  1033  000054                     u2337:
  1034  000054  2EE8               	decfsz	wreg,f,c
  1035  000056  D7FE               	bra	u2337
  1036  000058  2FE9               	decfsz	??_main& (0+255),f,b
  1037  00005A  D7FC               	bra	u2337
  1038  00005C  F000               	nop	
  1039                           
  1040                           ;main.c: 66:     printf("A to start");
  1041  00005E  0EC5               	movlw	low STR_1
  1042  000060  6E68               	movwf	printf@fmt,c
  1043  000062  0EFF               	movlw	high STR_1
  1044  000064  6E69               	movwf	printf@fmt+1,c
  1045  000066  EC73  F008         	call	_printf	;wreg free
  1046  00006A  0E90               	movlw	144
  1047  00006C  ECA1  F008         	call	_lcdInst
  1048                           
  1049                           ;main.c: 68:     printf("A for Ali ;)");
  1050  000070  0E71               	movlw	low STR_2
  1051  000072  6E68               	movwf	printf@fmt,c
  1052  000074  0EFF               	movlw	high STR_2
  1053  000076  6E69               	movwf	printf@fmt+1,c
  1054  000078  EC73  F008         	call	_printf	;wreg free
  1055  00007C                     l2606:
  1056  00007C  0100               	movlb	0	; () banked
  1057  00007E  51C2               	movf	_start& (0+255),w,b	;volatile
  1058  000080  B4D8               	btfsc	status,2,c
  1059  000082  D7FC               	goto	l2606
  1060                           
  1061                           ; BSR set to: 0
  1062                           ;main.c: 72:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1063  000084  0E01               	movlw	1
  1064  000086  ECA1  F008         	call	_lcdInst
  1065  00008A  0E11               	movlw	17
  1066  00008C  0100               	movlb	0	; () banked
  1067  00008E  6FE9               	movwf	??_main& (0+255),b
  1068  000090  0E3A               	movlw	58
  1069  000092                     u2347:
  1070  000092  2EE8               	decfsz	wreg,f,c
  1071  000094  D7FE               	bra	u2347
  1072  000096  2FE9               	decfsz	??_main& (0+255),f,b
  1073  000098  D7FC               	bra	u2347
  1074  00009A  F000               	nop	
  1075                           
  1076                           ;main.c: 73:     printf("It's ya boy Ali!");
  1077  00009C  0EDA               	movlw	low STR_3
  1078  00009E  6E68               	movwf	printf@fmt,c
  1079  0000A0  0EFE               	movlw	high STR_3
  1080  0000A2  6E69               	movwf	printf@fmt+1,c
  1081  0000A4  EC73  F008         	call	_printf	;wreg free
  1082                           
  1083                           ;main.c: 74:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1084  0000A8  0E33               	movlw	51
  1085  0000AA  0100               	movlb	0	; () banked
  1086  0000AC  6FEA               	movwf	(??_main+1)& (0+255),b
  1087  0000AE  0EBB               	movlw	187
  1088  0000B0  6FE9               	movwf	??_main& (0+255),b
  1089  0000B2  0EDF               	movlw	223
  1090  0000B4                     u2357:
  1091  0000B4  2EE8               	decfsz	wreg,f,c
  1092  0000B6  D7FE               	bra	u2357
  1093  0000B8  2FE9               	decfsz	??_main& (0+255),f,b
  1094  0000BA  D7FC               	bra	u2357
  1095  0000BC  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1096  0000BE  D7FA               	bra	u2357
  1097  0000C0  D000               	nop2	
  1098  0000C2  0E90               	movlw	144
  1099  0000C4  ECA1  F008         	call	_lcdInst
  1100                           
  1101                           ;main.c: 76:     printf("He gettin hot ");
  1102  0000C8  0E0A               	movlw	low STR_4
  1103  0000CA  6E68               	movwf	printf@fmt,c
  1104  0000CC  0EFF               	movlw	high STR_4
  1105  0000CE  6E69               	movwf	printf@fmt+1,c
  1106  0000D0  EC73  F008         	call	_printf	;wreg free
  1107                           
  1108                           ;main.c: 77:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1109  0000D4  0E33               	movlw	51
  1110  0000D6  0100               	movlb	0	; () banked
  1111  0000D8  6FEA               	movwf	(??_main+1)& (0+255),b
  1112  0000DA  0EBB               	movlw	187
  1113  0000DC  6FE9               	movwf	??_main& (0+255),b
  1114  0000DE  0EDF               	movlw	223
  1115  0000E0                     u2367:
  1116  0000E0  2EE8               	decfsz	wreg,f,c
  1117  0000E2  D7FE               	bra	u2367
  1118  0000E4  2FE9               	decfsz	??_main& (0+255),f,b
  1119  0000E6  D7FC               	bra	u2367
  1120  0000E8  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1121  0000EA  D7FA               	bra	u2367
  1122  0000EC  D000               	nop2	
  1123                           
  1124                           ;main.c: 79:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1125  0000EE  0E01               	movlw	1
  1126  0000F0  ECA1  F008         	call	_lcdInst
  1127  0000F4  0E11               	movlw	17
  1128  0000F6  0100               	movlb	0	; () banked
  1129  0000F8  6FE9               	movwf	??_main& (0+255),b
  1130  0000FA  0E3A               	movlw	58
  1131  0000FC                     u2377:
  1132  0000FC  2EE8               	decfsz	wreg,f,c
  1133  0000FE  D7FE               	bra	u2377
  1134  000100  2FE9               	decfsz	??_main& (0+255),f,b
  1135  000102  D7FC               	bra	u2377
  1136  000104  F000               	nop	
  1137                           
  1138                           ;main.c: 80:     printf("Hi Cull !");
  1139  000106  0ED0               	movlw	low STR_5
  1140  000108  6E68               	movwf	printf@fmt,c
  1141  00010A  0EFF               	movlw	high STR_5
  1142  00010C  6E69               	movwf	printf@fmt+1,c
  1143  00010E  EC73  F008         	call	_printf	;wreg free
  1144                           
  1145                           ;main.c: 81:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1146  000112  0E33               	movlw	51
  1147  000114  0100               	movlb	0	; () banked
  1148  000116  6FEA               	movwf	(??_main+1)& (0+255),b
  1149  000118  0EBB               	movlw	187
  1150  00011A  6FE9               	movwf	??_main& (0+255),b
  1151  00011C  0EDF               	movlw	223
  1152  00011E                     u2387:
  1153  00011E  2EE8               	decfsz	wreg,f,c
  1154  000120  D7FE               	bra	u2387
  1155  000122  2FE9               	decfsz	??_main& (0+255),f,b
  1156  000124  D7FC               	bra	u2387
  1157  000126  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1158  000128  D7FA               	bra	u2387
  1159  00012A  D000               	nop2	
  1160  00012C  0E90               	movlw	144
  1161  00012E  ECA1  F008         	call	_lcdInst
  1162                           
  1163                           ;main.c: 83:     printf("Almost done");
  1164  000132  0E97               	movlw	low STR_6
  1165  000134  6E68               	movwf	printf@fmt,c
  1166  000136  0EFF               	movlw	high STR_6
  1167  000138  6E69               	movwf	printf@fmt+1,c
  1168  00013A  EC73  F008         	call	_printf	;wreg free
  1169  00013E  0ED0               	movlw	208
  1170  000140  ECA1  F008         	call	_lcdInst
  1171                           
  1172                           ;main.c: 85:     printf("AND DONE");
  1173  000144  0EE4               	movlw	low STR_7
  1174  000146  6E68               	movwf	printf@fmt,c
  1175  000148  0EFF               	movlw	high STR_7
  1176  00014A  6E69               	movwf	printf@fmt+1,c
  1177  00014C  EC73  F008         	call	_printf	;wreg free
  1178                           
  1179                           ;main.c: 86:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1180  000150  0E33               	movlw	51
  1181  000152  0100               	movlb	0	; () banked
  1182  000154  6FEA               	movwf	(??_main+1)& (0+255),b
  1183  000156  0EBB               	movlw	187
  1184  000158  6FE9               	movwf	??_main& (0+255),b
  1185  00015A  0EDF               	movlw	223
  1186  00015C                     u2397:
  1187  00015C  2EE8               	decfsz	wreg,f,c
  1188  00015E  D7FE               	bra	u2397
  1189  000160  2FE9               	decfsz	??_main& (0+255),f,b
  1190  000162  D7FC               	bra	u2397
  1191  000164  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1192  000166  D7FA               	bra	u2397
  1193  000168  D000               	nop2	
  1194                           
  1195                           ;main.c: 96:         if (state == 0 & clear == 1) {
  1196  00016A  0100               	movlb	0	; () banked
  1197  00016C  51F8               	movf	main@state& (0+255),w,b
  1198  00016E  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1199  000170  A4D8               	btfss	status,2,c
  1200  000172  D028               	goto	l2654
  1201                           
  1202                           ; BSR set to: 0
  1203  000174  05F6               	decf	main@clear& (0+255),w,b
  1204  000176  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1205  000178  A4D8               	btfss	status,2,c
  1206  00017A  D024               	goto	l2654
  1207                           
  1208                           ; BSR set to: 0
  1209                           ;main.c: 97:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1210  00017C  0E01               	movlw	1
  1211  00017E  ECA1  F008         	call	_lcdInst
  1212  000182  0E11               	movlw	17
  1213  000184  0100               	movlb	0	; () banked
  1214  000186  6FE9               	movwf	??_main& (0+255),b
  1215  000188  0E3A               	movlw	58
  1216  00018A                     u2407:
  1217  00018A  2EE8               	decfsz	wreg,f,c
  1218  00018C  D7FE               	bra	u2407
  1219  00018E  2FE9               	decfsz	??_main& (0+255),f,b
  1220  000190  D7FC               	bra	u2407
  1221  000192  F000               	nop	
  1222                           
  1223                           ;main.c: 98:         printf("Operation Time");
  1224  000194  0E19               	movlw	low STR_8
  1225  000196  6E68               	movwf	printf@fmt,c
  1226  000198  0EFF               	movlw	high STR_8
  1227  00019A  6E69               	movwf	printf@fmt+1,c
  1228  00019C  EC73  F008         	call	_printf	;wreg free
  1229  0001A0  0E90               	movlw	144
  1230  0001A2  ECA1  F008         	call	_lcdInst
  1231                           
  1232                           ;main.c: 100:         printf("%d seconds", time);
  1233  0001A6  0EAF               	movlw	low STR_9
  1234  0001A8  6E68               	movwf	printf@fmt,c
  1235  0001AA  0EFF               	movlw	high STR_9
  1236  0001AC  6E69               	movwf	printf@fmt+1,c
  1237  0001AE  0E00               	movlw	0
  1238  0001B0  6E6B               	movwf	?_printf+3,c
  1239  0001B2  0E1E               	movlw	30
  1240  0001B4  6E6A               	movwf	?_printf+2,c
  1241  0001B6  EC73  F008         	call	_printf	;wreg free
  1242                           
  1243                           ;main.c: 101:         clear = 0;
  1244  0001BA  0E00               	movlw	0
  1245  0001BC  0100               	movlb	0	; () banked
  1246  0001BE  6FF7               	movwf	(main@clear+1)& (0+255),b
  1247  0001C0  0E00               	movlw	0
  1248  0001C2  6FF6               	movwf	main@clear& (0+255),b
  1249  0001C4                     l2654:
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;main.c: 105:         if (state == 1 & clear == 1) {
  1253  0001C4  05F8               	decf	main@state& (0+255),w,b
  1254  0001C6  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1255  0001C8  A4D8               	btfss	status,2,c
  1256  0001CA  D02B               	goto	l2672
  1257                           
  1258                           ; BSR set to: 0
  1259  0001CC  05F6               	decf	main@clear& (0+255),w,b
  1260  0001CE  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1261  0001D0  A4D8               	btfss	status,2,c
  1262  0001D2  D027               	goto	l2672
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;main.c: 107:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1266  0001D4  0E01               	movlw	1
  1267  0001D6  ECA1  F008         	call	_lcdInst
  1268  0001DA  0E11               	movlw	17
  1269  0001DC  0100               	movlb	0	; () banked
  1270  0001DE  6FE9               	movwf	??_main& (0+255),b
  1271  0001E0  0E3A               	movlw	58
  1272  0001E2                     u2417:
  1273  0001E2  2EE8               	decfsz	wreg,f,c
  1274  0001E4  D7FE               	bra	u2417
  1275  0001E6  2FE9               	decfsz	??_main& (0+255),f,b
  1276  0001E8  D7FC               	bra	u2417
  1277  0001EA  F000               	nop	
  1278                           
  1279                           ;main.c: 108:             { lcdInst(0x80 | LCD_LINE1_ADDR);};
  1280  0001EC  0E80               	movlw	128
  1281  0001EE  ECA1  F008         	call	_lcdInst
  1282                           
  1283                           ;main.c: 109:             printf("# of Canisters");
  1284  0001F2  0E37               	movlw	low STR_10
  1285  0001F4  6E68               	movwf	printf@fmt,c
  1286  0001F6  0EFF               	movlw	high STR_10
  1287  0001F8  6E69               	movwf	printf@fmt+1,c
  1288  0001FA  EC73  F008         	call	_printf	;wreg free
  1289  0001FE  0E90               	movlw	144
  1290  000200  ECA1  F008         	call	_lcdInst
  1291                           
  1292                           ;main.c: 111:             printf("%d Canisters", Canister);
  1293  000204  0E7E               	movlw	low STR_11
  1294  000206  6E68               	movwf	printf@fmt,c
  1295  000208  0EFF               	movlw	high STR_11
  1296  00020A  6E69               	movwf	printf@fmt+1,c
  1297  00020C  C0BE  F06A         	movff	_Canister,?_printf+2
  1298  000210  C0BF  F06B         	movff	_Canister+1,?_printf+3
  1299  000214  EC73  F008         	call	_printf	;wreg free
  1300                           
  1301                           ;main.c: 112:             clear = 0;
  1302  000218  0E00               	movlw	0
  1303  00021A  0100               	movlb	0	; () banked
  1304  00021C  6FF7               	movwf	(main@clear+1)& (0+255),b
  1305  00021E  0E00               	movlw	0
  1306  000220  6FF6               	movwf	main@clear& (0+255),b
  1307  000222                     l2672:
  1308                           
  1309                           ; BSR set to: 0
  1310                           ;main.c: 116:         if (state == 2 & clear == 1) {
  1311  000222  0E02               	movlw	2
  1312  000224  19F8               	xorwf	main@state& (0+255),w,b
  1313  000226  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1314  000228  A4D8               	btfss	status,2,c
  1315  00022A  D031               	goto	l2692
  1316                           
  1317                           ; BSR set to: 0
  1318  00022C  05F6               	decf	main@clear& (0+255),w,b
  1319  00022E  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1320  000230  A4D8               	btfss	status,2,c
  1321  000232  D02D               	goto	l2692
  1322                           
  1323                           ; BSR set to: 0
  1324                           ;main.c: 118:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1325  000234  0E01               	movlw	1
  1326  000236  ECA1  F008         	call	_lcdInst
  1327  00023A  0E11               	movlw	17
  1328  00023C  0100               	movlb	0	; () banked
  1329  00023E  6FE9               	movwf	??_main& (0+255),b
  1330  000240  0E3A               	movlw	58
  1331  000242                     u2427:
  1332  000242  2EE8               	decfsz	wreg,f,c
  1333  000244  D7FE               	bra	u2427
  1334  000246  2FE9               	decfsz	??_main& (0+255),f,b
  1335  000248  D7FC               	bra	u2427
  1336  00024A  F000               	nop	
  1337                           
  1338                           ;main.c: 119:             printf("# of Balls");
  1339  00024C  0EBA               	movlw	low STR_12
  1340  00024E  6E68               	movwf	printf@fmt,c
  1341  000250  0EFF               	movlw	high STR_12
  1342  000252  6E69               	movwf	printf@fmt+1,c
  1343  000254  EC73  F008         	call	_printf	;wreg free
  1344  000258  0EC0               	movlw	192
  1345  00025A  ECA1  F008         	call	_lcdInst
  1346                           
  1347                           ;main.c: 121:             printf("supplied");
  1348  00025E  0EED               	movlw	low STR_13
  1349  000260  6E68               	movwf	printf@fmt,c
  1350  000262  0EFF               	movlw	high STR_13
  1351  000264  6E69               	movwf	printf@fmt+1,c
  1352  000266  EC73  F008         	call	_printf	;wreg free
  1353  00026A  0ED0               	movlw	208
  1354  00026C  ECA1  F008         	call	_lcdInst
  1355                           
  1356                           ;main.c: 123:             printf("%d balls", balls);
  1357  000270  0EF6               	movlw	low STR_14
  1358  000272  6E68               	movwf	printf@fmt,c
  1359  000274  0EFF               	movlw	high STR_14
  1360  000276  6E69               	movwf	printf@fmt+1,c
  1361  000278  0E00               	movlw	0
  1362  00027A  6E6B               	movwf	?_printf+3,c
  1363  00027C  0E05               	movlw	5
  1364  00027E  6E6A               	movwf	?_printf+2,c
  1365  000280  EC73  F008         	call	_printf	;wreg free
  1366                           
  1367                           ;main.c: 124:             clear = 0;
  1368  000284  0E00               	movlw	0
  1369  000286  0100               	movlb	0	; () banked
  1370  000288  6FF7               	movwf	(main@clear+1)& (0+255),b
  1371  00028A  0E00               	movlw	0
  1372  00028C  6FF6               	movwf	main@clear& (0+255),b
  1373  00028E                     l2692:
  1374                           
  1375                           ; BSR set to: 0
  1376                           ;main.c: 128:         if (state == 3 & clear == 1) {
  1377  00028E  0E03               	movlw	3
  1378  000290  19F8               	xorwf	main@state& (0+255),w,b
  1379  000292  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1380  000294  A4D8               	btfss	status,2,c
  1381  000296  D034               	goto	l2712
  1382                           
  1383                           ; BSR set to: 0
  1384  000298  05F6               	decf	main@clear& (0+255),w,b
  1385  00029A  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1386  00029C  A4D8               	btfss	status,2,c
  1387  00029E  D030               	goto	l2712
  1388                           
  1389                           ; BSR set to: 0
  1390                           ;main.c: 130:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1391  0002A0  0E01               	movlw	1
  1392  0002A2  ECA1  F008         	call	_lcdInst
  1393  0002A6  0E11               	movlw	17
  1394  0002A8  0100               	movlb	0	; () banked
  1395  0002AA  6FE9               	movwf	??_main& (0+255),b
  1396  0002AC  0E3A               	movlw	58
  1397  0002AE                     u2437:
  1398  0002AE  2EE8               	decfsz	wreg,f,c
  1399  0002B0  D7FE               	bra	u2437
  1400  0002B2  2FE9               	decfsz	??_main& (0+255),f,b
  1401  0002B4  D7FC               	bra	u2437
  1402  0002B6  F000               	nop	
  1403                           
  1404                           ;main.c: 131:             printf("Individual Info");
  1405  0002B8  0EEB               	movlw	low STR_15
  1406  0002BA  6E68               	movwf	printf@fmt,c
  1407  0002BC  0EFE               	movlw	high STR_15
  1408  0002BE  6E69               	movwf	printf@fmt+1,c
  1409  0002C0  EC73  F008         	call	_printf	;wreg free
  1410  0002C4  0EC0               	movlw	192
  1411  0002C6  ECA1  F008         	call	_lcdInst
  1412                           
  1413                           ;main.c: 133:             printf("of Canister");
  1414  0002CA  0EA3               	movlw	low STR_16
  1415  0002CC  6E68               	movwf	printf@fmt,c
  1416  0002CE  0EFF               	movlw	high STR_16
  1417  0002D0  6E69               	movwf	printf@fmt+1,c
  1418  0002D2  EC73  F008         	call	_printf	;wreg free
  1419  0002D6  0ED0               	movlw	208
  1420  0002D8  ECA1  F008         	call	_lcdInst
  1421                           
  1422                           ;main.c: 135:             printf("Press 0 to %d ", Canister-1);
  1423  0002DC  0EFB               	movlw	low STR_17
  1424  0002DE  6E68               	movwf	printf@fmt,c
  1425  0002E0  0EFE               	movlw	high STR_17
  1426  0002E2  6E69               	movwf	printf@fmt+1,c
  1427  0002E4  0EFF               	movlw	255
  1428  0002E6  0100               	movlb	0	; () banked
  1429  0002E8  25BE               	addwf	_Canister& (0+255),w,b
  1430  0002EA  6E6A               	movwf	?_printf+2,c
  1431  0002EC  0EFF               	movlw	255
  1432  0002EE  21BF               	addwfc	(_Canister+1)& (0+255),w,b
  1433  0002F0  6E6B               	movwf	?_printf+3,c
  1434  0002F2  EC73  F008         	call	_printf	;wreg free
  1435                           
  1436                           ;main.c: 136:             clear = 0;
  1437  0002F6  0E00               	movlw	0
  1438  0002F8  0100               	movlb	0	; () banked
  1439  0002FA  6FF7               	movwf	(main@clear+1)& (0+255),b
  1440  0002FC  0E00               	movlw	0
  1441  0002FE  6FF6               	movwf	main@clear& (0+255),b
  1442  000300                     l2712:
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;main.c: 140:         if(key_was_pressed){
  1446  000300  51C4               	movf	_key_was_pressed& (0+255),w,b	;volatile
  1447  000302  B4D8               	btfsc	status,2,c
  1448  000304  D140               	goto	l2810
  1449                           
  1450                           ; BSR set to: 0
  1451                           ;main.c: 142:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  1452  000306  3881               	swapf	3969,w,c	;volatile
  1453  000308  0B0F               	andlw	15
  1454  00030A  0B0F               	andlw	15
  1455  00030C  6FF3               	movwf	main@keypress& (0+255),b
  1456                           
  1457                           ; BSR set to: 0
  1458                           ;main.c: 143:             int miniTick = 0;
  1459  00030E  0E00               	movlw	0
  1460  000310  6FEE               	movwf	(main@miniTick+1)& (0+255),b
  1461  000312  0E00               	movlw	0
  1462  000314  6FED               	movwf	main@miniTick& (0+255),b
  1463                           
  1464                           ; BSR set to: 0
  1465                           ;main.c: 144:             int miniState = 0;
  1466  000316  0E00               	movlw	0
  1467  000318  6FF5               	movwf	(main@miniState+1)& (0+255),b
  1468  00031A  0E00               	movlw	0
  1469  00031C  6FF4               	movwf	main@miniState& (0+255),b
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;main.c: 145:             int miniClear = 1;
  1473  00031E  0E00               	movlw	0
  1474  000320  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1475  000322  0E01               	movlw	1
  1476  000324  6FF1               	movwf	main@miniClear& (0+255),b
  1477                           
  1478                           ; BSR set to: 0
  1479                           ;main.c: 147:             int number_pressed = (int) (keys[keypress] - '0');
  1480  000326  0EC3               	movlw	low _keys
  1481  000328  25F3               	addwf	main@keypress& (0+255),w,b
  1482  00032A  6EF6               	movwf	tblptrl,c
  1483  00032C  6AF7               	clrf	tblptrh,c
  1484  00032E  0EFE               	movlw	high _keys
  1485  000330  22F7               	addwfc	tblptrh,f,c
  1486  000332                     	if	0	;There are less than 3 active tblptr bytes
  1487  000332                     	endif
  1488  000332  0008               	tblrd		*
  1489  000334  CFF5 F0E9          	movff	tablat,??_main
  1490  000338  0ED0               	movlw	208
  1491  00033A  25E9               	addwf	??_main& (0+255),w,b
  1492  00033C  6FEF               	movwf	main@number_pressed& (0+255),b
  1493  00033E  6BF0               	clrf	(main@number_pressed+1)& (0+255),b
  1494  000340  0EFF               	movlw	255
  1495  000342  23F0               	addwfc	(main@number_pressed+1)& (0+255),f,b
  1496                           
  1497                           ;main.c: 149:             while(!exit_key) {
  1498  000344  D118               	goto	l2806
  1499  000346                     l2724:
  1500                           
  1501                           ; BSR set to: 0
  1502                           ;main.c: 151:                 if (miniState == 0 & miniClear == 1) {
  1503  000346  51F4               	movf	main@miniState& (0+255),w,b
  1504  000348  11F5               	iorwf	(main@miniState+1)& (0+255),w,b
  1505  00034A  A4D8               	btfss	status,2,c
  1506  00034C  D046               	goto	l2744
  1507                           
  1508                           ; BSR set to: 0
  1509  00034E  05F1               	decf	main@miniClear& (0+255),w,b
  1510  000350  11F2               	iorwf	(main@miniClear+1)& (0+255),w,b
  1511  000352  A4D8               	btfss	status,2,c
  1512  000354  D042               	goto	l2744
  1513                           
  1514                           ; BSR set to: 0
  1515                           ;main.c: 153:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1516  000356  0E01               	movlw	1
  1517  000358  ECA1  F008         	call	_lcdInst
  1518  00035C  0E11               	movlw	17
  1519  00035E  0100               	movlb	0	; () banked
  1520  000360  6FE9               	movwf	??_main& (0+255),b
  1521  000362  0E3A               	movlw	58
  1522  000364                     u2447:
  1523  000364  2EE8               	decfsz	wreg,f,c
  1524  000366  D7FE               	bra	u2447
  1525  000368  2FE9               	decfsz	??_main& (0+255),f,b
  1526  00036A  D7FC               	bra	u2447
  1527  00036C  F000               	nop	
  1528                           
  1529                           ;main.c: 154:                     printf("Cansiter %c", keys[keypress]);
  1530  00036E  0E8B               	movlw	low STR_18
  1531  000370  6E68               	movwf	printf@fmt,c
  1532  000372  0EFF               	movlw	high STR_18
  1533  000374  6E69               	movwf	printf@fmt+1,c
  1534  000376  0EC3               	movlw	low _keys
  1535  000378  0100               	movlb	0	; () banked
  1536  00037A  25F3               	addwf	main@keypress& (0+255),w,b
  1537  00037C  6EF6               	movwf	tblptrl,c
  1538  00037E  6AF7               	clrf	tblptrh,c
  1539  000380  0EFE               	movlw	high _keys
  1540  000382  22F7               	addwfc	tblptrh,f,c
  1541  000384                     	if	0	;There are less than 3 active tblptr bytes
  1542  000384                     	endif
  1543  000384  0008               	tblrd		*
  1544  000386  50F5               	movf	tablat,w,c
  1545  000388  6E6A               	movwf	?_printf+2,c
  1546  00038A  6A6B               	clrf	?_printf+3,c
  1547  00038C  EC73  F008         	call	_printf	;wreg free
  1548  000390  0E90               	movlw	144
  1549  000392  ECA1  F008         	call	_lcdInst
  1550                           
  1551                           ;main.c: 156:                     printf("Distance %d cm", DistanceCanister[number_press
      +                          ed] );
  1552  000396  0E28               	movlw	low STR_19
  1553  000398  6E68               	movwf	printf@fmt,c
  1554  00039A  0EFF               	movlw	high STR_19
  1555  00039C  6E69               	movwf	printf@fmt+1,c
  1556  00039E  90D8               	bcf	status,0,c
  1557  0003A0  0100               	movlb	0	; () banked
  1558  0003A2  35EF               	rlcf	main@number_pressed& (0+255),w,b
  1559  0003A4  6ED9               	movwf	fsr2l,c
  1560  0003A6  35F0               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1561  0003A8  6EDA               	movwf	fsr2h,c
  1562  0003AA  0E94               	movlw	low _DistanceCanister
  1563  0003AC  26D9               	addwf	fsr2l,f,c
  1564  0003AE  0E00               	movlw	high _DistanceCanister
  1565  0003B0  22DA               	addwfc	fsr2h,f,c
  1566  0003B2  CFDE F06A          	movff	postinc2,?_printf+2
  1567  0003B6  CFDD F06B          	movff	postdec2,?_printf+3
  1568  0003BA  EC73  F008         	call	_printf	;wreg free
  1569  0003BE  0ED0               	movlw	208
  1570  0003C0  ECA1  F008         	call	_lcdInst
  1571                           
  1572                           ;main.c: 158:                     printf("* to exit");
  1573  0003C4  0EDA               	movlw	low STR_20
  1574  0003C6  6E68               	movwf	printf@fmt,c
  1575  0003C8  0EFF               	movlw	high STR_20
  1576  0003CA  6E69               	movwf	printf@fmt+1,c
  1577  0003CC  EC73  F008         	call	_printf	;wreg free
  1578                           
  1579                           ;main.c: 159:                     miniClear = 0;
  1580  0003D0  0E00               	movlw	0
  1581  0003D2  0100               	movlb	0	; () banked
  1582  0003D4  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1583  0003D6  0E00               	movlw	0
  1584  0003D8  6FF1               	movwf	main@miniClear& (0+255),b
  1585  0003DA                     l2744:
  1586                           
  1587                           ; BSR set to: 0
  1588                           ;main.c: 162:                 if (miniState == 1 & miniClear == 1) {
  1589  0003DA  05F4               	decf	main@miniState& (0+255),w,b
  1590  0003DC  11F5               	iorwf	(main@miniState+1)& (0+255),w,b
  1591  0003DE  A4D8               	btfss	status,2,c
  1592  0003E0  D04D               	goto	l2768
  1593                           
  1594                           ; BSR set to: 0
  1595  0003E2  05F1               	decf	main@miniClear& (0+255),w,b
  1596  0003E4  11F2               	iorwf	(main@miniClear+1)& (0+255),w,b
  1597  0003E6  A4D8               	btfss	status,2,c
  1598  0003E8  D049               	goto	l2768
  1599                           
  1600                           ; BSR set to: 0
  1601                           ;main.c: 164:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1602  0003EA  0E01               	movlw	1
  1603  0003EC  ECA1  F008         	call	_lcdInst
  1604  0003F0  0E11               	movlw	17
  1605  0003F2  0100               	movlb	0	; () banked
  1606  0003F4  6FE9               	movwf	??_main& (0+255),b
  1607  0003F6  0E3A               	movlw	58
  1608  0003F8                     u2457:
  1609  0003F8  2EE8               	decfsz	wreg,f,c
  1610  0003FA  D7FE               	bra	u2457
  1611  0003FC  2FE9               	decfsz	??_main& (0+255),f,b
  1612  0003FE  D7FC               	bra	u2457
  1613  000400  F000               	nop	
  1614                           
  1615                           ;main.c: 165:                     printf("Cansiter %c", keys[keypress]);
  1616  000402  0E8B               	movlw	low STR_18
  1617  000404  6E68               	movwf	printf@fmt,c
  1618  000406  0EFF               	movlw	high STR_18
  1619  000408  6E69               	movwf	printf@fmt+1,c
  1620  00040A  0EC3               	movlw	low _keys
  1621  00040C  0100               	movlb	0	; () banked
  1622  00040E  25F3               	addwf	main@keypress& (0+255),w,b
  1623  000410  6EF6               	movwf	tblptrl,c
  1624  000412  6AF7               	clrf	tblptrh,c
  1625  000414  0EFE               	movlw	high _keys
  1626  000416  22F7               	addwfc	tblptrh,f,c
  1627  000418                     	if	0	;There are less than 3 active tblptr bytes
  1628  000418                     	endif
  1629  000418  0008               	tblrd		*
  1630  00041A  50F5               	movf	tablat,w,c
  1631  00041C  6E6A               	movwf	?_printf+2,c
  1632  00041E  6A6B               	clrf	?_printf+3,c
  1633  000420  EC73  F008         	call	_printf	;wreg free
  1634  000424  0E90               	movlw	144
  1635  000426  ECA1  F008         	call	_lcdInst
  1636                           
  1637                           ;main.c: 167:                     if (State[number_pressed] == 1)
  1638  00042A  90D8               	bcf	status,0,c
  1639  00042C  0100               	movlb	0	; () banked
  1640  00042E  35EF               	rlcf	main@number_pressed& (0+255),w,b
  1641  000430  6ED9               	movwf	fsr2l,c
  1642  000432  35F0               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1643  000434  6EDA               	movwf	fsr2h,c
  1644  000436  0EA8               	movlw	low _State
  1645  000438  26D9               	addwf	fsr2l,f,c
  1646  00043A  0E00               	movlw	high _State
  1647  00043C  22DA               	addwfc	fsr2h,f,c
  1648  00043E  04DE               	decf	postinc2,w,c
  1649  000440  10DE               	iorwf	postinc2,w,c
  1650  000442  A4D8               	btfss	status,2,c
  1651  000444  D007               	goto	l2760
  1652                           
  1653                           ; BSR set to: 0
  1654                           ;main.c: 168:                         printf("Canister Full");
  1655  000446  0E63               	movlw	low STR_22
  1656  000448  6E68               	movwf	printf@fmt,c
  1657  00044A  0EFF               	movlw	high STR_22
  1658  00044C  6E69               	movwf	printf@fmt+1,c
  1659  00044E  EC73  F008         	call	_printf	;wreg free
  1660  000452  D006               	goto	l2762
  1661  000454                     l2760:
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;main.c: 170:                         printf("Canister Empty");
  1665  000454  0E46               	movlw	low STR_23
  1666  000456  6E68               	movwf	printf@fmt,c
  1667  000458  0EFF               	movlw	high STR_23
  1668  00045A  6E69               	movwf	printf@fmt+1,c
  1669  00045C  EC73  F008         	call	_printf	;wreg free
  1670  000460                     l2762:
  1671  000460  0ED0               	movlw	208
  1672  000462  ECA1  F008         	call	_lcdInst
  1673                           
  1674                           ;main.c: 172:                     printf("* to exit");
  1675  000466  0EDA               	movlw	low STR_20
  1676  000468  6E68               	movwf	printf@fmt,c
  1677  00046A  0EFF               	movlw	high STR_20
  1678  00046C  6E69               	movwf	printf@fmt+1,c
  1679  00046E  EC73  F008         	call	_printf	;wreg free
  1680                           
  1681                           ;main.c: 173:                     miniClear = 0;
  1682  000472  0E00               	movlw	0
  1683  000474  0100               	movlb	0	; () banked
  1684  000476  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1685  000478  0E00               	movlw	0
  1686  00047A  6FF1               	movwf	main@miniClear& (0+255),b
  1687  00047C                     l2768:
  1688                           
  1689                           ; BSR set to: 0
  1690                           ;main.c: 176:                 if (miniState == 2 & miniClear == 1) {
  1691  00047C  0E02               	movlw	2
  1692  00047E  19F4               	xorwf	main@miniState& (0+255),w,b
  1693  000480  11F5               	iorwf	(main@miniState+1)& (0+255),w,b
  1694  000482  A4D8               	btfss	status,2,c
  1695  000484  D04D               	goto	l2792
  1696                           
  1697                           ; BSR set to: 0
  1698  000486  05F1               	decf	main@miniClear& (0+255),w,b
  1699  000488  11F2               	iorwf	(main@miniClear+1)& (0+255),w,b
  1700  00048A  A4D8               	btfss	status,2,c
  1701  00048C  D049               	goto	l2792
  1702                           
  1703                           ; BSR set to: 0
  1704                           ;main.c: 178:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1705  00048E  0E01               	movlw	1
  1706  000490  ECA1  F008         	call	_lcdInst
  1707  000494  0E11               	movlw	17
  1708  000496  0100               	movlb	0	; () banked
  1709  000498  6FE9               	movwf	??_main& (0+255),b
  1710  00049A  0E3A               	movlw	58
  1711  00049C                     u2467:
  1712  00049C  2EE8               	decfsz	wreg,f,c
  1713  00049E  D7FE               	bra	u2467
  1714  0004A0  2FE9               	decfsz	??_main& (0+255),f,b
  1715  0004A2  D7FC               	bra	u2467
  1716  0004A4  F000               	nop	
  1717                           
  1718                           ;main.c: 179:                     printf("Cansiter %c", keys[keypress]);
  1719  0004A6  0E8B               	movlw	low STR_18
  1720  0004A8  6E68               	movwf	printf@fmt,c
  1721  0004AA  0EFF               	movlw	high STR_18
  1722  0004AC  6E69               	movwf	printf@fmt+1,c
  1723  0004AE  0EC3               	movlw	low _keys
  1724  0004B0  0100               	movlb	0	; () banked
  1725  0004B2  25F3               	addwf	main@keypress& (0+255),w,b
  1726  0004B4  6EF6               	movwf	tblptrl,c
  1727  0004B6  6AF7               	clrf	tblptrh,c
  1728  0004B8  0EFE               	movlw	high _keys
  1729  0004BA  22F7               	addwfc	tblptrh,f,c
  1730  0004BC                     	if	0	;There are less than 3 active tblptr bytes
  1731  0004BC                     	endif
  1732  0004BC  0008               	tblrd		*
  1733  0004BE  50F5               	movf	tablat,w,c
  1734  0004C0  6E6A               	movwf	?_printf+2,c
  1735  0004C2  6A6B               	clrf	?_printf+3,c
  1736  0004C4  EC73  F008         	call	_printf	;wreg free
  1737  0004C8  0E90               	movlw	144
  1738  0004CA  ECA1  F008         	call	_lcdInst
  1739                           
  1740                           ;main.c: 181:                     if (BallDispensed[number_pressed] == 1)
  1741  0004CE  90D8               	bcf	status,0,c
  1742  0004D0  0100               	movlb	0	; () banked
  1743  0004D2  35EF               	rlcf	main@number_pressed& (0+255),w,b
  1744  0004D4  6ED9               	movwf	fsr2l,c
  1745  0004D6  35F0               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1746  0004D8  6EDA               	movwf	fsr2h,c
  1747  0004DA  0E80               	movlw	low _BallDispensed
  1748  0004DC  26D9               	addwf	fsr2l,f,c
  1749  0004DE  0E00               	movlw	high _BallDispensed
  1750  0004E0  22DA               	addwfc	fsr2h,f,c
  1751  0004E2  04DE               	decf	postinc2,w,c
  1752  0004E4  10DE               	iorwf	postinc2,w,c
  1753  0004E6  A4D8               	btfss	status,2,c
  1754  0004E8  D007               	goto	l2784
  1755                           
  1756                           ; BSR set to: 0
  1757                           ;main.c: 182:                         printf("Ball Added");
  1758  0004EA  0E58               	movlw	low (STR_27+3)
  1759  0004EC  6E68               	movwf	printf@fmt,c
  1760  0004EE  0EFF               	movlw	high (STR_27+3)
  1761  0004F0  6E69               	movwf	printf@fmt+1,c
  1762  0004F2  EC73  F008         	call	_printf	;wreg free
  1763  0004F6  D006               	goto	l2786
  1764  0004F8                     l2784:
  1765                           
  1766                           ; BSR set to: 0
  1767                           ;main.c: 184:                         printf("No Ball Added");
  1768  0004F8  0E55               	movlw	low STR_27
  1769  0004FA  6E68               	movwf	printf@fmt,c
  1770  0004FC  0EFF               	movlw	high STR_27
  1771  0004FE  6E69               	movwf	printf@fmt+1,c
  1772  000500  EC73  F008         	call	_printf	;wreg free
  1773  000504                     l2786:
  1774  000504  0ED0               	movlw	208
  1775  000506  ECA1  F008         	call	_lcdInst
  1776                           
  1777                           ;main.c: 186:                     printf("* to exit");
  1778  00050A  0EDA               	movlw	low STR_20
  1779  00050C  6E68               	movwf	printf@fmt,c
  1780  00050E  0EFF               	movlw	high STR_20
  1781  000510  6E69               	movwf	printf@fmt+1,c
  1782  000512  EC73  F008         	call	_printf	;wreg free
  1783                           
  1784                           ;main.c: 189:                     miniClear = 0;
  1785  000516  0E00               	movlw	0
  1786  000518  0100               	movlb	0	; () banked
  1787  00051A  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1788  00051C  0E00               	movlw	0
  1789  00051E  6FF1               	movwf	main@miniClear& (0+255),b
  1790  000520                     l2792:
  1791                           
  1792                           ; BSR set to: 0
  1793                           ;main.c: 192:                 if (miniTick == 3000) {
  1794  000520  0EB8               	movlw	184
  1795  000522  19ED               	xorwf	main@miniTick& (0+255),w,b
  1796  000524  E11D               	bnz	l2802
  1797  000526  0E0B               	movlw	11
  1798  000528  19EE               	xorwf	(main@miniTick+1)& (0+255),w,b
  1799  00052A  A4D8               	btfss	status,2,c
  1800  00052C  D019               	goto	l2802
  1801                           
  1802                           ; BSR set to: 0
  1803                           ;main.c: 193:                     miniClear = 1;
  1804  00052E  0E00               	movlw	0
  1805  000530  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1806  000532  0E01               	movlw	1
  1807  000534  6FF1               	movwf	main@miniClear& (0+255),b
  1808                           
  1809                           ; BSR set to: 0
  1810                           ;main.c: 194:                     miniState++;
  1811  000536  4BF4               	infsnz	main@miniState& (0+255),f,b
  1812  000538  2BF5               	incf	(main@miniState+1)& (0+255),f,b
  1813                           
  1814                           ; BSR set to: 0
  1815                           ;main.c: 195:                     miniState = miniState % 3;
  1816  00053A  C0F4  F00C         	movff	main@miniState,___awmod@dividend
  1817  00053E  C0F5  F00D         	movff	main@miniState+1,___awmod@dividend+1
  1818  000542  0E00               	movlw	0
  1819  000544  6E0F               	movwf	___awmod@divisor+1,c
  1820  000546  0E03               	movlw	3
  1821  000548  6E0E               	movwf	___awmod@divisor,c
  1822  00054A  ECDD  F006         	call	___awmod	;wreg free
  1823  00054E  C00C  F0F4         	movff	?___awmod,main@miniState
  1824  000552  C00D  F0F5         	movff	?___awmod+1,main@miniState+1
  1825                           
  1826                           ;main.c: 196:                     miniTick = 0;
  1827  000556  0E00               	movlw	0
  1828  000558  0100               	movlb	0	; () banked
  1829  00055A  6FEE               	movwf	(main@miniTick+1)& (0+255),b
  1830  00055C  0E00               	movlw	0
  1831  00055E  6FED               	movwf	main@miniTick& (0+255),b
  1832  000560                     l2802:
  1833                           
  1834                           ; BSR set to: 0
  1835                           ;main.c: 199:                 miniTick++;
  1836  000560  4BED               	infsnz	main@miniTick& (0+255),f,b
  1837  000562  2BEE               	incf	(main@miniTick+1)& (0+255),f,b
  1838                           
  1839                           ; BSR set to: 0
  1840                           ;main.c: 200:                 _delay((unsigned long)((1)*(10000000/4000.0)));
  1841  000564  0E04               	movlw	4
  1842  000566  0100               	movlb	0	; () banked
  1843  000568  6FE9               	movwf	??_main& (0+255),b
  1844  00056A  0E3D               	movlw	61
  1845  00056C                     u2477:
  1846  00056C  2EE8               	decfsz	wreg,f,c
  1847  00056E  D7FE               	bra	u2477
  1848  000570  2FE9               	decfsz	??_main& (0+255),f,b
  1849  000572  D7FC               	bra	u2477
  1850  000574  D000               	nop2	
  1851  000576                     l2806:
  1852                           
  1853                           ;main.c: 149:             while(!exit_key) {
  1854  000576  0100               	movlb	0	; () banked
  1855  000578  51C3               	movf	_exit_key& (0+255),w,b	;volatile
  1856  00057A  B4D8               	btfsc	status,2,c
  1857  00057C  D6E4               	goto	l2724
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;main.c: 205:             key_was_pressed = 0;
  1861  00057E  0E00               	movlw	0
  1862  000580  6FC4               	movwf	_key_was_pressed& (0+255),b	;volatile
  1863                           
  1864                           ;main.c: 206:             exit_key = 0;
  1865  000582  0E00               	movlw	0
  1866  000584  6FC3               	movwf	_exit_key& (0+255),b	;volatile
  1867  000586                     l2810:
  1868                           
  1869                           ; BSR set to: 0
  1870                           ;main.c: 210:         if (tick == 2000) {
  1871  000586  0ED0               	movlw	208
  1872  000588  19EB               	xorwf	main@tick& (0+255),w,b
  1873  00058A  E112               	bnz	l2820
  1874  00058C  0E07               	movlw	7
  1875  00058E  19EC               	xorwf	(main@tick+1)& (0+255),w,b
  1876  000590  A4D8               	btfss	status,2,c
  1877  000592  D00E               	goto	l2820
  1878                           
  1879                           ; BSR set to: 0
  1880                           ;main.c: 211:             clear = 1;
  1881  000594  0E00               	movlw	0
  1882  000596  6FF7               	movwf	(main@clear+1)& (0+255),b
  1883  000598  0E01               	movlw	1
  1884  00059A  6FF6               	movwf	main@clear& (0+255),b
  1885                           
  1886                           ; BSR set to: 0
  1887                           ;main.c: 212:             state++;
  1888  00059C  4BF8               	infsnz	main@state& (0+255),f,b
  1889  00059E  2BF9               	incf	(main@state+1)& (0+255),f,b
  1890                           
  1891                           ; BSR set to: 0
  1892                           ;main.c: 213:             state = state % 4;
  1893  0005A0  0E03               	movlw	3
  1894  0005A2  15F8               	andwf	main@state& (0+255),w,b
  1895  0005A4  6FF8               	movwf	main@state& (0+255),b
  1896  0005A6  6BF9               	clrf	(main@state+1)& (0+255),b
  1897                           
  1898                           ; BSR set to: 0
  1899                           ;main.c: 214:             tick = 0;
  1900  0005A8  0E00               	movlw	0
  1901  0005AA  6FEC               	movwf	(main@tick+1)& (0+255),b
  1902  0005AC  0E00               	movlw	0
  1903  0005AE  6FEB               	movwf	main@tick& (0+255),b
  1904  0005B0                     l2820:
  1905                           
  1906                           ; BSR set to: 0
  1907                           ;main.c: 217:         tick++;
  1908  0005B0  4BEB               	infsnz	main@tick& (0+255),f,b
  1909  0005B2  2BEC               	incf	(main@tick+1)& (0+255),f,b
  1910                           
  1911                           ; BSR set to: 0
  1912                           ;main.c: 218:         _delay((unsigned long)((1)*(10000000/4000.0)));
  1913  0005B4  0E04               	movlw	4
  1914  0005B6  0100               	movlb	0	; () banked
  1915  0005B8  6FE9               	movwf	??_main& (0+255),b
  1916  0005BA  0E3D               	movlw	61
  1917  0005BC                     u2487:
  1918  0005BC  2EE8               	decfsz	wreg,f,c
  1919  0005BE  D7FE               	bra	u2487
  1920  0005C0  2FE9               	decfsz	??_main& (0+255),f,b
  1921  0005C2  D7FC               	bra	u2487
  1922  0005C4  D5D1               	goto	L1
  1923  0005C6                     __end_of_main:
  1924                           	opt callstack 0
  1925                           
  1926 ;; *************** function _printf *****************
  1927 ;; Defined at:
  1928 ;;		line 5 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/printf.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;  fmt             2  103[COMRAM] PTR const unsigned char 
  1931 ;;		 -> STR_28(10), STR_27(14), STR_26(11), STR_25(12), 
  1932 ;;		 -> STR_24(10), STR_23(15), STR_22(14), STR_21(12), 
  1933 ;;		 -> STR_20(10), STR_19(15), STR_18(12), STR_17(15), 
  1934 ;;		 -> STR_16(12), STR_15(16), STR_14(9), STR_13(9), 
  1935 ;;		 -> STR_12(11), STR_11(13), STR_10(15), STR_9(11), 
  1936 ;;		 -> STR_8(15), STR_7(9), STR_6(12), STR_5(10), 
  1937 ;;		 -> STR_4(15), STR_3(17), STR_2(13), STR_1(11), 
  1938 ;; Auto vars:     Size  Location     Type
  1939 ;;  ap              2    2[BANK0 ] PTR void [1]
  1940 ;;		 -> ?_printf(2), 
  1941 ;;  ret             2    0        int 
  1942 ;; Return value:  Size  Location     Type
  1943 ;;                  2  103[COMRAM] int 
  1944 ;; Registers used:
  1945 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1946 ;; Tracked objects:
  1947 ;;		On entry : 0/0
  1948 ;;		On exit  : 0/0
  1949 ;;		Unchanged: 0/0
  1950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1951 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1952 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1954 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1955 ;;Total ram usage:        8 bytes
  1956 ;; Hardware stack levels used:    1
  1957 ;; Hardware stack levels required when called:   11
  1958 ;; This function calls:
  1959 ;;		_vfprintf
  1960 ;; This function is called by:
  1961 ;;		_main
  1962 ;; This function uses a non-reentrant model
  1963 ;;
  1964                           
  1965                           	psect	text1
  1966  0010E6                     __ptext1:
  1967                           	opt callstack 0
  1968  0010E6                     _printf:
  1969                           	opt callstack 19
  1970                           
  1971                           ;incstack = 0
  1972  0010E6  0E6A               	movlw	low (?_printf+2)
  1973  0010E8  0100               	movlb	0	; () banked
  1974  0010EA  6FE7               	movwf	printf@ap& (0+255),b
  1975  0010EC  0E00               	movlw	high (?_printf+2)
  1976  0010EE  6FE8               	movwf	(printf@ap+1)& (0+255),b
  1977                           
  1978                           ; BSR set to: 0
  1979  0010F0  0E00               	movlw	0
  1980  0010F2  6E60               	movwf	vfprintf@fp,c
  1981  0010F4  0E00               	movlw	0
  1982  0010F6  6E61               	movwf	vfprintf@fp+1,c
  1983  0010F8  C068  F062         	movff	printf@fmt,vfprintf@fmt
  1984  0010FC  C069  F063         	movff	printf@fmt+1,vfprintf@fmt+1
  1985  001100  0EE7               	movlw	low printf@ap
  1986  001102  6E64               	movwf	vfprintf@ap,c
  1987  001104  0E00               	movlw	high printf@ap
  1988  001106  6E65               	movwf	vfprintf@ap+1,c
  1989  001108  EC80  F007         	call	_vfprintf	;wreg free
  1990  00110C  0012               	return		;funcret
  1991  00110E                     __end_of_printf:
  1992                           	opt callstack 0
  1993                           
  1994 ;; *************** function _vfprintf *****************
  1995 ;; Defined at:
  1996 ;;		line 1368 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1997 ;; Parameters:    Size  Location     Type
  1998 ;;  fp              2   95[COMRAM] PTR struct _IO_FILE
  1999 ;;		 -> NULL(0), 
  2000 ;;  fmt             2   97[COMRAM] PTR const unsigned char 
  2001 ;;		 -> STR_28(10), STR_27(14), STR_26(11), STR_25(12), 
  2002 ;;		 -> STR_24(10), STR_23(15), STR_22(14), STR_21(12), 
  2003 ;;		 -> STR_20(10), STR_19(15), STR_18(12), STR_17(15), 
  2004 ;;		 -> STR_16(12), STR_15(16), STR_14(9), STR_13(9), 
  2005 ;;		 -> STR_12(11), STR_11(13), STR_10(15), STR_9(11), 
  2006 ;;		 -> STR_8(15), STR_7(9), STR_6(12), STR_5(10), 
  2007 ;;		 -> STR_4(15), STR_3(17), STR_2(13), STR_1(11), 
  2008 ;;  ap              2   99[COMRAM] PTR PTR void 
  2009 ;;		 -> printf@ap(2), 
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;  cfmt            2  101[COMRAM] PTR unsigned char 
  2012 ;;		 -> STR_28(10), STR_27(14), STR_26(11), STR_25(12), 
  2013 ;;		 -> STR_24(10), STR_23(15), STR_22(14), STR_21(12), 
  2014 ;;		 -> STR_20(10), STR_19(15), STR_18(12), STR_17(15), 
  2015 ;;		 -> STR_16(12), STR_15(16), STR_14(9), STR_13(9), 
  2016 ;;		 -> STR_12(11), STR_11(13), STR_10(15), STR_9(11), 
  2017 ;;		 -> STR_8(15), STR_7(9), STR_6(12), STR_5(10), 
  2018 ;;		 -> STR_4(15), STR_3(17), STR_2(13), STR_1(11), 
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  2   95[COMRAM] int 
  2021 ;; Registers used:
  2022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2028 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2029 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2030 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2031 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2032 ;;Total ram usage:        8 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; Hardware stack levels required when called:   10
  2035 ;; This function calls:
  2036 ;;		_vfpfcnvrt
  2037 ;; This function is called by:
  2038 ;;		_printf
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           	psect	text2
  2043  000F00                     __ptext2:
  2044                           	opt callstack 0
  2045  000F00                     _vfprintf:
  2046                           	opt callstack 19
  2047                           
  2048                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
  2049                           
  2050                           ;incstack = 0
  2051  000F00  C062  F066         	movff	vfprintf@fmt,vfprintf@cfmt
  2052  000F04  C063  F067         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2053                           
  2054                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  2055  000F08  0E00               	movlw	0
  2056  000F0A  6E6D               	movwf	_nout+1,c
  2057  000F0C  0E00               	movlw	0
  2058  000F0E  6E6C               	movwf	_nout,c
  2059                           
  2060                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  2061  000F10  D012               	goto	l2532
  2062  000F12                     l2530:
  2063                           
  2064                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
  2065  000F12  C060  F04F         	movff	vfprintf@fp,vfpfcnvrt@fp
  2066  000F16  C061  F050         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2067  000F1A  0E66               	movlw	low vfprintf@cfmt
  2068  000F1C  6E51               	movwf	vfpfcnvrt@fmt,c
  2069  000F1E  0E00               	movlw	high vfprintf@cfmt
  2070  000F20  6E52               	movwf	vfpfcnvrt@fmt+1,c
  2071  000F22  C064  F053         	movff	vfprintf@ap,vfpfcnvrt@ap
  2072  000F26  C065  F054         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2073  000F2A  EC04  F004         	call	_vfpfcnvrt	;wreg free
  2074  000F2E  504F               	movf	?_vfpfcnvrt,w,c
  2075  000F30  266C               	addwf	_nout,f,c
  2076  000F32  5050               	movf	?_vfpfcnvrt+1,w,c
  2077  000F34  226D               	addwfc	_nout+1,f,c
  2078  000F36                     l2532:
  2079                           
  2080                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  2081  000F36  C066  FFF6         	movff	vfprintf@cfmt,tblptrl
  2082  000F3A  C067  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2083  000F3E                     	if	0	;tblptru may be non-zero
  2084  000F3E                     	endif
  2085  000F3E                     	if	0	;tblptru may be non-zero
  2086  000F3E                     	endif
  2087  000F3E  0008               	tblrd		*
  2088  000F40  50F5               	movf	tablat,w,c
  2089  000F42  0900               	iorlw	0
  2090  000F44  A4D8               	btfss	status,2,c
  2091  000F46  D7E5               	goto	l2530
  2092                           
  2093                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
  2094  000F48  C06C  F060         	movff	_nout,?_vfprintf
  2095  000F4C  C06D  F061         	movff	_nout+1,?_vfprintf+1
  2096  000F50  0012               	return		;funcret
  2097  000F52                     __end_of_vfprintf:
  2098                           	opt callstack 0
  2099                           
  2100 ;; *************** function _vfpfcnvrt *****************
  2101 ;; Defined at:
  2102 ;;		line 670 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;  fp              2   78[COMRAM] PTR struct _IO_FILE
  2105 ;;		 -> NULL(0), 
  2106 ;;  fmt             2   80[COMRAM] PTR PTR unsigned char 
  2107 ;;		 -> vfprintf@cfmt(2), 
  2108 ;;  ap              2   82[COMRAM] PTR PTR void 
  2109 ;;		 -> printf@ap(2), 
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;  ll              8   86[COMRAM] long long 
  2112 ;;  llu             8    0        unsigned long long 
  2113 ;;  f               4    0        unsigned long long 
  2114 ;;  vp              3    0        PTR void 
  2115 ;;  ct              3    0        unsigned char [3]
  2116 ;;  cp              3    0        PTR unsigned char 
  2117 ;;  i               2    0        int 
  2118 ;;  done            2    0        int 
  2119 ;;  c               1   94[COMRAM] unsigned char 
  2120 ;; Return value:  Size  Location     Type
  2121 ;;                  2   78[COMRAM] int 
  2122 ;; Registers used:
  2123 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2124 ;; Tracked objects:
  2125 ;;		On entry : 0/0
  2126 ;;		On exit  : 0/0
  2127 ;;		Unchanged: 0/0
  2128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2129 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2130 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2131 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2132 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2133 ;;Total ram usage:       17 bytes
  2134 ;; Hardware stack levels used:    1
  2135 ;; Hardware stack levels required when called:    9
  2136 ;; This function calls:
  2137 ;;		_ctoa
  2138 ;;		_dtoa
  2139 ;;		_fputc
  2140 ;; This function is called by:
  2141 ;;		_vfprintf
  2142 ;; This function uses a non-reentrant model
  2143 ;;
  2144                           
  2145                           	psect	text3
  2146  000808                     __ptext3:
  2147                           	opt callstack 0
  2148  000808                     _vfpfcnvrt:
  2149                           	opt callstack 19
  2150                           
  2151                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.05/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.05/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
  2152                           
  2153                           ;incstack = 0
  2154  000808  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2155  00080C  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2156  000810  CFDE FFF6          	movff	postinc2,tblptrl
  2157  000814  CFDD FFF7          	movff	postdec2,tblptrh
  2158  000818                     	if	0	;tblptru may be non-zero
  2159  000818                     	endif
  2160  000818                     	if	0	;tblptru may be non-zero
  2161  000818                     	endif
  2162  000818  0008               	tblrd		*
  2163  00081A  50F5               	movf	tablat,w,c
  2164  00081C  0A25               	xorlw	37
  2165  00081E  A4D8               	btfss	status,2,c
  2166  000820  D0CC               	goto	l2514
  2167                           
  2168                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  2169  000822  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2170  000826  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2171  00082A  2ADE               	incf	postinc2,f,c
  2172  00082C  0E00               	movlw	0
  2173  00082E  22DD               	addwfc	postdec2,f,c
  2174                           
  2175                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
  2176  000830  0E00               	movlw	0
  2177  000832  6E6F               	movwf	_width+1,c
  2178  000834  0E00               	movlw	0
  2179  000836  6E6E               	movwf	_width,c
  2180  000838  C06E  F072         	movff	_width,_flags
  2181  00083C  C06F  F073         	movff	_width+1,_flags+1
  2182                           
  2183                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
  2184  000840  6870               	setf	_prec,c
  2185  000842  6871               	setf	_prec+1,c
  2186                           
  2187                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 792:         if (*fm
      +                          t[0] == 'c') {
  2188  000844  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2189  000848  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2190  00084C  CFDE FFF6          	movff	postinc2,tblptrl
  2191  000850  CFDD FFF7          	movff	postdec2,tblptrh
  2192  000854                     	if	0	;tblptru may be non-zero
  2193  000854                     	endif
  2194  000854                     	if	0	;tblptru may be non-zero
  2195  000854                     	endif
  2196  000854  0008               	tblrd		*
  2197  000856  50F5               	movf	tablat,w,c
  2198  000858  0A63               	xorlw	99
  2199  00085A  A4D8               	btfss	status,2,c
  2200  00085C  D026               	goto	l2488
  2201                           
  2202                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 793:             ++*
      +                          fmt;
  2203  00085E  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2204  000862  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2205  000866  2ADE               	incf	postinc2,f,c
  2206  000868  0E00               	movlw	0
  2207  00086A  22DD               	addwfc	postdec2,f,c
  2208                           
  2209                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 794:             c =
      +                           (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  2210  00086C  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2211  000870  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2212  000874  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2213  000878  0E02               	movlw	2
  2214  00087A  26DE               	addwf	postinc2,f,c
  2215  00087C  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2216  000880  0E00               	movlw	0
  2217  000882  22DD               	addwfc	postdec2,f,c
  2218  000884  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2219  000888  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2220  00088C  50DF               	movf	indf2,w,c
  2221  00088E  6E5F               	movwf	vfpfcnvrt@c,c
  2222                           
  2223                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 795:             ret
      +                          urn ctoa(fp, c);
  2224  000890  C04F  F02B         	movff	vfpfcnvrt@fp,ctoa@fp
  2225  000894  C050  F02C         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  2226  000898  C05F  F02D         	movff	vfpfcnvrt@c,ctoa@c
  2227  00089C  ECA9  F007         	call	_ctoa	;wreg free
  2228  0008A0  C02B  F04F         	movff	?_ctoa,?_vfpfcnvrt
  2229  0008A4  C02C  F050         	movff	?_ctoa+1,?_vfpfcnvrt+1
  2230  0008A8  0012               	return	
  2231  0008AA                     l2488:
  2232                           
  2233                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 825:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
  2234  0008AA  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2235  0008AE  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2236  0008B2  CFDE FFF6          	movff	postinc2,tblptrl
  2237  0008B6  CFDD FFF7          	movff	postdec2,tblptrh
  2238  0008BA                     	if	0	;tblptru may be non-zero
  2239  0008BA                     	endif
  2240  0008BA                     	if	0	;tblptru may be non-zero
  2241  0008BA                     	endif
  2242  0008BA  0008               	tblrd		*
  2243  0008BC  50F5               	movf	tablat,w,c
  2244  0008BE  0A64               	xorlw	100
  2245  0008C0  B4D8               	btfsc	status,2,c
  2246  0008C2  D00D               	goto	u2070
  2247  0008C4  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2248  0008C8  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2249  0008CC  CFDE FFF6          	movff	postinc2,tblptrl
  2250  0008D0  CFDD FFF7          	movff	postdec2,tblptrh
  2251  0008D4                     	if	0	;tblptru may be non-zero
  2252  0008D4                     	endif
  2253  0008D4                     	if	0	;tblptru may be non-zero
  2254  0008D4                     	endif
  2255  0008D4  0008               	tblrd		*
  2256  0008D6  50F5               	movf	tablat,w,c
  2257  0008D8  0A69               	xorlw	105
  2258  0008DA  A4D8               	btfss	status,2,c
  2259  0008DC  D03F               	goto	l2498
  2260  0008DE                     u2070:
  2261                           
  2262                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 827:             ++*
      +                          fmt;
  2263  0008DE  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2264  0008E2  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2265  0008E6  2ADE               	incf	postinc2,f,c
  2266  0008E8  0E00               	movlw	0
  2267  0008EA  22DD               	addwfc	postdec2,f,c
  2268                           
  2269                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 828:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2270  0008EC  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2271  0008F0  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2272  0008F4  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2273  0008F8  0E02               	movlw	2
  2274  0008FA  26DE               	addwf	postinc2,f,c
  2275  0008FC  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2276  000900  0E00               	movlw	0
  2277  000902  22DD               	addwfc	postdec2,f,c
  2278  000904  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2279  000908  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2280  00090C  CFDE F057          	movff	postinc2,vfpfcnvrt@ll
  2281  000910  CFDD F058          	movff	postdec2,vfpfcnvrt@ll+1
  2282  000914  0E00               	movlw	0
  2283  000916  BE58               	btfsc	vfpfcnvrt@ll+1,7,c
  2284  000918  0EFF               	movlw	-1
  2285  00091A  6E59               	movwf	vfpfcnvrt@ll+2,c
  2286  00091C  6E5A               	movwf	vfpfcnvrt@ll+3,c
  2287  00091E  6E5B               	movwf	vfpfcnvrt@ll+4,c
  2288  000920  6E5C               	movwf	vfpfcnvrt@ll+5,c
  2289  000922  6E5D               	movwf	vfpfcnvrt@ll+6,c
  2290  000924  6E5E               	movwf	vfpfcnvrt@ll+7,c
  2291                           
  2292                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 830:             ret
      +                          urn dtoa(fp, ll);
  2293  000926  C04F  F02B         	movff	vfpfcnvrt@fp,dtoa@fp
  2294  00092A  C050  F02C         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2295  00092E  C057  F02D         	movff	vfpfcnvrt@ll,dtoa@d
  2296  000932  C058  F02E         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2297  000936  C059  F02F         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2298  00093A  C05A  F030         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2299  00093E  C05B  F031         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2300  000942  C05C  F032         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2301  000946  C05D  F033         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2302  00094A  C05E  F034         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2303  00094E  ECE3  F002         	call	_dtoa	;wreg free
  2304  000952  C02B  F04F         	movff	?_dtoa,?_vfpfcnvrt
  2305  000956  C02C  F050         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2306  00095A  0012               	return	
  2307  00095C                     l2498:
  2308                           
  2309                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
  2310  00095C  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2311  000960  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2312  000964  CFDE FFF6          	movff	postinc2,tblptrl
  2313  000968  CFDD FFF7          	movff	postdec2,tblptrh
  2314  00096C                     	if	0	;tblptru may be non-zero
  2315  00096C                     	endif
  2316  00096C                     	if	0	;tblptru may be non-zero
  2317  00096C                     	endif
  2318  00096C  0008               	tblrd		*
  2319  00096E  50F5               	movf	tablat,w,c
  2320  000970  0A25               	xorlw	37
  2321  000972  A4D8               	btfss	status,2,c
  2322  000974  D016               	goto	l2508
  2323                           
  2324                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
  2325  000976  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2326  00097A  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2327  00097E  2ADE               	incf	postinc2,f,c
  2328  000980  0E00               	movlw	0
  2329  000982  22DD               	addwfc	postdec2,f,c
  2330                           
  2331                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
  2332  000984  0E00               	movlw	0
  2333  000986  6E11               	movwf	fputc@c+1,c
  2334  000988  0E25               	movlw	37
  2335  00098A  6E10               	movwf	fputc@c,c
  2336  00098C  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2337  000990  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2338  000994  EC15  F007         	call	_fputc	;wreg free
  2339  000998                     l2504:
  2340                           
  2341                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
  2342  000998  0E00               	movlw	0
  2343  00099A  6E50               	movwf	?_vfpfcnvrt+1,c
  2344  00099C  0E01               	movlw	1
  2345  00099E  6E4F               	movwf	?_vfpfcnvrt,c
  2346  0009A0  0012               	return	
  2347  0009A2                     l2508:
  2348                           
  2349                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  2350  0009A2  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2351  0009A6  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2352  0009AA  2ADE               	incf	postinc2,f,c
  2353  0009AC  0E00               	movlw	0
  2354  0009AE  22DD               	addwfc	postdec2,f,c
  2355                           
  2356                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  2357  0009B0  0E00               	movlw	0
  2358  0009B2  6E50               	movwf	?_vfpfcnvrt+1,c
  2359  0009B4  0E00               	movlw	0
  2360  0009B6  6E4F               	movwf	?_vfpfcnvrt,c
  2361  0009B8  0012               	return	
  2362  0009BA                     l2514:
  2363                           
  2364                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  2365  0009BA  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2366  0009BE  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2367  0009C2  CFDE FFF6          	movff	postinc2,tblptrl
  2368  0009C6  CFDD FFF7          	movff	postdec2,tblptrh
  2369  0009CA                     	if	0	;tblptru may be non-zero
  2370  0009CA                     	endif
  2371  0009CA                     	if	0	;tblptru may be non-zero
  2372  0009CA                     	endif
  2373  0009CA  0008               	tblrd		*
  2374  0009CC  50F5               	movf	tablat,w,c
  2375  0009CE  6E10               	movwf	fputc@c,c
  2376  0009D0  6A11               	clrf	fputc@c+1,c
  2377  0009D2  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2378  0009D6  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2379  0009DA  EC15  F007         	call	_fputc	;wreg free
  2380                           
  2381                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  2382  0009DE  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2383  0009E2  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2384  0009E6  2ADE               	incf	postinc2,f,c
  2385  0009E8  0E00               	movlw	0
  2386  0009EA  22DD               	addwfc	postdec2,f,c
  2387  0009EC  D7D5               	goto	l2504
  2388  0009EE                     __end_of_vfpfcnvrt:
  2389                           	opt callstack 0
  2390                           
  2391 ;; *************** function _dtoa *****************
  2392 ;; Defined at:
  2393 ;;		line 274 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  2396 ;;		 -> NULL(0), 
  2397 ;;  d               8   44[COMRAM] long long 
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;  n               8   68[COMRAM] long long 
  2400 ;;  i               2   76[COMRAM] int 
  2401 ;;  s               2   66[COMRAM] int 
  2402 ;;  w               2   64[COMRAM] int 
  2403 ;;  p               2   62[COMRAM] int 
  2404 ;; Return value:  Size  Location     Type
  2405 ;;                  2   42[COMRAM] int 
  2406 ;; Registers used:
  2407 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2408 ;; Tracked objects:
  2409 ;;		On entry : 0/0
  2410 ;;		On exit  : 0/0
  2411 ;;		Unchanged: 0/0
  2412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2413 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2414 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2415 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2416 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2417 ;;Total ram usage:       36 bytes
  2418 ;; Hardware stack levels used:    1
  2419 ;; Hardware stack levels required when called:    8
  2420 ;; This function calls:
  2421 ;;		___aodiv
  2422 ;;		___aomod
  2423 ;;		_abs
  2424 ;;		_pad
  2425 ;; This function is called by:
  2426 ;;		_vfpfcnvrt
  2427 ;; This function uses a non-reentrant model
  2428 ;;
  2429                           
  2430                           	psect	text4
  2431  0005C6                     __ptext4:
  2432                           	opt callstack 0
  2433  0005C6                     _dtoa:
  2434                           	opt callstack 19
  2435                           
  2436                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 274: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.
      +                          c: 275: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 276:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 277:   
      +                            long long n;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 280:  
      +                             n = d;
  2437                           
  2438                           ;incstack = 0
  2439  0005C6  C02D  F045         	movff	dtoa@d,dtoa@n
  2440  0005CA  C02E  F046         	movff	dtoa@d+1,dtoa@n+1
  2441  0005CE  C02F  F047         	movff	dtoa@d+2,dtoa@n+2
  2442  0005D2  C030  F048         	movff	dtoa@d+3,dtoa@n+3
  2443  0005D6  C031  F049         	movff	dtoa@d+4,dtoa@n+4
  2444  0005DA  C032  F04A         	movff	dtoa@d+5,dtoa@n+5
  2445  0005DE  C033  F04B         	movff	dtoa@d+6,dtoa@n+6
  2446  0005E2  C034  F04C         	movff	dtoa@d+7,dtoa@n+7
  2447                           
  2448                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ?
      +                           1 : 0;
  2449  0005E6  AE4C               	btfss	dtoa@n+7,7,c
  2450  0005E8  D002               	goto	u1890
  2451  0005EA  0E01               	movlw	1
  2452  0005EC  D001               	goto	u1900
  2453  0005EE                     u1890:
  2454  0005EE  0E00               	movlw	0
  2455  0005F0                     u1900:
  2456  0005F0  6E43               	movwf	dtoa@s,c
  2457  0005F2  6A44               	clrf	dtoa@s+1,c
  2458                           
  2459                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  2460  0005F4  5043               	movf	dtoa@s,w,c
  2461  0005F6  1044               	iorwf	dtoa@s+1,w,c
  2462  0005F8  B4D8               	btfsc	status,2,c
  2463  0005FA  D010               	goto	l2416
  2464                           
  2465                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  2466  0005FC  1E4C               	comf	dtoa@n+7,f,c
  2467  0005FE  1E4B               	comf	dtoa@n+6,f,c
  2468  000600  1E4A               	comf	dtoa@n+5,f,c
  2469  000602  1E49               	comf	dtoa@n+4,f,c
  2470  000604  1E48               	comf	dtoa@n+3,f,c
  2471  000606  1E47               	comf	dtoa@n+2,f,c
  2472  000608  1E46               	comf	dtoa@n+1,f,c
  2473  00060A  6C45               	negf	dtoa@n,c
  2474  00060C  0E00               	movlw	0
  2475  00060E  2246               	addwfc	dtoa@n+1,f,c
  2476  000610  2247               	addwfc	dtoa@n+2,f,c
  2477  000612  2248               	addwfc	dtoa@n+3,f,c
  2478  000614  2249               	addwfc	dtoa@n+4,f,c
  2479  000616  224A               	addwfc	dtoa@n+5,f,c
  2480  000618  224B               	addwfc	dtoa@n+6,f,c
  2481  00061A  224C               	addwfc	dtoa@n+7,f,c
  2482  00061C                     l2416:
  2483                           
  2484                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 287:     if (!(prec 
      +                          < 0)) {
  2485  00061C  AE71               	btfss	_prec+1,7,c
  2486                           
  2487                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 288:         flags &
      +                          = ~(1 << 1);
  2488  00061E  9272               	bcf	_flags,1,c
  2489                           
  2490                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 290:     p = (0 < pr
      +                          ec) ? prec : 1;
  2491  000620  BE71               	btfsc	_prec+1,7,c
  2492  000622  D005               	goto	u1930
  2493  000624  5071               	movf	_prec+1,w,c
  2494  000626  E108               	bnz	l183
  2495  000628  0470               	decf	_prec,w,c
  2496  00062A  B0D8               	btfsc	status,0,c
  2497  00062C  D005               	goto	l183
  2498  00062E                     u1930:
  2499  00062E  0E00               	movlw	0
  2500  000630  6E40               	movwf	dtoa@p+1,c
  2501  000632  0E01               	movlw	1
  2502  000634  6E3F               	movwf	dtoa@p,c
  2503  000636  D004               	goto	l185
  2504  000638                     l183:
  2505  000638  C070  F03F         	movff	_prec,dtoa@p
  2506  00063C  C071  F040         	movff	_prec+1,dtoa@p+1
  2507  000640                     l185:
  2508                           
  2509                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 291:     w = width;
  2510  000640  C06E  F041         	movff	_width,dtoa@w
  2511  000644  C06F  F042         	movff	_width+1,dtoa@w+1
  2512                           
  2513                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 292:     if (s || (f
      +                          lags & (1 << 2))) {
  2514  000648  5043               	movf	dtoa@s,w,c
  2515  00064A  1044               	iorwf	dtoa@s+1,w,c
  2516  00064C  A4D8               	btfss	status,2,c
  2517  00064E  D002               	goto	u1950
  2518  000650  A472               	btfss	_flags,2,c
  2519  000652  D003               	goto	l2430
  2520  000654                     u1950:
  2521                           
  2522                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 293:         --w;
  2523  000654  0641               	decf	dtoa@w,f,c
  2524  000656  A0D8               	btfss	status,0,c
  2525  000658  0642               	decf	dtoa@w+1,f,c
  2526  00065A                     l2430:
  2527                           
  2528                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(
      +                          dbuf) - 1;
  2529  00065A  0E00               	movlw	0
  2530  00065C  6E4E               	movwf	dtoa@i+1,c
  2531  00065E  0E1F               	movlw	31
  2532  000660  6E4D               	movwf	dtoa@i,c
  2533                           
  2534                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '
      +                          \0';
  2535  000662  0E00               	movlw	0
  2536  000664  0100               	movlb	0	; () banked
  2537  000666  6FE4               	movwf	(_dbuf+31)& (0+255),b
  2538                           
  2539                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2540  000668  D07C               	goto	l2444
  2541  00066A                     l2434:
  2542                           
  2543                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 300:         --i;
  2544  00066A  064D               	decf	dtoa@i,f,c
  2545  00066C  A0D8               	btfss	status,0,c
  2546  00066E  064E               	decf	dtoa@i+1,f,c
  2547                           
  2548                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 301:         dbuf[i]
      +                           = '0' + abs(n % 10);
  2549  000670  0EC5               	movlw	low _dbuf
  2550  000672  244D               	addwf	dtoa@i,w,c
  2551  000674  6ED9               	movwf	fsr2l,c
  2552  000676  0E00               	movlw	high _dbuf
  2553  000678  204E               	addwfc	dtoa@i+1,w,c
  2554  00067A  6EDA               	movwf	fsr2h,c
  2555  00067C  C045  F00C         	movff	dtoa@n,___aomod@dividend
  2556  000680  C046  F00D         	movff	dtoa@n+1,___aomod@dividend+1
  2557  000684  C047  F00E         	movff	dtoa@n+2,___aomod@dividend+2
  2558  000688  C048  F00F         	movff	dtoa@n+3,___aomod@dividend+3
  2559  00068C  C049  F010         	movff	dtoa@n+4,___aomod@dividend+4
  2560  000690  C04A  F011         	movff	dtoa@n+5,___aomod@dividend+5
  2561  000694  C04B  F012         	movff	dtoa@n+6,___aomod@dividend+6
  2562  000698  C04C  F013         	movff	dtoa@n+7,___aomod@dividend+7
  2563  00069C  0E0A               	movlw	10
  2564  00069E  6E14               	movwf	___aomod@divisor,c
  2565  0006A0  0E00               	movlw	0
  2566  0006A2  6E15               	movwf	___aomod@divisor+1,c
  2567  0006A4  0E00               	movlw	0
  2568  0006A6  6E16               	movwf	___aomod@divisor+2,c
  2569  0006A8  0E00               	movlw	0
  2570  0006AA  6E17               	movwf	___aomod@divisor+3,c
  2571  0006AC  0E00               	movlw	0
  2572  0006AE  6E18               	movwf	___aomod@divisor+4,c
  2573  0006B0  0E00               	movlw	0
  2574  0006B2  6E19               	movwf	___aomod@divisor+5,c
  2575  0006B4  0E00               	movlw	0
  2576  0006B6  6E1A               	movwf	___aomod@divisor+6,c
  2577  0006B8  0E00               	movlw	0
  2578  0006BA  6E1B               	movwf	___aomod@divisor+7,c
  2579  0006BC  EC9B  F005         	call	___aomod	;wreg free
  2580  0006C0  C00C  F035         	movff	?___aomod,??_dtoa
  2581  0006C4  C00D  F036         	movff	?___aomod+1,??_dtoa+1
  2582  0006C8  C00E  F037         	movff	?___aomod+2,??_dtoa+2
  2583  0006CC  C00F  F038         	movff	?___aomod+3,??_dtoa+3
  2584  0006D0  C010  F039         	movff	?___aomod+4,??_dtoa+4
  2585  0006D4  C011  F03A         	movff	?___aomod+5,??_dtoa+5
  2586  0006D8  C012  F03B         	movff	?___aomod+6,??_dtoa+6
  2587  0006DC  C013  F03C         	movff	?___aomod+7,??_dtoa+7
  2588  0006E0  C035  F01E         	movff	??_dtoa,abs@a
  2589  0006E4  C037  F01F         	movff	??_dtoa+2,abs@a+1
  2590  0006E8  EC30  F008         	call	_abs	;wreg free
  2591  0006EC  501E               	movf	?_abs,w,c
  2592  0006EE  0F30               	addlw	48
  2593  0006F0  6EDF               	movwf	indf2,c
  2594                           
  2595                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 302:         --p;
  2596  0006F2  063F               	decf	dtoa@p,f,c
  2597  0006F4  A0D8               	btfss	status,0,c
  2598  0006F6  0640               	decf	dtoa@p+1,f,c
  2599                           
  2600                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 303:         --w;
  2601  0006F8  0641               	decf	dtoa@w,f,c
  2602  0006FA  A0D8               	btfss	status,0,c
  2603  0006FC  0642               	decf	dtoa@w+1,f,c
  2604                           
  2605                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 304:         n = n /
      +                           10;
  2606  0006FE  C045  F00C         	movff	dtoa@n,___aodiv@dividend
  2607  000702  C046  F00D         	movff	dtoa@n+1,___aodiv@dividend+1
  2608  000706  C047  F00E         	movff	dtoa@n+2,___aodiv@dividend+2
  2609  00070A  C048  F00F         	movff	dtoa@n+3,___aodiv@dividend+3
  2610  00070E  C049  F010         	movff	dtoa@n+4,___aodiv@dividend+4
  2611  000712  C04A  F011         	movff	dtoa@n+5,___aodiv@dividend+5
  2612  000716  C04B  F012         	movff	dtoa@n+6,___aodiv@dividend+6
  2613  00071A  C04C  F013         	movff	dtoa@n+7,___aodiv@dividend+7
  2614  00071E  0E0A               	movlw	10
  2615  000720  6E14               	movwf	___aodiv@divisor,c
  2616  000722  0E00               	movlw	0
  2617  000724  6E15               	movwf	___aodiv@divisor+1,c
  2618  000726  0E00               	movlw	0
  2619  000728  6E16               	movwf	___aodiv@divisor+2,c
  2620  00072A  0E00               	movlw	0
  2621  00072C  6E17               	movwf	___aodiv@divisor+3,c
  2622  00072E  0E00               	movlw	0
  2623  000730  6E18               	movwf	___aodiv@divisor+4,c
  2624  000732  0E00               	movlw	0
  2625  000734  6E19               	movwf	___aodiv@divisor+5,c
  2626  000736  0E00               	movlw	0
  2627  000738  6E1A               	movwf	___aodiv@divisor+6,c
  2628  00073A  0E00               	movlw	0
  2629  00073C  6E1B               	movwf	___aodiv@divisor+7,c
  2630  00073E  ECF7  F004         	call	___aodiv	;wreg free
  2631  000742  C00C  F045         	movff	?___aodiv,dtoa@n
  2632  000746  C00D  F046         	movff	?___aodiv+1,dtoa@n+1
  2633  00074A  C00E  F047         	movff	?___aodiv+2,dtoa@n+2
  2634  00074E  C00F  F048         	movff	?___aodiv+3,dtoa@n+3
  2635  000752  C010  F049         	movff	?___aodiv+4,dtoa@n+4
  2636  000756  C011  F04A         	movff	?___aodiv+5,dtoa@n+5
  2637  00075A  C012  F04B         	movff	?___aodiv+6,dtoa@n+6
  2638  00075E  C013  F04C         	movff	?___aodiv+7,dtoa@n+7
  2639  000762                     l2444:
  2640                           
  2641                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2642  000762  BE4E               	btfsc	dtoa@i+1,7,c
  2643  000764  D01F               	goto	u2000
  2644  000766  504E               	movf	dtoa@i+1,w,c
  2645  000768  E103               	bnz	u1960
  2646  00076A  044D               	decf	dtoa@i,w,c
  2647  00076C  A0D8               	btfss	status,0,c
  2648  00076E  D01A               	goto	u2000
  2649  000770                     u1960:
  2650  000770  5045               	movf	dtoa@n,w,c
  2651  000772  1046               	iorwf	dtoa@n+1,w,c
  2652  000774  1047               	iorwf	dtoa@n+2,w,c
  2653  000776  1048               	iorwf	dtoa@n+3,w,c
  2654  000778  1049               	iorwf	dtoa@n+4,w,c
  2655  00077A  104A               	iorwf	dtoa@n+5,w,c
  2656  00077C  104B               	iorwf	dtoa@n+6,w,c
  2657  00077E  104C               	iorwf	dtoa@n+7,w,c
  2658  000780  A4D8               	btfss	status,2,c
  2659  000782  D773               	goto	l2434
  2660  000784  BE40               	btfsc	dtoa@p+1,7,c
  2661  000786  D005               	goto	u1980
  2662  000788  5040               	movf	dtoa@p+1,w,c
  2663  00078A  E102               	bnz	u1981
  2664  00078C  043F               	decf	dtoa@p,w,c
  2665  00078E  B0D8               	btfsc	status,0,c
  2666  000790                     u1981:
  2667  000790  D76C               	goto	l2434
  2668  000792                     u1980:
  2669  000792  BE42               	btfsc	dtoa@w+1,7,c
  2670  000794  D007               	goto	u2000
  2671  000796  5042               	movf	dtoa@w+1,w,c
  2672  000798  E103               	bnz	u1990
  2673  00079A  0441               	decf	dtoa@w,w,c
  2674  00079C  A0D8               	btfss	status,0,c
  2675  00079E  D002               	goto	u2000
  2676  0007A0                     u1990:
  2677  0007A0  B272               	btfsc	_flags,1,c
  2678  0007A2  D763               	goto	l2434
  2679  0007A4                     u2000:
  2680                           
  2681                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 308:     if (s || (f
      +                          lags & (1 << 2))) {
  2682  0007A4  5043               	movf	dtoa@s,w,c
  2683  0007A6  1044               	iorwf	dtoa@s+1,w,c
  2684  0007A8  A4D8               	btfss	status,2,c
  2685  0007AA  D002               	goto	u2020
  2686  0007AC  A472               	btfss	_flags,2,c
  2687  0007AE  D017               	goto	l2468
  2688  0007B0                     u2020:
  2689                           
  2690                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 309:         --i;
  2691  0007B0  064D               	decf	dtoa@i,f,c
  2692  0007B2  A0D8               	btfss	status,0,c
  2693  0007B4  064E               	decf	dtoa@i+1,f,c
  2694                           
  2695                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 310:         dbuf[i]
      +                           = s ? '-' : '+';
  2696  0007B6  5043               	movf	dtoa@s,w,c
  2697  0007B8  1044               	iorwf	dtoa@s+1,w,c
  2698  0007BA  A4D8               	btfss	status,2,c
  2699  0007BC  D004               	goto	l2464
  2700  0007BE  0E00               	movlw	0
  2701  0007C0  6E3E               	movwf	_dtoa$327+1,c
  2702  0007C2  0E2B               	movlw	43
  2703  0007C4  D003               	goto	L2
  2704  0007C6                     l2464:
  2705  0007C6  0E00               	movlw	0
  2706  0007C8  6E3E               	movwf	_dtoa$327+1,c
  2707  0007CA  0E2D               	movlw	45
  2708  0007CC                     L2:
  2709  0007CC  6E3D               	movwf	_dtoa$327,c
  2710  0007CE  0EC5               	movlw	low _dbuf
  2711  0007D0  244D               	addwf	dtoa@i,w,c
  2712  0007D2  6ED9               	movwf	fsr2l,c
  2713  0007D4  0E00               	movlw	high _dbuf
  2714  0007D6  204E               	addwfc	dtoa@i+1,w,c
  2715  0007D8  6EDA               	movwf	fsr2h,c
  2716  0007DA  C03D  FFDF         	movff	_dtoa$327,indf2
  2717  0007DE                     l2468:
  2718                           
  2719                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 314:     return pad(
      +                          fp, &dbuf[i], w);
  2720  0007DE  C02B  F020         	movff	dtoa@fp,pad@fp
  2721  0007E2  C02C  F021         	movff	dtoa@fp+1,pad@fp+1
  2722  0007E6  0EC5               	movlw	low _dbuf
  2723  0007E8  244D               	addwf	dtoa@i,w,c
  2724  0007EA  6E22               	movwf	pad@buf,c
  2725  0007EC  0E00               	movlw	high _dbuf
  2726  0007EE  204E               	addwfc	dtoa@i+1,w,c
  2727  0007F0  6E23               	movwf	pad@buf+1,c
  2728  0007F2  C041  F024         	movff	dtoa@w,pad@p
  2729  0007F6  C042  F025         	movff	dtoa@w+1,pad@p+1
  2730  0007FA  EC92  F006         	call	_pad	;wreg free
  2731  0007FE  C020  F02B         	movff	?_pad,?_dtoa
  2732  000802  C021  F02C         	movff	?_pad+1,?_dtoa+1
  2733  000806  0012               	return		;funcret
  2734  000808                     __end_of_dtoa:
  2735                           	opt callstack 0
  2736                           
  2737 ;; *************** function _abs *****************
  2738 ;; Defined at:
  2739 ;;		line 1 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/abs.c"
  2740 ;; Parameters:    Size  Location     Type
  2741 ;;  a               2   29[COMRAM] int 
  2742 ;; Auto vars:     Size  Location     Type
  2743 ;;		None
  2744 ;; Return value:  Size  Location     Type
  2745 ;;                  2   29[COMRAM] int 
  2746 ;; Registers used:
  2747 ;;		wreg, status,2, status,0
  2748 ;; Tracked objects:
  2749 ;;		On entry : 0/0
  2750 ;;		On exit  : 0/0
  2751 ;;		Unchanged: 0/0
  2752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2753 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2755 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2756 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2757 ;;Total ram usage:        4 bytes
  2758 ;; Hardware stack levels used:    1
  2759 ;; Hardware stack levels required when called:    1
  2760 ;; This function calls:
  2761 ;;		Nothing
  2762 ;; This function is called by:
  2763 ;;		_dtoa
  2764 ;; This function uses a non-reentrant model
  2765 ;;
  2766                           
  2767                           	psect	text5
  2768  001060                     __ptext5:
  2769                           	opt callstack 0
  2770  001060                     _abs:
  2771                           	opt callstack 25
  2772                           
  2773                           ;incstack = 0
  2774  001060  BE1F               	btfsc	abs@a+1,7,c
  2775  001062  D005               	goto	u1740
  2776  001064  501F               	movf	abs@a+1,w,c
  2777  001066  E110               	bnz	l896
  2778  001068  041E               	decf	abs@a,w,c
  2779  00106A  B0D8               	btfsc	status,0,c
  2780  00106C  D00D               	goto	l896
  2781  00106E                     u1740:
  2782  00106E  C01E  F020         	movff	abs@a,??_abs
  2783  001072  C01F  F021         	movff	abs@a+1,??_abs+1
  2784  001076  1E20               	comf	??_abs,f,c
  2785  001078  1E21               	comf	??_abs+1,f,c
  2786  00107A  4A20               	infsnz	??_abs,f,c
  2787  00107C  2A21               	incf	??_abs+1,f,c
  2788  00107E  C020  F01E         	movff	??_abs,?_abs
  2789  001082  C021  F01F         	movff	??_abs+1,?_abs+1
  2790  001086  0012               	return	
  2791  001088                     l896:
  2792  001088  C01E  F01E         	movff	abs@a,?_abs
  2793  00108C  C01F  F01F         	movff	abs@a+1,?_abs+1
  2794  001090  0012               	return		;funcret
  2795  001092                     __end_of_abs:
  2796                           	opt callstack 0
  2797                           
  2798 ;; *************** function ___aomod *****************
  2799 ;; Defined at:
  2800 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aomod.c"
  2801 ;; Parameters:    Size  Location     Type
  2802 ;;  dividend        8   11[COMRAM] long long 
  2803 ;;  divisor         8   19[COMRAM] long long 
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;  sign            1   28[COMRAM] unsigned char 
  2806 ;;  counter         1   27[COMRAM] unsigned char 
  2807 ;; Return value:  Size  Location     Type
  2808 ;;                  8   11[COMRAM] long long 
  2809 ;; Registers used:
  2810 ;;		wreg, status,2, status,0
  2811 ;; Tracked objects:
  2812 ;;		On entry : 0/0
  2813 ;;		On exit  : 0/0
  2814 ;;		Unchanged: 0/0
  2815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2816 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2817 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2819 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2820 ;;Total ram usage:       18 bytes
  2821 ;; Hardware stack levels used:    1
  2822 ;; Hardware stack levels required when called:    1
  2823 ;; This function calls:
  2824 ;;		Nothing
  2825 ;; This function is called by:
  2826 ;;		_dtoa
  2827 ;; This function uses a non-reentrant model
  2828 ;;
  2829                           
  2830                           	psect	text6
  2831  000B36                     __ptext6:
  2832                           	opt callstack 0
  2833  000B36                     ___aomod:
  2834                           	opt callstack 25
  2835                           
  2836                           ;incstack = 0
  2837  000B36  0E00               	movlw	0
  2838  000B38  6E1D               	movwf	___aomod@sign,c
  2839  000B3A  AE13               	btfss	___aomod@dividend+7,7,c
  2840  000B3C  D012               	goto	l2368
  2841  000B3E  1E13               	comf	___aomod@dividend+7,f,c
  2842  000B40  1E12               	comf	___aomod@dividend+6,f,c
  2843  000B42  1E11               	comf	___aomod@dividend+5,f,c
  2844  000B44  1E10               	comf	___aomod@dividend+4,f,c
  2845  000B46  1E0F               	comf	___aomod@dividend+3,f,c
  2846  000B48  1E0E               	comf	___aomod@dividend+2,f,c
  2847  000B4A  1E0D               	comf	___aomod@dividend+1,f,c
  2848  000B4C  6C0C               	negf	___aomod@dividend,c
  2849  000B4E  0E00               	movlw	0
  2850  000B50  220D               	addwfc	___aomod@dividend+1,f,c
  2851  000B52  220E               	addwfc	___aomod@dividend+2,f,c
  2852  000B54  220F               	addwfc	___aomod@dividend+3,f,c
  2853  000B56  2210               	addwfc	___aomod@dividend+4,f,c
  2854  000B58  2211               	addwfc	___aomod@dividend+5,f,c
  2855  000B5A  2212               	addwfc	___aomod@dividend+6,f,c
  2856  000B5C  2213               	addwfc	___aomod@dividend+7,f,c
  2857  000B5E  0E01               	movlw	1
  2858  000B60  6E1D               	movwf	___aomod@sign,c
  2859  000B62                     l2368:
  2860  000B62  AE1B               	btfss	___aomod@divisor+7,7,c
  2861  000B64  D010               	goto	l2372
  2862  000B66  1E1B               	comf	___aomod@divisor+7,f,c
  2863  000B68  1E1A               	comf	___aomod@divisor+6,f,c
  2864  000B6A  1E19               	comf	___aomod@divisor+5,f,c
  2865  000B6C  1E18               	comf	___aomod@divisor+4,f,c
  2866  000B6E  1E17               	comf	___aomod@divisor+3,f,c
  2867  000B70  1E16               	comf	___aomod@divisor+2,f,c
  2868  000B72  1E15               	comf	___aomod@divisor+1,f,c
  2869  000B74  6C14               	negf	___aomod@divisor,c
  2870  000B76  0E00               	movlw	0
  2871  000B78  2215               	addwfc	___aomod@divisor+1,f,c
  2872  000B7A  2216               	addwfc	___aomod@divisor+2,f,c
  2873  000B7C  2217               	addwfc	___aomod@divisor+3,f,c
  2874  000B7E  2218               	addwfc	___aomod@divisor+4,f,c
  2875  000B80  2219               	addwfc	___aomod@divisor+5,f,c
  2876  000B82  221A               	addwfc	___aomod@divisor+6,f,c
  2877  000B84  221B               	addwfc	___aomod@divisor+7,f,c
  2878  000B86                     l2372:
  2879  000B86  5014               	movf	___aomod@divisor,w,c
  2880  000B88  1015               	iorwf	___aomod@divisor+1,w,c
  2881  000B8A  1016               	iorwf	___aomod@divisor+2,w,c
  2882  000B8C  1017               	iorwf	___aomod@divisor+3,w,c
  2883  000B8E  1018               	iorwf	___aomod@divisor+4,w,c
  2884  000B90  1019               	iorwf	___aomod@divisor+5,w,c
  2885  000B92  101A               	iorwf	___aomod@divisor+6,w,c
  2886  000B94  101B               	iorwf	___aomod@divisor+7,w,c
  2887  000B96  B4D8               	btfsc	status,2,c
  2888  000B98  D03C               	goto	l2388
  2889  000B9A  0E01               	movlw	1
  2890  000B9C  6E1C               	movwf	___aomod@counter,c
  2891  000B9E  D00A               	goto	l2378
  2892  000BA0                     l2376:
  2893  000BA0  90D8               	bcf	status,0,c
  2894  000BA2  3614               	rlcf	___aomod@divisor,f,c
  2895  000BA4  3615               	rlcf	___aomod@divisor+1,f,c
  2896  000BA6  3616               	rlcf	___aomod@divisor+2,f,c
  2897  000BA8  3617               	rlcf	___aomod@divisor+3,f,c
  2898  000BAA  3618               	rlcf	___aomod@divisor+4,f,c
  2899  000BAC  3619               	rlcf	___aomod@divisor+5,f,c
  2900  000BAE  361A               	rlcf	___aomod@divisor+6,f,c
  2901  000BB0  361B               	rlcf	___aomod@divisor+7,f,c
  2902  000BB2  2A1C               	incf	___aomod@counter,f,c
  2903  000BB4                     l2378:
  2904  000BB4  AE1B               	btfss	___aomod@divisor+7,7,c
  2905  000BB6  D7F4               	goto	l2376
  2906  000BB8                     u1850:
  2907  000BB8  5014               	movf	___aomod@divisor,w,c
  2908  000BBA  5C0C               	subwf	___aomod@dividend,w,c
  2909  000BBC  5015               	movf	___aomod@divisor+1,w,c
  2910  000BBE  580D               	subwfb	___aomod@dividend+1,w,c
  2911  000BC0  5016               	movf	___aomod@divisor+2,w,c
  2912  000BC2  580E               	subwfb	___aomod@dividend+2,w,c
  2913  000BC4  5017               	movf	___aomod@divisor+3,w,c
  2914  000BC6  580F               	subwfb	___aomod@dividend+3,w,c
  2915  000BC8  5018               	movf	___aomod@divisor+4,w,c
  2916  000BCA  5810               	subwfb	___aomod@dividend+4,w,c
  2917  000BCC  5019               	movf	___aomod@divisor+5,w,c
  2918  000BCE  5811               	subwfb	___aomod@dividend+5,w,c
  2919  000BD0  501A               	movf	___aomod@divisor+6,w,c
  2920  000BD2  5812               	subwfb	___aomod@dividend+6,w,c
  2921  000BD4  501B               	movf	___aomod@divisor+7,w,c
  2922  000BD6  5813               	subwfb	___aomod@dividend+7,w,c
  2923  000BD8  A0D8               	btfss	status,0,c
  2924  000BDA  D010               	goto	l2384
  2925  000BDC  5014               	movf	___aomod@divisor,w,c
  2926  000BDE  5E0C               	subwf	___aomod@dividend,f,c
  2927  000BE0  5015               	movf	___aomod@divisor+1,w,c
  2928  000BE2  5A0D               	subwfb	___aomod@dividend+1,f,c
  2929  000BE4  5016               	movf	___aomod@divisor+2,w,c
  2930  000BE6  5A0E               	subwfb	___aomod@dividend+2,f,c
  2931  000BE8  5017               	movf	___aomod@divisor+3,w,c
  2932  000BEA  5A0F               	subwfb	___aomod@dividend+3,f,c
  2933  000BEC  5018               	movf	___aomod@divisor+4,w,c
  2934  000BEE  5A10               	subwfb	___aomod@dividend+4,f,c
  2935  000BF0  5019               	movf	___aomod@divisor+5,w,c
  2936  000BF2  5A11               	subwfb	___aomod@dividend+5,f,c
  2937  000BF4  501A               	movf	___aomod@divisor+6,w,c
  2938  000BF6  5A12               	subwfb	___aomod@dividend+6,f,c
  2939  000BF8  501B               	movf	___aomod@divisor+7,w,c
  2940  000BFA  5A13               	subwfb	___aomod@dividend+7,f,c
  2941  000BFC                     l2384:
  2942  000BFC  90D8               	bcf	status,0,c
  2943  000BFE  321B               	rrcf	___aomod@divisor+7,f,c
  2944  000C00  321A               	rrcf	___aomod@divisor+6,f,c
  2945  000C02  3219               	rrcf	___aomod@divisor+5,f,c
  2946  000C04  3218               	rrcf	___aomod@divisor+4,f,c
  2947  000C06  3217               	rrcf	___aomod@divisor+3,f,c
  2948  000C08  3216               	rrcf	___aomod@divisor+2,f,c
  2949  000C0A  3215               	rrcf	___aomod@divisor+1,f,c
  2950  000C0C  3214               	rrcf	___aomod@divisor,f,c
  2951  000C0E  2E1C               	decfsz	___aomod@counter,f,c
  2952  000C10  D7D3               	goto	u1850
  2953  000C12                     l2388:
  2954  000C12  501D               	movf	___aomod@sign,w,c
  2955  000C14  B4D8               	btfsc	status,2,c
  2956  000C16  D010               	goto	l2392
  2957  000C18  1E13               	comf	___aomod@dividend+7,f,c
  2958  000C1A  1E12               	comf	___aomod@dividend+6,f,c
  2959  000C1C  1E11               	comf	___aomod@dividend+5,f,c
  2960  000C1E  1E10               	comf	___aomod@dividend+4,f,c
  2961  000C20  1E0F               	comf	___aomod@dividend+3,f,c
  2962  000C22  1E0E               	comf	___aomod@dividend+2,f,c
  2963  000C24  1E0D               	comf	___aomod@dividend+1,f,c
  2964  000C26  6C0C               	negf	___aomod@dividend,c
  2965  000C28  0E00               	movlw	0
  2966  000C2A  220D               	addwfc	___aomod@dividend+1,f,c
  2967  000C2C  220E               	addwfc	___aomod@dividend+2,f,c
  2968  000C2E  220F               	addwfc	___aomod@dividend+3,f,c
  2969  000C30  2210               	addwfc	___aomod@dividend+4,f,c
  2970  000C32  2211               	addwfc	___aomod@dividend+5,f,c
  2971  000C34  2212               	addwfc	___aomod@dividend+6,f,c
  2972  000C36  2213               	addwfc	___aomod@dividend+7,f,c
  2973  000C38                     l2392:
  2974  000C38  C00C  F00C         	movff	___aomod@dividend,?___aomod
  2975  000C3C  C00D  F00D         	movff	___aomod@dividend+1,?___aomod+1
  2976  000C40  C00E  F00E         	movff	___aomod@dividend+2,?___aomod+2
  2977  000C44  C00F  F00F         	movff	___aomod@dividend+3,?___aomod+3
  2978  000C48  C010  F010         	movff	___aomod@dividend+4,?___aomod+4
  2979  000C4C  C011  F011         	movff	___aomod@dividend+5,?___aomod+5
  2980  000C50  C012  F012         	movff	___aomod@dividend+6,?___aomod+6
  2981  000C54  C013  F013         	movff	___aomod@dividend+7,?___aomod+7
  2982  000C58  0012               	return		;funcret
  2983  000C5A                     __end_of___aomod:
  2984                           	opt callstack 0
  2985                           
  2986 ;; *************** function ___aodiv *****************
  2987 ;; Defined at:
  2988 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aodiv.c"
  2989 ;; Parameters:    Size  Location     Type
  2990 ;;  dividend        8   11[COMRAM] long long 
  2991 ;;  divisor         8   19[COMRAM] long long 
  2992 ;; Auto vars:     Size  Location     Type
  2993 ;;  quotient        8   29[COMRAM] long long 
  2994 ;;  sign            1   28[COMRAM] unsigned char 
  2995 ;;  counter         1   27[COMRAM] unsigned char 
  2996 ;; Return value:  Size  Location     Type
  2997 ;;                  8   11[COMRAM] long long 
  2998 ;; Registers used:
  2999 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3000 ;; Tracked objects:
  3001 ;;		On entry : 0/0
  3002 ;;		On exit  : 0/0
  3003 ;;		Unchanged: 0/0
  3004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3005 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3008 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3009 ;;Total ram usage:       26 bytes
  3010 ;; Hardware stack levels used:    1
  3011 ;; Hardware stack levels required when called:    1
  3012 ;; This function calls:
  3013 ;;		Nothing
  3014 ;; This function is called by:
  3015 ;;		_dtoa
  3016 ;; This function uses a non-reentrant model
  3017 ;;
  3018                           
  3019                           	psect	text7
  3020  0009EE                     __ptext7:
  3021                           	opt callstack 0
  3022  0009EE                     ___aodiv:
  3023                           	opt callstack 25
  3024                           
  3025                           ;incstack = 0
  3026  0009EE  0E00               	movlw	0
  3027  0009F0  6E1D               	movwf	___aodiv@sign,c
  3028  0009F2  AE1B               	btfss	___aodiv@divisor+7,7,c
  3029  0009F4  D012               	goto	l2324
  3030  0009F6  1E1B               	comf	___aodiv@divisor+7,f,c
  3031  0009F8  1E1A               	comf	___aodiv@divisor+6,f,c
  3032  0009FA  1E19               	comf	___aodiv@divisor+5,f,c
  3033  0009FC  1E18               	comf	___aodiv@divisor+4,f,c
  3034  0009FE  1E17               	comf	___aodiv@divisor+3,f,c
  3035  000A00  1E16               	comf	___aodiv@divisor+2,f,c
  3036  000A02  1E15               	comf	___aodiv@divisor+1,f,c
  3037  000A04  6C14               	negf	___aodiv@divisor,c
  3038  000A06  0E00               	movlw	0
  3039  000A08  2215               	addwfc	___aodiv@divisor+1,f,c
  3040  000A0A  2216               	addwfc	___aodiv@divisor+2,f,c
  3041  000A0C  2217               	addwfc	___aodiv@divisor+3,f,c
  3042  000A0E  2218               	addwfc	___aodiv@divisor+4,f,c
  3043  000A10  2219               	addwfc	___aodiv@divisor+5,f,c
  3044  000A12  221A               	addwfc	___aodiv@divisor+6,f,c
  3045  000A14  221B               	addwfc	___aodiv@divisor+7,f,c
  3046  000A16  0E01               	movlw	1
  3047  000A18  6E1D               	movwf	___aodiv@sign,c
  3048  000A1A                     l2324:
  3049  000A1A  AE13               	btfss	___aodiv@dividend+7,7,c
  3050  000A1C  D012               	goto	l2330
  3051  000A1E  1E13               	comf	___aodiv@dividend+7,f,c
  3052  000A20  1E12               	comf	___aodiv@dividend+6,f,c
  3053  000A22  1E11               	comf	___aodiv@dividend+5,f,c
  3054  000A24  1E10               	comf	___aodiv@dividend+4,f,c
  3055  000A26  1E0F               	comf	___aodiv@dividend+3,f,c
  3056  000A28  1E0E               	comf	___aodiv@dividend+2,f,c
  3057  000A2A  1E0D               	comf	___aodiv@dividend+1,f,c
  3058  000A2C  6C0C               	negf	___aodiv@dividend,c
  3059  000A2E  0E00               	movlw	0
  3060  000A30  220D               	addwfc	___aodiv@dividend+1,f,c
  3061  000A32  220E               	addwfc	___aodiv@dividend+2,f,c
  3062  000A34  220F               	addwfc	___aodiv@dividend+3,f,c
  3063  000A36  2210               	addwfc	___aodiv@dividend+4,f,c
  3064  000A38  2211               	addwfc	___aodiv@dividend+5,f,c
  3065  000A3A  2212               	addwfc	___aodiv@dividend+6,f,c
  3066  000A3C  2213               	addwfc	___aodiv@dividend+7,f,c
  3067  000A3E  0E01               	movlw	1
  3068  000A40  1A1D               	xorwf	___aodiv@sign,f,c
  3069  000A42                     l2330:
  3070  000A42  EE20  F01E         	lfsr	2,___aodiv@quotient
  3071  000A46  0E07               	movlw	7
  3072  000A48                     u1771:
  3073  000A48  6ADE               	clrf	postinc2,c
  3074  000A4A  06E8               	decf	wreg,f,c
  3075  000A4C  E2FD               	bc	u1771
  3076  000A4E  5014               	movf	___aodiv@divisor,w,c
  3077  000A50  1015               	iorwf	___aodiv@divisor+1,w,c
  3078  000A52  1016               	iorwf	___aodiv@divisor+2,w,c
  3079  000A54  1017               	iorwf	___aodiv@divisor+3,w,c
  3080  000A56  1018               	iorwf	___aodiv@divisor+4,w,c
  3081  000A58  1019               	iorwf	___aodiv@divisor+5,w,c
  3082  000A5A  101A               	iorwf	___aodiv@divisor+6,w,c
  3083  000A5C  101B               	iorwf	___aodiv@divisor+7,w,c
  3084  000A5E  B4D8               	btfsc	status,2,c
  3085  000A60  D046               	goto	l2352
  3086  000A62  0E01               	movlw	1
  3087  000A64  6E1C               	movwf	___aodiv@counter,c
  3088  000A66  D00A               	goto	l2338
  3089  000A68                     l2336:
  3090  000A68  90D8               	bcf	status,0,c
  3091  000A6A  3614               	rlcf	___aodiv@divisor,f,c
  3092  000A6C  3615               	rlcf	___aodiv@divisor+1,f,c
  3093  000A6E  3616               	rlcf	___aodiv@divisor+2,f,c
  3094  000A70  3617               	rlcf	___aodiv@divisor+3,f,c
  3095  000A72  3618               	rlcf	___aodiv@divisor+4,f,c
  3096  000A74  3619               	rlcf	___aodiv@divisor+5,f,c
  3097  000A76  361A               	rlcf	___aodiv@divisor+6,f,c
  3098  000A78  361B               	rlcf	___aodiv@divisor+7,f,c
  3099  000A7A  2A1C               	incf	___aodiv@counter,f,c
  3100  000A7C                     l2338:
  3101  000A7C  AE1B               	btfss	___aodiv@divisor+7,7,c
  3102  000A7E  D7F4               	goto	l2336
  3103  000A80                     u1790:
  3104  000A80  90D8               	bcf	status,0,c
  3105  000A82  361E               	rlcf	___aodiv@quotient,f,c
  3106  000A84  361F               	rlcf	___aodiv@quotient+1,f,c
  3107  000A86  3620               	rlcf	___aodiv@quotient+2,f,c
  3108  000A88  3621               	rlcf	___aodiv@quotient+3,f,c
  3109  000A8A  3622               	rlcf	___aodiv@quotient+4,f,c
  3110  000A8C  3623               	rlcf	___aodiv@quotient+5,f,c
  3111  000A8E  3624               	rlcf	___aodiv@quotient+6,f,c
  3112  000A90  3625               	rlcf	___aodiv@quotient+7,f,c
  3113  000A92  5014               	movf	___aodiv@divisor,w,c
  3114  000A94  5C0C               	subwf	___aodiv@dividend,w,c
  3115  000A96  5015               	movf	___aodiv@divisor+1,w,c
  3116  000A98  580D               	subwfb	___aodiv@dividend+1,w,c
  3117  000A9A  5016               	movf	___aodiv@divisor+2,w,c
  3118  000A9C  580E               	subwfb	___aodiv@dividend+2,w,c
  3119  000A9E  5017               	movf	___aodiv@divisor+3,w,c
  3120  000AA0  580F               	subwfb	___aodiv@dividend+3,w,c
  3121  000AA2  5018               	movf	___aodiv@divisor+4,w,c
  3122  000AA4  5810               	subwfb	___aodiv@dividend+4,w,c
  3123  000AA6  5019               	movf	___aodiv@divisor+5,w,c
  3124  000AA8  5811               	subwfb	___aodiv@dividend+5,w,c
  3125  000AAA  501A               	movf	___aodiv@divisor+6,w,c
  3126  000AAC  5812               	subwfb	___aodiv@dividend+6,w,c
  3127  000AAE  501B               	movf	___aodiv@divisor+7,w,c
  3128  000AB0  5813               	subwfb	___aodiv@dividend+7,w,c
  3129  000AB2  A0D8               	btfss	status,0,c
  3130  000AB4  D011               	goto	l2348
  3131  000AB6  5014               	movf	___aodiv@divisor,w,c
  3132  000AB8  5E0C               	subwf	___aodiv@dividend,f,c
  3133  000ABA  5015               	movf	___aodiv@divisor+1,w,c
  3134  000ABC  5A0D               	subwfb	___aodiv@dividend+1,f,c
  3135  000ABE  5016               	movf	___aodiv@divisor+2,w,c
  3136  000AC0  5A0E               	subwfb	___aodiv@dividend+2,f,c
  3137  000AC2  5017               	movf	___aodiv@divisor+3,w,c
  3138  000AC4  5A0F               	subwfb	___aodiv@dividend+3,f,c
  3139  000AC6  5018               	movf	___aodiv@divisor+4,w,c
  3140  000AC8  5A10               	subwfb	___aodiv@dividend+4,f,c
  3141  000ACA  5019               	movf	___aodiv@divisor+5,w,c
  3142  000ACC  5A11               	subwfb	___aodiv@dividend+5,f,c
  3143  000ACE  501A               	movf	___aodiv@divisor+6,w,c
  3144  000AD0  5A12               	subwfb	___aodiv@dividend+6,f,c
  3145  000AD2  501B               	movf	___aodiv@divisor+7,w,c
  3146  000AD4  5A13               	subwfb	___aodiv@dividend+7,f,c
  3147  000AD6  801E               	bsf	___aodiv@quotient,0,c
  3148  000AD8                     l2348:
  3149  000AD8  90D8               	bcf	status,0,c
  3150  000ADA  321B               	rrcf	___aodiv@divisor+7,f,c
  3151  000ADC  321A               	rrcf	___aodiv@divisor+6,f,c
  3152  000ADE  3219               	rrcf	___aodiv@divisor+5,f,c
  3153  000AE0  3218               	rrcf	___aodiv@divisor+4,f,c
  3154  000AE2  3217               	rrcf	___aodiv@divisor+3,f,c
  3155  000AE4  3216               	rrcf	___aodiv@divisor+2,f,c
  3156  000AE6  3215               	rrcf	___aodiv@divisor+1,f,c
  3157  000AE8  3214               	rrcf	___aodiv@divisor,f,c
  3158  000AEA  2E1C               	decfsz	___aodiv@counter,f,c
  3159  000AEC  D7C9               	goto	u1790
  3160  000AEE                     l2352:
  3161  000AEE  501D               	movf	___aodiv@sign,w,c
  3162  000AF0  B4D8               	btfsc	status,2,c
  3163  000AF2  D010               	goto	l2356
  3164  000AF4  1E25               	comf	___aodiv@quotient+7,f,c
  3165  000AF6  1E24               	comf	___aodiv@quotient+6,f,c
  3166  000AF8  1E23               	comf	___aodiv@quotient+5,f,c
  3167  000AFA  1E22               	comf	___aodiv@quotient+4,f,c
  3168  000AFC  1E21               	comf	___aodiv@quotient+3,f,c
  3169  000AFE  1E20               	comf	___aodiv@quotient+2,f,c
  3170  000B00  1E1F               	comf	___aodiv@quotient+1,f,c
  3171  000B02  6C1E               	negf	___aodiv@quotient,c
  3172  000B04  0E00               	movlw	0
  3173  000B06  221F               	addwfc	___aodiv@quotient+1,f,c
  3174  000B08  2220               	addwfc	___aodiv@quotient+2,f,c
  3175  000B0A  2221               	addwfc	___aodiv@quotient+3,f,c
  3176  000B0C  2222               	addwfc	___aodiv@quotient+4,f,c
  3177  000B0E  2223               	addwfc	___aodiv@quotient+5,f,c
  3178  000B10  2224               	addwfc	___aodiv@quotient+6,f,c
  3179  000B12  2225               	addwfc	___aodiv@quotient+7,f,c
  3180  000B14                     l2356:
  3181  000B14  C01E  F00C         	movff	___aodiv@quotient,?___aodiv
  3182  000B18  C01F  F00D         	movff	___aodiv@quotient+1,?___aodiv+1
  3183  000B1C  C020  F00E         	movff	___aodiv@quotient+2,?___aodiv+2
  3184  000B20  C021  F00F         	movff	___aodiv@quotient+3,?___aodiv+3
  3185  000B24  C022  F010         	movff	___aodiv@quotient+4,?___aodiv+4
  3186  000B28  C023  F011         	movff	___aodiv@quotient+5,?___aodiv+5
  3187  000B2C  C024  F012         	movff	___aodiv@quotient+6,?___aodiv+6
  3188  000B30  C025  F013         	movff	___aodiv@quotient+7,?___aodiv+7
  3189  000B34  0012               	return		;funcret
  3190  000B36                     __end_of___aodiv:
  3191                           	opt callstack 0
  3192                           
  3193 ;; *************** function _ctoa *****************
  3194 ;; Defined at:
  3195 ;;		line 259 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3196 ;; Parameters:    Size  Location     Type
  3197 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  3198 ;;		 -> NULL(0), 
  3199 ;;  c               1   44[COMRAM] unsigned char 
  3200 ;; Auto vars:     Size  Location     Type
  3201 ;;  w               2   45[COMRAM] int 
  3202 ;;  l               2    0        int 
  3203 ;; Return value:  Size  Location     Type
  3204 ;;                  2   42[COMRAM] int 
  3205 ;; Registers used:
  3206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3207 ;; Tracked objects:
  3208 ;;		On entry : 0/0
  3209 ;;		On exit  : 0/0
  3210 ;;		Unchanged: 0/0
  3211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3212 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3213 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3215 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3216 ;;Total ram usage:        5 bytes
  3217 ;; Hardware stack levels used:    1
  3218 ;; Hardware stack levels required when called:    8
  3219 ;; This function calls:
  3220 ;;		_pad
  3221 ;; This function is called by:
  3222 ;;		_vfpfcnvrt
  3223 ;; This function uses a non-reentrant model
  3224 ;;
  3225                           
  3226                           	psect	text8
  3227  000F52                     __ptext8:
  3228                           	opt callstack 0
  3229  000F52                     _ctoa:
  3230                           	opt callstack 19
  3231                           
  3232                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 259: static int ctoa
      +                          (FILE *fp, char c);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 26
      +                          0: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 261:     int l, 
      +                          w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 264:     w = width
      +                           ? width - 1 : width;
  3233                           
  3234                           ;incstack = 0
  3235  000F52  506E               	movf	_width,w,c
  3236  000F54  106F               	iorwf	_width+1,w,c
  3237  000F56  A4D8               	btfss	status,2,c
  3238  000F58  D005               	goto	l2400
  3239  000F5A  C06E  F02E         	movff	_width,ctoa@w
  3240  000F5E  C06F  F02F         	movff	_width+1,ctoa@w+1
  3241  000F62  D006               	goto	l2402
  3242  000F64                     l2400:
  3243  000F64  0EFF               	movlw	255
  3244  000F66  246E               	addwf	_width,w,c
  3245  000F68  6E2E               	movwf	ctoa@w,c
  3246  000F6A  0EFF               	movlw	255
  3247  000F6C  206F               	addwfc	_width+1,w,c
  3248  000F6E  6E2F               	movwf	ctoa@w+1,c
  3249  000F70                     l2402:
  3250                           
  3251                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 267:     dbuf[0] = c
      +                          ;
  3252  000F70  C02D  F0C5         	movff	ctoa@c,_dbuf
  3253                           
  3254                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 268:     dbuf[1] = '
      +                          \0';
  3255  000F74  0E00               	movlw	0
  3256  000F76  0100               	movlb	0	; () banked
  3257  000F78  6FC6               	movwf	(_dbuf+1)& (0+255),b
  3258                           
  3259                           ; BSR set to: 0
  3260                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 269:     return pad(
      +                          fp, &dbuf[0], w);
  3261  000F7A  C02B  F020         	movff	ctoa@fp,pad@fp
  3262  000F7E  C02C  F021         	movff	ctoa@fp+1,pad@fp+1
  3263  000F82  0EC5               	movlw	low _dbuf
  3264  000F84  6E22               	movwf	pad@buf,c
  3265  000F86  0E00               	movlw	high _dbuf
  3266  000F88  6E23               	movwf	pad@buf+1,c
  3267  000F8A  C02E  F024         	movff	ctoa@w,pad@p
  3268  000F8E  C02F  F025         	movff	ctoa@w+1,pad@p+1
  3269  000F92  EC92  F006         	call	_pad	;wreg free
  3270  000F96  C020  F02B         	movff	?_pad,?_ctoa
  3271  000F9A  C021  F02C         	movff	?_pad+1,?_ctoa+1
  3272  000F9E  0012               	return		;funcret
  3273  000FA0                     __end_of_ctoa:
  3274                           	opt callstack 0
  3275                           
  3276 ;; *************** function _pad *****************
  3277 ;; Defined at:
  3278 ;;		line 72 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3279 ;; Parameters:    Size  Location     Type
  3280 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  3281 ;;		 -> NULL(0), 
  3282 ;;  buf             2   33[COMRAM] PTR unsigned char 
  3283 ;;		 -> dbuf(32), 
  3284 ;;  p               2   35[COMRAM] int 
  3285 ;; Auto vars:     Size  Location     Type
  3286 ;;  w               2   40[COMRAM] int 
  3287 ;;  i               2   38[COMRAM] int 
  3288 ;; Return value:  Size  Location     Type
  3289 ;;                  2   31[COMRAM] int 
  3290 ;; Registers used:
  3291 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3292 ;; Tracked objects:
  3293 ;;		On entry : 0/0
  3294 ;;		On exit  : 0/0
  3295 ;;		Unchanged: 0/0
  3296 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3297 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3298 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3299 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3300 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3301 ;;Total ram usage:       11 bytes
  3302 ;; Hardware stack levels used:    1
  3303 ;; Hardware stack levels required when called:    7
  3304 ;; This function calls:
  3305 ;;		_fputc
  3306 ;;		_fputs
  3307 ;;		_strlen
  3308 ;; This function is called by:
  3309 ;;		_ctoa
  3310 ;;		_dtoa
  3311 ;; This function uses a non-reentrant model
  3312 ;;
  3313                           
  3314                           	psect	text9
  3315  000D24                     __ptext9:
  3316                           	opt callstack 0
  3317  000D24                     _pad:
  3318                           	opt callstack 19
  3319                           
  3320                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  3321                           
  3322                           ;incstack = 0
  3323  000D24  A072               	btfss	_flags,0,c
  3324  000D26  D00A               	goto	l2294
  3325                           
  3326                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  3327  000D28  C022  F019         	movff	pad@buf,fputs@s
  3328  000D2C  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3329  000D30  C020  F01B         	movff	pad@fp,fputs@fp
  3330  000D34  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3331  000D38  EC14  F008         	call	_fputs	;wreg free
  3332  000D3C                     l2294:
  3333                           
  3334                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  3335  000D3C  BE25               	btfsc	pad@p+1,7,c
  3336  000D3E  D005               	goto	l2298
  3337  000D40  C024  F029         	movff	pad@p,pad@w
  3338  000D44  C025  F02A         	movff	pad@p+1,pad@w+1
  3339  000D48  D004               	goto	l165
  3340  000D4A                     l2298:
  3341  000D4A  0E00               	movlw	0
  3342  000D4C  6E2A               	movwf	pad@w+1,c
  3343  000D4E  0E00               	movlw	0
  3344  000D50  6E29               	movwf	pad@w,c
  3345  000D52                     l165:
  3346                           
  3347                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  3348  000D52  0E00               	movlw	0
  3349  000D54  6E28               	movwf	pad@i+1,c
  3350  000D56  0E00               	movlw	0
  3351  000D58  6E27               	movwf	pad@i,c
  3352                           
  3353                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3354  000D5A  D00C               	goto	l2304
  3355  000D5C                     l2300:
  3356                           
  3357                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  3358  000D5C  0E00               	movlw	0
  3359  000D5E  6E11               	movwf	fputc@c+1,c
  3360  000D60  0E20               	movlw	32
  3361  000D62  6E10               	movwf	fputc@c,c
  3362  000D64  C020  F012         	movff	pad@fp,fputc@fp
  3363  000D68  C021  F013         	movff	pad@fp+1,fputc@fp+1
  3364  000D6C  EC15  F007         	call	_fputc	;wreg free
  3365                           
  3366                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 86:         ++i;
  3367  000D70  4A27               	infsnz	pad@i,f,c
  3368  000D72  2A28               	incf	pad@i+1,f,c
  3369  000D74                     l2304:
  3370                           
  3371                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3372  000D74  5029               	movf	pad@w,w,c
  3373  000D76  5C27               	subwf	pad@i,w,c
  3374  000D78  5028               	movf	pad@i+1,w,c
  3375  000D7A  0A80               	xorlw	128
  3376  000D7C  6E26               	movwf	??_pad& (0+255),c
  3377  000D7E  502A               	movf	pad@w+1,w,c
  3378  000D80  0A80               	xorlw	128
  3379  000D82  5826               	subwfb	??_pad& (0+255),w,c
  3380  000D84  A0D8               	btfss	status,0,c
  3381  000D86  D7EA               	goto	l2300
  3382                           
  3383                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  3384  000D88  B072               	btfsc	_flags,0,c
  3385  000D8A  D00A               	goto	l2308
  3386                           
  3387                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  3388  000D8C  C022  F019         	movff	pad@buf,fputs@s
  3389  000D90  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3390  000D94  C020  F01B         	movff	pad@fp,fputs@fp
  3391  000D98  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3392  000D9C  EC14  F008         	call	_fputs	;wreg free
  3393  000DA0                     l2308:
  3394                           
  3395                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 94:     return strle
      +                          n(buf) + w;
  3396  000DA0  C022  F00C         	movff	pad@buf,strlen@s
  3397  000DA4  C023  F00D         	movff	pad@buf+1,strlen@s+1
  3398  000DA8  EC49  F008         	call	_strlen	;wreg free
  3399  000DAC  5029               	movf	pad@w,w,c
  3400  000DAE  240C               	addwf	?_strlen,w,c
  3401  000DB0  6E20               	movwf	?_pad,c
  3402  000DB2  502A               	movf	pad@w+1,w,c
  3403  000DB4  200D               	addwfc	?_strlen+1,w,c
  3404  000DB6  6E21               	movwf	?_pad+1,c
  3405  000DB8  0012               	return		;funcret
  3406  000DBA                     __end_of_pad:
  3407                           	opt callstack 0
  3408                           
  3409 ;; *************** function _strlen *****************
  3410 ;; Defined at:
  3411 ;;		line 12 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/strlen.c"
  3412 ;; Parameters:    Size  Location     Type
  3413 ;;  s               2   11[COMRAM] PTR const unsigned char 
  3414 ;;		 -> dbuf(32), 
  3415 ;; Auto vars:     Size  Location     Type
  3416 ;;  a               2   13[COMRAM] PTR const unsigned char 
  3417 ;;		 -> dbuf(32), 
  3418 ;; Return value:  Size  Location     Type
  3419 ;;                  2   11[COMRAM] unsigned int 
  3420 ;; Registers used:
  3421 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3422 ;; Tracked objects:
  3423 ;;		On entry : 0/0
  3424 ;;		On exit  : 0/0
  3425 ;;		Unchanged: 0/0
  3426 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3427 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3428 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3429 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3430 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3431 ;;Total ram usage:        4 bytes
  3432 ;; Hardware stack levels used:    1
  3433 ;; Hardware stack levels required when called:    1
  3434 ;; This function calls:
  3435 ;;		Nothing
  3436 ;; This function is called by:
  3437 ;;		_pad
  3438 ;; This function uses a non-reentrant model
  3439 ;;
  3440                           
  3441                           	psect	text10
  3442  001092                     __ptext10:
  3443                           	opt callstack 0
  3444  001092                     _strlen:
  3445                           	opt callstack 24
  3446                           
  3447                           ;incstack = 0
  3448  001092  C00C  F00E         	movff	strlen@s,strlen@a
  3449  001096  C00D  F00F         	movff	strlen@s+1,strlen@a+1
  3450  00109A  D002               	goto	l2284
  3451  00109C                     l2282:
  3452  00109C  4A0C               	infsnz	strlen@s,f,c
  3453  00109E  2A0D               	incf	strlen@s+1,f,c
  3454  0010A0                     l2284:
  3455  0010A0  C00C  FFD9         	movff	strlen@s,fsr2l
  3456  0010A4  C00D  FFDA         	movff	strlen@s+1,fsr2h
  3457  0010A8  50DF               	movf	indf2,w,c
  3458  0010AA  A4D8               	btfss	status,2,c
  3459  0010AC  D7F7               	goto	l2282
  3460  0010AE  500E               	movf	strlen@a,w,c
  3461  0010B0  5C0C               	subwf	strlen@s,w,c
  3462  0010B2  6E0C               	movwf	?_strlen,c
  3463  0010B4  500F               	movf	strlen@a+1,w,c
  3464  0010B6  580D               	subwfb	strlen@s+1,w,c
  3465  0010B8  6E0D               	movwf	?_strlen+1,c
  3466  0010BA  0012               	return		;funcret
  3467  0010BC                     __end_of_strlen:
  3468                           	opt callstack 0
  3469                           
  3470 ;; *************** function _fputs *****************
  3471 ;; Defined at:
  3472 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputs.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;  s               2   24[COMRAM] PTR const unsigned char 
  3475 ;;		 -> dbuf(32), 
  3476 ;;  fp              2   26[COMRAM] PTR struct _IO_FILE
  3477 ;;		 -> NULL(0), 
  3478 ;; Auto vars:     Size  Location     Type
  3479 ;;  i               2   29[COMRAM] int 
  3480 ;;  c               1   28[COMRAM] unsigned char 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  2   24[COMRAM] int 
  3483 ;; Registers used:
  3484 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3490 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;Total ram usage:        7 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    6
  3497 ;; This function calls:
  3498 ;;		_fputc
  3499 ;; This function is called by:
  3500 ;;		_pad
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503                           
  3504                           	psect	text11
  3505  001028                     __ptext11:
  3506                           	opt callstack 0
  3507  001028                     _fputs:
  3508                           	opt callstack 19
  3509                           
  3510                           ;incstack = 0
  3511  001028  0E00               	movlw	0
  3512  00102A  6E1F               	movwf	fputs@i+1,c
  3513  00102C  0E00               	movlw	0
  3514  00102E  6E1E               	movwf	fputs@i,c
  3515  001030  D00B               	goto	l2278
  3516  001032                     l2274:
  3517  001032  C01D  F010         	movff	fputs@c,fputc@c
  3518  001036  6A11               	clrf	fputc@c+1,c
  3519  001038  C01B  F012         	movff	fputs@fp,fputc@fp
  3520  00103C  C01C  F013         	movff	fputs@fp+1,fputc@fp+1
  3521  001040  EC15  F007         	call	_fputc	;wreg free
  3522  001044  4A1E               	infsnz	fputs@i,f,c
  3523  001046  2A1F               	incf	fputs@i+1,f,c
  3524  001048                     l2278:
  3525  001048  501E               	movf	fputs@i,w,c
  3526  00104A  2419               	addwf	fputs@s,w,c
  3527  00104C  6ED9               	movwf	fsr2l,c
  3528  00104E  501F               	movf	fputs@i+1,w,c
  3529  001050  201A               	addwfc	fputs@s+1,w,c
  3530  001052  6EDA               	movwf	fsr2h,c
  3531  001054  50DF               	movf	indf2,w,c
  3532  001056  6E1D               	movwf	fputs@c,c
  3533  001058  501D               	movf	fputs@c,w,c
  3534  00105A  B4D8               	btfsc	status,2,c
  3535  00105C  0012               	return	
  3536  00105E  D7E9               	goto	l2274
  3537  001060                     __end_of_fputs:
  3538                           	opt callstack 0
  3539                           
  3540 ;; *************** function _fputc *****************
  3541 ;; Defined at:
  3542 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputc.c"
  3543 ;; Parameters:    Size  Location     Type
  3544 ;;  c               2   15[COMRAM] int 
  3545 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  3546 ;;		 -> NULL(0), 
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;		None
  3549 ;; Return value:  Size  Location     Type
  3550 ;;                  2   15[COMRAM] int 
  3551 ;; Registers used:
  3552 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3558 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3562 ;;Total ram usage:        9 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    5
  3565 ;; This function calls:
  3566 ;;		_putch
  3567 ;; This function is called by:
  3568 ;;		_pad
  3569 ;;		_vfpfcnvrt
  3570 ;;		_fputs
  3571 ;; This function uses a non-reentrant model
  3572 ;;
  3573                           
  3574                           	psect	text12
  3575  000E2A                     __ptext12:
  3576                           	opt callstack 0
  3577  000E2A                     _fputc:
  3578                           	opt callstack 22
  3579                           
  3580                           ;incstack = 0
  3581  000E2A  5012               	movf	fputc@fp,w,c
  3582  000E2C  1013               	iorwf	fputc@fp+1,w,c
  3583  000E2E  B4D8               	btfsc	status,2,c
  3584  000E30  D004               	goto	u1650
  3585  000E32  5012               	movf	fputc@fp,w,c
  3586  000E34  1013               	iorwf	fputc@fp+1,w,c
  3587  000E36  A4D8               	btfss	status,2,c
  3588  000E38  D004               	goto	l2264
  3589  000E3A                     u1650:
  3590  000E3A  5010               	movf	fputc@c,w,c
  3591  000E3C  EC9B  F008         	call	_putch
  3592  000E40  0012               	return	
  3593  000E42                     l2264:
  3594  000E42  EE20 F004          	lfsr	2,4
  3595  000E46  5012               	movf	fputc@fp,w,c
  3596  000E48  26D9               	addwf	fsr2l,f,c
  3597  000E4A  5013               	movf	fputc@fp+1,w,c
  3598  000E4C  22DA               	addwfc	fsr2h,f,c
  3599  000E4E  50DE               	movf	postinc2,w,c
  3600  000E50  10DE               	iorwf	postinc2,w,c
  3601  000E52  B4D8               	btfsc	status,2,c
  3602  000E54  D016               	goto	u1670
  3603  000E56  EE20 F004          	lfsr	2,4
  3604  000E5A  5012               	movf	fputc@fp,w,c
  3605  000E5C  26D9               	addwf	fsr2l,f,c
  3606  000E5E  5013               	movf	fputc@fp+1,w,c
  3607  000E60  22DA               	addwfc	fsr2h,f,c
  3608  000E62  EE10 F002          	lfsr	1,2
  3609  000E66  5012               	movf	fputc@fp,w,c
  3610  000E68  26E1               	addwf	fsr1l,f,c
  3611  000E6A  5013               	movf	fputc@fp+1,w,c
  3612  000E6C  22E2               	addwfc	fsr1h,f,c
  3613  000E6E  50DE               	movf	postinc2,w,c
  3614  000E70  5CE6               	subwf	postinc1,w,c
  3615  000E72  50E6               	movf	postinc1,w,c
  3616  000E74  0A80               	xorlw	128
  3617  000E76  6E18               	movwf	(??_fputc+4)& (0+255),c
  3618  000E78  50DE               	movf	postinc2,w,c
  3619  000E7A  0A80               	xorlw	128
  3620  000E7C  5818               	subwfb	(??_fputc+4)& (0+255),w,c
  3621  000E7E  B0D8               	btfsc	status,0,c
  3622  000E80  0012               	return	
  3623  000E82                     u1670:
  3624  000E82  EE20 F002          	lfsr	2,2
  3625  000E86  5012               	movf	fputc@fp,w,c
  3626  000E88  26D9               	addwf	fsr2l,f,c
  3627  000E8A  5013               	movf	fputc@fp+1,w,c
  3628  000E8C  22DA               	addwfc	fsr2h,f,c
  3629  000E8E  2ADE               	incf	postinc2,f,c
  3630  000E90  0E00               	movlw	0
  3631  000E92  22DD               	addwfc	postdec2,f,c
  3632  000E94  0012               	return		;funcret
  3633  000E96                     __end_of_fputc:
  3634                           	opt callstack 0
  3635                           
  3636 ;; *************** function _putch *****************
  3637 ;; Defined at:
  3638 ;;		line 102 in file "lcd.c"
  3639 ;; Parameters:    Size  Location     Type
  3640 ;;  data            1    wreg     unsigned char 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  data            1   14[COMRAM] unsigned char 
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  1    wreg      void 
  3645 ;; Registers used:
  3646 ;;		wreg, status,2, status,0, cstack
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;Total ram usage:        1 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    4
  3659 ;; This function calls:
  3660 ;;		_send_byte
  3661 ;; This function is called by:
  3662 ;;		_fputc
  3663 ;; This function uses a non-reentrant model
  3664 ;;
  3665                           
  3666                           	psect	text13
  3667  001136                     __ptext13:
  3668                           	opt callstack 0
  3669  001136                     _putch:
  3670                           	opt callstack 22
  3671                           
  3672                           ;incstack = 0
  3673                           ;putch@data stored from wreg
  3674  001136  6E0F               	movwf	putch@data,c
  3675                           
  3676                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  3677  001138  848C               	bsf	3980,2,c	;volatile
  3678                           
  3679                           ;lcd.c: 104:     send_byte((unsigned char)data);
  3680  00113A  500F               	movf	putch@data,w,c
  3681  00113C  EC92  F008         	call	_send_byte
  3682  001140  0012               	return		;funcret
  3683  001142                     __end_of_putch:
  3684                           	opt callstack 0
  3685                           
  3686 ;; *************** function _initLCD *****************
  3687 ;; Defined at:
  3688 ;;		line 69 in file "lcd.c"
  3689 ;; Parameters:    Size  Location     Type
  3690 ;;		None
  3691 ;; Auto vars:     Size  Location     Type
  3692 ;;		None
  3693 ;; Return value:  Size  Location     Type
  3694 ;;                  1    wreg      void 
  3695 ;; Registers used:
  3696 ;;		wreg, status,2, status,0, cstack
  3697 ;; Tracked objects:
  3698 ;;		On entry : 0/0
  3699 ;;		On exit  : 0/0
  3700 ;;		Unchanged: 0/0
  3701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3704 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3705 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3706 ;;Total ram usage:        1 bytes
  3707 ;; Hardware stack levels used:    1
  3708 ;; Hardware stack levels required when called:    5
  3709 ;; This function calls:
  3710 ;;		_lcdInst
  3711 ;;		_send_byte
  3712 ;;		_send_nibble
  3713 ;; This function is called by:
  3714 ;;		_main
  3715 ;; This function uses a non-reentrant model
  3716 ;;
  3717                           
  3718                           	psect	text14
  3719  000E96                     __ptext14:
  3720                           	opt callstack 0
  3721  000E96                     _initLCD:
  3722                           	opt callstack 25
  3723                           
  3724                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3725                           
  3726                           ;incstack = 0
  3727  000E96  0E31               	movlw	49
  3728  000E98  6E10               	movwf	??_initLCD& (0+255),c
  3729  000E9A  0EB2               	movlw	178
  3730  000E9C                     u2497:
  3731  000E9C  2EE8               	decfsz	wreg,f,c
  3732  000E9E  D7FE               	bra	u2497
  3733  000EA0  2E10               	decfsz	??_initLCD& (0+255),f,c
  3734  000EA2  D7FC               	bra	u2497
  3735  000EA4  D000               	nop2	
  3736                           
  3737                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  3738  000EA6  948C               	bcf	3980,2,c	;volatile
  3739                           
  3740                           ;lcd.c: 74:     send_nibble(0b0011);
  3741  000EA8  0E03               	movlw	3
  3742  000EAA  EC87  F008         	call	_send_nibble
  3743                           
  3744                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3745  000EAE  0E11               	movlw	17
  3746  000EB0  6E10               	movwf	??_initLCD& (0+255),c
  3747  000EB2  0E3A               	movlw	58
  3748  000EB4                     u2507:
  3749  000EB4  2EE8               	decfsz	wreg,f,c
  3750  000EB6  D7FE               	bra	u2507
  3751  000EB8  2E10               	decfsz	??_initLCD& (0+255),f,c
  3752  000EBA  D7FC               	bra	u2507
  3753  000EBC  D000               	nop2	
  3754                           
  3755                           ;lcd.c: 76:     send_nibble(0b0011);
  3756  000EBE  0E03               	movlw	3
  3757  000EC0  EC87  F008         	call	_send_nibble
  3758                           
  3759                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  3760  000EC4  0E7D               	movlw	125
  3761  000EC6                     u2517:
  3762  000EC6  2EE8               	decfsz	wreg,f,c
  3763  000EC8  D7FE               	bra	u2517
  3764                           
  3765                           ;lcd.c: 78:     send_byte(0b00110010);
  3766  000ECA  0E32               	movlw	50
  3767  000ECC  EC92  F008         	call	_send_byte
  3768                           
  3769                           ;lcd.c: 80:     send_byte(0b00101000);
  3770  000ED0  0E28               	movlw	40
  3771  000ED2  EC92  F008         	call	_send_byte
  3772                           
  3773                           ;lcd.c: 81:     send_byte(0b00001000);
  3774  000ED6  0E08               	movlw	8
  3775  000ED8  EC92  F008         	call	_send_byte
  3776                           
  3777                           ;lcd.c: 82:     send_byte(0b00000001);
  3778  000EDC  0E01               	movlw	1
  3779  000EDE  EC92  F008         	call	_send_byte
  3780                           
  3781                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3782  000EE2  0E11               	movlw	17
  3783  000EE4  6E10               	movwf	??_initLCD& (0+255),c
  3784  000EE6  0E3A               	movlw	58
  3785  000EE8                     u2527:
  3786  000EE8  2EE8               	decfsz	wreg,f,c
  3787  000EEA  D7FE               	bra	u2527
  3788  000EEC  2E10               	decfsz	??_initLCD& (0+255),f,c
  3789  000EEE  D7FC               	bra	u2527
  3790  000EF0  D000               	nop2	
  3791                           
  3792                           ;lcd.c: 84:     send_byte(0b00000110);
  3793  000EF2  0E06               	movlw	6
  3794  000EF4  EC92  F008         	call	_send_byte
  3795                           
  3796                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  3797  000EF8  0E0F               	movlw	15
  3798  000EFA  ECA1  F008         	call	_lcdInst
  3799  000EFE  0012               	return		;funcret
  3800  000F00                     __end_of_initLCD:
  3801                           	opt callstack 0
  3802                           
  3803 ;; *************** function _lcdInst *****************
  3804 ;; Defined at:
  3805 ;;		line 64 in file "lcd.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;  data            1    wreg     unsigned char 
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;  data            1   14[COMRAM] unsigned char 
  3810 ;; Return value:  Size  Location     Type
  3811 ;;                  1    wreg      void 
  3812 ;; Registers used:
  3813 ;;		wreg, status,2, status,0, cstack
  3814 ;; Tracked objects:
  3815 ;;		On entry : 0/0
  3816 ;;		On exit  : 0/0
  3817 ;;		Unchanged: 0/0
  3818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3820 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;Total ram usage:        1 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    4
  3826 ;; This function calls:
  3827 ;;		_send_byte
  3828 ;; This function is called by:
  3829 ;;		_initLCD
  3830 ;;		_main
  3831 ;;		_lcd_shift_cursor
  3832 ;;		_lcd_shift_display
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text15
  3837  001142                     __ptext15:
  3838                           	opt callstack 0
  3839  001142                     _lcdInst:
  3840                           	opt callstack 26
  3841                           
  3842                           ;incstack = 0
  3843                           ;lcdInst@data stored from wreg
  3844  001142  6E0F               	movwf	lcdInst@data,c
  3845                           
  3846                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  3847  001144  948C               	bcf	3980,2,c	;volatile
  3848                           
  3849                           ;lcd.c: 66:     send_byte(data);
  3850  001146  500F               	movf	lcdInst@data,w,c
  3851  001148  EC92  F008         	call	_send_byte
  3852  00114C  0012               	return		;funcret
  3853  00114E                     __end_of_lcdInst:
  3854                           	opt callstack 0
  3855                           
  3856 ;; *************** function _send_byte *****************
  3857 ;; Defined at:
  3858 ;;		line 55 in file "lcd.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;  data            1    wreg     unsigned char 
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  data            1   13[COMRAM] unsigned char 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      void 
  3865 ;; Registers used:
  3866 ;;		wreg, status,2, status,0, cstack
  3867 ;; Tracked objects:
  3868 ;;		On entry : 0/0
  3869 ;;		On exit  : 0/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3873 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3875 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3876 ;;Total ram usage:        1 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:    3
  3879 ;; This function calls:
  3880 ;;		_send_nibble
  3881 ;; This function is called by:
  3882 ;;		_lcdInst
  3883 ;;		_initLCD
  3884 ;;		_putch
  3885 ;; This function uses a non-reentrant model
  3886 ;;
  3887                           
  3888                           	psect	text16
  3889  001124                     __ptext16:
  3890                           	opt callstack 0
  3891  001124                     _send_byte:
  3892                           	opt callstack 22
  3893                           
  3894                           ;incstack = 0
  3895                           ;send_byte@data stored from wreg
  3896  001124  6E0E               	movwf	send_byte@data,c
  3897                           
  3898                           ;lcd.c: 57:     send_nibble(data >> 4);
  3899  001126  380E               	swapf	send_byte@data,w,c
  3900  001128  0B0F               	andlw	15
  3901  00112A  EC87  F008         	call	_send_nibble
  3902                           
  3903                           ;lcd.c: 60:     send_nibble(data);
  3904  00112E  500E               	movf	send_byte@data,w,c
  3905  001130  EC87  F008         	call	_send_nibble
  3906  001134  0012               	return		;funcret
  3907  001136                     __end_of_send_byte:
  3908                           	opt callstack 0
  3909                           
  3910 ;; *************** function _send_nibble *****************
  3911 ;; Defined at:
  3912 ;;		line 44 in file "lcd.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;  data            1    wreg     unsigned char 
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;  data            1   12[COMRAM] unsigned char 
  3917 ;; Return value:  Size  Location     Type
  3918 ;;                  1    wreg      void 
  3919 ;; Registers used:
  3920 ;;		wreg, status,2, status,0, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3930 ;;Total ram usage:        1 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    2
  3933 ;; This function calls:
  3934 ;;		_pulse_e
  3935 ;; This function is called by:
  3936 ;;		_send_byte
  3937 ;;		_initLCD
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text17
  3942  00110E                     __ptext17:
  3943                           	opt callstack 0
  3944  00110E                     _send_nibble:
  3945                           	opt callstack 22
  3946                           
  3947                           ;incstack = 0
  3948                           ;send_nibble@data stored from wreg
  3949  00110E  6E0D               	movwf	send_nibble@data,c
  3950                           
  3951                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  3952  001110  508C               	movf	3980,w,c	;volatile
  3953  001112  0B0F               	andlw	15
  3954  001114  6E8C               	movwf	3980,c	;volatile
  3955                           
  3956                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  3957  001116  380D               	swapf	send_nibble@data,w,c
  3958  001118  0BF0               	andlw	240
  3959  00111A  108C               	iorwf	3980,w,c	;volatile
  3960  00111C  6E8C               	movwf	3980,c	;volatile
  3961                           
  3962                           ;lcd.c: 48:     pulse_e();
  3963  00111E  EC5E  F008         	call	_pulse_e	;wreg free
  3964  001122  0012               	return		;funcret
  3965  001124                     __end_of_send_nibble:
  3966                           	opt callstack 0
  3967                           
  3968 ;; *************** function _pulse_e *****************
  3969 ;; Defined at:
  3970 ;;		line 28 in file "lcd.c"
  3971 ;; Parameters:    Size  Location     Type
  3972 ;;		None
  3973 ;; Auto vars:     Size  Location     Type
  3974 ;;  interruptSta    1   11[COMRAM] unsigned char 
  3975 ;; Return value:  Size  Location     Type
  3976 ;;                  1    wreg      void 
  3977 ;; Registers used:
  3978 ;;		wreg
  3979 ;; Tracked objects:
  3980 ;;		On entry : 0/0
  3981 ;;		On exit  : 0/0
  3982 ;;		Unchanged: 0/0
  3983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3985 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3987 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3988 ;;Total ram usage:        1 bytes
  3989 ;; Hardware stack levels used:    1
  3990 ;; Hardware stack levels required when called:    1
  3991 ;; This function calls:
  3992 ;;		Nothing
  3993 ;; This function is called by:
  3994 ;;		_send_nibble
  3995 ;; This function uses a non-reentrant model
  3996 ;;
  3997                           
  3998                           	psect	text18
  3999  0010BC                     __ptext18:
  4000                           	opt callstack 0
  4001  0010BC                     _pulse_e:
  4002                           	opt callstack 22
  4003                           
  4004                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  4005                           
  4006                           ;incstack = 0
  4007  0010BC  0E00               	movlw	0
  4008  0010BE  BEF2               	btfsc	4082,7,c	;volatile
  4009  0010C0  0E01               	movlw	1
  4010  0010C2  6E0C               	movwf	pulse_e@interruptState,c
  4011                           
  4012                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  4013  0010C4  9EF2               	bcf	4082,7,c	;volatile
  4014                           
  4015                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  4016  0010C6  868C               	bsf	3980,3,c	;volatile
  4017                           
  4018                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  4019  0010C8  0E14               	movlw	20
  4020  0010CA                     u2537:
  4021  0010CA  2EE8               	decfsz	wreg,f,c
  4022  0010CC  D7FE               	bra	u2537
  4023  0010CE  D000               	nop2	
  4024                           
  4025                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  4026  0010D0  968C               	bcf	3980,3,c	;volatile
  4027                           
  4028                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  4029  0010D2  0E53               	movlw	83
  4030  0010D4                     u2547:
  4031  0010D4  2EE8               	decfsz	wreg,f,c
  4032  0010D6  D7FE               	bra	u2547
  4033  0010D8  F000               	nop	
  4034                           
  4035                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  4036  0010DA  B00C               	btfsc	pulse_e@interruptState,0,c
  4037  0010DC  D002               	bra	u1635
  4038  0010DE  9EF2               	bcf	4082,7,c	;volatile
  4039  0010E0  D001               	bra	u1636
  4040  0010E2                     u1635:
  4041  0010E2  8EF2               	bsf	4082,7,c	;volatile
  4042  0010E4                     u1636:
  4043  0010E4  0012               	return		;funcret
  4044  0010E6                     __end_of_pulse_e:
  4045                           	opt callstack 0
  4046                           
  4047 ;; *************** function ___awmod *****************
  4048 ;; Defined at:
  4049 ;;		line 7 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/awmod.c"
  4050 ;; Parameters:    Size  Location     Type
  4051 ;;  dividend        2   11[COMRAM] int 
  4052 ;;  divisor         2   13[COMRAM] int 
  4053 ;; Auto vars:     Size  Location     Type
  4054 ;;  sign            1   16[COMRAM] unsigned char 
  4055 ;;  counter         1   15[COMRAM] unsigned char 
  4056 ;; Return value:  Size  Location     Type
  4057 ;;                  2   11[COMRAM] int 
  4058 ;; Registers used:
  4059 ;;		wreg, status,2, status,0
  4060 ;; Tracked objects:
  4061 ;;		On entry : 0/0
  4062 ;;		On exit  : 0/0
  4063 ;;		Unchanged: 0/0
  4064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4065 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4066 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4068 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4069 ;;Total ram usage:        6 bytes
  4070 ;; Hardware stack levels used:    1
  4071 ;; Hardware stack levels required when called:    1
  4072 ;; This function calls:
  4073 ;;		Nothing
  4074 ;; This function is called by:
  4075 ;;		_main
  4076 ;; This function uses a non-reentrant model
  4077 ;;
  4078                           
  4079                           	psect	text19
  4080  000DBA                     __ptext19:
  4081                           	opt callstack 0
  4082  000DBA                     ___awmod:
  4083                           	opt callstack 29
  4084                           
  4085                           ;incstack = 0
  4086  000DBA  0E00               	movlw	0
  4087  000DBC  6E11               	movwf	___awmod@sign,c
  4088  000DBE  AE0D               	btfss	___awmod@dividend+1,7,c
  4089  000DC0  D006               	goto	l1916
  4090  000DC2  6C0C               	negf	___awmod@dividend,c
  4091  000DC4  1E0D               	comf	___awmod@dividend+1,f,c
  4092  000DC6  B0D8               	btfsc	status,0,c
  4093  000DC8  2A0D               	incf	___awmod@dividend+1,f,c
  4094  000DCA  0E01               	movlw	1
  4095  000DCC  6E11               	movwf	___awmod@sign,c
  4096  000DCE                     l1916:
  4097  000DCE  AE0F               	btfss	___awmod@divisor+1,7,c
  4098  000DD0  D004               	goto	l1920
  4099  000DD2  6C0E               	negf	___awmod@divisor,c
  4100  000DD4  1E0F               	comf	___awmod@divisor+1,f,c
  4101  000DD6  B0D8               	btfsc	status,0,c
  4102  000DD8  2A0F               	incf	___awmod@divisor+1,f,c
  4103  000DDA                     l1920:
  4104  000DDA  500E               	movf	___awmod@divisor,w,c
  4105  000DDC  100F               	iorwf	___awmod@divisor+1,w,c
  4106  000DDE  B4D8               	btfsc	status,2,c
  4107  000DE0  D018               	goto	l1936
  4108  000DE2  0E01               	movlw	1
  4109  000DE4  6E10               	movwf	___awmod@counter,c
  4110  000DE6  D004               	goto	l1926
  4111  000DE8                     l1924:
  4112  000DE8  90D8               	bcf	status,0,c
  4113  000DEA  360E               	rlcf	___awmod@divisor,f,c
  4114  000DEC  360F               	rlcf	___awmod@divisor+1,f,c
  4115  000DEE  2A10               	incf	___awmod@counter,f,c
  4116  000DF0                     l1926:
  4117  000DF0  AE0F               	btfss	___awmod@divisor+1,7,c
  4118  000DF2  D7FA               	goto	l1924
  4119  000DF4                     u1320:
  4120  000DF4  500E               	movf	___awmod@divisor,w,c
  4121  000DF6  5C0C               	subwf	___awmod@dividend,w,c
  4122  000DF8  500F               	movf	___awmod@divisor+1,w,c
  4123  000DFA  580D               	subwfb	___awmod@dividend+1,w,c
  4124  000DFC  A0D8               	btfss	status,0,c
  4125  000DFE  D004               	goto	l1932
  4126  000E00  500E               	movf	___awmod@divisor,w,c
  4127  000E02  5E0C               	subwf	___awmod@dividend,f,c
  4128  000E04  500F               	movf	___awmod@divisor+1,w,c
  4129  000E06  5A0D               	subwfb	___awmod@dividend+1,f,c
  4130  000E08                     l1932:
  4131  000E08  90D8               	bcf	status,0,c
  4132  000E0A  320F               	rrcf	___awmod@divisor+1,f,c
  4133  000E0C  320E               	rrcf	___awmod@divisor,f,c
  4134  000E0E  2E10               	decfsz	___awmod@counter,f,c
  4135  000E10  D7F1               	goto	u1320
  4136  000E12                     l1936:
  4137  000E12  5011               	movf	___awmod@sign,w,c
  4138  000E14  B4D8               	btfsc	status,2,c
  4139  000E16  D004               	goto	l1940
  4140  000E18  6C0C               	negf	___awmod@dividend,c
  4141  000E1A  1E0D               	comf	___awmod@dividend+1,f,c
  4142  000E1C  B0D8               	btfsc	status,0,c
  4143  000E1E  2A0D               	incf	___awmod@dividend+1,f,c
  4144  000E20                     l1940:
  4145  000E20  C00C  F00C         	movff	___awmod@dividend,?___awmod
  4146  000E24  C00D  F00D         	movff	___awmod@dividend+1,?___awmod+1
  4147  000E28  0012               	return		;funcret
  4148  000E2A                     __end_of___awmod:
  4149                           	opt callstack 0
  4150                           
  4151 ;; *************** function _interruptHandler *****************
  4152 ;; Defined at:
  4153 ;;		line 226 in file "main.c"
  4154 ;; Parameters:    Size  Location     Type
  4155 ;;		None
  4156 ;; Auto vars:     Size  Location     Type
  4157 ;;  i               2    8[COMRAM] int 
  4158 ;;  keypress        1   10[COMRAM] unsigned char 
  4159 ;; Return value:  Size  Location     Type
  4160 ;;                  1    wreg      void 
  4161 ;; Registers used:
  4162 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4163 ;; Tracked objects:
  4164 ;;		On entry : 0/0
  4165 ;;		On exit  : 0/0
  4166 ;;		Unchanged: 0/0
  4167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4169 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4170 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4171 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;Total ram usage:       11 bytes
  4173 ;; Hardware stack levels used:    1
  4174 ;; This function calls:
  4175 ;;		Nothing
  4176 ;; This function is called by:
  4177 ;;		Interrupt level 2
  4178 ;; This function uses a non-reentrant model
  4179 ;;
  4180                           
  4181                           	psect	intcode
  4182  000008                     __pintcode:
  4183                           	opt callstack 0
  4184  000008                     _interruptHandler:
  4185                           	opt callstack 19
  4186                           
  4187                           ;incstack = 0
  4188  000008  8274               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4189  00000A  ED2D  F006         	call	int_func,f	;refresh shadow registers
  4190                           
  4191                           	psect	intcode_body
  4192  000C5A                     __pintcode_body:
  4193                           	opt callstack 19
  4194  000C5A                     int_func:
  4195                           	opt callstack 19
  4196  000C5A  0006               	pop		; remove dummy address from shadow register refresh
  4197  000C5C  CFF6 F005          	movff	tblptrl,??_interruptHandler+4
  4198  000C60  CFF7 F006          	movff	tblptrh,??_interruptHandler+5
  4199  000C64  CFF8 F007          	movff	tblptru,??_interruptHandler+6
  4200  000C68  CFF5 F008          	movff	tablat,??_interruptHandler+7
  4201                           
  4202                           ;main.c: 228:     if(INT1IF){
  4203  000C6C  A0F0               	btfss	4080,0,c	;volatile
  4204  000C6E  D050               	goto	i2u162_40
  4205                           
  4206                           ;main.c: 232:         INT1IF = 0;
  4207  000C70  90F0               	bcf	4080,0,c	;volatile
  4208                           
  4209                           ;main.c: 234:         unsigned char keypress = (PORTB & 0xF0) >> 4;
  4210  000C72  3881               	swapf	3969,w,c	;volatile
  4211  000C74  0B0F               	andlw	15
  4212  000C76  0B0F               	andlw	15
  4213  000C78  6E0B               	movwf	interruptHandler@keypress,c
  4214                           
  4215                           ;main.c: 236:         if (keys[keypress] == 'A') {
  4216  000C7A  0EC3               	movlw	low _keys
  4217  000C7C  240B               	addwf	interruptHandler@keypress,w,c
  4218  000C7E  6EF6               	movwf	tblptrl,c
  4219  000C80  6AF7               	clrf	tblptrh,c
  4220  000C82  0EFE               	movlw	high _keys
  4221  000C84  22F7               	addwfc	tblptrh,f,c
  4222  000C86                     	if	0	;There are less than 3 active tblptr bytes
  4223  000C86                     	endif
  4224  000C86  0008               	tblrd		*
  4225  000C88  50F5               	movf	tablat,w,c
  4226  000C8A  0A41               	xorlw	65
  4227  000C8C  A4D8               	btfss	status,2,c
  4228  000C8E  D004               	goto	i2l2220
  4229                           
  4230                           ;main.c: 238:             start = 1;
  4231  000C90  0E01               	movlw	1
  4232  000C92  0100               	movlb	0	; () banked
  4233  000C94  6FC2               	movwf	_start& (0+255),b	;volatile
  4234  000C96  D03C               	goto	i2u162_40
  4235  000C98                     i2l2220:
  4236                           
  4237                           ;main.c: 242:         if (keys[keypress] == '*') {
  4238  000C98  0EC3               	movlw	low _keys
  4239  000C9A  240B               	addwf	interruptHandler@keypress,w,c
  4240  000C9C  6EF6               	movwf	tblptrl,c
  4241  000C9E  6AF7               	clrf	tblptrh,c
  4242  000CA0  0EFE               	movlw	high _keys
  4243  000CA2  22F7               	addwfc	tblptrh,f,c
  4244  000CA4                     	if	0	;There are less than 3 active tblptr bytes
  4245  000CA4                     	endif
  4246  000CA4  0008               	tblrd		*
  4247  000CA6  50F5               	movf	tablat,w,c
  4248  000CA8  0A2A               	xorlw	42
  4249  000CAA  A4D8               	btfss	status,2,c
  4250  000CAC  D004               	goto	i2l2226
  4251                           
  4252                           ;main.c: 244:             exit_key = 1;
  4253  000CAE  0E01               	movlw	1
  4254  000CB0  0100               	movlb	0	; () banked
  4255  000CB2  6FC3               	movwf	_exit_key& (0+255),b	;volatile
  4256  000CB4  D02D               	goto	i2u162_40
  4257  000CB6                     i2l2226:
  4258                           
  4259                           ;main.c: 248:         for ( int i = 0; i < Canister; i++ ) {
  4260  000CB6  0E00               	movlw	0
  4261  000CB8  6E0A               	movwf	interruptHandler@i+1,c
  4262  000CBA  0E00               	movlw	0
  4263  000CBC  6E09               	movwf	interruptHandler@i,c
  4264  000CBE  D01D               	goto	i2l2236
  4265  000CC0                     i2l2228:
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;main.c: 250:             if ((char)i + '0' == keys[keypress]) {
  4269  000CC0  0EC3               	movlw	low _keys
  4270  000CC2  240B               	addwf	interruptHandler@keypress,w,c
  4271  000CC4  6EF6               	movwf	tblptrl,c
  4272  000CC6  6AF7               	clrf	tblptrh,c
  4273  000CC8  0EFE               	movlw	high _keys
  4274  000CCA  22F7               	addwfc	tblptrh,f,c
  4275  000CCC                     	if	0	;There are less than 3 active tblptr bytes
  4276  000CCC                     	endif
  4277  000CCC  0008               	tblrd		*
  4278  000CCE  50F5               	movf	tablat,w,c
  4279  000CD0  6E01               	movwf	??_interruptHandler& (0+255),c
  4280  000CD2  6A02               	clrf	(??_interruptHandler+1)& (0+255),c
  4281  000CD4  5009               	movf	interruptHandler@i,w,c
  4282  000CD6  6E03               	movwf	(??_interruptHandler+2)& (0+255),c
  4283  000CD8  6A04               	clrf	(??_interruptHandler+3)& (0+255),c
  4284  000CDA  0E30               	movlw	48
  4285  000CDC  2603               	addwf	??_interruptHandler+2,f,c
  4286  000CDE  0E00               	movlw	0
  4287  000CE0  2204               	addwfc	??_interruptHandler+3,f,c
  4288  000CE2  5001               	movf	??_interruptHandler,w,c
  4289  000CE4  1803               	xorwf	??_interruptHandler+2,w,c
  4290  000CE6  E107               	bnz	i2l2234
  4291  000CE8  5002               	movf	??_interruptHandler+1,w,c
  4292  000CEA  1804               	xorwf	??_interruptHandler+3,w,c
  4293  000CEC  A4D8               	btfss	status,2,c
  4294  000CEE  D003               	goto	i2l2234
  4295                           
  4296                           ; BSR set to: 0
  4297                           ;main.c: 251:                 key_was_pressed = 1;
  4298  000CF0  0E01               	movlw	1
  4299  000CF2  6FC4               	movwf	_key_was_pressed& (0+255),b	;volatile
  4300  000CF4  D00D               	goto	i2u162_40
  4301  000CF6                     i2l2234:
  4302                           
  4303                           ; BSR set to: 0
  4304                           ;main.c: 255:         }
  4305  000CF6  4A09               	infsnz	interruptHandler@i,f,c
  4306  000CF8  2A0A               	incf	interruptHandler@i+1,f,c
  4307  000CFA                     i2l2236:
  4308  000CFA  0100               	movlb	0	; () banked
  4309  000CFC  51BE               	movf	_Canister& (0+255),w,b
  4310  000CFE  5C09               	subwf	interruptHandler@i,w,c
  4311  000D00  500A               	movf	interruptHandler@i+1,w,c
  4312  000D02  0A80               	xorlw	128
  4313  000D04  6E01               	movwf	??_interruptHandler& (0+255),c
  4314  000D06  51BF               	movf	(_Canister+1)& (0+255),w,b
  4315  000D08  0A80               	xorlw	128
  4316  000D0A  5801               	subwfb	??_interruptHandler& (0+255),w,c
  4317  000D0C  A0D8               	btfss	status,0,c
  4318  000D0E  D7D8               	goto	i2l2228
  4319  000D10                     i2u162_40:
  4320  000D10  C008  FFF5         	movff	??_interruptHandler+7,tablat
  4321  000D14  C007  FFF8         	movff	??_interruptHandler+6,tblptru
  4322  000D18  C006  FFF7         	movff	??_interruptHandler+5,tblptrh
  4323  000D1C  C005  FFF6         	movff	??_interruptHandler+4,tblptrl
  4324  000D20  9274               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4325  000D22  0011               	retfie		f
  4326  000D24                     __end_of_interruptHandler:
  4327                           	opt callstack 0
  4328                           
  4329                           	psect	rparam
  4330  0000                     
  4331                           	psect	temp
  4332  000074                     btemp:
  4333                           	opt callstack 0
  4334  000074                     	ds	1
  4335  0000                     int$flags	set	btemp
  4336  0000                     wtemp8	set	btemp+1
  4337  0000                     ttemp5	set	btemp+1
  4338  0000                     ttemp6	set	btemp+4
  4339  0000                     ttemp7	set	btemp+8
  4340                           tosu	equ	0xFFF
  4341                           tosh	equ	0xFFE
  4342                           tosl	equ	0xFFD
  4343                           stkptr	equ	0xFFC
  4344                           pclatu	equ	0xFFB
  4345                           pclath	equ	0xFFA
  4346                           pcl	equ	0xFF9
  4347                           tblptru	equ	0xFF8
  4348                           tblptrh	equ	0xFF7
  4349                           tblptrl	equ	0xFF6
  4350                           tablat	equ	0xFF5
  4351                           prodh	equ	0xFF4
  4352                           prodl	equ	0xFF3
  4353                           indf0	equ	0xFEF
  4354                           postinc0	equ	0xFEE
  4355                           postdec0	equ	0xFED
  4356                           preinc0	equ	0xFEC
  4357                           plusw0	equ	0xFEB
  4358                           fsr0h	equ	0xFEA
  4359                           fsr0l	equ	0xFE9
  4360                           wreg	equ	0xFE8
  4361                           indf1	equ	0xFE7
  4362                           postinc1	equ	0xFE6
  4363                           postdec1	equ	0xFE5
  4364                           preinc1	equ	0xFE4
  4365                           plusw1	equ	0xFE3
  4366                           fsr1h	equ	0xFE2
  4367                           fsr1l	equ	0xFE1
  4368                           bsr	equ	0xFE0
  4369                           indf2	equ	0xFDF
  4370                           postinc2	equ	0xFDE
  4371                           postdec2	equ	0xFDD
  4372                           preinc2	equ	0xFDC
  4373                           plusw2	equ	0xFDB
  4374                           fsr2h	equ	0xFDA
  4375                           fsr2l	equ	0xFD9
  4376                           status	equ	0xFD8


Data Sizes:
    Strings     293
    Constant    23
    Data        66
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    107     115
    BANK0           128     21     122
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_28(CODE[10]), STR_27(CODE[14]), STR_26(CODE[11]), STR_25(CODE[12]), 
		 -> STR_24(CODE[10]), STR_23(CODE[15]), STR_22(CODE[14]), STR_21(CODE[12]), 
		 -> STR_20(CODE[10]), STR_19(CODE[15]), STR_18(CODE[12]), STR_17(CODE[15]), 
		 -> STR_16(CODE[12]), STR_15(CODE[16]), STR_14(CODE[9]), STR_13(CODE[9]), 
		 -> STR_12(CODE[11]), STR_11(CODE[13]), STR_10(CODE[15]), STR_9(CODE[11]), 
		 -> STR_8(CODE[15]), STR_7(CODE[9]), STR_6(CODE[12]), STR_5(CODE[10]), 
		 -> STR_4(CODE[15]), STR_3(CODE[17]), STR_2(CODE[13]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S788_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_28(CODE[10]), STR_27(CODE[14]), STR_26(CODE[11]), STR_25(CODE[12]), 
		 -> STR_24(CODE[10]), STR_23(CODE[15]), STR_22(CODE[14]), STR_21(CODE[12]), 
		 -> STR_20(CODE[10]), STR_19(CODE[15]), STR_18(CODE[12]), STR_17(CODE[15]), 
		 -> STR_16(CODE[12]), STR_15(CODE[16]), STR_14(CODE[9]), STR_13(CODE[9]), 
		 -> STR_12(CODE[11]), STR_11(CODE[13]), STR_10(CODE[15]), STR_9(CODE[11]), 
		 -> STR_8(CODE[15]), STR_7(CODE[9]), STR_6(CODE[12]), STR_5(CODE[10]), 
		 -> STR_4(CODE[15]), STR_3(CODE[17]), STR_2(CODE[13]), STR_1(CODE[11]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 17
		 -> STR_28(CODE[10]), STR_27(CODE[14]), STR_26(CODE[11]), STR_25(CODE[12]), 
		 -> STR_24(CODE[10]), STR_23(CODE[15]), STR_22(CODE[14]), STR_21(CODE[12]), 
		 -> STR_20(CODE[10]), STR_19(CODE[15]), STR_18(CODE[12]), STR_17(CODE[15]), 
		 -> STR_16(CODE[12]), STR_15(CODE[16]), STR_14(CODE[9]), STR_13(CODE[9]), 
		 -> STR_12(CODE[11]), STR_11(CODE[13]), STR_10(CODE[15]), STR_9(CODE[11]), 
		 -> STR_8(CODE[15]), STR_7(CODE[9]), STR_6(CODE[12]), STR_5(CODE[10]), 
		 -> STR_4(CODE[15]), STR_3(CODE[17]), STR_2(CODE[13]), STR_1(CODE[11]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   17072
                                              4 BANK0     17    17      0
                            ___awmod
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4   15266
                                            103 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   12659
                                             95 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6   12177
                                             78 COMRAM    17    11      6
                               _ctoa
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    6083
                                             42 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             29 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                             11 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                             11 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     4      3    4096
                                             42 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3817
                                             31 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1602
                                             24 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1102
                                             15 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     350
                                             15 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _send_byte                                            1     1      0     127
                                             13 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (7) _send_nibble                                          1     1      0      65
                                             12 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (8) _pulse_e                                              1     1      0      34
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     448
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _interruptHandler                                   11    11      0     113
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     15      7A       5       95.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6B      73       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      ED      34        0.0%
DATA                 0      0      ED       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Feb  2 21:21:35 2019

              __CFG_CPD$ON 000000                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l165 0D52                        l183 0638  
                      l185 0640                        l896 1088               __CFG_CPB$OFF 000000  
                      _abs 1060                        _pad 0D24               ___awmod@sign 0011  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     ?_abs 001E                       l2300 0D5C                       l2304 0D74  
                     l2400 0F64                       l2402 0F70                       l2330 0A42  
                     l2308 0DA0                       l2324 0A1A                       l2430 065A  
                     l2264 0E42                       l2336 0A68                       l2352 0AEE  
                     l2416 061C                       l2504 0998                       l2274 1032  
                     l2282 109C                       l2338 0A7C                       l2434 066A  
                     l2514 09BA                       l2530 0F12                       l2284 10A0  
                     l2356 0B14                       l2348 0AD8                       l2372 0B86  
                     l2444 0762                       l2508 09A2                       l2532 0F36  
                     l2278 1048                       l2294 0D3C                       l2606 007C  
                     l1920 0DDA                       l2392 0C38                       l2384 0BFC  
                     l2376 0BA0                       l2368 0B62                       l2464 07C6  
                     l2712 0300                       l2298 0D4A                       l2378 0BB4  
                     l2802 0560                       l2810 0586                       l1940 0E20  
                     l1932 0E08                       l1924 0DE8                       l1916 0DCE  
                     l2388 0C12                       l2468 07DE                       l2820 05B0  
                     l2724 0346                       l1926 0DF0                       l2806 0576  
                     l2654 01C4                       l1936 0E12                       l2488 08AA  
                     l2760 0454                       l2744 03DA                       l2672 0222  
                     l2498 095C                       l2762 0460                       l2692 028E  
                     ?_pad 0020                       l2784 04F8                       l2792 0520  
                     l2768 047C                       l2786 0504                       STR_1 FFC5  
                     STR_2 FF71                       STR_3 FEDA                       STR_4 FF0A  
                     STR_5 FFD0                       STR_6 FF97                       STR_7 FFE4  
                     STR_8 FF19                       STR_9 FFAF                       u2000 07A4  
                     u2020 07B0                       u1320 0DF4                       u2070 08DE  
                     _LATD 000F8C                       u2407 018A                       u2417 01E2  
                     u2337 0054                       u1650 0E3A                       u1635 10E2  
                     u2507 0EB4                       u2427 0242                       u2347 0092  
                     u1636 10E4                       u1740 106E                       u1900 05F0  
                     u2517 0EC6                       u2437 02AE                       u2357 00B4  
                     u1670 0E82                       u2527 0EE8                       u2447 0364  
                     u2367 00E0                       u2537 10CA                       u2457 03F8  
                     u2377 00FC                       u1850 0BB8                       u1930 062E  
                     u2547 10D4                       u1771 0A48                       u2467 049C  
                     u2387 011E                       u2477 056C                       u2397 015C  
                     u1790 0A80                       u1950 0654                       u2487 05BC  
                     u1960 0770                       u2497 0E9C                       u1890 05EE  
                     u1980 0792                       u1981 0790                       u1990 07A0  
                     abs@a 001E                       _dbuf 00C5                       _ctoa 0F52  
                     _main 0012                       _dtoa 05C6   __end_of_interruptHandler 0D24  
                     _keys FEC3                       _prec 0070                       _time 00C0  
                     _nout 006C                       pad@i 0027                       pad@p 0024  
                     fsr1h 000FE2                       fsr2h 000FDA                       indf2 000FDF  
                     fsr1l 000FE1                       pad@w 0029                       fsr2l 000FD9  
                     btemp 0074                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                      ??_abs 0020  
                    ??_pad 0026            __end_of___aodiv 0B36                      ?_ctoa 002B  
                    ?_main 0001                      ?_dtoa 002B            __end_of___aomod 0C5A  
                    STR_10 FF37                      STR_11 FF7E                      STR_20 FFDA  
                    STR_12 FFBA                      STR_21 FF8B                      STR_13 FFED  
                    STR_14 FFF6                      STR_22 FF63                      STR_23 FF46  
                    STR_15 FEEB                      STR_24 FFDA                      STR_16 FFA3  
                    STR_25 FF8B                      STR_17 FEFB                      STR_26 FF58  
                    STR_18 FF8B                      STR_27 FF55                      STR_19 FF28  
                    STR_28 FFDA            __end_of___awmod 0E2A               vfpfcnvrt@fmt 0051  
                    _PORTB 000F81                      _TRISD 000F95              __CFG_PWRT$OFF 000000  
             main@miniTick 00ED              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 114E  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000               main@keypress 00F3             __CFG_EBTR3$OFF 000000  
                    _State 00A8              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000                      _balls 00BC            __end_of_initLCD 0F00  
           __CFG_EBTRB$OFF 000000                      _flags 0072              _BallDispensed 0080  
                    _fputc 0E2A                      _fputs 1028                      pad@fp 0020  
                    _width 006E                      ctoa@c 002D                      _putch 1136  
                    _start 00C2                      ctoa@w 002E                      dtoa@d 002D  
                    dtoa@i 004D                      dtoa@n 0045                      dtoa@p 003F  
                    dtoa@s 0043                      dtoa@w 0041                      tablat 000FF5  
          send_nibble@data 000D            __end_of_pulse_e 10E6                      ttemp5 0075  
                    ttemp6 0078                      ttemp7 007C                      status 000FD8  
                    wtemp8 0075             __CFG_PBADEN$ON 000000         main@number_pressed 00EF  
          __initialization 0FA0               __end_of_ctoa 0FA0               __end_of_main 05C6  
             __end_of_dtoa 0808               __end_of_keys FED4                     ??_ctoa 002E  
                   ??_main 00E9                     ??_dtoa 0035              __activetblptr 000002  
                   _ADCON1 000FC1               ?_send_nibble 0001                     ?_fputc 0010  
                   ?_fputs 0019                     ?_putch 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     i2l2220 0C98                     i2l2234 0CF6  
                   i2l2226 0CB6                     i2l2228 0CC0                     i2l2236 0CFA  
            main@miniClear 00F1              main@miniState 00F4             __CFG_XINST$OFF 000000  
             vfprintf@cfmt 0066                  ??___aodiv 001C                  ??___aomod 001C  
           __CFG_STVREN$ON 000000                  ??___awmod 0010                     clear_0 0FC6  
                   clear_1 0FD2            ___awmod@divisor 000E            ___awmod@counter 0010  
                ??_lcdInst 000F                     _printf 10E6                     pad@buf 0022  
                   ctoa@fp 002B                     dtoa@fp 002B                     _strlen 1092  
                ??_initLCD 0010                     fputc@c 0010                     fputs@c 001D  
                   fputs@i 001E                     fputs@s 0019               __mediumconst FEC2  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
         __end_of_vfprintf 0F52                  ??_pulse_e 000C      pulse_e@interruptState 000C  
               __accesstop 0080    __end_of__initialization 0FD8              ___rparam_used 000001  
           __pcstackCOMRAM 0001               __pidataBANK0 0FE6              __end_of_fputc 0E96  
            __end_of_fputs 1060              __end_of_putch 1142            _key_was_pressed 00C4  
                  ??_fputc 0014                    ??_fputs 001D                    ??_putch 000F  
               __pbssBANK0 00C2          ?_interruptHandler 0001         ??_interruptHandler 0001  
       __size_of_send_byte 0012                    ?_printf 0068                    ?_strlen 000C  
       __size_of_vfpfcnvrt 01E6       __size_of_send_nibble 0016           _DistanceCanister 0094  
                  __Hparam 0000                    __Lparam 0000                    ___aodiv 09EE  
                  ___aomod 0B36                    ___awmod 0DBA                  ?_vfprintf 0060  
 interruptHandler@keypress 000B                    __pcinit 0FA0                    __ramtop 1000  
                  _lcdInst 1142                    __ptext0 0012                    __ptext1 10E6  
                  __ptext2 0F00                    __ptext3 0808                    __ptext4 05C6  
                  __ptext5 1060                    __ptext6 0B36                    __ptext7 09EE  
                  __ptext8 0F52                    __ptext9 0D24            __size_of_printf 0028  
          __size_of_strlen 002A                    _initLCD 0E96               __size_of_abs 0032  
             __size_of_pad 0096           ___awmod@dividend 000C                    _pulse_e 10BC  
           __pintcode_body 0C5A       end_of_initialization 0FD8      __end_of_LCD_SIZE_HORZ FEDA  
        __end_of_send_byte 1136      __end_of_LCD_SIZE_VERT FED9                    fputc@fp 0012  
            __Lmediumconst FEC2                    int_func 0C5A                    fputs@fp 001B  
        __end_of_vfpfcnvrt 09EE                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc1 000FE6                    postinc2 000FDE  
               ??_vfprintf 0066                    strlen@a 000E                    strlen@s 000C  
            send_byte@data 000E                vfpfcnvrt@ap 0053                vfpfcnvrt@fp 004F  
              vfpfcnvrt@ll 0057             __end_of_printf 110E             __end_of_strlen 10BC  
      start_initialization 0FA0                __end_of_abs 1092                __end_of_pad 0DBA  
        interruptHandler@i 0009                vfprintf@fmt 0062                __pdataBANK0 0080  
         __CFG_LPT1OSC$OFF 000000                   ??_printf 006C  __size_of_interruptHandler 0D1C  
                 ??_strlen 000E                __pbssCOMRAM 006C              __pcstackBANK0 00E5  
         ___aodiv@dividend 000C          __CFG_CCP2MX$PORTC 000000                  __pintcode 0008  
            __pmediumconst FEC2                   ?___aodiv 000C                   ?___aomod 000C  
         ___aodiv@quotient 001E                   ?___awmod 000C                   ?_lcdInst 0001  
        __size_of_vfprintf 0052                   ?_initLCD 0001              ??_send_nibble 000D  
                 ?_pulse_e 0001             __size_of_fputc 006C             __size_of_fputs 0038  
           __size_of_putch 000C                   _LATDbits 000F8C                  _send_byte 1124  
           _LCD_LINE1_ADDR FED7             _LCD_LINE2_ADDR FED6             _LCD_LINE3_ADDR FED5  
           _LCD_LINE4_ADDR FED4                   i2u162_40 0D10           __CFG_WDTPS$32768 000000  
                _vfpfcnvrt 0808                  main@clear 00F6                   _Canister 00BE  
                main@state 00F8                 vfpfcnvrt@c 005F                  copy_data0 0FB4  
   __end_of_LCD_LINE1_ADDR FED8     __end_of_LCD_LINE2_ADDR FED7     __end_of_LCD_LINE3_ADDR FED6  
   __end_of_LCD_LINE4_ADDR FED5        __end_of_send_nibble 1124                 ?_send_byte 0001  
                 __Hrparam 0000                 vfprintf@ap 0064                   __Lrparam 0000  
               vfprintf@fp 0060         __CFG_BOREN$SBORDIS 000000           __size_of___aodiv 0148  
         __size_of___aomod 0124           __size_of___awmod 0070                 ?_vfpfcnvrt 004F  
          ___aodiv@divisor 0014           _interruptHandler 0008            ___aodiv@counter 001C  
         __size_of_lcdInst 000C           __size_of_initLCD 006A                   _dtoa$327 003D  
                 __ptext10 1092                   __ptext11 1028                   __ptext12 0E2A  
                 __ptext13 1136                   __ptext14 0E96                   __ptext15 1142  
                 __ptext16 1124                   __ptext17 110E                   __ptext18 10BC  
                 __ptext19 0DBA           __size_of_pulse_e 002A              __size_of_ctoa 004E  
            __size_of_main 05B4              __size_of_dtoa 0242                   _exit_key 00C3  
                 int$flags 0074                   _vfprintf 0F00                  printf@fmt 0068  
                 main@tick 00EB           ___aomod@dividend 000C                  putch@data 000F  
               _INTCONbits 000FF2                _send_nibble 110E                   intlevel2 0000  
            _LCD_SIZE_HORZ FED9              _LCD_SIZE_VERT FED8                ??_send_byte 000E  
                 printf@ap 00E7            ___aomod@divisor 0014                ??_vfpfcnvrt 0055  
              lcdInst@data 000F            ___aomod@counter 001C               ___aodiv@sign 001D  
             ___aomod@sign 001D  
