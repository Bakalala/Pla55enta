

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Feb  1 17:21:41 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataBANK0
    75  002024                     __pidataBANK0:
    76                           	opt callstack 0
    77                           
    78                           ;initializer for _BallDispensed
    79  002024  FFFF               	dw	65535
    80  002026  FFFF               	dw	65535
    81  002028  FFFF               	dw	65535
    82  00202A  FFFF               	dw	65535
    83  00202C  FFFF               	dw	65535
    84  00202E  FFFF               	dw	65535
    85  002030  FFFF               	dw	65535
    86  002032  FFFF               	dw	65535
    87  002034  FFFF               	dw	65535
    88  002036  FFFF               	dw	65535
    89                           
    90                           ;initializer for _DistanceCanister
    91  002038  FFFF               	dw	65535
    92  00203A  FFFF               	dw	65535
    93  00203C  FFFF               	dw	65535
    94  00203E  FFFF               	dw	65535
    95  002040  FFFF               	dw	65535
    96  002042  FFFF               	dw	65535
    97  002044  FFFF               	dw	65535
    98  002046  FFFF               	dw	65535
    99  002048  FFFF               	dw	65535
   100  00204A  FFFF               	dw	65535
   101                           
   102                           ;initializer for _State
   103  00204C  FFFF               	dw	65535
   104  00204E  FFFF               	dw	65535
   105  002050  FFFF               	dw	65535
   106  002052  FFFF               	dw	65535
   107  002054  FFFF               	dw	65535
   108  002056  FFFF               	dw	65535
   109  002058  FFFF               	dw	65535
   110  00205A  FFFF               	dw	65535
   111  00205C  FFFF               	dw	65535
   112  00205E  FFFF               	dw	65535
   113                           
   114                           ;initializer for _balls
   115  002060  0005               	dw	5
   116                           
   117                           ;initializer for _Canister
   118  002062  0007               	dw	7
   119                           
   120                           ;initializer for _time
   121  002064  001E               	dw	30
   122                           
   123                           	psect	smallconst
   124  001000                     __psmallconst:
   125                           	opt callstack 0
   126  001000  00                 	db	0
   127  001001                     _keys:
   128                           	opt callstack 0
   129  001001  31                 	db	49
   130  001002  32                 	db	50
   131  001003  33                 	db	51
   132  001004  41                 	db	65
   133  001005  34                 	db	52
   134  001006  35                 	db	53
   135  001007  36                 	db	54
   136  001008  42                 	db	66
   137  001009  37                 	db	55
   138  00100A  38                 	db	56
   139  00100B  39                 	db	57
   140  00100C  43                 	db	67
   141  00100D  2A                 	db	42
   142  00100E  30                 	db	48
   143  00100F  23                 	db	35
   144  001010  44                 	db	68
   145  001011  00                 	db	0
   146  001012                     __end_of_keys:
   147                           	opt callstack 0
   148  001012  50                 	db	80
   149  001013                     __end_of_LCD_LINE4_ADDR:
   150                           	opt callstack 0
   151  001013  10                 	db	16
   152  001014                     __end_of_LCD_LINE3_ADDR:
   153                           	opt callstack 0
   154  001014  40                 	db	64
   155  001015                     __end_of_LCD_LINE2_ADDR:
   156                           	opt callstack 0
   157  001015  00                 	db	0
   158  001016                     __end_of_LCD_LINE1_ADDR:
   159                           	opt callstack 0
   160  001016                     _LCD_SIZE_VERT:
   161                           	opt callstack 0
   162  001016  04                 	db	4
   163  001017                     __end_of_LCD_SIZE_VERT:
   164                           	opt callstack 0
   165  001017                     _LCD_SIZE_HORZ:
   166                           	opt callstack 0
   167  001017  10                 	db	16
   168  001018                     __end_of_LCD_SIZE_HORZ:
   169                           	opt callstack 0
   170  0000                     _PORTB	set	3969
   171  0000                     _ADCON1	set	4033
   172  0000                     _TRISD	set	3989
   173  0000                     _LATD	set	3980
   174  0000                     _LATDbits	set	3980
   175  0000                     _INTCONbits	set	4082
   176  0000                     _INT1IF	set	32640
   177  0000                     _INT1IE	set	32643
   178  001018                     STR_1:
   179  001018  49                 	db	73	;'I'
   180  001019  74                 	db	116	;'t'
   181  00101A  27                 	db	39
   182  00101B  73                 	db	115	;'s'
   183  00101C  20                 	db	32
   184  00101D  79                 	db	121	;'y'
   185  00101E  61                 	db	97	;'a'
   186  00101F  20                 	db	32
   187  001020  62                 	db	98	;'b'
   188  001021  6F                 	db	111	;'o'
   189  001022  79                 	db	121	;'y'
   190  001023  20                 	db	32
   191  001024  41                 	db	65	;'A'
   192  001025  6C                 	db	108	;'l'
   193  001026  69                 	db	105	;'i'
   194  001027  21                 	db	33
   195  001028  00                 	db	0
   196  001029                     STR_9:
   197  001029  49                 	db	73	;'I'
   198  00102A  6E                 	db	110	;'n'
   199  00102B  64                 	db	100	;'d'
   200  00102C  69                 	db	105	;'i'
   201  00102D  76                 	db	118	;'v'
   202  00102E  69                 	db	105	;'i'
   203  00102F  64                 	db	100	;'d'
   204  001030  75                 	db	117	;'u'
   205  001031  61                 	db	97	;'a'
   206  001032  6C                 	db	108	;'l'
   207  001033  20                 	db	32
   208  001034  49                 	db	73	;'I'
   209  001035  6E                 	db	110	;'n'
   210  001036  66                 	db	102	;'f'
   211  001037  6F                 	db	111	;'o'
   212  001038  00                 	db	0
   213  001039                     STR_11:
   214  001039  50                 	db	80	;'P'
   215  00103A  72                 	db	114	;'r'
   216  00103B  65                 	db	101	;'e'
   217  00103C  73                 	db	115	;'s'
   218  00103D  73                 	db	115	;'s'
   219  00103E  20                 	db	32
   220  00103F  30                 	db	48	;'0'
   221  001040  20                 	db	32
   222  001041  74                 	db	116	;'t'
   223  001042  6F                 	db	111	;'o'
   224  001043  20                 	db	32
   225  001044  25                 	db	37
   226  001045  64                 	db	100	;'d'
   227  001046  20                 	db	32
   228  001047  00                 	db	0
   229  001048                     STR_2:
   230  001048  4F                 	db	79	;'O'
   231  001049  70                 	db	112	;'p'
   232  00104A  65                 	db	101	;'e'
   233  00104B  72                 	db	114	;'r'
   234  00104C  61                 	db	97	;'a'
   235  00104D  74                 	db	116	;'t'
   236  00104E  69                 	db	105	;'i'
   237  00104F  6F                 	db	111	;'o'
   238  001050  6E                 	db	110	;'n'
   239  001051  20                 	db	32
   240  001052  54                 	db	84	;'T'
   241  001053  69                 	db	105	;'i'
   242  001054  6D                 	db	109	;'m'
   243  001055  65                 	db	101	;'e'
   244  001056  00                 	db	0
   245  001057                     STR_13:
   246  001057  44                 	db	68	;'D'
   247  001058  69                 	db	105	;'i'
   248  001059  73                 	db	115	;'s'
   249  00105A  74                 	db	116	;'t'
   250  00105B  61                 	db	97	;'a'
   251  00105C  6E                 	db	110	;'n'
   252  00105D  63                 	db	99	;'c'
   253  00105E  65                 	db	101	;'e'
   254  00105F  20                 	db	32
   255  001060  25                 	db	37
   256  001061  64                 	db	100	;'d'
   257  001062  20                 	db	32
   258  001063  63                 	db	99	;'c'
   259  001064  6D                 	db	109	;'m'
   260  001065  00                 	db	0
   261  001066                     STR_4:
   262  001066  23                 	db	35
   263  001067  20                 	db	32
   264  001068  6F                 	db	111	;'o'
   265  001069  66                 	db	102	;'f'
   266  00106A  20                 	db	32
   267  00106B  43                 	db	67	;'C'
   268  00106C  61                 	db	97	;'a'
   269  00106D  6E                 	db	110	;'n'
   270  00106E  69                 	db	105	;'i'
   271  00106F  73                 	db	115	;'s'
   272  001070  74                 	db	116	;'t'
   273  001071  65                 	db	101	;'e'
   274  001072  72                 	db	114	;'r'
   275  001073  73                 	db	115	;'s'
   276  001074  00                 	db	0
   277  001075                     STR_17:
   278  001075  43                 	db	67	;'C'
   279  001076  61                 	db	97	;'a'
   280  001077  6E                 	db	110	;'n'
   281  001078  69                 	db	105	;'i'
   282  001079  73                 	db	115	;'s'
   283  00107A  74                 	db	116	;'t'
   284  00107B  65                 	db	101	;'e'
   285  00107C  72                 	db	114	;'r'
   286  00107D  20                 	db	32
   287  00107E  45                 	db	69	;'E'
   288  00107F  6D                 	db	109	;'m'
   289  001080  70                 	db	112	;'p'
   290  001081  74                 	db	116	;'t'
   291  001082  79                 	db	121	;'y'
   292  001083  00                 	db	0
   293  001084                     STR_21:
   294  001084  4E                 	db	78	;'N'
   295  001085  6F                 	db	111	;'o'
   296  001086  20                 	db	32
   297  001087  42                 	db	66	;'B'
   298  001088  61                 	db	97	;'a'
   299  001089  6C                 	db	108	;'l'
   300  00108A  6C                 	db	108	;'l'
   301  00108B  20                 	db	32
   302  00108C  41                 	db	65	;'A'
   303  00108D  64                 	db	100	;'d'
   304  00108E  64                 	db	100	;'d'
   305  00108F  65                 	db	101	;'e'
   306  001090  64                 	db	100	;'d'
   307  001091  00                 	db	0
   308  001092                     STR_16:
   309  001092  43                 	db	67	;'C'
   310  001093  61                 	db	97	;'a'
   311  001094  6E                 	db	110	;'n'
   312  001095  69                 	db	105	;'i'
   313  001096  73                 	db	115	;'s'
   314  001097  74                 	db	116	;'t'
   315  001098  65                 	db	101	;'e'
   316  001099  72                 	db	114	;'r'
   317  00109A  20                 	db	32
   318  00109B  46                 	db	70	;'F'
   319  00109C  75                 	db	117	;'u'
   320  00109D  6C                 	db	108	;'l'
   321  00109E  6C                 	db	108	;'l'
   322  00109F  00                 	db	0
   323  0010A0                     STR_5:
   324  0010A0  25                 	db	37
   325  0010A1  64                 	db	100	;'d'
   326  0010A2  20                 	db	32
   327  0010A3  43                 	db	67	;'C'
   328  0010A4  61                 	db	97	;'a'
   329  0010A5  6E                 	db	110	;'n'
   330  0010A6  69                 	db	105	;'i'
   331  0010A7  73                 	db	115	;'s'
   332  0010A8  74                 	db	116	;'t'
   333  0010A9  65                 	db	101	;'e'
   334  0010AA  72                 	db	114	;'r'
   335  0010AB  73                 	db	115	;'s'
   336  0010AC  00                 	db	0
   337  0010AD                     STR_12:
   338  0010AD  43                 	db	67	;'C'
   339  0010AE  61                 	db	97	;'a'
   340  0010AF  6E                 	db	110	;'n'
   341  0010B0  73                 	db	115	;'s'
   342  0010B1  69                 	db	105	;'i'
   343  0010B2  74                 	db	116	;'t'
   344  0010B3  65                 	db	101	;'e'
   345  0010B4  72                 	db	114	;'r'
   346  0010B5  20                 	db	32
   347  0010B6  25                 	db	37
   348  0010B7  63                 	db	99	;'c'
   349  0010B8  00                 	db	0
   350  0010B9                     STR_10:
   351  0010B9  6F                 	db	111	;'o'
   352  0010BA  66                 	db	102	;'f'
   353  0010BB  20                 	db	32
   354  0010BC  43                 	db	67	;'C'
   355  0010BD  61                 	db	97	;'a'
   356  0010BE  6E                 	db	110	;'n'
   357  0010BF  69                 	db	105	;'i'
   358  0010C0  73                 	db	115	;'s'
   359  0010C1  74                 	db	116	;'t'
   360  0010C2  65                 	db	101	;'e'
   361  0010C3  72                 	db	114	;'r'
   362  0010C4  00                 	db	0
   363  0010C5                     STR_3:
   364  0010C5  25                 	db	37
   365  0010C6  64                 	db	100	;'d'
   366  0010C7  20                 	db	32
   367  0010C8  73                 	db	115	;'s'
   368  0010C9  65                 	db	101	;'e'
   369  0010CA  63                 	db	99	;'c'
   370  0010CB  6F                 	db	111	;'o'
   371  0010CC  6E                 	db	110	;'n'
   372  0010CD  64                 	db	100	;'d'
   373  0010CE  73                 	db	115	;'s'
   374  0010CF  00                 	db	0
   375  0010D0                     STR_6:
   376  0010D0  23                 	db	35
   377  0010D1  20                 	db	32
   378  0010D2  6F                 	db	111	;'o'
   379  0010D3  66                 	db	102	;'f'
   380  0010D4  20                 	db	32
   381  0010D5  42                 	db	66	;'B'
   382  0010D6  61                 	db	97	;'a'
   383  0010D7  6C                 	db	108	;'l'
   384  0010D8  6C                 	db	108	;'l'
   385  0010D9  73                 	db	115	;'s'
   386  0010DA  00                 	db	0
   387  0010DB                     STR_14:
   388  0010DB  2A                 	db	42
   389  0010DC  20                 	db	32
   390  0010DD  74                 	db	116	;'t'
   391  0010DE  6F                 	db	111	;'o'
   392  0010DF  20                 	db	32
   393  0010E0  65                 	db	101	;'e'
   394  0010E1  78                 	db	120	;'x'
   395  0010E2  69                 	db	105	;'i'
   396  0010E3  74                 	db	116	;'t'
   397  0010E4  00                 	db	0
   398  0010E5                     STR_7:
   399  0010E5  73                 	db	115	;'s'
   400  0010E6  75                 	db	117	;'u'
   401  0010E7  70                 	db	112	;'p'
   402  0010E8  70                 	db	112	;'p'
   403  0010E9  6C                 	db	108	;'l'
   404  0010EA  69                 	db	105	;'i'
   405  0010EB  65                 	db	101	;'e'
   406  0010EC  64                 	db	100	;'d'
   407  0010ED  00                 	db	0
   408  0010EE                     STR_8:
   409  0010EE  25                 	db	37
   410  0010EF  64                 	db	100	;'d'
   411  0010F0  20                 	db	32
   412  0010F1  62                 	db	98	;'b'
   413  0010F2  61                 	db	97	;'a'
   414  0010F3  6C                 	db	108	;'l'
   415  0010F4  6C                 	db	108	;'l'
   416  0010F5  73                 	db	115	;'s'
   417  0010F6  00                 	db	0
   418  0000                     
   419                           ; #config settings
   420  0010F7  00                 	db	0	; dummy byte at the end
   421  0000                     
   422                           	psect	cinit
   423  001FDA                     __pcinit:
   424                           	opt callstack 0
   425  001FDA                     start_initialization:
   426                           	opt callstack 0
   427  001FDA                     __initialization:
   428                           	opt callstack 0
   429                           
   430                           ; Initialize objects allocated to BANK0 (66 bytes)
   431                           ; load TBLPTR registers with __pidataBANK0
   432  001FDA  0E24               	movlw	low __pidataBANK0
   433  001FDC  6EF6               	movwf	tblptrl,c
   434  001FDE  0E20               	movlw	high __pidataBANK0
   435  001FE0  6EF7               	movwf	tblptrh,c
   436  001FE2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   437  001FE4  6EF8               	movwf	tblptru,c
   438  001FE6  EE00  F080         	lfsr	0,__pdataBANK0
   439  001FEA  EE10 F042          	lfsr	1,66
   440  001FEE                     copy_data0:
   441  001FEE  0009               	tblrd		*+
   442  001FF0  CFF5 FFEE          	movff	tablat,postinc0
   443  001FF4  50E5               	movf	postdec1,w,c
   444  001FF6  50E1               	movf	fsr1l,w,c
   445  001FF8  E1FA               	bnz	copy_data0
   446                           
   447                           ; Clear objects allocated to BANK0 (34 bytes)
   448  001FFA  EE00  F0C2         	lfsr	0,__pbssBANK0
   449  001FFE  0E22               	movlw	34
   450  002000                     clear_0:
   451  002000  6AEE               	clrf	postinc0,c
   452  002002  06E8               	decf	wreg,f,c
   453  002004  E1FD               	bnz	clear_0
   454                           
   455                           ; Clear objects allocated to COMRAM (8 bytes)
   456  002006  EE00  F06C         	lfsr	0,__pbssCOMRAM
   457  00200A  0E08               	movlw	8
   458  00200C                     clear_1:
   459  00200C  6AEE               	clrf	postinc0,c
   460  00200E  06E8               	decf	wreg,f,c
   461  002010  E1FD               	bnz	clear_1
   462  002012                     end_of_initialization:
   463                           	opt callstack 0
   464  002012                     __end_of__initialization:
   465                           	opt callstack 0
   466  002012  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   467  002014  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   468  002016  0E00               	movlw	low (__Lsmallconst shr (0+16))
   469  002018  6EF8               	movwf	tblptru,c
   470  00201A  0E10               	movlw	high __Lsmallconst
   471  00201C  6EF7               	movwf	tblptrh,c
   472  00201E  0100               	movlb	0
   473  002020  EF7C  F008         	goto	_main	;jump to C main() function
   474                           
   475                           	psect	bssCOMRAM
   476  00006C                     __pbssCOMRAM:
   477                           	opt callstack 0
   478  00006C                     _nout:
   479                           	opt callstack 0
   480  00006C                     	ds	2
   481  00006E                     _width:
   482                           	opt callstack 0
   483  00006E                     	ds	2
   484  000070                     _prec:
   485                           	opt callstack 0
   486  000070                     	ds	2
   487  000072                     _flags:
   488                           	opt callstack 0
   489  000072                     	ds	2
   490                           
   491                           	psect	bssBANK0
   492  0000C2                     __pbssBANK0:
   493                           	opt callstack 0
   494  0000C2                     _exit_key:
   495                           	opt callstack 0
   496  0000C2                     	ds	1
   497  0000C3                     _key_was_pressed:
   498                           	opt callstack 0
   499  0000C3                     	ds	1
   500  0000C4                     _dbuf:
   501                           	opt callstack 0
   502  0000C4                     	ds	32
   503                           
   504                           	psect	dataBANK0
   505  000080                     __pdataBANK0:
   506                           	opt callstack 0
   507  000080                     _BallDispensed:
   508                           	opt callstack 0
   509  000080                     	ds	20
   510  000094                     _DistanceCanister:
   511                           	opt callstack 0
   512  000094                     	ds	20
   513  0000A8                     _State:
   514                           	opt callstack 0
   515  0000A8                     	ds	20
   516  0000BC                     _balls:
   517                           	opt callstack 0
   518  0000BC                     	ds	2
   519  0000BE                     _Canister:
   520                           	opt callstack 0
   521  0000BE                     	ds	2
   522  0000C0                     _time:
   523                           	opt callstack 0
   524  0000C0                     	ds	2
   525                           
   526                           	psect	cstackBANK0
   527  0000E4                     __pcstackBANK0:
   528                           	opt callstack 0
   529  0000E4                     	ds	2
   530  0000E6                     printf@ap:
   531                           	opt callstack 0
   532                           
   533                           ; 2 bytes @ 0x2
   534  0000E6                     	ds	2
   535  0000E8                     ??_main:
   536                           
   537                           ; 1 bytes @ 0x4
   538  0000E8                     	ds	8
   539  0000F0                     main@tick:
   540                           	opt callstack 0
   541                           
   542                           ; 2 bytes @ 0xC
   543  0000F0                     	ds	2
   544  0000F2                     main@miniTick:
   545                           	opt callstack 0
   546                           
   547                           ; 2 bytes @ 0xE
   548  0000F2                     	ds	2
   549  0000F4                     main@miniClear:
   550                           	opt callstack 0
   551                           
   552                           ; 2 bytes @ 0x10
   553  0000F4                     	ds	2
   554  0000F6                     main@miniState:
   555                           	opt callstack 0
   556                           
   557                           ; 2 bytes @ 0x12
   558  0000F6                     	ds	2
   559  0000F8                     main@clear:
   560                           	opt callstack 0
   561                           
   562                           ; 2 bytes @ 0x14
   563  0000F8                     	ds	2
   564  0000FA                     main@state:
   565                           	opt callstack 0
   566                           
   567                           ; 2 bytes @ 0x16
   568  0000FA                     	ds	2
   569  0000FC                     main@keypress:
   570                           	opt callstack 0
   571                           
   572                           ; 1 bytes @ 0x18
   573  0000FC                     	ds	1
   574                           
   575                           	psect	cstackCOMRAM
   576  000001                     __pcstackCOMRAM:
   577                           	opt callstack 0
   578  000001                     ??_interruptHandler:
   579                           
   580                           ; 1 bytes @ 0x0
   581  000001                     	ds	8
   582  000009                     interruptHandler@i:
   583                           	opt callstack 0
   584                           
   585                           ; 2 bytes @ 0x8
   586  000009                     	ds	2
   587  00000B                     interruptHandler@keypress:
   588                           	opt callstack 0
   589                           
   590                           ; 1 bytes @ 0xA
   591  00000B                     	ds	1
   592  00000C                     ?_strlen:
   593                           	opt callstack 0
   594  00000C                     ?___awmod:
   595                           	opt callstack 0
   596  00000C                     ?___aodiv:
   597                           	opt callstack 0
   598  00000C                     ?___aomod:
   599                           	opt callstack 0
   600  00000C                     pulse_e@interruptState:
   601                           	opt callstack 0
   602  00000C                     ___awmod@dividend:
   603                           	opt callstack 0
   604  00000C                     strlen@s:
   605                           	opt callstack 0
   606  00000C                     ___aodiv@dividend:
   607                           	opt callstack 0
   608  00000C                     ___aomod@dividend:
   609                           	opt callstack 0
   610                           
   611                           ; 8 bytes @ 0xB
   612  00000C                     	ds	1
   613  00000D                     send_nibble@data:
   614                           	opt callstack 0
   615                           
   616                           ; 1 bytes @ 0xC
   617  00000D                     	ds	1
   618  00000E                     send_byte@data:
   619                           	opt callstack 0
   620  00000E                     ___awmod@divisor:
   621                           	opt callstack 0
   622  00000E                     strlen@a:
   623                           	opt callstack 0
   624                           
   625                           ; 2 bytes @ 0xD
   626  00000E                     	ds	1
   627  00000F                     lcdInst@data:
   628                           	opt callstack 0
   629  00000F                     putch@data:
   630                           	opt callstack 0
   631                           
   632                           ; 1 bytes @ 0xE
   633  00000F                     	ds	1
   634  000010                     ??_initLCD:
   635  000010                     ___awmod@counter:
   636                           	opt callstack 0
   637  000010                     fputc@c:
   638                           	opt callstack 0
   639                           
   640                           ; 2 bytes @ 0xF
   641  000010                     	ds	1
   642  000011                     ___awmod@sign:
   643                           	opt callstack 0
   644                           
   645                           ; 1 bytes @ 0x10
   646  000011                     	ds	1
   647  000012                     fputc@fp:
   648                           	opt callstack 0
   649                           
   650                           ; 2 bytes @ 0x11
   651  000012                     	ds	2
   652  000014                     ??_fputc:
   653  000014                     ___aodiv@divisor:
   654                           	opt callstack 0
   655  000014                     ___aomod@divisor:
   656                           	opt callstack 0
   657                           
   658                           ; 8 bytes @ 0x13
   659  000014                     	ds	5
   660  000019                     fputs@s:
   661                           	opt callstack 0
   662                           
   663                           ; 2 bytes @ 0x18
   664  000019                     	ds	2
   665  00001B                     fputs@fp:
   666                           	opt callstack 0
   667                           
   668                           ; 2 bytes @ 0x1A
   669  00001B                     	ds	1
   670  00001C                     ___aodiv@counter:
   671                           	opt callstack 0
   672  00001C                     ___aomod@counter:
   673                           	opt callstack 0
   674                           
   675                           ; 1 bytes @ 0x1B
   676  00001C                     	ds	1
   677  00001D                     ___aodiv@sign:
   678                           	opt callstack 0
   679  00001D                     ___aomod@sign:
   680                           	opt callstack 0
   681  00001D                     fputs@c:
   682                           	opt callstack 0
   683                           
   684                           ; 1 bytes @ 0x1C
   685  00001D                     	ds	1
   686  00001E                     ?_abs:
   687                           	opt callstack 0
   688  00001E                     abs@a:
   689                           	opt callstack 0
   690  00001E                     fputs@i:
   691                           	opt callstack 0
   692  00001E                     ___aodiv@quotient:
   693                           	opt callstack 0
   694                           
   695                           ; 8 bytes @ 0x1D
   696  00001E                     	ds	2
   697  000020                     ??_abs:
   698  000020                     ?_pad:
   699                           	opt callstack 0
   700  000020                     pad@fp:
   701                           	opt callstack 0
   702                           
   703                           ; 2 bytes @ 0x1F
   704  000020                     	ds	2
   705  000022                     pad@buf:
   706                           	opt callstack 0
   707                           
   708                           ; 2 bytes @ 0x21
   709  000022                     	ds	2
   710  000024                     pad@p:
   711                           	opt callstack 0
   712                           
   713                           ; 2 bytes @ 0x23
   714  000024                     	ds	2
   715  000026                     ??_pad:
   716                           
   717                           ; 1 bytes @ 0x25
   718  000026                     	ds	1
   719  000027                     pad@i:
   720                           	opt callstack 0
   721                           
   722                           ; 2 bytes @ 0x26
   723  000027                     	ds	2
   724  000029                     pad@w:
   725                           	opt callstack 0
   726                           
   727                           ; 2 bytes @ 0x28
   728  000029                     	ds	2
   729  00002B                     ?_ctoa:
   730                           	opt callstack 0
   731  00002B                     ?_dtoa:
   732                           	opt callstack 0
   733  00002B                     ctoa@fp:
   734                           	opt callstack 0
   735  00002B                     dtoa@fp:
   736                           	opt callstack 0
   737                           
   738                           ; 2 bytes @ 0x2A
   739  00002B                     	ds	2
   740  00002D                     ctoa@c:
   741                           	opt callstack 0
   742  00002D                     dtoa@d:
   743                           	opt callstack 0
   744                           
   745                           ; 8 bytes @ 0x2C
   746  00002D                     	ds	1
   747  00002E                     ctoa@w:
   748                           	opt callstack 0
   749                           
   750                           ; 2 bytes @ 0x2D
   751  00002E                     	ds	7
   752  000035                     ??_dtoa:
   753                           
   754                           ; 1 bytes @ 0x34
   755  000035                     	ds	8
   756  00003D                     _dtoa$319:
   757                           	opt callstack 0
   758                           
   759                           ; 2 bytes @ 0x3C
   760  00003D                     	ds	2
   761  00003F                     dtoa@p:
   762                           	opt callstack 0
   763                           
   764                           ; 2 bytes @ 0x3E
   765  00003F                     	ds	2
   766  000041                     dtoa@w:
   767                           	opt callstack 0
   768                           
   769                           ; 2 bytes @ 0x40
   770  000041                     	ds	2
   771  000043                     dtoa@s:
   772                           	opt callstack 0
   773                           
   774                           ; 2 bytes @ 0x42
   775  000043                     	ds	2
   776  000045                     dtoa@n:
   777                           	opt callstack 0
   778                           
   779                           ; 8 bytes @ 0x44
   780  000045                     	ds	8
   781  00004D                     dtoa@i:
   782                           	opt callstack 0
   783                           
   784                           ; 2 bytes @ 0x4C
   785  00004D                     	ds	2
   786  00004F                     ?_vfpfcnvrt:
   787                           	opt callstack 0
   788  00004F                     vfpfcnvrt@fp:
   789                           	opt callstack 0
   790                           
   791                           ; 2 bytes @ 0x4E
   792  00004F                     	ds	2
   793  000051                     vfpfcnvrt@fmt:
   794                           	opt callstack 0
   795                           
   796                           ; 2 bytes @ 0x50
   797  000051                     	ds	2
   798  000053                     vfpfcnvrt@ap:
   799                           	opt callstack 0
   800                           
   801                           ; 2 bytes @ 0x52
   802  000053                     	ds	2
   803  000055                     ??_vfpfcnvrt:
   804                           
   805                           ; 1 bytes @ 0x54
   806  000055                     	ds	2
   807  000057                     vfpfcnvrt@ll:
   808                           	opt callstack 0
   809                           
   810                           ; 8 bytes @ 0x56
   811  000057                     	ds	8
   812  00005F                     vfpfcnvrt@c:
   813                           	opt callstack 0
   814                           
   815                           ; 1 bytes @ 0x5E
   816  00005F                     	ds	1
   817  000060                     ?_vfprintf:
   818                           	opt callstack 0
   819  000060                     vfprintf@fp:
   820                           	opt callstack 0
   821                           
   822                           ; 2 bytes @ 0x5F
   823  000060                     	ds	2
   824  000062                     vfprintf@fmt:
   825                           	opt callstack 0
   826                           
   827                           ; 2 bytes @ 0x61
   828  000062                     	ds	2
   829  000064                     vfprintf@ap:
   830                           	opt callstack 0
   831                           
   832                           ; 2 bytes @ 0x63
   833  000064                     	ds	2
   834  000066                     vfprintf@cfmt:
   835                           	opt callstack 0
   836                           
   837                           ; 2 bytes @ 0x65
   838  000066                     	ds	2
   839  000068                     ?_printf:
   840                           	opt callstack 0
   841  000068                     printf@fmt:
   842                           	opt callstack 0
   843                           
   844                           ; 2 bytes @ 0x67
   845  000068                     	ds	4
   846  00006C                     
   847                           ; 1 bytes @ 0x6B
   848 ;;
   849 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   850 ;;
   851 ;; *************** function _main *****************
   852 ;; Defined at:
   853 ;;		line 36 in file "main.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;		None
   856 ;; Auto vars:     Size  Location     Type
   857 ;;  miniState       2   18[BANK0 ] int 
   858 ;;  miniClear       2   16[BANK0 ] int 
   859 ;;  miniTick        2   14[BANK0 ] int 
   860 ;;  keypress        1   24[BANK0 ] unsigned char 
   861 ;;  state           2   22[BANK0 ] int 
   862 ;;  clear           2   20[BANK0 ] int 
   863 ;;  tick            2   12[BANK0 ] int 
   864 ;; Return value:  Size  Location     Type
   865 ;;                  1    wreg      void 
   866 ;; Registers used:
   867 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   868 ;; Tracked objects:
   869 ;;		On entry : 0/0
   870 ;;		On exit  : 0/0
   871 ;;		Unchanged: 0/0
   872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   874 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   875 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   876 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   877 ;;Total ram usage:       21 bytes
   878 ;; Hardware stack levels required when called:   12
   879 ;; This function calls:
   880 ;;		___awmod
   881 ;;		_initLCD
   882 ;;		_lcdInst
   883 ;;		_printf
   884 ;; This function is called by:
   885 ;;		Startup code after reset
   886 ;; This function uses a non-reentrant model
   887 ;;
   888                           
   889                           	psect	text0
   890  0010F8                     __ptext0:
   891                           	opt callstack 0
   892  0010F8                     _main:
   893                           	opt callstack 19
   894                           
   895                           ;main.c: 40:     LATD = 0x00;
   896                           
   897                           ;incstack = 0
   898  0010F8  0E00               	movlw	0
   899  0010FA  6E8C               	movwf	3980,c	;volatile
   900                           
   901                           ;main.c: 41:     TRISD = 0x00;
   902  0010FC  0E00               	movlw	0
   903  0010FE  6E95               	movwf	3989,c	;volatile
   904                           
   905                           ;main.c: 44:     ADCON1 = 0b00001111;
   906  001100  0E0F               	movlw	15
   907  001102  6EC1               	movwf	4033,c	;volatile
   908                           
   909                           ;main.c: 47:     INT1IE = 1;
   910  001104  86F0               	bsf	4080,3,c	;volatile
   911                           
   912                           ;main.c: 50:     initLCD();
   913  001106  EC68  F00F         	call	_initLCD	;wreg free
   914                           
   915                           ;main.c: 53:     (INTCONbits.GIE = 1);
   916  00110A  8EF2               	bsf	4082,7,c	;volatile
   917                           
   918                           ;main.c: 56:     int state = 0;
   919  00110C  0E00               	movlw	0
   920  00110E  0100               	movlb	0	; () banked
   921  001110  6FFB               	movwf	(main@state+1)& (0+255),b
   922  001112  0E00               	movlw	0
   923  001114  6FFA               	movwf	main@state& (0+255),b
   924                           
   925                           ; BSR set to: 0
   926                           ;main.c: 57:     int tick = 0;
   927  001116  0E00               	movlw	0
   928  001118  6FF1               	movwf	(main@tick+1)& (0+255),b
   929  00111A  0E00               	movlw	0
   930  00111C  6FF0               	movwf	main@tick& (0+255),b
   931                           
   932                           ; BSR set to: 0
   933                           ;main.c: 58:     int clear = 1;
   934  00111E  0E00               	movlw	0
   935  001120  6FF9               	movwf	(main@clear+1)& (0+255),b
   936  001122  0E01               	movlw	1
   937  001124  6FF8               	movwf	main@clear& (0+255),b
   938                           
   939                           ; BSR set to: 0
   940                           ;main.c: 62:     printf("It's ya boy Ali!");
   941  001126  0E18               	movlw	low STR_1
   942  001128  6E68               	movwf	printf@fmt,c
   943  00112A  0E10               	movlw	high STR_1
   944  00112C  6E69               	movwf	printf@fmt+1,c
   945  00112E  EC92  F010         	call	_printf	;wreg free
   946                           
   947                           ;main.c: 63:     _delay((unsigned long)((2000)*(10000000/4000.0)));
   948  001132  0E1A               	movlw	26
   949  001134  0100               	movlb	0	; () banked
   950  001136  6FE9               	movwf	(??_main+1)& (0+255),b
   951  001138  0E5E               	movlw	94
   952  00113A  6FE8               	movwf	??_main& (0+255),b
   953  00113C  0E6E               	movlw	110
   954  00113E                     u2407:
   955  00113E  2EE8               	decfsz	wreg,f,c
   956  001140  D7FE               	bra	u2407
   957  001142  2FE8               	decfsz	??_main& (0+255),f,b
   958  001144  D7FC               	bra	u2407
   959  001146  2FE9               	decfsz	(??_main+1)& (0+255),f,b
   960  001148  D7FA               	bra	u2407
   961  00114A  F000               	nop	
   962                           
   963                           ;main.c: 64:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   964  00114C  0E01               	movlw	1
   965  00114E  ECC0  F010         	call	_lcdInst
   966  001152  0E11               	movlw	17
   967  001154  0100               	movlb	0	; () banked
   968  001156  6FE8               	movwf	??_main& (0+255),b
   969  001158  0E3A               	movlw	58
   970  00115A                     u2417:
   971  00115A  2EE8               	decfsz	wreg,f,c
   972  00115C  D7FE               	bra	u2417
   973  00115E  2FE8               	decfsz	??_main& (0+255),f,b
   974  001160  D7FC               	bra	u2417
   975  001162  F000               	nop	
   976  001164                     l2512:
   977                           
   978                           ;main.c: 71:         if (state == 0 & clear == 1) {
   979  001164  0100               	movlb	0	; () banked
   980  001166  51FA               	movf	main@state& (0+255),w,b
   981  001168  11FB               	iorwf	(main@state+1)& (0+255),w,b
   982  00116A  A4D8               	btfss	status,2,c
   983  00116C  D02B               	goto	l2530
   984                           
   985                           ; BSR set to: 0
   986  00116E  05F8               	decf	main@clear& (0+255),w,b
   987  001170  11F9               	iorwf	(main@clear+1)& (0+255),w,b
   988  001172  A4D8               	btfss	status,2,c
   989  001174  D027               	goto	l2530
   990                           
   991                           ; BSR set to: 0
   992                           ;main.c: 72:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   993  001176  0E01               	movlw	1
   994  001178  ECC0  F010         	call	_lcdInst
   995  00117C  0E11               	movlw	17
   996  00117E  0100               	movlb	0	; () banked
   997  001180  6FE8               	movwf	??_main& (0+255),b
   998  001182  0E3A               	movlw	58
   999  001184                     u2427:
  1000  001184  2EE8               	decfsz	wreg,f,c
  1001  001186  D7FE               	bra	u2427
  1002  001188  2FE8               	decfsz	??_main& (0+255),f,b
  1003  00118A  D7FC               	bra	u2427
  1004  00118C  F000               	nop	
  1005                           
  1006                           ;main.c: 73:         { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
  1007  00118E  0E0C               	movlw	12
  1008  001190  ECC0  F010         	call	_lcdInst
  1009                           
  1010                           ;main.c: 74:         printf("Operation Time");
  1011  001194  0E48               	movlw	low STR_2
  1012  001196  6E68               	movwf	printf@fmt,c
  1013  001198  0E10               	movlw	high STR_2
  1014  00119A  6E69               	movwf	printf@fmt+1,c
  1015  00119C  EC92  F010         	call	_printf	;wreg free
  1016  0011A0  0E90               	movlw	144
  1017  0011A2  ECC0  F010         	call	_lcdInst
  1018                           
  1019                           ;main.c: 76:         printf("%d seconds", time);
  1020  0011A6  0EC5               	movlw	low STR_3
  1021  0011A8  6E68               	movwf	printf@fmt,c
  1022  0011AA  0E10               	movlw	high STR_3
  1023  0011AC  6E69               	movwf	printf@fmt+1,c
  1024  0011AE  0E00               	movlw	0
  1025  0011B0  6E6B               	movwf	?_printf+3,c
  1026  0011B2  0E1E               	movlw	30
  1027  0011B4  6E6A               	movwf	?_printf+2,c
  1028  0011B6  EC92  F010         	call	_printf	;wreg free
  1029                           
  1030                           ;main.c: 77:         clear = 0;
  1031  0011BA  0E00               	movlw	0
  1032  0011BC  0100               	movlb	0	; () banked
  1033  0011BE  6FF9               	movwf	(main@clear+1)& (0+255),b
  1034  0011C0  0E00               	movlw	0
  1035  0011C2  6FF8               	movwf	main@clear& (0+255),b
  1036  0011C4                     l2530:
  1037                           
  1038                           ; BSR set to: 0
  1039                           ;main.c: 81:         if (state == 1 & clear == 1) {
  1040  0011C4  05FA               	decf	main@state& (0+255),w,b
  1041  0011C6  11FB               	iorwf	(main@state+1)& (0+255),w,b
  1042  0011C8  A4D8               	btfss	status,2,c
  1043  0011CA  D02B               	goto	l2548
  1044                           
  1045                           ; BSR set to: 0
  1046  0011CC  05F8               	decf	main@clear& (0+255),w,b
  1047  0011CE  11F9               	iorwf	(main@clear+1)& (0+255),w,b
  1048  0011D0  A4D8               	btfss	status,2,c
  1049  0011D2  D027               	goto	l2548
  1050                           
  1051                           ; BSR set to: 0
  1052                           ;main.c: 83:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)))
      +                          ;};
  1053  0011D4  0E01               	movlw	1
  1054  0011D6  ECC0  F010         	call	_lcdInst
  1055  0011DA  0E11               	movlw	17
  1056  0011DC  0100               	movlb	0	; () banked
  1057  0011DE  6FE8               	movwf	??_main& (0+255),b
  1058  0011E0  0E3A               	movlw	58
  1059  0011E2                     u2437:
  1060  0011E2  2EE8               	decfsz	wreg,f,c
  1061  0011E4  D7FE               	bra	u2437
  1062  0011E6  2FE8               	decfsz	??_main& (0+255),f,b
  1063  0011E8  D7FC               	bra	u2437
  1064  0011EA  F000               	nop	
  1065                           
  1066                           ;main.c: 84:             { lcdInst(0x80 | LCD_LINE1_ADDR);};
  1067  0011EC  0E80               	movlw	128
  1068  0011EE  ECC0  F010         	call	_lcdInst
  1069                           
  1070                           ;main.c: 85:             printf("# of Canisters");
  1071  0011F2  0E66               	movlw	low STR_4
  1072  0011F4  6E68               	movwf	printf@fmt,c
  1073  0011F6  0E10               	movlw	high STR_4
  1074  0011F8  6E69               	movwf	printf@fmt+1,c
  1075  0011FA  EC92  F010         	call	_printf	;wreg free
  1076  0011FE  0E90               	movlw	144
  1077  001200  ECC0  F010         	call	_lcdInst
  1078                           
  1079                           ;main.c: 87:             printf("%d Canisters", Canister);
  1080  001204  0EA0               	movlw	low STR_5
  1081  001206  6E68               	movwf	printf@fmt,c
  1082  001208  0E10               	movlw	high STR_5
  1083  00120A  6E69               	movwf	printf@fmt+1,c
  1084  00120C  C0BE  F06A         	movff	_Canister,?_printf+2
  1085  001210  C0BF  F06B         	movff	_Canister+1,?_printf+3
  1086  001214  EC92  F010         	call	_printf	;wreg free
  1087                           
  1088                           ;main.c: 88:             clear = 0;
  1089  001218  0E00               	movlw	0
  1090  00121A  0100               	movlb	0	; () banked
  1091  00121C  6FF9               	movwf	(main@clear+1)& (0+255),b
  1092  00121E  0E00               	movlw	0
  1093  001220  6FF8               	movwf	main@clear& (0+255),b
  1094  001222                     l2548:
  1095                           
  1096                           ; BSR set to: 0
  1097                           ;main.c: 92:         if (state == 2 & clear == 1) {
  1098  001222  0E02               	movlw	2
  1099  001224  19FA               	xorwf	main@state& (0+255),w,b
  1100  001226  11FB               	iorwf	(main@state+1)& (0+255),w,b
  1101  001228  A4D8               	btfss	status,2,c
  1102  00122A  D031               	goto	l2568
  1103                           
  1104                           ; BSR set to: 0
  1105  00122C  05F8               	decf	main@clear& (0+255),w,b
  1106  00122E  11F9               	iorwf	(main@clear+1)& (0+255),w,b
  1107  001230  A4D8               	btfss	status,2,c
  1108  001232  D02D               	goto	l2568
  1109                           
  1110                           ; BSR set to: 0
  1111                           ;main.c: 94:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)))
      +                          ;};
  1112  001234  0E01               	movlw	1
  1113  001236  ECC0  F010         	call	_lcdInst
  1114  00123A  0E11               	movlw	17
  1115  00123C  0100               	movlb	0	; () banked
  1116  00123E  6FE8               	movwf	??_main& (0+255),b
  1117  001240  0E3A               	movlw	58
  1118  001242                     u2447:
  1119  001242  2EE8               	decfsz	wreg,f,c
  1120  001244  D7FE               	bra	u2447
  1121  001246  2FE8               	decfsz	??_main& (0+255),f,b
  1122  001248  D7FC               	bra	u2447
  1123  00124A  F000               	nop	
  1124                           
  1125                           ;main.c: 95:             printf("# of Balls");
  1126  00124C  0ED0               	movlw	low STR_6
  1127  00124E  6E68               	movwf	printf@fmt,c
  1128  001250  0E10               	movlw	high STR_6
  1129  001252  6E69               	movwf	printf@fmt+1,c
  1130  001254  EC92  F010         	call	_printf	;wreg free
  1131  001258  0EC0               	movlw	192
  1132  00125A  ECC0  F010         	call	_lcdInst
  1133                           
  1134                           ;main.c: 97:             printf("supplied");
  1135  00125E  0EE5               	movlw	low STR_7
  1136  001260  6E68               	movwf	printf@fmt,c
  1137  001262  0E10               	movlw	high STR_7
  1138  001264  6E69               	movwf	printf@fmt+1,c
  1139  001266  EC92  F010         	call	_printf	;wreg free
  1140  00126A  0ED0               	movlw	208
  1141  00126C  ECC0  F010         	call	_lcdInst
  1142                           
  1143                           ;main.c: 99:             printf("%d balls", balls);
  1144  001270  0EEE               	movlw	low STR_8
  1145  001272  6E68               	movwf	printf@fmt,c
  1146  001274  0E10               	movlw	high STR_8
  1147  001276  6E69               	movwf	printf@fmt+1,c
  1148  001278  0E00               	movlw	0
  1149  00127A  6E6B               	movwf	?_printf+3,c
  1150  00127C  0E05               	movlw	5
  1151  00127E  6E6A               	movwf	?_printf+2,c
  1152  001280  EC92  F010         	call	_printf	;wreg free
  1153                           
  1154                           ;main.c: 100:             clear = 0;
  1155  001284  0E00               	movlw	0
  1156  001286  0100               	movlb	0	; () banked
  1157  001288  6FF9               	movwf	(main@clear+1)& (0+255),b
  1158  00128A  0E00               	movlw	0
  1159  00128C  6FF8               	movwf	main@clear& (0+255),b
  1160  00128E                     l2568:
  1161                           
  1162                           ; BSR set to: 0
  1163                           ;main.c: 104:         if (state == 3 & clear == 1) {
  1164  00128E  0E03               	movlw	3
  1165  001290  19FA               	xorwf	main@state& (0+255),w,b
  1166  001292  11FB               	iorwf	(main@state+1)& (0+255),w,b
  1167  001294  A4D8               	btfss	status,2,c
  1168  001296  D034               	goto	l2588
  1169                           
  1170                           ; BSR set to: 0
  1171  001298  05F8               	decf	main@clear& (0+255),w,b
  1172  00129A  11F9               	iorwf	(main@clear+1)& (0+255),w,b
  1173  00129C  A4D8               	btfss	status,2,c
  1174  00129E  D030               	goto	l2588
  1175                           
  1176                           ; BSR set to: 0
  1177                           ;main.c: 106:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1178  0012A0  0E01               	movlw	1
  1179  0012A2  ECC0  F010         	call	_lcdInst
  1180  0012A6  0E11               	movlw	17
  1181  0012A8  0100               	movlb	0	; () banked
  1182  0012AA  6FE8               	movwf	??_main& (0+255),b
  1183  0012AC  0E3A               	movlw	58
  1184  0012AE                     u2457:
  1185  0012AE  2EE8               	decfsz	wreg,f,c
  1186  0012B0  D7FE               	bra	u2457
  1187  0012B2  2FE8               	decfsz	??_main& (0+255),f,b
  1188  0012B4  D7FC               	bra	u2457
  1189  0012B6  F000               	nop	
  1190                           
  1191                           ;main.c: 107:             printf("Individual Info");
  1192  0012B8  0E29               	movlw	low STR_9
  1193  0012BA  6E68               	movwf	printf@fmt,c
  1194  0012BC  0E10               	movlw	high STR_9
  1195  0012BE  6E69               	movwf	printf@fmt+1,c
  1196  0012C0  EC92  F010         	call	_printf	;wreg free
  1197  0012C4  0EC0               	movlw	192
  1198  0012C6  ECC0  F010         	call	_lcdInst
  1199                           
  1200                           ;main.c: 109:             printf("of Canister");
  1201  0012CA  0EB9               	movlw	low STR_10
  1202  0012CC  6E68               	movwf	printf@fmt,c
  1203  0012CE  0E10               	movlw	high STR_10
  1204  0012D0  6E69               	movwf	printf@fmt+1,c
  1205  0012D2  EC92  F010         	call	_printf	;wreg free
  1206  0012D6  0ED0               	movlw	208
  1207  0012D8  ECC0  F010         	call	_lcdInst
  1208                           
  1209                           ;main.c: 111:             printf("Press 0 to %d ", Canister-1);
  1210  0012DC  0E39               	movlw	low STR_11
  1211  0012DE  6E68               	movwf	printf@fmt,c
  1212  0012E0  0E10               	movlw	high STR_11
  1213  0012E2  6E69               	movwf	printf@fmt+1,c
  1214  0012E4  0EFF               	movlw	255
  1215  0012E6  0100               	movlb	0	; () banked
  1216  0012E8  25BE               	addwf	_Canister& (0+255),w,b
  1217  0012EA  6E6A               	movwf	?_printf+2,c
  1218  0012EC  0EFF               	movlw	255
  1219  0012EE  21BF               	addwfc	(_Canister+1)& (0+255),w,b
  1220  0012F0  6E6B               	movwf	?_printf+3,c
  1221  0012F2  EC92  F010         	call	_printf	;wreg free
  1222                           
  1223                           ;main.c: 112:             clear = 0;
  1224  0012F6  0E00               	movlw	0
  1225  0012F8  0100               	movlb	0	; () banked
  1226  0012FA  6FF9               	movwf	(main@clear+1)& (0+255),b
  1227  0012FC  0E00               	movlw	0
  1228  0012FE  6FF8               	movwf	main@clear& (0+255),b
  1229  001300                     l2588:
  1230                           
  1231                           ; BSR set to: 0
  1232                           ;main.c: 116:         if(key_was_pressed){
  1233  001300  51C3               	movf	_key_was_pressed& (0+255),w,b	;volatile
  1234  001302  B4D8               	btfsc	status,2,c
  1235  001304  D16B               	goto	l2678
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 118:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  1239  001306  3881               	swapf	3969,w,c	;volatile
  1240  001308  0B0F               	andlw	15
  1241  00130A  0B0F               	andlw	15
  1242  00130C  6FFC               	movwf	main@keypress& (0+255),b
  1243                           
  1244                           ; BSR set to: 0
  1245                           ;main.c: 119:             int miniTick = 0;
  1246  00130E  0E00               	movlw	0
  1247  001310  6FF3               	movwf	(main@miniTick+1)& (0+255),b
  1248  001312  0E00               	movlw	0
  1249  001314  6FF2               	movwf	main@miniTick& (0+255),b
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;main.c: 120:             int miniState = 0;
  1253  001316  0E00               	movlw	0
  1254  001318  6FF7               	movwf	(main@miniState+1)& (0+255),b
  1255  00131A  0E00               	movlw	0
  1256  00131C  6FF6               	movwf	main@miniState& (0+255),b
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;main.c: 121:             int miniClear = 1;
  1260  00131E  0E00               	movlw	0
  1261  001320  6FF5               	movwf	(main@miniClear+1)& (0+255),b
  1262  001322  0E01               	movlw	1
  1263  001324  6FF4               	movwf	main@miniClear& (0+255),b
  1264                           
  1265                           ;main.c: 123:             while(!exit_key) {
  1266  001326  D152               	goto	l2674
  1267  001328                     l2598:
  1268                           
  1269                           ; BSR set to: 0
  1270                           ;main.c: 125:                 if (miniState == 0 & miniClear == 1) {
  1271  001328  51F6               	movf	main@miniState& (0+255),w,b
  1272  00132A  11F7               	iorwf	(main@miniState+1)& (0+255),w,b
  1273  00132C  A4D8               	btfss	status,2,c
  1274  00132E  D04D               	goto	l2616
  1275                           
  1276                           ; BSR set to: 0
  1277  001330  05F4               	decf	main@miniClear& (0+255),w,b
  1278  001332  11F5               	iorwf	(main@miniClear+1)& (0+255),w,b
  1279  001334  A4D8               	btfss	status,2,c
  1280  001336  D049               	goto	l2616
  1281                           
  1282                           ; BSR set to: 0
  1283                           ;main.c: 127:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1284  001338  0E01               	movlw	1
  1285  00133A  ECC0  F010         	call	_lcdInst
  1286  00133E  0E11               	movlw	17
  1287  001340  0100               	movlb	0	; () banked
  1288  001342  6FE8               	movwf	??_main& (0+255),b
  1289  001344  0E3A               	movlw	58
  1290  001346                     u2467:
  1291  001346  2EE8               	decfsz	wreg,f,c
  1292  001348  D7FE               	bra	u2467
  1293  00134A  2FE8               	decfsz	??_main& (0+255),f,b
  1294  00134C  D7FC               	bra	u2467
  1295  00134E  F000               	nop	
  1296                           
  1297                           ;main.c: 128:                     printf("Cansiter %c", keys[keypress]);
  1298  001350  0EAD               	movlw	low STR_12
  1299  001352  6E68               	movwf	printf@fmt,c
  1300  001354  0E10               	movlw	high STR_12
  1301  001356  6E69               	movwf	printf@fmt+1,c
  1302  001358  0E01               	movlw	low _keys
  1303  00135A  0100               	movlb	0	; () banked
  1304  00135C  25FC               	addwf	main@keypress& (0+255),w,b
  1305  00135E  6EF6               	movwf	tblptrl,c
  1306  001360  6AF7               	clrf	tblptrh,c
  1307  001362  0E10               	movlw	high _keys
  1308  001364  22F7               	addwfc	tblptrh,f,c
  1309  001366                     	if	0	;There are less than 3 active tblptr bytes
  1310  001366                     	endif
  1311  001366  0008               	tblrd		*
  1312  001368  50F5               	movf	tablat,w,c
  1313  00136A  6E6A               	movwf	?_printf+2,c
  1314  00136C  6A6B               	clrf	?_printf+3,c
  1315  00136E  EC92  F010         	call	_printf	;wreg free
  1316  001372  0E90               	movlw	144
  1317  001374  ECC0  F010         	call	_lcdInst
  1318                           
  1319                           ;main.c: 130:                     printf("Distance %d cm", DistanceCanister[(int) (keys[
      +                          keypress] - '0')] );
  1320  001378  0E57               	movlw	low STR_13
  1321  00137A  6E68               	movwf	printf@fmt,c
  1322  00137C  0E10               	movlw	high STR_13
  1323  00137E  6E69               	movwf	printf@fmt+1,c
  1324  001380  0E01               	movlw	low _keys
  1325  001382  0100               	movlb	0	; () banked
  1326  001384  25FC               	addwf	main@keypress& (0+255),w,b
  1327  001386  6EF6               	movwf	tblptrl,c
  1328  001388  6AF7               	clrf	tblptrh,c
  1329  00138A  0E10               	movlw	high _keys
  1330  00138C  22F7               	addwfc	tblptrh,f,c
  1331  00138E                     	if	0	;There are less than 3 active tblptr bytes
  1332  00138E                     	endif
  1333  00138E  0008               	tblrd		*
  1334  001390  50F5               	movf	tablat,w,c
  1335  001392  6FE8               	movwf	??_main& (0+255),b
  1336  001394  6BE9               	clrf	(??_main+1)& (0+255),b
  1337  001396  90D8               	bcf	status,0,c
  1338  001398  37E8               	rlcf	??_main& (0+255),f,b
  1339  00139A  37E9               	rlcf	(??_main+1)& (0+255),f,b
  1340  00139C  0E34               	movlw	low (_DistanceCanister+65440)
  1341  00139E  25E8               	addwf	??_main& (0+255),w,b
  1342  0013A0  6ED9               	movwf	fsr2l,c
  1343  0013A2  0E00               	movlw	high (_DistanceCanister+65440)
  1344  0013A4  21E9               	addwfc	(??_main+1)& (0+255),w,b
  1345  0013A6  6EDA               	movwf	fsr2h,c
  1346  0013A8  CFDE F06A          	movff	postinc2,?_printf+2
  1347  0013AC  CFDD F06B          	movff	postdec2,?_printf+3
  1348  0013B0  EC92  F010         	call	_printf	;wreg free
  1349                           
  1350                           ;main.c: 131:                     printf("* to exit");
  1351  0013B4  0EDB               	movlw	low STR_14
  1352  0013B6  6E68               	movwf	printf@fmt,c
  1353  0013B8  0E10               	movlw	high STR_14
  1354  0013BA  6E69               	movwf	printf@fmt+1,c
  1355  0013BC  EC92  F010         	call	_printf	;wreg free
  1356                           
  1357                           ;main.c: 132:                     miniClear = 0;
  1358  0013C0  0E00               	movlw	0
  1359  0013C2  0100               	movlb	0	; () banked
  1360  0013C4  6FF5               	movwf	(main@miniClear+1)& (0+255),b
  1361  0013C6  0E00               	movlw	0
  1362  0013C8  6FF4               	movwf	main@miniClear& (0+255),b
  1363  0013CA                     l2616:
  1364                           
  1365                           ; BSR set to: 0
  1366                           ;main.c: 135:                 if (miniState == 1 & miniClear == 1) {
  1367  0013CA  05F6               	decf	main@miniState& (0+255),w,b
  1368  0013CC  11F7               	iorwf	(main@miniState+1)& (0+255),w,b
  1369  0013CE  A4D8               	btfss	status,2,c
  1370  0013D0  D065               	goto	l2636
  1371                           
  1372                           ; BSR set to: 0
  1373  0013D2  05F4               	decf	main@miniClear& (0+255),w,b
  1374  0013D4  11F5               	iorwf	(main@miniClear+1)& (0+255),w,b
  1375  0013D6  A4D8               	btfss	status,2,c
  1376  0013D8  D061               	goto	l2636
  1377                           
  1378                           ; BSR set to: 0
  1379                           ;main.c: 137:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1380  0013DA  0E01               	movlw	1
  1381  0013DC  ECC0  F010         	call	_lcdInst
  1382  0013E0  0E11               	movlw	17
  1383  0013E2  0100               	movlb	0	; () banked
  1384  0013E4  6FE8               	movwf	??_main& (0+255),b
  1385  0013E6  0E3A               	movlw	58
  1386  0013E8                     u2477:
  1387  0013E8  2EE8               	decfsz	wreg,f,c
  1388  0013EA  D7FE               	bra	u2477
  1389  0013EC  2FE8               	decfsz	??_main& (0+255),f,b
  1390  0013EE  D7FC               	bra	u2477
  1391  0013F0  F000               	nop	
  1392                           
  1393                           ;main.c: 138:                     printf("Cansiter %c", keys[keypress]);
  1394  0013F2  0EAD               	movlw	low STR_12
  1395  0013F4  6E68               	movwf	printf@fmt,c
  1396  0013F6  0E10               	movlw	high STR_12
  1397  0013F8  6E69               	movwf	printf@fmt+1,c
  1398  0013FA  0E01               	movlw	low _keys
  1399  0013FC  0100               	movlb	0	; () banked
  1400  0013FE  25FC               	addwf	main@keypress& (0+255),w,b
  1401  001400  6EF6               	movwf	tblptrl,c
  1402  001402  6AF7               	clrf	tblptrh,c
  1403  001404  0E10               	movlw	high _keys
  1404  001406  22F7               	addwfc	tblptrh,f,c
  1405  001408                     	if	0	;There are less than 3 active tblptr bytes
  1406  001408                     	endif
  1407  001408  0008               	tblrd		*
  1408  00140A  50F5               	movf	tablat,w,c
  1409  00140C  6E6A               	movwf	?_printf+2,c
  1410  00140E  6A6B               	clrf	?_printf+3,c
  1411  001410  EC92  F010         	call	_printf	;wreg free
  1412  001414  0E90               	movlw	144
  1413  001416  ECC0  F010         	call	_lcdInst
  1414                           
  1415                           ;main.c: 140:                     if (State[(int) (keys[keypress] - '0') == 1])
  1416  00141A  0ED0               	movlw	208
  1417  00141C  0100               	movlb	0	; () banked
  1418  00141E  6FE8               	movwf	??_main& (0+255),b
  1419  001420  0EFF               	movlw	255
  1420  001422  6FE9               	movwf	(??_main+1)& (0+255),b
  1421  001424  0E01               	movlw	low _keys
  1422  001426  25FC               	addwf	main@keypress& (0+255),w,b
  1423  001428  6EF6               	movwf	tblptrl,c
  1424  00142A  6AF7               	clrf	tblptrh,c
  1425  00142C  0E10               	movlw	high _keys
  1426  00142E  22F7               	addwfc	tblptrh,f,c
  1427  001430                     	if	0	;There are less than 3 active tblptr bytes
  1428  001430                     	endif
  1429  001430  0008               	tblrd		*
  1430  001432  50F5               	movf	tablat,w,c
  1431  001434  6FEA               	movwf	(??_main+2)& (0+255),b
  1432  001436  6BEB               	clrf	(??_main+3)& (0+255),b
  1433  001438  51E8               	movf	??_main& (0+255),w,b
  1434  00143A  27EA               	addwf	(??_main+2)& (0+255),f,b
  1435  00143C  51E9               	movf	(??_main+1)& (0+255),w,b
  1436  00143E  23EB               	addwfc	(??_main+3)& (0+255),f,b
  1437  001440  05EA               	decf	(??_main+2)& (0+255),w,b
  1438  001442  11EB               	iorwf	(??_main+3)& (0+255),w,b
  1439  001444  A4D8               	btfss	status,2,c
  1440  001446  D002               	goto	u2290
  1441  001448  0E01               	movlw	1
  1442  00144A  D001               	goto	u2300
  1443  00144C                     u2290:
  1444  00144C  0E00               	movlw	0
  1445  00144E                     u2300:
  1446  00144E  6FEC               	movwf	(??_main+4)& (0+255),b
  1447  001450  6BED               	clrf	(??_main+5)& (0+255),b
  1448  001452  90D8               	bcf	status,0,c
  1449  001454  37EC               	rlcf	(??_main+4)& (0+255),f,b
  1450  001456  37ED               	rlcf	(??_main+5)& (0+255),f,b
  1451  001458  0EA8               	movlw	low _State
  1452  00145A  25EC               	addwf	(??_main+4)& (0+255),w,b
  1453  00145C  6ED9               	movwf	fsr2l,c
  1454  00145E  0E00               	movlw	high _State
  1455  001460  21ED               	addwfc	(??_main+5)& (0+255),w,b
  1456  001462  6EDA               	movwf	fsr2h,c
  1457  001464  50DE               	movf	postinc2,w,c
  1458  001466  10DE               	iorwf	postinc2,w,c
  1459  001468  B4D8               	btfsc	status,2,c
  1460  00146A  D007               	goto	l2632
  1461                           
  1462                           ; BSR set to: 0
  1463                           ;main.c: 141:                         printf("Canister Full");
  1464  00146C  0E92               	movlw	low STR_16
  1465  00146E  6E68               	movwf	printf@fmt,c
  1466  001470  0E10               	movlw	high STR_16
  1467  001472  6E69               	movwf	printf@fmt+1,c
  1468  001474  EC92  F010         	call	_printf	;wreg free
  1469  001478  D006               	goto	l112
  1470  00147A                     l2632:
  1471                           
  1472                           ; BSR set to: 0
  1473                           ;main.c: 143:                         printf("Canister Empty");
  1474  00147A  0E75               	movlw	low STR_17
  1475  00147C  6E68               	movwf	printf@fmt,c
  1476  00147E  0E10               	movlw	high STR_17
  1477  001480  6E69               	movwf	printf@fmt+1,c
  1478  001482  EC92  F010         	call	_printf	;wreg free
  1479  001486                     l112:
  1480                           
  1481                           ;main.c: 144:                     printf("* to exit");
  1482  001486  0EDB               	movlw	low STR_14
  1483  001488  6E68               	movwf	printf@fmt,c
  1484  00148A  0E10               	movlw	high STR_14
  1485  00148C  6E69               	movwf	printf@fmt+1,c
  1486  00148E  EC92  F010         	call	_printf	;wreg free
  1487                           
  1488                           ;main.c: 145:                     miniClear = 0;
  1489  001492  0E00               	movlw	0
  1490  001494  0100               	movlb	0	; () banked
  1491  001496  6FF5               	movwf	(main@miniClear+1)& (0+255),b
  1492  001498  0E00               	movlw	0
  1493  00149A  6FF4               	movwf	main@miniClear& (0+255),b
  1494  00149C                     l2636:
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;main.c: 148:                 if (miniState == 2 & miniClear == 1) {
  1498  00149C  0E02               	movlw	2
  1499  00149E  19F6               	xorwf	main@miniState& (0+255),w,b
  1500  0014A0  11F7               	iorwf	(main@miniState+1)& (0+255),w,b
  1501  0014A2  A4D8               	btfss	status,2,c
  1502  0014A4  D068               	goto	l2660
  1503                           
  1504                           ; BSR set to: 0
  1505  0014A6  05F4               	decf	main@miniClear& (0+255),w,b
  1506  0014A8  11F5               	iorwf	(main@miniClear+1)& (0+255),w,b
  1507  0014AA  A4D8               	btfss	status,2,c
  1508  0014AC  D064               	goto	l2660
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;main.c: 150:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1512  0014AE  0E01               	movlw	1
  1513  0014B0  ECC0  F010         	call	_lcdInst
  1514  0014B4  0E11               	movlw	17
  1515  0014B6  0100               	movlb	0	; () banked
  1516  0014B8  6FE8               	movwf	??_main& (0+255),b
  1517  0014BA  0E3A               	movlw	58
  1518  0014BC                     u2487:
  1519  0014BC  2EE8               	decfsz	wreg,f,c
  1520  0014BE  D7FE               	bra	u2487
  1521  0014C0  2FE8               	decfsz	??_main& (0+255),f,b
  1522  0014C2  D7FC               	bra	u2487
  1523  0014C4  F000               	nop	
  1524                           
  1525                           ;main.c: 151:                     printf("Cansiter %c", keys[keypress]);
  1526  0014C6  0EAD               	movlw	low STR_12
  1527  0014C8  6E68               	movwf	printf@fmt,c
  1528  0014CA  0E10               	movlw	high STR_12
  1529  0014CC  6E69               	movwf	printf@fmt+1,c
  1530  0014CE  0E01               	movlw	low _keys
  1531  0014D0  0100               	movlb	0	; () banked
  1532  0014D2  25FC               	addwf	main@keypress& (0+255),w,b
  1533  0014D4  6EF6               	movwf	tblptrl,c
  1534  0014D6  6AF7               	clrf	tblptrh,c
  1535  0014D8  0E10               	movlw	high _keys
  1536  0014DA  22F7               	addwfc	tblptrh,f,c
  1537  0014DC                     	if	0	;There are less than 3 active tblptr bytes
  1538  0014DC                     	endif
  1539  0014DC  0008               	tblrd		*
  1540  0014DE  50F5               	movf	tablat,w,c
  1541  0014E0  6E6A               	movwf	?_printf+2,c
  1542  0014E2  6A6B               	clrf	?_printf+3,c
  1543  0014E4  EC92  F010         	call	_printf	;wreg free
  1544  0014E8  0E90               	movlw	144
  1545  0014EA  ECC0  F010         	call	_lcdInst
  1546                           
  1547                           ;main.c: 153:                     if (BallDispensed[(int) (keys[keypress] - '0') == 1])
  1548  0014EE  0ED0               	movlw	208
  1549  0014F0  0100               	movlb	0	; () banked
  1550  0014F2  6FE8               	movwf	??_main& (0+255),b
  1551  0014F4  0EFF               	movlw	255
  1552  0014F6  6FE9               	movwf	(??_main+1)& (0+255),b
  1553  0014F8  0E01               	movlw	low _keys
  1554  0014FA  25FC               	addwf	main@keypress& (0+255),w,b
  1555  0014FC  6EF6               	movwf	tblptrl,c
  1556  0014FE  6AF7               	clrf	tblptrh,c
  1557  001500  0E10               	movlw	high _keys
  1558  001502  22F7               	addwfc	tblptrh,f,c
  1559  001504                     	if	0	;There are less than 3 active tblptr bytes
  1560  001504                     	endif
  1561  001504  0008               	tblrd		*
  1562  001506  50F5               	movf	tablat,w,c
  1563  001508  6FEA               	movwf	(??_main+2)& (0+255),b
  1564  00150A  6BEB               	clrf	(??_main+3)& (0+255),b
  1565  00150C  51E8               	movf	??_main& (0+255),w,b
  1566  00150E  27EA               	addwf	(??_main+2)& (0+255),f,b
  1567  001510  51E9               	movf	(??_main+1)& (0+255),w,b
  1568  001512  23EB               	addwfc	(??_main+3)& (0+255),f,b
  1569  001514  05EA               	decf	(??_main+2)& (0+255),w,b
  1570  001516  11EB               	iorwf	(??_main+3)& (0+255),w,b
  1571  001518  A4D8               	btfss	status,2,c
  1572  00151A  D002               	goto	u2340
  1573  00151C  0E01               	movlw	1
  1574  00151E  D001               	goto	u2350
  1575  001520                     u2340:
  1576  001520  0E00               	movlw	0
  1577  001522                     u2350:
  1578  001522  6FEC               	movwf	(??_main+4)& (0+255),b
  1579  001524  6BED               	clrf	(??_main+5)& (0+255),b
  1580  001526  90D8               	bcf	status,0,c
  1581  001528  37EC               	rlcf	(??_main+4)& (0+255),f,b
  1582  00152A  37ED               	rlcf	(??_main+5)& (0+255),f,b
  1583  00152C  0E80               	movlw	low _BallDispensed
  1584  00152E  25EC               	addwf	(??_main+4)& (0+255),w,b
  1585  001530  6ED9               	movwf	fsr2l,c
  1586  001532  0E00               	movlw	high _BallDispensed
  1587  001534  21ED               	addwfc	(??_main+5)& (0+255),w,b
  1588  001536  6EDA               	movwf	fsr2h,c
  1589  001538  50DE               	movf	postinc2,w,c
  1590  00153A  10DE               	iorwf	postinc2,w,c
  1591  00153C  B4D8               	btfsc	status,2,c
  1592  00153E  D007               	goto	l2652
  1593                           
  1594                           ; BSR set to: 0
  1595                           ;main.c: 154:                         printf("Ball Added");
  1596  001540  0E87               	movlw	low (STR_21+3)
  1597  001542  6E68               	movwf	printf@fmt,c
  1598  001544  0E10               	movlw	high (STR_21+3)
  1599  001546  6E69               	movwf	printf@fmt+1,c
  1600  001548  EC92  F010         	call	_printf	;wreg free
  1601  00154C  D006               	goto	l2654
  1602  00154E                     l2652:
  1603                           
  1604                           ; BSR set to: 0
  1605                           ;main.c: 156:                         printf("No Ball Added");
  1606  00154E  0E84               	movlw	low STR_21
  1607  001550  6E68               	movwf	printf@fmt,c
  1608  001552  0E10               	movlw	high STR_21
  1609  001554  6E69               	movwf	printf@fmt+1,c
  1610  001556  EC92  F010         	call	_printf	;wreg free
  1611  00155A                     l2654:
  1612  00155A  0ED0               	movlw	208
  1613  00155C  ECC0  F010         	call	_lcdInst
  1614                           
  1615                           ;main.c: 158:                     printf("* to exit");
  1616  001560  0EDB               	movlw	low STR_14
  1617  001562  6E68               	movwf	printf@fmt,c
  1618  001564  0E10               	movlw	high STR_14
  1619  001566  6E69               	movwf	printf@fmt+1,c
  1620  001568  EC92  F010         	call	_printf	;wreg free
  1621                           
  1622                           ;main.c: 161:                     miniClear = 0;
  1623  00156C  0E00               	movlw	0
  1624  00156E  0100               	movlb	0	; () banked
  1625  001570  6FF5               	movwf	(main@miniClear+1)& (0+255),b
  1626  001572  0E00               	movlw	0
  1627  001574  6FF4               	movwf	main@miniClear& (0+255),b
  1628  001576                     l2660:
  1629                           
  1630                           ; BSR set to: 0
  1631                           ;main.c: 164:                 if (miniTick == 2000) {
  1632  001576  0ED0               	movlw	208
  1633  001578  19F2               	xorwf	main@miniTick& (0+255),w,b
  1634  00157A  E11D               	bnz	l2670
  1635  00157C  0E07               	movlw	7
  1636  00157E  19F3               	xorwf	(main@miniTick+1)& (0+255),w,b
  1637  001580  A4D8               	btfss	status,2,c
  1638  001582  D019               	goto	l2670
  1639                           
  1640                           ; BSR set to: 0
  1641                           ;main.c: 165:                     miniClear = 1;
  1642  001584  0E00               	movlw	0
  1643  001586  6FF5               	movwf	(main@miniClear+1)& (0+255),b
  1644  001588  0E01               	movlw	1
  1645  00158A  6FF4               	movwf	main@miniClear& (0+255),b
  1646                           
  1647                           ; BSR set to: 0
  1648                           ;main.c: 166:                     miniState++;
  1649  00158C  4BF6               	infsnz	main@miniState& (0+255),f,b
  1650  00158E  2BF7               	incf	(main@miniState+1)& (0+255),f,b
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;main.c: 167:                     miniState = miniState % 3;
  1654  001590  C0F6  F00C         	movff	main@miniState,___awmod@dividend
  1655  001594  C0F7  F00D         	movff	main@miniState+1,___awmod@dividend+1
  1656  001598  0E00               	movlw	0
  1657  00159A  6E0F               	movwf	___awmod@divisor+1,c
  1658  00159C  0E03               	movlw	3
  1659  00159E  6E0E               	movwf	___awmod@divisor,c
  1660  0015A0  ECFA  F00E         	call	___awmod	;wreg free
  1661  0015A4  C00C  F0F6         	movff	?___awmod,main@miniState
  1662  0015A8  C00D  F0F7         	movff	?___awmod+1,main@miniState+1
  1663                           
  1664                           ;main.c: 168:                     miniTick = 0;
  1665  0015AC  0E00               	movlw	0
  1666  0015AE  0100               	movlb	0	; () banked
  1667  0015B0  6FF3               	movwf	(main@miniTick+1)& (0+255),b
  1668  0015B2  0E00               	movlw	0
  1669  0015B4  6FF2               	movwf	main@miniTick& (0+255),b
  1670  0015B6                     l2670:
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;main.c: 171:                 miniTick++;
  1674  0015B6  4BF2               	infsnz	main@miniTick& (0+255),f,b
  1675  0015B8  2BF3               	incf	(main@miniTick+1)& (0+255),f,b
  1676                           
  1677                           ; BSR set to: 0
  1678                           ;main.c: 172:                 _delay((unsigned long)((1)*(10000000/4000.0)));
  1679  0015BA  0E04               	movlw	4
  1680  0015BC  0100               	movlb	0	; () banked
  1681  0015BE  6FE8               	movwf	??_main& (0+255),b
  1682  0015C0  0E3D               	movlw	61
  1683  0015C2                     u2497:
  1684  0015C2  2EE8               	decfsz	wreg,f,c
  1685  0015C4  D7FE               	bra	u2497
  1686  0015C6  2FE8               	decfsz	??_main& (0+255),f,b
  1687  0015C8  D7FC               	bra	u2497
  1688  0015CA  D000               	nop2	
  1689  0015CC                     l2674:
  1690                           
  1691                           ;main.c: 123:             while(!exit_key) {
  1692  0015CC  0100               	movlb	0	; () banked
  1693  0015CE  51C2               	movf	_exit_key& (0+255),w,b	;volatile
  1694  0015D0  B4D8               	btfsc	status,2,c
  1695  0015D2  D6AA               	goto	l2598
  1696                           
  1697                           ; BSR set to: 0
  1698                           ;main.c: 177:             key_was_pressed = 0;
  1699  0015D4  0E00               	movlw	0
  1700  0015D6  6FC3               	movwf	_key_was_pressed& (0+255),b	;volatile
  1701                           
  1702                           ;main.c: 178:             exit_key = 0;
  1703  0015D8  0E00               	movlw	0
  1704  0015DA  6FC2               	movwf	_exit_key& (0+255),b	;volatile
  1705  0015DC                     l2678:
  1706                           
  1707                           ; BSR set to: 0
  1708                           ;main.c: 182:         if (tick == 2000) {
  1709  0015DC  0ED0               	movlw	208
  1710  0015DE  19F0               	xorwf	main@tick& (0+255),w,b
  1711  0015E0  E112               	bnz	l2688
  1712  0015E2  0E07               	movlw	7
  1713  0015E4  19F1               	xorwf	(main@tick+1)& (0+255),w,b
  1714  0015E6  A4D8               	btfss	status,2,c
  1715  0015E8  D00E               	goto	l2688
  1716                           
  1717                           ; BSR set to: 0
  1718                           ;main.c: 183:             clear = 1;
  1719  0015EA  0E00               	movlw	0
  1720  0015EC  6FF9               	movwf	(main@clear+1)& (0+255),b
  1721  0015EE  0E01               	movlw	1
  1722  0015F0  6FF8               	movwf	main@clear& (0+255),b
  1723                           
  1724                           ; BSR set to: 0
  1725                           ;main.c: 184:             state++;
  1726  0015F2  4BFA               	infsnz	main@state& (0+255),f,b
  1727  0015F4  2BFB               	incf	(main@state+1)& (0+255),f,b
  1728                           
  1729                           ; BSR set to: 0
  1730                           ;main.c: 185:             state = state % 4;
  1731  0015F6  0E03               	movlw	3
  1732  0015F8  15FA               	andwf	main@state& (0+255),w,b
  1733  0015FA  6FFA               	movwf	main@state& (0+255),b
  1734  0015FC  6BFB               	clrf	(main@state+1)& (0+255),b
  1735                           
  1736                           ; BSR set to: 0
  1737                           ;main.c: 186:             tick = 0;
  1738  0015FE  0E00               	movlw	0
  1739  001600  6FF1               	movwf	(main@tick+1)& (0+255),b
  1740  001602  0E00               	movlw	0
  1741  001604  6FF0               	movwf	main@tick& (0+255),b
  1742  001606                     l2688:
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 189:         tick++;
  1746  001606  4BF0               	infsnz	main@tick& (0+255),f,b
  1747  001608  2BF1               	incf	(main@tick+1)& (0+255),f,b
  1748                           
  1749                           ; BSR set to: 0
  1750                           ;main.c: 190:         _delay((unsigned long)((1)*(10000000/4000.0)));
  1751  00160A  0E04               	movlw	4
  1752  00160C  0100               	movlb	0	; () banked
  1753  00160E  6FE8               	movwf	??_main& (0+255),b
  1754  001610  0E3D               	movlw	61
  1755  001612                     u2507:
  1756  001612  2EE8               	decfsz	wreg,f,c
  1757  001614  D7FE               	bra	u2507
  1758  001616  2FE8               	decfsz	??_main& (0+255),f,b
  1759  001618  D7FC               	bra	u2507
  1760  00161A  D000               	nop2	
  1761  00161C  D5A3               	goto	l2512
  1762  00161E                     __end_of_main:
  1763                           	opt callstack 0
  1764                           
  1765 ;; *************** function _printf *****************
  1766 ;; Defined at:
  1767 ;;		line 5 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/printf.c"
  1768 ;; Parameters:    Size  Location     Type
  1769 ;;  fmt             2  103[COMRAM] PTR const unsigned char 
  1770 ;;		 -> STR_22(10), STR_21(14), STR_20(11), STR_19(12), 
  1771 ;;		 -> STR_18(10), STR_17(15), STR_16(14), STR_15(12), 
  1772 ;;		 -> STR_14(10), STR_13(15), STR_12(12), STR_11(15), 
  1773 ;;		 -> STR_10(12), STR_9(16), STR_8(9), STR_7(9), 
  1774 ;;		 -> STR_6(11), STR_5(13), STR_4(15), STR_3(11), 
  1775 ;;		 -> STR_2(15), STR_1(17), 
  1776 ;; Auto vars:     Size  Location     Type
  1777 ;;  ap              2    2[BANK0 ] PTR void [1]
  1778 ;;		 -> ?_printf(2), 
  1779 ;;  ret             2    0        int 
  1780 ;; Return value:  Size  Location     Type
  1781 ;;                  2  103[COMRAM] int 
  1782 ;; Registers used:
  1783 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1784 ;; Tracked objects:
  1785 ;;		On entry : 0/0
  1786 ;;		On exit  : 0/0
  1787 ;;		Unchanged: 0/0
  1788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1789 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1790 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1791 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1792 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1793 ;;Total ram usage:        8 bytes
  1794 ;; Hardware stack levels used:    1
  1795 ;; Hardware stack levels required when called:   11
  1796 ;; This function calls:
  1797 ;;		_vfprintf
  1798 ;; This function is called by:
  1799 ;;		_main
  1800 ;; This function uses a non-reentrant model
  1801 ;;
  1802                           
  1803                           	psect	text1
  1804  002124                     __ptext1:
  1805                           	opt callstack 0
  1806  002124                     _printf:
  1807                           	opt callstack 19
  1808                           
  1809                           ;incstack = 0
  1810  002124  0E6A               	movlw	low (?_printf+2)
  1811  002126  0100               	movlb	0	; () banked
  1812  002128  6FE6               	movwf	printf@ap& (0+255),b
  1813  00212A  0E00               	movlw	high (?_printf+2)
  1814  00212C  6FE7               	movwf	(printf@ap+1)& (0+255),b
  1815                           
  1816                           ; BSR set to: 0
  1817  00212E  0E00               	movlw	0
  1818  002130  6E60               	movwf	vfprintf@fp,c
  1819  002132  0E00               	movlw	0
  1820  002134  6E61               	movwf	vfprintf@fp+1,c
  1821  002136  C068  F062         	movff	printf@fmt,vfprintf@fmt
  1822  00213A  C069  F063         	movff	printf@fmt+1,vfprintf@fmt+1
  1823  00213E  0EE6               	movlw	low printf@ap
  1824  002140  6E64               	movwf	vfprintf@ap,c
  1825  002142  0E00               	movlw	high printf@ap
  1826  002144  6E65               	movwf	vfprintf@ap+1,c
  1827  002146  EC9D  F00F         	call	_vfprintf	;wreg free
  1828  00214A  0012               	return		;funcret
  1829  00214C                     __end_of_printf:
  1830                           	opt callstack 0
  1831                           
  1832 ;; *************** function _vfprintf *****************
  1833 ;; Defined at:
  1834 ;;		line 1368 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1835 ;; Parameters:    Size  Location     Type
  1836 ;;  fp              2   95[COMRAM] PTR struct _IO_FILE
  1837 ;;		 -> NULL(0), 
  1838 ;;  fmt             2   97[COMRAM] PTR const unsigned char 
  1839 ;;		 -> STR_22(10), STR_21(14), STR_20(11), STR_19(12), 
  1840 ;;		 -> STR_18(10), STR_17(15), STR_16(14), STR_15(12), 
  1841 ;;		 -> STR_14(10), STR_13(15), STR_12(12), STR_11(15), 
  1842 ;;		 -> STR_10(12), STR_9(16), STR_8(9), STR_7(9), 
  1843 ;;		 -> STR_6(11), STR_5(13), STR_4(15), STR_3(11), 
  1844 ;;		 -> STR_2(15), STR_1(17), 
  1845 ;;  ap              2   99[COMRAM] PTR PTR void 
  1846 ;;		 -> printf@ap(2), 
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;  cfmt            2  101[COMRAM] PTR unsigned char 
  1849 ;;		 -> STR_22(10), STR_21(14), STR_20(11), STR_19(12), 
  1850 ;;		 -> STR_18(10), STR_17(15), STR_16(14), STR_15(12), 
  1851 ;;		 -> STR_14(10), STR_13(15), STR_12(12), STR_11(15), 
  1852 ;;		 -> STR_10(12), STR_9(16), STR_8(9), STR_7(9), 
  1853 ;;		 -> STR_6(11), STR_5(13), STR_4(15), STR_3(11), 
  1854 ;;		 -> STR_2(15), STR_1(17), 
  1855 ;; Return value:  Size  Location     Type
  1856 ;;                  2   95[COMRAM] int 
  1857 ;; Registers used:
  1858 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1859 ;; Tracked objects:
  1860 ;;		On entry : 0/0
  1861 ;;		On exit  : 0/0
  1862 ;;		Unchanged: 0/0
  1863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1864 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;Total ram usage:        8 bytes
  1869 ;; Hardware stack levels used:    1
  1870 ;; Hardware stack levels required when called:   10
  1871 ;; This function calls:
  1872 ;;		_vfpfcnvrt
  1873 ;; This function is called by:
  1874 ;;		_printf
  1875 ;; This function uses a non-reentrant model
  1876 ;;
  1877                           
  1878                           	psect	text2
  1879  001F3A                     __ptext2:
  1880                           	opt callstack 0
  1881  001F3A                     _vfprintf:
  1882                           	opt callstack 19
  1883                           
  1884                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
  1885                           
  1886                           ;incstack = 0
  1887  001F3A  C062  F066         	movff	vfprintf@fmt,vfprintf@cfmt
  1888  001F3E  C063  F067         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1889                           
  1890                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  1891  001F42  0E00               	movlw	0
  1892  001F44  6E6D               	movwf	_nout+1,c
  1893  001F46  0E00               	movlw	0
  1894  001F48  6E6C               	movwf	_nout,c
  1895                           
  1896                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  1897  001F4A  D012               	goto	l2438
  1898  001F4C                     l2436:
  1899                           
  1900                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
  1901  001F4C  C060  F04F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1902  001F50  C061  F050         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1903  001F54  0E66               	movlw	low vfprintf@cfmt
  1904  001F56  6E51               	movwf	vfpfcnvrt@fmt,c
  1905  001F58  0E00               	movlw	high vfprintf@cfmt
  1906  001F5A  6E52               	movwf	vfpfcnvrt@fmt+1,c
  1907  001F5C  C064  F053         	movff	vfprintf@ap,vfpfcnvrt@ap
  1908  001F60  C065  F054         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1909  001F64  EC30  F00C         	call	_vfpfcnvrt	;wreg free
  1910  001F68  504F               	movf	?_vfpfcnvrt,w,c
  1911  001F6A  266C               	addwf	_nout,f,c
  1912  001F6C  5050               	movf	?_vfpfcnvrt+1,w,c
  1913  001F6E  226D               	addwfc	_nout+1,f,c
  1914  001F70                     l2438:
  1915                           
  1916                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  1917  001F70  C066  FFF6         	movff	vfprintf@cfmt,tblptrl
  1918  001F74  C067  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1919  001F78                     	if	0	;tblptru may be non-zero
  1920  001F78                     	endif
  1921  001F78                     	if	0	;tblptru may be non-zero
  1922  001F78                     	endif
  1923  001F78  0008               	tblrd		*
  1924  001F7A  50F5               	movf	tablat,w,c
  1925  001F7C  0900               	iorlw	0
  1926  001F7E  A4D8               	btfss	status,2,c
  1927  001F80  D7E5               	goto	l2436
  1928                           
  1929                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
  1930  001F82  C06C  F060         	movff	_nout,?_vfprintf
  1931  001F86  C06D  F061         	movff	_nout+1,?_vfprintf+1
  1932  001F8A  0012               	return		;funcret
  1933  001F8C                     __end_of_vfprintf:
  1934                           	opt callstack 0
  1935                           
  1936 ;; *************** function _vfpfcnvrt *****************
  1937 ;; Defined at:
  1938 ;;		line 670 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  fp              2   78[COMRAM] PTR struct _IO_FILE
  1941 ;;		 -> NULL(0), 
  1942 ;;  fmt             2   80[COMRAM] PTR PTR unsigned char 
  1943 ;;		 -> vfprintf@cfmt(2), 
  1944 ;;  ap              2   82[COMRAM] PTR PTR void 
  1945 ;;		 -> printf@ap(2), 
  1946 ;; Auto vars:     Size  Location     Type
  1947 ;;  ll              8   86[COMRAM] long long 
  1948 ;;  llu             8    0        unsigned long long 
  1949 ;;  f               4    0        unsigned long long 
  1950 ;;  vp              3    0        PTR void 
  1951 ;;  ct              3    0        unsigned char [3]
  1952 ;;  cp              3    0        PTR unsigned char 
  1953 ;;  i               2    0        int 
  1954 ;;  done            2    0        int 
  1955 ;;  c               1   94[COMRAM] unsigned char 
  1956 ;; Return value:  Size  Location     Type
  1957 ;;                  2   78[COMRAM] int 
  1958 ;; Registers used:
  1959 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1960 ;; Tracked objects:
  1961 ;;		On entry : 0/0
  1962 ;;		On exit  : 0/0
  1963 ;;		Unchanged: 0/0
  1964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1965 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1966 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1967 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1968 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1969 ;;Total ram usage:       17 bytes
  1970 ;; Hardware stack levels used:    1
  1971 ;; Hardware stack levels required when called:    9
  1972 ;; This function calls:
  1973 ;;		_ctoa
  1974 ;;		_dtoa
  1975 ;;		_fputc
  1976 ;; This function is called by:
  1977 ;;		_vfprintf
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           	psect	text3
  1982  001860                     __ptext3:
  1983                           	opt callstack 0
  1984  001860                     _vfpfcnvrt:
  1985                           	opt callstack 19
  1986                           
  1987                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.05/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.05/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
  1988                           
  1989                           ;incstack = 0
  1990  001860  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1991  001864  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1992  001868  CFDE FFF6          	movff	postinc2,tblptrl
  1993  00186C  CFDD FFF7          	movff	postdec2,tblptrh
  1994  001870                     	if	0	;tblptru may be non-zero
  1995  001870                     	endif
  1996  001870                     	if	0	;tblptru may be non-zero
  1997  001870                     	endif
  1998  001870  0008               	tblrd		*
  1999  001872  50F5               	movf	tablat,w,c
  2000  001874  0A25               	xorlw	37
  2001  001876  A4D8               	btfss	status,2,c
  2002  001878  D0CC               	goto	l2420
  2003                           
  2004                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  2005  00187A  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2006  00187E  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2007  001882  2ADE               	incf	postinc2,f,c
  2008  001884  0E00               	movlw	0
  2009  001886  22DD               	addwfc	postdec2,f,c
  2010                           
  2011                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
  2012  001888  0E00               	movlw	0
  2013  00188A  6E6F               	movwf	_width+1,c
  2014  00188C  0E00               	movlw	0
  2015  00188E  6E6E               	movwf	_width,c
  2016  001890  C06E  F072         	movff	_width,_flags
  2017  001894  C06F  F073         	movff	_width+1,_flags+1
  2018                           
  2019                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
  2020  001898  6870               	setf	_prec,c
  2021  00189A  6871               	setf	_prec+1,c
  2022                           
  2023                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 792:         if (*fm
      +                          t[0] == 'c') {
  2024  00189C  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2025  0018A0  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2026  0018A4  CFDE FFF6          	movff	postinc2,tblptrl
  2027  0018A8  CFDD FFF7          	movff	postdec2,tblptrh
  2028  0018AC                     	if	0	;tblptru may be non-zero
  2029  0018AC                     	endif
  2030  0018AC                     	if	0	;tblptru may be non-zero
  2031  0018AC                     	endif
  2032  0018AC  0008               	tblrd		*
  2033  0018AE  50F5               	movf	tablat,w,c
  2034  0018B0  0A63               	xorlw	99
  2035  0018B2  A4D8               	btfss	status,2,c
  2036  0018B4  D026               	goto	l2394
  2037                           
  2038                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 793:             ++*
      +                          fmt;
  2039  0018B6  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2040  0018BA  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2041  0018BE  2ADE               	incf	postinc2,f,c
  2042  0018C0  0E00               	movlw	0
  2043  0018C2  22DD               	addwfc	postdec2,f,c
  2044                           
  2045                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 794:             c =
      +                           (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  2046  0018C4  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2047  0018C8  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2048  0018CC  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2049  0018D0  0E02               	movlw	2
  2050  0018D2  26DE               	addwf	postinc2,f,c
  2051  0018D4  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2052  0018D8  0E00               	movlw	0
  2053  0018DA  22DD               	addwfc	postdec2,f,c
  2054  0018DC  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2055  0018E0  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2056  0018E4  50DF               	movf	indf2,w,c
  2057  0018E6  6E5F               	movwf	vfpfcnvrt@c,c
  2058                           
  2059                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 795:             ret
      +                          urn ctoa(fp, c);
  2060  0018E8  C04F  F02B         	movff	vfpfcnvrt@fp,ctoa@fp
  2061  0018EC  C050  F02C         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  2062  0018F0  C05F  F02D         	movff	vfpfcnvrt@c,ctoa@c
  2063  0018F4  ECC6  F00F         	call	_ctoa	;wreg free
  2064  0018F8  C02B  F04F         	movff	?_ctoa,?_vfpfcnvrt
  2065  0018FC  C02C  F050         	movff	?_ctoa+1,?_vfpfcnvrt+1
  2066  001900  0012               	return	
  2067  001902                     l2394:
  2068                           
  2069                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 825:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
  2070  001902  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2071  001906  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2072  00190A  CFDE FFF6          	movff	postinc2,tblptrl
  2073  00190E  CFDD FFF7          	movff	postdec2,tblptrh
  2074  001912                     	if	0	;tblptru may be non-zero
  2075  001912                     	endif
  2076  001912                     	if	0	;tblptru may be non-zero
  2077  001912                     	endif
  2078  001912  0008               	tblrd		*
  2079  001914  50F5               	movf	tablat,w,c
  2080  001916  0A64               	xorlw	100
  2081  001918  B4D8               	btfsc	status,2,c
  2082  00191A  D00D               	goto	u2110
  2083  00191C  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2084  001920  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2085  001924  CFDE FFF6          	movff	postinc2,tblptrl
  2086  001928  CFDD FFF7          	movff	postdec2,tblptrh
  2087  00192C                     	if	0	;tblptru may be non-zero
  2088  00192C                     	endif
  2089  00192C                     	if	0	;tblptru may be non-zero
  2090  00192C                     	endif
  2091  00192C  0008               	tblrd		*
  2092  00192E  50F5               	movf	tablat,w,c
  2093  001930  0A69               	xorlw	105
  2094  001932  A4D8               	btfss	status,2,c
  2095  001934  D03F               	goto	l2404
  2096  001936                     u2110:
  2097                           
  2098                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 827:             ++*
      +                          fmt;
  2099  001936  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2100  00193A  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2101  00193E  2ADE               	incf	postinc2,f,c
  2102  001940  0E00               	movlw	0
  2103  001942  22DD               	addwfc	postdec2,f,c
  2104                           
  2105                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 828:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2106  001944  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2107  001948  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2108  00194C  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2109  001950  0E02               	movlw	2
  2110  001952  26DE               	addwf	postinc2,f,c
  2111  001954  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2112  001958  0E00               	movlw	0
  2113  00195A  22DD               	addwfc	postdec2,f,c
  2114  00195C  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2115  001960  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2116  001964  CFDE F057          	movff	postinc2,vfpfcnvrt@ll
  2117  001968  CFDD F058          	movff	postdec2,vfpfcnvrt@ll+1
  2118  00196C  0E00               	movlw	0
  2119  00196E  BE58               	btfsc	vfpfcnvrt@ll+1,7,c
  2120  001970  0EFF               	movlw	-1
  2121  001972  6E59               	movwf	vfpfcnvrt@ll+2,c
  2122  001974  6E5A               	movwf	vfpfcnvrt@ll+3,c
  2123  001976  6E5B               	movwf	vfpfcnvrt@ll+4,c
  2124  001978  6E5C               	movwf	vfpfcnvrt@ll+5,c
  2125  00197A  6E5D               	movwf	vfpfcnvrt@ll+6,c
  2126  00197C  6E5E               	movwf	vfpfcnvrt@ll+7,c
  2127                           
  2128                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 830:             ret
      +                          urn dtoa(fp, ll);
  2129  00197E  C04F  F02B         	movff	vfpfcnvrt@fp,dtoa@fp
  2130  001982  C050  F02C         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2131  001986  C057  F02D         	movff	vfpfcnvrt@ll,dtoa@d
  2132  00198A  C058  F02E         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2133  00198E  C059  F02F         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2134  001992  C05A  F030         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2135  001996  C05B  F031         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2136  00199A  C05C  F032         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2137  00199E  C05D  F033         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2138  0019A2  C05E  F034         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2139  0019A6  EC0F  F00B         	call	_dtoa	;wreg free
  2140  0019AA  C02B  F04F         	movff	?_dtoa,?_vfpfcnvrt
  2141  0019AE  C02C  F050         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2142  0019B2  0012               	return	
  2143  0019B4                     l2404:
  2144                           
  2145                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
  2146  0019B4  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2147  0019B8  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2148  0019BC  CFDE FFF6          	movff	postinc2,tblptrl
  2149  0019C0  CFDD FFF7          	movff	postdec2,tblptrh
  2150  0019C4                     	if	0	;tblptru may be non-zero
  2151  0019C4                     	endif
  2152  0019C4                     	if	0	;tblptru may be non-zero
  2153  0019C4                     	endif
  2154  0019C4  0008               	tblrd		*
  2155  0019C6  50F5               	movf	tablat,w,c
  2156  0019C8  0A25               	xorlw	37
  2157  0019CA  A4D8               	btfss	status,2,c
  2158  0019CC  D016               	goto	l2414
  2159                           
  2160                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
  2161  0019CE  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2162  0019D2  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2163  0019D6  2ADE               	incf	postinc2,f,c
  2164  0019D8  0E00               	movlw	0
  2165  0019DA  22DD               	addwfc	postdec2,f,c
  2166                           
  2167                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
  2168  0019DC  0E00               	movlw	0
  2169  0019DE  6E11               	movwf	fputc@c+1,c
  2170  0019E0  0E25               	movlw	37
  2171  0019E2  6E10               	movwf	fputc@c,c
  2172  0019E4  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2173  0019E8  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2174  0019EC  EC32  F00F         	call	_fputc	;wreg free
  2175  0019F0                     l2410:
  2176                           
  2177                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
  2178  0019F0  0E00               	movlw	0
  2179  0019F2  6E50               	movwf	?_vfpfcnvrt+1,c
  2180  0019F4  0E01               	movlw	1
  2181  0019F6  6E4F               	movwf	?_vfpfcnvrt,c
  2182  0019F8  0012               	return	
  2183  0019FA                     l2414:
  2184                           
  2185                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  2186  0019FA  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2187  0019FE  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2188  001A02  2ADE               	incf	postinc2,f,c
  2189  001A04  0E00               	movlw	0
  2190  001A06  22DD               	addwfc	postdec2,f,c
  2191                           
  2192                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  2193  001A08  0E00               	movlw	0
  2194  001A0A  6E50               	movwf	?_vfpfcnvrt+1,c
  2195  001A0C  0E00               	movlw	0
  2196  001A0E  6E4F               	movwf	?_vfpfcnvrt,c
  2197  001A10  0012               	return	
  2198  001A12                     l2420:
  2199                           
  2200                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  2201  001A12  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2202  001A16  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2203  001A1A  CFDE FFF6          	movff	postinc2,tblptrl
  2204  001A1E  CFDD FFF7          	movff	postdec2,tblptrh
  2205  001A22                     	if	0	;tblptru may be non-zero
  2206  001A22                     	endif
  2207  001A22                     	if	0	;tblptru may be non-zero
  2208  001A22                     	endif
  2209  001A22  0008               	tblrd		*
  2210  001A24  50F5               	movf	tablat,w,c
  2211  001A26  6E10               	movwf	fputc@c,c
  2212  001A28  6A11               	clrf	fputc@c+1,c
  2213  001A2A  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2214  001A2E  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2215  001A32  EC32  F00F         	call	_fputc	;wreg free
  2216                           
  2217                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  2218  001A36  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2219  001A3A  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2220  001A3E  2ADE               	incf	postinc2,f,c
  2221  001A40  0E00               	movlw	0
  2222  001A42  22DD               	addwfc	postdec2,f,c
  2223  001A44  D7D5               	goto	l2410
  2224  001A46                     __end_of_vfpfcnvrt:
  2225                           	opt callstack 0
  2226                           
  2227 ;; *************** function _dtoa *****************
  2228 ;; Defined at:
  2229 ;;		line 274 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  2232 ;;		 -> NULL(0), 
  2233 ;;  d               8   44[COMRAM] long long 
  2234 ;; Auto vars:     Size  Location     Type
  2235 ;;  n               8   68[COMRAM] long long 
  2236 ;;  i               2   76[COMRAM] int 
  2237 ;;  s               2   66[COMRAM] int 
  2238 ;;  w               2   64[COMRAM] int 
  2239 ;;  p               2   62[COMRAM] int 
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  2   42[COMRAM] int 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2249 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2251 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;Total ram usage:       36 bytes
  2254 ;; Hardware stack levels used:    1
  2255 ;; Hardware stack levels required when called:    8
  2256 ;; This function calls:
  2257 ;;		___aodiv
  2258 ;;		___aomod
  2259 ;;		_abs
  2260 ;;		_pad
  2261 ;; This function is called by:
  2262 ;;		_vfpfcnvrt
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           	psect	text4
  2267  00161E                     __ptext4:
  2268                           	opt callstack 0
  2269  00161E                     _dtoa:
  2270                           	opt callstack 19
  2271                           
  2272                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 274: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.
      +                          c: 275: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 276:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 277:   
      +                            long long n;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 280:  
      +                             n = d;
  2273                           
  2274                           ;incstack = 0
  2275  00161E  C02D  F045         	movff	dtoa@d,dtoa@n
  2276  001622  C02E  F046         	movff	dtoa@d+1,dtoa@n+1
  2277  001626  C02F  F047         	movff	dtoa@d+2,dtoa@n+2
  2278  00162A  C030  F048         	movff	dtoa@d+3,dtoa@n+3
  2279  00162E  C031  F049         	movff	dtoa@d+4,dtoa@n+4
  2280  001632  C032  F04A         	movff	dtoa@d+5,dtoa@n+5
  2281  001636  C033  F04B         	movff	dtoa@d+6,dtoa@n+6
  2282  00163A  C034  F04C         	movff	dtoa@d+7,dtoa@n+7
  2283                           
  2284                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ?
      +                           1 : 0;
  2285  00163E  AE4C               	btfss	dtoa@n+7,7,c
  2286  001640  D002               	goto	u1930
  2287  001642  0E01               	movlw	1
  2288  001644  D001               	goto	u1940
  2289  001646                     u1930:
  2290  001646  0E00               	movlw	0
  2291  001648                     u1940:
  2292  001648  6E43               	movwf	dtoa@s,c
  2293  00164A  6A44               	clrf	dtoa@s+1,c
  2294                           
  2295                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  2296  00164C  5043               	movf	dtoa@s,w,c
  2297  00164E  1044               	iorwf	dtoa@s+1,w,c
  2298  001650  B4D8               	btfsc	status,2,c
  2299  001652  D010               	goto	l2322
  2300                           
  2301                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  2302  001654  1E4C               	comf	dtoa@n+7,f,c
  2303  001656  1E4B               	comf	dtoa@n+6,f,c
  2304  001658  1E4A               	comf	dtoa@n+5,f,c
  2305  00165A  1E49               	comf	dtoa@n+4,f,c
  2306  00165C  1E48               	comf	dtoa@n+3,f,c
  2307  00165E  1E47               	comf	dtoa@n+2,f,c
  2308  001660  1E46               	comf	dtoa@n+1,f,c
  2309  001662  6C45               	negf	dtoa@n,c
  2310  001664  0E00               	movlw	0
  2311  001666  2246               	addwfc	dtoa@n+1,f,c
  2312  001668  2247               	addwfc	dtoa@n+2,f,c
  2313  00166A  2248               	addwfc	dtoa@n+3,f,c
  2314  00166C  2249               	addwfc	dtoa@n+4,f,c
  2315  00166E  224A               	addwfc	dtoa@n+5,f,c
  2316  001670  224B               	addwfc	dtoa@n+6,f,c
  2317  001672  224C               	addwfc	dtoa@n+7,f,c
  2318  001674                     l2322:
  2319                           
  2320                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 287:     if (!(prec 
      +                          < 0)) {
  2321  001674  AE71               	btfss	_prec+1,7,c
  2322                           
  2323                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 288:         flags &
      +                          = ~(1 << 1);
  2324  001676  9272               	bcf	_flags,1,c
  2325                           
  2326                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 290:     p = (0 < pr
      +                          ec) ? prec : 1;
  2327  001678  BE71               	btfsc	_prec+1,7,c
  2328  00167A  D005               	goto	u1970
  2329  00167C  5071               	movf	_prec+1,w,c
  2330  00167E  E108               	bnz	l177
  2331  001680  0470               	decf	_prec,w,c
  2332  001682  B0D8               	btfsc	status,0,c
  2333  001684  D005               	goto	l177
  2334  001686                     u1970:
  2335  001686  0E00               	movlw	0
  2336  001688  6E40               	movwf	dtoa@p+1,c
  2337  00168A  0E01               	movlw	1
  2338  00168C  6E3F               	movwf	dtoa@p,c
  2339  00168E  D004               	goto	l179
  2340  001690                     l177:
  2341  001690  C070  F03F         	movff	_prec,dtoa@p
  2342  001694  C071  F040         	movff	_prec+1,dtoa@p+1
  2343  001698                     l179:
  2344                           
  2345                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 291:     w = width;
  2346  001698  C06E  F041         	movff	_width,dtoa@w
  2347  00169C  C06F  F042         	movff	_width+1,dtoa@w+1
  2348                           
  2349                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 292:     if (s || (f
      +                          lags & (1 << 2))) {
  2350  0016A0  5043               	movf	dtoa@s,w,c
  2351  0016A2  1044               	iorwf	dtoa@s+1,w,c
  2352  0016A4  A4D8               	btfss	status,2,c
  2353  0016A6  D002               	goto	u1990
  2354  0016A8  A472               	btfss	_flags,2,c
  2355  0016AA  D003               	goto	l2336
  2356  0016AC                     u1990:
  2357                           
  2358                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 293:         --w;
  2359  0016AC  0641               	decf	dtoa@w,f,c
  2360  0016AE  A0D8               	btfss	status,0,c
  2361  0016B0  0642               	decf	dtoa@w+1,f,c
  2362  0016B2                     l2336:
  2363                           
  2364                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(
      +                          dbuf) - 1;
  2365  0016B2  0E00               	movlw	0
  2366  0016B4  6E4E               	movwf	dtoa@i+1,c
  2367  0016B6  0E1F               	movlw	31
  2368  0016B8  6E4D               	movwf	dtoa@i,c
  2369                           
  2370                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '
      +                          \0';
  2371  0016BA  0E00               	movlw	0
  2372  0016BC  0100               	movlb	0	; () banked
  2373  0016BE  6FE3               	movwf	(_dbuf+31)& (0+255),b
  2374                           
  2375                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2376  0016C0  D07C               	goto	l2350
  2377  0016C2                     l2340:
  2378                           
  2379                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 300:         --i;
  2380  0016C2  064D               	decf	dtoa@i,f,c
  2381  0016C4  A0D8               	btfss	status,0,c
  2382  0016C6  064E               	decf	dtoa@i+1,f,c
  2383                           
  2384                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 301:         dbuf[i]
      +                           = '0' + abs(n % 10);
  2385  0016C8  0EC4               	movlw	low _dbuf
  2386  0016CA  244D               	addwf	dtoa@i,w,c
  2387  0016CC  6ED9               	movwf	fsr2l,c
  2388  0016CE  0E00               	movlw	high _dbuf
  2389  0016D0  204E               	addwfc	dtoa@i+1,w,c
  2390  0016D2  6EDA               	movwf	fsr2h,c
  2391  0016D4  C045  F00C         	movff	dtoa@n,___aomod@dividend
  2392  0016D8  C046  F00D         	movff	dtoa@n+1,___aomod@dividend+1
  2393  0016DC  C047  F00E         	movff	dtoa@n+2,___aomod@dividend+2
  2394  0016E0  C048  F00F         	movff	dtoa@n+3,___aomod@dividend+3
  2395  0016E4  C049  F010         	movff	dtoa@n+4,___aomod@dividend+4
  2396  0016E8  C04A  F011         	movff	dtoa@n+5,___aomod@dividend+5
  2397  0016EC  C04B  F012         	movff	dtoa@n+6,___aomod@dividend+6
  2398  0016F0  C04C  F013         	movff	dtoa@n+7,___aomod@dividend+7
  2399  0016F4  0E0A               	movlw	10
  2400  0016F6  6E14               	movwf	___aomod@divisor,c
  2401  0016F8  0E00               	movlw	0
  2402  0016FA  6E15               	movwf	___aomod@divisor+1,c
  2403  0016FC  0E00               	movlw	0
  2404  0016FE  6E16               	movwf	___aomod@divisor+2,c
  2405  001700  0E00               	movlw	0
  2406  001702  6E17               	movwf	___aomod@divisor+3,c
  2407  001704  0E00               	movlw	0
  2408  001706  6E18               	movwf	___aomod@divisor+4,c
  2409  001708  0E00               	movlw	0
  2410  00170A  6E19               	movwf	___aomod@divisor+5,c
  2411  00170C  0E00               	movlw	0
  2412  00170E  6E1A               	movwf	___aomod@divisor+6,c
  2413  001710  0E00               	movlw	0
  2414  001712  6E1B               	movwf	___aomod@divisor+7,c
  2415  001714  ECC7  F00D         	call	___aomod	;wreg free
  2416  001718  C00C  F035         	movff	?___aomod,??_dtoa
  2417  00171C  C00D  F036         	movff	?___aomod+1,??_dtoa+1
  2418  001720  C00E  F037         	movff	?___aomod+2,??_dtoa+2
  2419  001724  C00F  F038         	movff	?___aomod+3,??_dtoa+3
  2420  001728  C010  F039         	movff	?___aomod+4,??_dtoa+4
  2421  00172C  C011  F03A         	movff	?___aomod+5,??_dtoa+5
  2422  001730  C012  F03B         	movff	?___aomod+6,??_dtoa+6
  2423  001734  C013  F03C         	movff	?___aomod+7,??_dtoa+7
  2424  001738  C035  F01E         	movff	??_dtoa,abs@a
  2425  00173C  C037  F01F         	movff	??_dtoa+2,abs@a+1
  2426  001740  EC4F  F010         	call	_abs	;wreg free
  2427  001744  501E               	movf	?_abs,w,c
  2428  001746  0F30               	addlw	48
  2429  001748  6EDF               	movwf	indf2,c
  2430                           
  2431                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 302:         --p;
  2432  00174A  063F               	decf	dtoa@p,f,c
  2433  00174C  A0D8               	btfss	status,0,c
  2434  00174E  0640               	decf	dtoa@p+1,f,c
  2435                           
  2436                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 303:         --w;
  2437  001750  0641               	decf	dtoa@w,f,c
  2438  001752  A0D8               	btfss	status,0,c
  2439  001754  0642               	decf	dtoa@w+1,f,c
  2440                           
  2441                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 304:         n = n /
      +                           10;
  2442  001756  C045  F00C         	movff	dtoa@n,___aodiv@dividend
  2443  00175A  C046  F00D         	movff	dtoa@n+1,___aodiv@dividend+1
  2444  00175E  C047  F00E         	movff	dtoa@n+2,___aodiv@dividend+2
  2445  001762  C048  F00F         	movff	dtoa@n+3,___aodiv@dividend+3
  2446  001766  C049  F010         	movff	dtoa@n+4,___aodiv@dividend+4
  2447  00176A  C04A  F011         	movff	dtoa@n+5,___aodiv@dividend+5
  2448  00176E  C04B  F012         	movff	dtoa@n+6,___aodiv@dividend+6
  2449  001772  C04C  F013         	movff	dtoa@n+7,___aodiv@dividend+7
  2450  001776  0E0A               	movlw	10
  2451  001778  6E14               	movwf	___aodiv@divisor,c
  2452  00177A  0E00               	movlw	0
  2453  00177C  6E15               	movwf	___aodiv@divisor+1,c
  2454  00177E  0E00               	movlw	0
  2455  001780  6E16               	movwf	___aodiv@divisor+2,c
  2456  001782  0E00               	movlw	0
  2457  001784  6E17               	movwf	___aodiv@divisor+3,c
  2458  001786  0E00               	movlw	0
  2459  001788  6E18               	movwf	___aodiv@divisor+4,c
  2460  00178A  0E00               	movlw	0
  2461  00178C  6E19               	movwf	___aodiv@divisor+5,c
  2462  00178E  0E00               	movlw	0
  2463  001790  6E1A               	movwf	___aodiv@divisor+6,c
  2464  001792  0E00               	movlw	0
  2465  001794  6E1B               	movwf	___aodiv@divisor+7,c
  2466  001796  EC23  F00D         	call	___aodiv	;wreg free
  2467  00179A  C00C  F045         	movff	?___aodiv,dtoa@n
  2468  00179E  C00D  F046         	movff	?___aodiv+1,dtoa@n+1
  2469  0017A2  C00E  F047         	movff	?___aodiv+2,dtoa@n+2
  2470  0017A6  C00F  F048         	movff	?___aodiv+3,dtoa@n+3
  2471  0017AA  C010  F049         	movff	?___aodiv+4,dtoa@n+4
  2472  0017AE  C011  F04A         	movff	?___aodiv+5,dtoa@n+5
  2473  0017B2  C012  F04B         	movff	?___aodiv+6,dtoa@n+6
  2474  0017B6  C013  F04C         	movff	?___aodiv+7,dtoa@n+7
  2475  0017BA                     l2350:
  2476                           
  2477                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2478  0017BA  BE4E               	btfsc	dtoa@i+1,7,c
  2479  0017BC  D01F               	goto	u2040
  2480  0017BE  504E               	movf	dtoa@i+1,w,c
  2481  0017C0  E103               	bnz	u2000
  2482  0017C2  044D               	decf	dtoa@i,w,c
  2483  0017C4  A0D8               	btfss	status,0,c
  2484  0017C6  D01A               	goto	u2040
  2485  0017C8                     u2000:
  2486  0017C8  5045               	movf	dtoa@n,w,c
  2487  0017CA  1046               	iorwf	dtoa@n+1,w,c
  2488  0017CC  1047               	iorwf	dtoa@n+2,w,c
  2489  0017CE  1048               	iorwf	dtoa@n+3,w,c
  2490  0017D0  1049               	iorwf	dtoa@n+4,w,c
  2491  0017D2  104A               	iorwf	dtoa@n+5,w,c
  2492  0017D4  104B               	iorwf	dtoa@n+6,w,c
  2493  0017D6  104C               	iorwf	dtoa@n+7,w,c
  2494  0017D8  A4D8               	btfss	status,2,c
  2495  0017DA  D773               	goto	l2340
  2496  0017DC  BE40               	btfsc	dtoa@p+1,7,c
  2497  0017DE  D005               	goto	u2020
  2498  0017E0  5040               	movf	dtoa@p+1,w,c
  2499  0017E2  E102               	bnz	u2021
  2500  0017E4  043F               	decf	dtoa@p,w,c
  2501  0017E6  B0D8               	btfsc	status,0,c
  2502  0017E8                     u2021:
  2503  0017E8  D76C               	goto	l2340
  2504  0017EA                     u2020:
  2505  0017EA  BE42               	btfsc	dtoa@w+1,7,c
  2506  0017EC  D007               	goto	u2040
  2507  0017EE  5042               	movf	dtoa@w+1,w,c
  2508  0017F0  E103               	bnz	u2030
  2509  0017F2  0441               	decf	dtoa@w,w,c
  2510  0017F4  A0D8               	btfss	status,0,c
  2511  0017F6  D002               	goto	u2040
  2512  0017F8                     u2030:
  2513  0017F8  B272               	btfsc	_flags,1,c
  2514  0017FA  D763               	goto	l2340
  2515  0017FC                     u2040:
  2516                           
  2517                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 308:     if (s || (f
      +                          lags & (1 << 2))) {
  2518  0017FC  5043               	movf	dtoa@s,w,c
  2519  0017FE  1044               	iorwf	dtoa@s+1,w,c
  2520  001800  A4D8               	btfss	status,2,c
  2521  001802  D002               	goto	u2060
  2522  001804  A472               	btfss	_flags,2,c
  2523  001806  D017               	goto	l2374
  2524  001808                     u2060:
  2525                           
  2526                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 309:         --i;
  2527  001808  064D               	decf	dtoa@i,f,c
  2528  00180A  A0D8               	btfss	status,0,c
  2529  00180C  064E               	decf	dtoa@i+1,f,c
  2530                           
  2531                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 310:         dbuf[i]
      +                           = s ? '-' : '+';
  2532  00180E  5043               	movf	dtoa@s,w,c
  2533  001810  1044               	iorwf	dtoa@s+1,w,c
  2534  001812  A4D8               	btfss	status,2,c
  2535  001814  D004               	goto	l2370
  2536  001816  0E00               	movlw	0
  2537  001818  6E3E               	movwf	_dtoa$319+1,c
  2538  00181A  0E2B               	movlw	43
  2539  00181C  D003               	goto	L1
  2540  00181E                     l2370:
  2541  00181E  0E00               	movlw	0
  2542  001820  6E3E               	movwf	_dtoa$319+1,c
  2543  001822  0E2D               	movlw	45
  2544  001824                     L1:
  2545  001824  6E3D               	movwf	_dtoa$319,c
  2546  001826  0EC4               	movlw	low _dbuf
  2547  001828  244D               	addwf	dtoa@i,w,c
  2548  00182A  6ED9               	movwf	fsr2l,c
  2549  00182C  0E00               	movlw	high _dbuf
  2550  00182E  204E               	addwfc	dtoa@i+1,w,c
  2551  001830  6EDA               	movwf	fsr2h,c
  2552  001832  C03D  FFDF         	movff	_dtoa$319,indf2
  2553  001836                     l2374:
  2554                           
  2555                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 314:     return pad(
      +                          fp, &dbuf[i], w);
  2556  001836  C02B  F020         	movff	dtoa@fp,pad@fp
  2557  00183A  C02C  F021         	movff	dtoa@fp+1,pad@fp+1
  2558  00183E  0EC4               	movlw	low _dbuf
  2559  001840  244D               	addwf	dtoa@i,w,c
  2560  001842  6E22               	movwf	pad@buf,c
  2561  001844  0E00               	movlw	high _dbuf
  2562  001846  204E               	addwfc	dtoa@i+1,w,c
  2563  001848  6E23               	movwf	pad@buf+1,c
  2564  00184A  C041  F024         	movff	dtoa@w,pad@p
  2565  00184E  C042  F025         	movff	dtoa@w+1,pad@p+1
  2566  001852  ECAF  F00E         	call	_pad	;wreg free
  2567  001856  C020  F02B         	movff	?_pad,?_dtoa
  2568  00185A  C021  F02C         	movff	?_pad+1,?_dtoa+1
  2569  00185E  0012               	return		;funcret
  2570  001860                     __end_of_dtoa:
  2571                           	opt callstack 0
  2572                           
  2573 ;; *************** function _abs *****************
  2574 ;; Defined at:
  2575 ;;		line 1 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/abs.c"
  2576 ;; Parameters:    Size  Location     Type
  2577 ;;  a               2   29[COMRAM] int 
  2578 ;; Auto vars:     Size  Location     Type
  2579 ;;		None
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  2   29[COMRAM] int 
  2582 ;; Registers used:
  2583 ;;		wreg, status,2, status,0
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2589 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2591 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2592 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2593 ;;Total ram usage:        4 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    1
  2596 ;; This function calls:
  2597 ;;		Nothing
  2598 ;; This function is called by:
  2599 ;;		_dtoa
  2600 ;; This function uses a non-reentrant model
  2601 ;;
  2602                           
  2603                           	psect	text5
  2604  00209E                     __ptext5:
  2605                           	opt callstack 0
  2606  00209E                     _abs:
  2607                           	opt callstack 25
  2608                           
  2609                           ;incstack = 0
  2610  00209E  BE1F               	btfsc	abs@a+1,7,c
  2611  0020A0  D005               	goto	u1780
  2612  0020A2  501F               	movf	abs@a+1,w,c
  2613  0020A4  E110               	bnz	l890
  2614  0020A6  041E               	decf	abs@a,w,c
  2615  0020A8  B0D8               	btfsc	status,0,c
  2616  0020AA  D00D               	goto	l890
  2617  0020AC                     u1780:
  2618  0020AC  C01E  F020         	movff	abs@a,??_abs
  2619  0020B0  C01F  F021         	movff	abs@a+1,??_abs+1
  2620  0020B4  1E20               	comf	??_abs,f,c
  2621  0020B6  1E21               	comf	??_abs+1,f,c
  2622  0020B8  4A20               	infsnz	??_abs,f,c
  2623  0020BA  2A21               	incf	??_abs+1,f,c
  2624  0020BC  C020  F01E         	movff	??_abs,?_abs
  2625  0020C0  C021  F01F         	movff	??_abs+1,?_abs+1
  2626  0020C4  0012               	return	
  2627  0020C6                     l890:
  2628  0020C6  C01E  F01E         	movff	abs@a,?_abs
  2629  0020CA  C01F  F01F         	movff	abs@a+1,?_abs+1
  2630  0020CE  0012               	return		;funcret
  2631  0020D0                     __end_of_abs:
  2632                           	opt callstack 0
  2633                           
  2634 ;; *************** function ___aomod *****************
  2635 ;; Defined at:
  2636 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aomod.c"
  2637 ;; Parameters:    Size  Location     Type
  2638 ;;  dividend        8   11[COMRAM] long long 
  2639 ;;  divisor         8   19[COMRAM] long long 
  2640 ;; Auto vars:     Size  Location     Type
  2641 ;;  sign            1   28[COMRAM] unsigned char 
  2642 ;;  counter         1   27[COMRAM] unsigned char 
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  8   11[COMRAM] long long 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2652 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;Total ram usage:       18 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    1
  2659 ;; This function calls:
  2660 ;;		Nothing
  2661 ;; This function is called by:
  2662 ;;		_dtoa
  2663 ;; This function uses a non-reentrant model
  2664 ;;
  2665                           
  2666                           	psect	text6
  2667  001B8E                     __ptext6:
  2668                           	opt callstack 0
  2669  001B8E                     ___aomod:
  2670                           	opt callstack 25
  2671                           
  2672                           ;incstack = 0
  2673  001B8E  0E00               	movlw	0
  2674  001B90  6E1D               	movwf	___aomod@sign,c
  2675  001B92  AE13               	btfss	___aomod@dividend+7,7,c
  2676  001B94  D012               	goto	l2274
  2677  001B96  1E13               	comf	___aomod@dividend+7,f,c
  2678  001B98  1E12               	comf	___aomod@dividend+6,f,c
  2679  001B9A  1E11               	comf	___aomod@dividend+5,f,c
  2680  001B9C  1E10               	comf	___aomod@dividend+4,f,c
  2681  001B9E  1E0F               	comf	___aomod@dividend+3,f,c
  2682  001BA0  1E0E               	comf	___aomod@dividend+2,f,c
  2683  001BA2  1E0D               	comf	___aomod@dividend+1,f,c
  2684  001BA4  6C0C               	negf	___aomod@dividend,c
  2685  001BA6  0E00               	movlw	0
  2686  001BA8  220D               	addwfc	___aomod@dividend+1,f,c
  2687  001BAA  220E               	addwfc	___aomod@dividend+2,f,c
  2688  001BAC  220F               	addwfc	___aomod@dividend+3,f,c
  2689  001BAE  2210               	addwfc	___aomod@dividend+4,f,c
  2690  001BB0  2211               	addwfc	___aomod@dividend+5,f,c
  2691  001BB2  2212               	addwfc	___aomod@dividend+6,f,c
  2692  001BB4  2213               	addwfc	___aomod@dividend+7,f,c
  2693  001BB6  0E01               	movlw	1
  2694  001BB8  6E1D               	movwf	___aomod@sign,c
  2695  001BBA                     l2274:
  2696  001BBA  AE1B               	btfss	___aomod@divisor+7,7,c
  2697  001BBC  D010               	goto	l2278
  2698  001BBE  1E1B               	comf	___aomod@divisor+7,f,c
  2699  001BC0  1E1A               	comf	___aomod@divisor+6,f,c
  2700  001BC2  1E19               	comf	___aomod@divisor+5,f,c
  2701  001BC4  1E18               	comf	___aomod@divisor+4,f,c
  2702  001BC6  1E17               	comf	___aomod@divisor+3,f,c
  2703  001BC8  1E16               	comf	___aomod@divisor+2,f,c
  2704  001BCA  1E15               	comf	___aomod@divisor+1,f,c
  2705  001BCC  6C14               	negf	___aomod@divisor,c
  2706  001BCE  0E00               	movlw	0
  2707  001BD0  2215               	addwfc	___aomod@divisor+1,f,c
  2708  001BD2  2216               	addwfc	___aomod@divisor+2,f,c
  2709  001BD4  2217               	addwfc	___aomod@divisor+3,f,c
  2710  001BD6  2218               	addwfc	___aomod@divisor+4,f,c
  2711  001BD8  2219               	addwfc	___aomod@divisor+5,f,c
  2712  001BDA  221A               	addwfc	___aomod@divisor+6,f,c
  2713  001BDC  221B               	addwfc	___aomod@divisor+7,f,c
  2714  001BDE                     l2278:
  2715  001BDE  5014               	movf	___aomod@divisor,w,c
  2716  001BE0  1015               	iorwf	___aomod@divisor+1,w,c
  2717  001BE2  1016               	iorwf	___aomod@divisor+2,w,c
  2718  001BE4  1017               	iorwf	___aomod@divisor+3,w,c
  2719  001BE6  1018               	iorwf	___aomod@divisor+4,w,c
  2720  001BE8  1019               	iorwf	___aomod@divisor+5,w,c
  2721  001BEA  101A               	iorwf	___aomod@divisor+6,w,c
  2722  001BEC  101B               	iorwf	___aomod@divisor+7,w,c
  2723  001BEE  B4D8               	btfsc	status,2,c
  2724  001BF0  D03C               	goto	l2294
  2725  001BF2  0E01               	movlw	1
  2726  001BF4  6E1C               	movwf	___aomod@counter,c
  2727  001BF6  D00A               	goto	l2284
  2728  001BF8                     l2282:
  2729  001BF8  90D8               	bcf	status,0,c
  2730  001BFA  3614               	rlcf	___aomod@divisor,f,c
  2731  001BFC  3615               	rlcf	___aomod@divisor+1,f,c
  2732  001BFE  3616               	rlcf	___aomod@divisor+2,f,c
  2733  001C00  3617               	rlcf	___aomod@divisor+3,f,c
  2734  001C02  3618               	rlcf	___aomod@divisor+4,f,c
  2735  001C04  3619               	rlcf	___aomod@divisor+5,f,c
  2736  001C06  361A               	rlcf	___aomod@divisor+6,f,c
  2737  001C08  361B               	rlcf	___aomod@divisor+7,f,c
  2738  001C0A  2A1C               	incf	___aomod@counter,f,c
  2739  001C0C                     l2284:
  2740  001C0C  AE1B               	btfss	___aomod@divisor+7,7,c
  2741  001C0E  D7F4               	goto	l2282
  2742  001C10                     u1890:
  2743  001C10  5014               	movf	___aomod@divisor,w,c
  2744  001C12  5C0C               	subwf	___aomod@dividend,w,c
  2745  001C14  5015               	movf	___aomod@divisor+1,w,c
  2746  001C16  580D               	subwfb	___aomod@dividend+1,w,c
  2747  001C18  5016               	movf	___aomod@divisor+2,w,c
  2748  001C1A  580E               	subwfb	___aomod@dividend+2,w,c
  2749  001C1C  5017               	movf	___aomod@divisor+3,w,c
  2750  001C1E  580F               	subwfb	___aomod@dividend+3,w,c
  2751  001C20  5018               	movf	___aomod@divisor+4,w,c
  2752  001C22  5810               	subwfb	___aomod@dividend+4,w,c
  2753  001C24  5019               	movf	___aomod@divisor+5,w,c
  2754  001C26  5811               	subwfb	___aomod@dividend+5,w,c
  2755  001C28  501A               	movf	___aomod@divisor+6,w,c
  2756  001C2A  5812               	subwfb	___aomod@dividend+6,w,c
  2757  001C2C  501B               	movf	___aomod@divisor+7,w,c
  2758  001C2E  5813               	subwfb	___aomod@dividend+7,w,c
  2759  001C30  A0D8               	btfss	status,0,c
  2760  001C32  D010               	goto	l2290
  2761  001C34  5014               	movf	___aomod@divisor,w,c
  2762  001C36  5E0C               	subwf	___aomod@dividend,f,c
  2763  001C38  5015               	movf	___aomod@divisor+1,w,c
  2764  001C3A  5A0D               	subwfb	___aomod@dividend+1,f,c
  2765  001C3C  5016               	movf	___aomod@divisor+2,w,c
  2766  001C3E  5A0E               	subwfb	___aomod@dividend+2,f,c
  2767  001C40  5017               	movf	___aomod@divisor+3,w,c
  2768  001C42  5A0F               	subwfb	___aomod@dividend+3,f,c
  2769  001C44  5018               	movf	___aomod@divisor+4,w,c
  2770  001C46  5A10               	subwfb	___aomod@dividend+4,f,c
  2771  001C48  5019               	movf	___aomod@divisor+5,w,c
  2772  001C4A  5A11               	subwfb	___aomod@dividend+5,f,c
  2773  001C4C  501A               	movf	___aomod@divisor+6,w,c
  2774  001C4E  5A12               	subwfb	___aomod@dividend+6,f,c
  2775  001C50  501B               	movf	___aomod@divisor+7,w,c
  2776  001C52  5A13               	subwfb	___aomod@dividend+7,f,c
  2777  001C54                     l2290:
  2778  001C54  90D8               	bcf	status,0,c
  2779  001C56  321B               	rrcf	___aomod@divisor+7,f,c
  2780  001C58  321A               	rrcf	___aomod@divisor+6,f,c
  2781  001C5A  3219               	rrcf	___aomod@divisor+5,f,c
  2782  001C5C  3218               	rrcf	___aomod@divisor+4,f,c
  2783  001C5E  3217               	rrcf	___aomod@divisor+3,f,c
  2784  001C60  3216               	rrcf	___aomod@divisor+2,f,c
  2785  001C62  3215               	rrcf	___aomod@divisor+1,f,c
  2786  001C64  3214               	rrcf	___aomod@divisor,f,c
  2787  001C66  2E1C               	decfsz	___aomod@counter,f,c
  2788  001C68  D7D3               	goto	u1890
  2789  001C6A                     l2294:
  2790  001C6A  501D               	movf	___aomod@sign,w,c
  2791  001C6C  B4D8               	btfsc	status,2,c
  2792  001C6E  D010               	goto	l2298
  2793  001C70  1E13               	comf	___aomod@dividend+7,f,c
  2794  001C72  1E12               	comf	___aomod@dividend+6,f,c
  2795  001C74  1E11               	comf	___aomod@dividend+5,f,c
  2796  001C76  1E10               	comf	___aomod@dividend+4,f,c
  2797  001C78  1E0F               	comf	___aomod@dividend+3,f,c
  2798  001C7A  1E0E               	comf	___aomod@dividend+2,f,c
  2799  001C7C  1E0D               	comf	___aomod@dividend+1,f,c
  2800  001C7E  6C0C               	negf	___aomod@dividend,c
  2801  001C80  0E00               	movlw	0
  2802  001C82  220D               	addwfc	___aomod@dividend+1,f,c
  2803  001C84  220E               	addwfc	___aomod@dividend+2,f,c
  2804  001C86  220F               	addwfc	___aomod@dividend+3,f,c
  2805  001C88  2210               	addwfc	___aomod@dividend+4,f,c
  2806  001C8A  2211               	addwfc	___aomod@dividend+5,f,c
  2807  001C8C  2212               	addwfc	___aomod@dividend+6,f,c
  2808  001C8E  2213               	addwfc	___aomod@dividend+7,f,c
  2809  001C90                     l2298:
  2810  001C90  C00C  F00C         	movff	___aomod@dividend,?___aomod
  2811  001C94  C00D  F00D         	movff	___aomod@dividend+1,?___aomod+1
  2812  001C98  C00E  F00E         	movff	___aomod@dividend+2,?___aomod+2
  2813  001C9C  C00F  F00F         	movff	___aomod@dividend+3,?___aomod+3
  2814  001CA0  C010  F010         	movff	___aomod@dividend+4,?___aomod+4
  2815  001CA4  C011  F011         	movff	___aomod@dividend+5,?___aomod+5
  2816  001CA8  C012  F012         	movff	___aomod@dividend+6,?___aomod+6
  2817  001CAC  C013  F013         	movff	___aomod@dividend+7,?___aomod+7
  2818  001CB0  0012               	return		;funcret
  2819  001CB2                     __end_of___aomod:
  2820                           	opt callstack 0
  2821                           
  2822 ;; *************** function ___aodiv *****************
  2823 ;; Defined at:
  2824 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aodiv.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;  dividend        8   11[COMRAM] long long 
  2827 ;;  divisor         8   19[COMRAM] long long 
  2828 ;; Auto vars:     Size  Location     Type
  2829 ;;  quotient        8   29[COMRAM] long long 
  2830 ;;  sign            1   28[COMRAM] unsigned char 
  2831 ;;  counter         1   27[COMRAM] unsigned char 
  2832 ;; Return value:  Size  Location     Type
  2833 ;;                  8   11[COMRAM] long long 
  2834 ;; Registers used:
  2835 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2836 ;; Tracked objects:
  2837 ;;		On entry : 0/0
  2838 ;;		On exit  : 0/0
  2839 ;;		Unchanged: 0/0
  2840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2841 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2845 ;;Total ram usage:       26 bytes
  2846 ;; Hardware stack levels used:    1
  2847 ;; Hardware stack levels required when called:    1
  2848 ;; This function calls:
  2849 ;;		Nothing
  2850 ;; This function is called by:
  2851 ;;		_dtoa
  2852 ;; This function uses a non-reentrant model
  2853 ;;
  2854                           
  2855                           	psect	text7
  2856  001A46                     __ptext7:
  2857                           	opt callstack 0
  2858  001A46                     ___aodiv:
  2859                           	opt callstack 25
  2860                           
  2861                           ;incstack = 0
  2862  001A46  0E00               	movlw	0
  2863  001A48  6E1D               	movwf	___aodiv@sign,c
  2864  001A4A  AE1B               	btfss	___aodiv@divisor+7,7,c
  2865  001A4C  D012               	goto	l2230
  2866  001A4E  1E1B               	comf	___aodiv@divisor+7,f,c
  2867  001A50  1E1A               	comf	___aodiv@divisor+6,f,c
  2868  001A52  1E19               	comf	___aodiv@divisor+5,f,c
  2869  001A54  1E18               	comf	___aodiv@divisor+4,f,c
  2870  001A56  1E17               	comf	___aodiv@divisor+3,f,c
  2871  001A58  1E16               	comf	___aodiv@divisor+2,f,c
  2872  001A5A  1E15               	comf	___aodiv@divisor+1,f,c
  2873  001A5C  6C14               	negf	___aodiv@divisor,c
  2874  001A5E  0E00               	movlw	0
  2875  001A60  2215               	addwfc	___aodiv@divisor+1,f,c
  2876  001A62  2216               	addwfc	___aodiv@divisor+2,f,c
  2877  001A64  2217               	addwfc	___aodiv@divisor+3,f,c
  2878  001A66  2218               	addwfc	___aodiv@divisor+4,f,c
  2879  001A68  2219               	addwfc	___aodiv@divisor+5,f,c
  2880  001A6A  221A               	addwfc	___aodiv@divisor+6,f,c
  2881  001A6C  221B               	addwfc	___aodiv@divisor+7,f,c
  2882  001A6E  0E01               	movlw	1
  2883  001A70  6E1D               	movwf	___aodiv@sign,c
  2884  001A72                     l2230:
  2885  001A72  AE13               	btfss	___aodiv@dividend+7,7,c
  2886  001A74  D012               	goto	l2236
  2887  001A76  1E13               	comf	___aodiv@dividend+7,f,c
  2888  001A78  1E12               	comf	___aodiv@dividend+6,f,c
  2889  001A7A  1E11               	comf	___aodiv@dividend+5,f,c
  2890  001A7C  1E10               	comf	___aodiv@dividend+4,f,c
  2891  001A7E  1E0F               	comf	___aodiv@dividend+3,f,c
  2892  001A80  1E0E               	comf	___aodiv@dividend+2,f,c
  2893  001A82  1E0D               	comf	___aodiv@dividend+1,f,c
  2894  001A84  6C0C               	negf	___aodiv@dividend,c
  2895  001A86  0E00               	movlw	0
  2896  001A88  220D               	addwfc	___aodiv@dividend+1,f,c
  2897  001A8A  220E               	addwfc	___aodiv@dividend+2,f,c
  2898  001A8C  220F               	addwfc	___aodiv@dividend+3,f,c
  2899  001A8E  2210               	addwfc	___aodiv@dividend+4,f,c
  2900  001A90  2211               	addwfc	___aodiv@dividend+5,f,c
  2901  001A92  2212               	addwfc	___aodiv@dividend+6,f,c
  2902  001A94  2213               	addwfc	___aodiv@dividend+7,f,c
  2903  001A96  0E01               	movlw	1
  2904  001A98  1A1D               	xorwf	___aodiv@sign,f,c
  2905  001A9A                     l2236:
  2906  001A9A  EE20  F01E         	lfsr	2,___aodiv@quotient
  2907  001A9E  0E07               	movlw	7
  2908  001AA0                     u1811:
  2909  001AA0  6ADE               	clrf	postinc2,c
  2910  001AA2  06E8               	decf	wreg,f,c
  2911  001AA4  E2FD               	bc	u1811
  2912  001AA6  5014               	movf	___aodiv@divisor,w,c
  2913  001AA8  1015               	iorwf	___aodiv@divisor+1,w,c
  2914  001AAA  1016               	iorwf	___aodiv@divisor+2,w,c
  2915  001AAC  1017               	iorwf	___aodiv@divisor+3,w,c
  2916  001AAE  1018               	iorwf	___aodiv@divisor+4,w,c
  2917  001AB0  1019               	iorwf	___aodiv@divisor+5,w,c
  2918  001AB2  101A               	iorwf	___aodiv@divisor+6,w,c
  2919  001AB4  101B               	iorwf	___aodiv@divisor+7,w,c
  2920  001AB6  B4D8               	btfsc	status,2,c
  2921  001AB8  D046               	goto	l2258
  2922  001ABA  0E01               	movlw	1
  2923  001ABC  6E1C               	movwf	___aodiv@counter,c
  2924  001ABE  D00A               	goto	l2244
  2925  001AC0                     l2242:
  2926  001AC0  90D8               	bcf	status,0,c
  2927  001AC2  3614               	rlcf	___aodiv@divisor,f,c
  2928  001AC4  3615               	rlcf	___aodiv@divisor+1,f,c
  2929  001AC6  3616               	rlcf	___aodiv@divisor+2,f,c
  2930  001AC8  3617               	rlcf	___aodiv@divisor+3,f,c
  2931  001ACA  3618               	rlcf	___aodiv@divisor+4,f,c
  2932  001ACC  3619               	rlcf	___aodiv@divisor+5,f,c
  2933  001ACE  361A               	rlcf	___aodiv@divisor+6,f,c
  2934  001AD0  361B               	rlcf	___aodiv@divisor+7,f,c
  2935  001AD2  2A1C               	incf	___aodiv@counter,f,c
  2936  001AD4                     l2244:
  2937  001AD4  AE1B               	btfss	___aodiv@divisor+7,7,c
  2938  001AD6  D7F4               	goto	l2242
  2939  001AD8                     u1830:
  2940  001AD8  90D8               	bcf	status,0,c
  2941  001ADA  361E               	rlcf	___aodiv@quotient,f,c
  2942  001ADC  361F               	rlcf	___aodiv@quotient+1,f,c
  2943  001ADE  3620               	rlcf	___aodiv@quotient+2,f,c
  2944  001AE0  3621               	rlcf	___aodiv@quotient+3,f,c
  2945  001AE2  3622               	rlcf	___aodiv@quotient+4,f,c
  2946  001AE4  3623               	rlcf	___aodiv@quotient+5,f,c
  2947  001AE6  3624               	rlcf	___aodiv@quotient+6,f,c
  2948  001AE8  3625               	rlcf	___aodiv@quotient+7,f,c
  2949  001AEA  5014               	movf	___aodiv@divisor,w,c
  2950  001AEC  5C0C               	subwf	___aodiv@dividend,w,c
  2951  001AEE  5015               	movf	___aodiv@divisor+1,w,c
  2952  001AF0  580D               	subwfb	___aodiv@dividend+1,w,c
  2953  001AF2  5016               	movf	___aodiv@divisor+2,w,c
  2954  001AF4  580E               	subwfb	___aodiv@dividend+2,w,c
  2955  001AF6  5017               	movf	___aodiv@divisor+3,w,c
  2956  001AF8  580F               	subwfb	___aodiv@dividend+3,w,c
  2957  001AFA  5018               	movf	___aodiv@divisor+4,w,c
  2958  001AFC  5810               	subwfb	___aodiv@dividend+4,w,c
  2959  001AFE  5019               	movf	___aodiv@divisor+5,w,c
  2960  001B00  5811               	subwfb	___aodiv@dividend+5,w,c
  2961  001B02  501A               	movf	___aodiv@divisor+6,w,c
  2962  001B04  5812               	subwfb	___aodiv@dividend+6,w,c
  2963  001B06  501B               	movf	___aodiv@divisor+7,w,c
  2964  001B08  5813               	subwfb	___aodiv@dividend+7,w,c
  2965  001B0A  A0D8               	btfss	status,0,c
  2966  001B0C  D011               	goto	l2254
  2967  001B0E  5014               	movf	___aodiv@divisor,w,c
  2968  001B10  5E0C               	subwf	___aodiv@dividend,f,c
  2969  001B12  5015               	movf	___aodiv@divisor+1,w,c
  2970  001B14  5A0D               	subwfb	___aodiv@dividend+1,f,c
  2971  001B16  5016               	movf	___aodiv@divisor+2,w,c
  2972  001B18  5A0E               	subwfb	___aodiv@dividend+2,f,c
  2973  001B1A  5017               	movf	___aodiv@divisor+3,w,c
  2974  001B1C  5A0F               	subwfb	___aodiv@dividend+3,f,c
  2975  001B1E  5018               	movf	___aodiv@divisor+4,w,c
  2976  001B20  5A10               	subwfb	___aodiv@dividend+4,f,c
  2977  001B22  5019               	movf	___aodiv@divisor+5,w,c
  2978  001B24  5A11               	subwfb	___aodiv@dividend+5,f,c
  2979  001B26  501A               	movf	___aodiv@divisor+6,w,c
  2980  001B28  5A12               	subwfb	___aodiv@dividend+6,f,c
  2981  001B2A  501B               	movf	___aodiv@divisor+7,w,c
  2982  001B2C  5A13               	subwfb	___aodiv@dividend+7,f,c
  2983  001B2E  801E               	bsf	___aodiv@quotient,0,c
  2984  001B30                     l2254:
  2985  001B30  90D8               	bcf	status,0,c
  2986  001B32  321B               	rrcf	___aodiv@divisor+7,f,c
  2987  001B34  321A               	rrcf	___aodiv@divisor+6,f,c
  2988  001B36  3219               	rrcf	___aodiv@divisor+5,f,c
  2989  001B38  3218               	rrcf	___aodiv@divisor+4,f,c
  2990  001B3A  3217               	rrcf	___aodiv@divisor+3,f,c
  2991  001B3C  3216               	rrcf	___aodiv@divisor+2,f,c
  2992  001B3E  3215               	rrcf	___aodiv@divisor+1,f,c
  2993  001B40  3214               	rrcf	___aodiv@divisor,f,c
  2994  001B42  2E1C               	decfsz	___aodiv@counter,f,c
  2995  001B44  D7C9               	goto	u1830
  2996  001B46                     l2258:
  2997  001B46  501D               	movf	___aodiv@sign,w,c
  2998  001B48  B4D8               	btfsc	status,2,c
  2999  001B4A  D010               	goto	l2262
  3000  001B4C  1E25               	comf	___aodiv@quotient+7,f,c
  3001  001B4E  1E24               	comf	___aodiv@quotient+6,f,c
  3002  001B50  1E23               	comf	___aodiv@quotient+5,f,c
  3003  001B52  1E22               	comf	___aodiv@quotient+4,f,c
  3004  001B54  1E21               	comf	___aodiv@quotient+3,f,c
  3005  001B56  1E20               	comf	___aodiv@quotient+2,f,c
  3006  001B58  1E1F               	comf	___aodiv@quotient+1,f,c
  3007  001B5A  6C1E               	negf	___aodiv@quotient,c
  3008  001B5C  0E00               	movlw	0
  3009  001B5E  221F               	addwfc	___aodiv@quotient+1,f,c
  3010  001B60  2220               	addwfc	___aodiv@quotient+2,f,c
  3011  001B62  2221               	addwfc	___aodiv@quotient+3,f,c
  3012  001B64  2222               	addwfc	___aodiv@quotient+4,f,c
  3013  001B66  2223               	addwfc	___aodiv@quotient+5,f,c
  3014  001B68  2224               	addwfc	___aodiv@quotient+6,f,c
  3015  001B6A  2225               	addwfc	___aodiv@quotient+7,f,c
  3016  001B6C                     l2262:
  3017  001B6C  C01E  F00C         	movff	___aodiv@quotient,?___aodiv
  3018  001B70  C01F  F00D         	movff	___aodiv@quotient+1,?___aodiv+1
  3019  001B74  C020  F00E         	movff	___aodiv@quotient+2,?___aodiv+2
  3020  001B78  C021  F00F         	movff	___aodiv@quotient+3,?___aodiv+3
  3021  001B7C  C022  F010         	movff	___aodiv@quotient+4,?___aodiv+4
  3022  001B80  C023  F011         	movff	___aodiv@quotient+5,?___aodiv+5
  3023  001B84  C024  F012         	movff	___aodiv@quotient+6,?___aodiv+6
  3024  001B88  C025  F013         	movff	___aodiv@quotient+7,?___aodiv+7
  3025  001B8C  0012               	return		;funcret
  3026  001B8E                     __end_of___aodiv:
  3027                           	opt callstack 0
  3028                           
  3029 ;; *************** function _ctoa *****************
  3030 ;; Defined at:
  3031 ;;		line 259 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  3034 ;;		 -> NULL(0), 
  3035 ;;  c               1   44[COMRAM] unsigned char 
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;  w               2   45[COMRAM] int 
  3038 ;;  l               2    0        int 
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  2   42[COMRAM] int 
  3041 ;; Registers used:
  3042 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3048 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;Total ram usage:        5 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    8
  3055 ;; This function calls:
  3056 ;;		_pad
  3057 ;; This function is called by:
  3058 ;;		_vfpfcnvrt
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text8
  3063  001F8C                     __ptext8:
  3064                           	opt callstack 0
  3065  001F8C                     _ctoa:
  3066                           	opt callstack 19
  3067                           
  3068                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 259: static int ctoa
      +                          (FILE *fp, char c);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 26
      +                          0: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 261:     int l, 
      +                          w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 264:     w = width
      +                           ? width - 1 : width;
  3069                           
  3070                           ;incstack = 0
  3071  001F8C  506E               	movf	_width,w,c
  3072  001F8E  106F               	iorwf	_width+1,w,c
  3073  001F90  A4D8               	btfss	status,2,c
  3074  001F92  D005               	goto	l2306
  3075  001F94  C06E  F02E         	movff	_width,ctoa@w
  3076  001F98  C06F  F02F         	movff	_width+1,ctoa@w+1
  3077  001F9C  D006               	goto	l2308
  3078  001F9E                     l2306:
  3079  001F9E  0EFF               	movlw	255
  3080  001FA0  246E               	addwf	_width,w,c
  3081  001FA2  6E2E               	movwf	ctoa@w,c
  3082  001FA4  0EFF               	movlw	255
  3083  001FA6  206F               	addwfc	_width+1,w,c
  3084  001FA8  6E2F               	movwf	ctoa@w+1,c
  3085  001FAA                     l2308:
  3086                           
  3087                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 267:     dbuf[0] = c
      +                          ;
  3088  001FAA  C02D  F0C4         	movff	ctoa@c,_dbuf
  3089                           
  3090                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 268:     dbuf[1] = '
      +                          \0';
  3091  001FAE  0E00               	movlw	0
  3092  001FB0  0100               	movlb	0	; () banked
  3093  001FB2  6FC5               	movwf	(_dbuf+1)& (0+255),b
  3094                           
  3095                           ; BSR set to: 0
  3096                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 269:     return pad(
      +                          fp, &dbuf[0], w);
  3097  001FB4  C02B  F020         	movff	ctoa@fp,pad@fp
  3098  001FB8  C02C  F021         	movff	ctoa@fp+1,pad@fp+1
  3099  001FBC  0EC4               	movlw	low _dbuf
  3100  001FBE  6E22               	movwf	pad@buf,c
  3101  001FC0  0E00               	movlw	high _dbuf
  3102  001FC2  6E23               	movwf	pad@buf+1,c
  3103  001FC4  C02E  F024         	movff	ctoa@w,pad@p
  3104  001FC8  C02F  F025         	movff	ctoa@w+1,pad@p+1
  3105  001FCC  ECAF  F00E         	call	_pad	;wreg free
  3106  001FD0  C020  F02B         	movff	?_pad,?_ctoa
  3107  001FD4  C021  F02C         	movff	?_pad+1,?_ctoa+1
  3108  001FD8  0012               	return		;funcret
  3109  001FDA                     __end_of_ctoa:
  3110                           	opt callstack 0
  3111                           
  3112 ;; *************** function _pad *****************
  3113 ;; Defined at:
  3114 ;;		line 72 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3115 ;; Parameters:    Size  Location     Type
  3116 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  3117 ;;		 -> NULL(0), 
  3118 ;;  buf             2   33[COMRAM] PTR unsigned char 
  3119 ;;		 -> dbuf(32), 
  3120 ;;  p               2   35[COMRAM] int 
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;  w               2   40[COMRAM] int 
  3123 ;;  i               2   38[COMRAM] int 
  3124 ;; Return value:  Size  Location     Type
  3125 ;;                  2   31[COMRAM] int 
  3126 ;; Registers used:
  3127 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3128 ;; Tracked objects:
  3129 ;;		On entry : 0/0
  3130 ;;		On exit  : 0/0
  3131 ;;		Unchanged: 0/0
  3132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3133 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;Total ram usage:       11 bytes
  3138 ;; Hardware stack levels used:    1
  3139 ;; Hardware stack levels required when called:    7
  3140 ;; This function calls:
  3141 ;;		_fputc
  3142 ;;		_fputs
  3143 ;;		_strlen
  3144 ;; This function is called by:
  3145 ;;		_ctoa
  3146 ;;		_dtoa
  3147 ;; This function uses a non-reentrant model
  3148 ;;
  3149                           
  3150                           	psect	text9
  3151  001D5E                     __ptext9:
  3152                           	opt callstack 0
  3153  001D5E                     _pad:
  3154                           	opt callstack 19
  3155                           
  3156                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  3157                           
  3158                           ;incstack = 0
  3159  001D5E  A072               	btfss	_flags,0,c
  3160  001D60  D00A               	goto	l2200
  3161                           
  3162                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  3163  001D62  C022  F019         	movff	pad@buf,fputs@s
  3164  001D66  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3165  001D6A  C020  F01B         	movff	pad@fp,fputs@fp
  3166  001D6E  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3167  001D72  EC33  F010         	call	_fputs	;wreg free
  3168  001D76                     l2200:
  3169                           
  3170                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  3171  001D76  BE25               	btfsc	pad@p+1,7,c
  3172  001D78  D005               	goto	l2204
  3173  001D7A  C024  F029         	movff	pad@p,pad@w
  3174  001D7E  C025  F02A         	movff	pad@p+1,pad@w+1
  3175  001D82  D004               	goto	l159
  3176  001D84                     l2204:
  3177  001D84  0E00               	movlw	0
  3178  001D86  6E2A               	movwf	pad@w+1,c
  3179  001D88  0E00               	movlw	0
  3180  001D8A  6E29               	movwf	pad@w,c
  3181  001D8C                     l159:
  3182                           
  3183                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  3184  001D8C  0E00               	movlw	0
  3185  001D8E  6E28               	movwf	pad@i+1,c
  3186  001D90  0E00               	movlw	0
  3187  001D92  6E27               	movwf	pad@i,c
  3188                           
  3189                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3190  001D94  D00C               	goto	l2210
  3191  001D96                     l2206:
  3192                           
  3193                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  3194  001D96  0E00               	movlw	0
  3195  001D98  6E11               	movwf	fputc@c+1,c
  3196  001D9A  0E20               	movlw	32
  3197  001D9C  6E10               	movwf	fputc@c,c
  3198  001D9E  C020  F012         	movff	pad@fp,fputc@fp
  3199  001DA2  C021  F013         	movff	pad@fp+1,fputc@fp+1
  3200  001DA6  EC32  F00F         	call	_fputc	;wreg free
  3201                           
  3202                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 86:         ++i;
  3203  001DAA  4A27               	infsnz	pad@i,f,c
  3204  001DAC  2A28               	incf	pad@i+1,f,c
  3205  001DAE                     l2210:
  3206                           
  3207                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3208  001DAE  5029               	movf	pad@w,w,c
  3209  001DB0  5C27               	subwf	pad@i,w,c
  3210  001DB2  5028               	movf	pad@i+1,w,c
  3211  001DB4  0A80               	xorlw	128
  3212  001DB6  6E26               	movwf	??_pad& (0+255),c
  3213  001DB8  502A               	movf	pad@w+1,w,c
  3214  001DBA  0A80               	xorlw	128
  3215  001DBC  5826               	subwfb	??_pad& (0+255),w,c
  3216  001DBE  A0D8               	btfss	status,0,c
  3217  001DC0  D7EA               	goto	l2206
  3218                           
  3219                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  3220  001DC2  B072               	btfsc	_flags,0,c
  3221  001DC4  D00A               	goto	l2214
  3222                           
  3223                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  3224  001DC6  C022  F019         	movff	pad@buf,fputs@s
  3225  001DCA  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3226  001DCE  C020  F01B         	movff	pad@fp,fputs@fp
  3227  001DD2  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3228  001DD6  EC33  F010         	call	_fputs	;wreg free
  3229  001DDA                     l2214:
  3230                           
  3231                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 94:     return strle
      +                          n(buf) + w;
  3232  001DDA  C022  F00C         	movff	pad@buf,strlen@s
  3233  001DDE  C023  F00D         	movff	pad@buf+1,strlen@s+1
  3234  001DE2  EC68  F010         	call	_strlen	;wreg free
  3235  001DE6  5029               	movf	pad@w,w,c
  3236  001DE8  240C               	addwf	?_strlen,w,c
  3237  001DEA  6E20               	movwf	?_pad,c
  3238  001DEC  502A               	movf	pad@w+1,w,c
  3239  001DEE  200D               	addwfc	?_strlen+1,w,c
  3240  001DF0  6E21               	movwf	?_pad+1,c
  3241  001DF2  0012               	return		;funcret
  3242  001DF4                     __end_of_pad:
  3243                           	opt callstack 0
  3244                           
  3245 ;; *************** function _strlen *****************
  3246 ;; Defined at:
  3247 ;;		line 12 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/strlen.c"
  3248 ;; Parameters:    Size  Location     Type
  3249 ;;  s               2   11[COMRAM] PTR const unsigned char 
  3250 ;;		 -> dbuf(32), 
  3251 ;; Auto vars:     Size  Location     Type
  3252 ;;  a               2   13[COMRAM] PTR const unsigned char 
  3253 ;;		 -> dbuf(32), 
  3254 ;; Return value:  Size  Location     Type
  3255 ;;                  2   11[COMRAM] unsigned int 
  3256 ;; Registers used:
  3257 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3258 ;; Tracked objects:
  3259 ;;		On entry : 0/0
  3260 ;;		On exit  : 0/0
  3261 ;;		Unchanged: 0/0
  3262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3263 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3264 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3265 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3266 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3267 ;;Total ram usage:        4 bytes
  3268 ;; Hardware stack levels used:    1
  3269 ;; Hardware stack levels required when called:    1
  3270 ;; This function calls:
  3271 ;;		Nothing
  3272 ;; This function is called by:
  3273 ;;		_pad
  3274 ;; This function uses a non-reentrant model
  3275 ;;
  3276                           
  3277                           	psect	text10
  3278  0020D0                     __ptext10:
  3279                           	opt callstack 0
  3280  0020D0                     _strlen:
  3281                           	opt callstack 24
  3282                           
  3283                           ;incstack = 0
  3284  0020D0  C00C  F00E         	movff	strlen@s,strlen@a
  3285  0020D4  C00D  F00F         	movff	strlen@s+1,strlen@a+1
  3286  0020D8  D002               	goto	l2190
  3287  0020DA                     l2188:
  3288  0020DA  4A0C               	infsnz	strlen@s,f,c
  3289  0020DC  2A0D               	incf	strlen@s+1,f,c
  3290  0020DE                     l2190:
  3291  0020DE  C00C  FFD9         	movff	strlen@s,fsr2l
  3292  0020E2  C00D  FFDA         	movff	strlen@s+1,fsr2h
  3293  0020E6  50DF               	movf	indf2,w,c
  3294  0020E8  A4D8               	btfss	status,2,c
  3295  0020EA  D7F7               	goto	l2188
  3296  0020EC  500E               	movf	strlen@a,w,c
  3297  0020EE  5C0C               	subwf	strlen@s,w,c
  3298  0020F0  6E0C               	movwf	?_strlen,c
  3299  0020F2  500F               	movf	strlen@a+1,w,c
  3300  0020F4  580D               	subwfb	strlen@s+1,w,c
  3301  0020F6  6E0D               	movwf	?_strlen+1,c
  3302  0020F8  0012               	return		;funcret
  3303  0020FA                     __end_of_strlen:
  3304                           	opt callstack 0
  3305                           
  3306 ;; *************** function _fputs *****************
  3307 ;; Defined at:
  3308 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputs.c"
  3309 ;; Parameters:    Size  Location     Type
  3310 ;;  s               2   24[COMRAM] PTR const unsigned char 
  3311 ;;		 -> dbuf(32), 
  3312 ;;  fp              2   26[COMRAM] PTR struct _IO_FILE
  3313 ;;		 -> NULL(0), 
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;  i               2   29[COMRAM] int 
  3316 ;;  c               1   28[COMRAM] unsigned char 
  3317 ;; Return value:  Size  Location     Type
  3318 ;;                  2   24[COMRAM] int 
  3319 ;; Registers used:
  3320 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3321 ;; Tracked objects:
  3322 ;;		On entry : 0/0
  3323 ;;		On exit  : 0/0
  3324 ;;		Unchanged: 0/0
  3325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3326 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3327 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3329 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3330 ;;Total ram usage:        7 bytes
  3331 ;; Hardware stack levels used:    1
  3332 ;; Hardware stack levels required when called:    6
  3333 ;; This function calls:
  3334 ;;		_fputc
  3335 ;; This function is called by:
  3336 ;;		_pad
  3337 ;; This function uses a non-reentrant model
  3338 ;;
  3339                           
  3340                           	psect	text11
  3341  002066                     __ptext11:
  3342                           	opt callstack 0
  3343  002066                     _fputs:
  3344                           	opt callstack 19
  3345                           
  3346                           ;incstack = 0
  3347  002066  0E00               	movlw	0
  3348  002068  6E1F               	movwf	fputs@i+1,c
  3349  00206A  0E00               	movlw	0
  3350  00206C  6E1E               	movwf	fputs@i,c
  3351  00206E  D00B               	goto	l2184
  3352  002070                     l2180:
  3353  002070  C01D  F010         	movff	fputs@c,fputc@c
  3354  002074  6A11               	clrf	fputc@c+1,c
  3355  002076  C01B  F012         	movff	fputs@fp,fputc@fp
  3356  00207A  C01C  F013         	movff	fputs@fp+1,fputc@fp+1
  3357  00207E  EC32  F00F         	call	_fputc	;wreg free
  3358  002082  4A1E               	infsnz	fputs@i,f,c
  3359  002084  2A1F               	incf	fputs@i+1,f,c
  3360  002086                     l2184:
  3361  002086  501E               	movf	fputs@i,w,c
  3362  002088  2419               	addwf	fputs@s,w,c
  3363  00208A  6ED9               	movwf	fsr2l,c
  3364  00208C  501F               	movf	fputs@i+1,w,c
  3365  00208E  201A               	addwfc	fputs@s+1,w,c
  3366  002090  6EDA               	movwf	fsr2h,c
  3367  002092  50DF               	movf	indf2,w,c
  3368  002094  6E1D               	movwf	fputs@c,c
  3369  002096  501D               	movf	fputs@c,w,c
  3370  002098  B4D8               	btfsc	status,2,c
  3371  00209A  0012               	return	
  3372  00209C  D7E9               	goto	l2180
  3373  00209E                     __end_of_fputs:
  3374                           	opt callstack 0
  3375                           
  3376 ;; *************** function _fputc *****************
  3377 ;; Defined at:
  3378 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputc.c"
  3379 ;; Parameters:    Size  Location     Type
  3380 ;;  c               2   15[COMRAM] int 
  3381 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  3382 ;;		 -> NULL(0), 
  3383 ;; Auto vars:     Size  Location     Type
  3384 ;;		None
  3385 ;; Return value:  Size  Location     Type
  3386 ;;                  2   15[COMRAM] int 
  3387 ;; Registers used:
  3388 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3389 ;; Tracked objects:
  3390 ;;		On entry : 0/0
  3391 ;;		On exit  : 0/0
  3392 ;;		Unchanged: 0/0
  3393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3394 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3396 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3397 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;Total ram usage:        9 bytes
  3399 ;; Hardware stack levels used:    1
  3400 ;; Hardware stack levels required when called:    5
  3401 ;; This function calls:
  3402 ;;		_putch
  3403 ;; This function is called by:
  3404 ;;		_pad
  3405 ;;		_vfpfcnvrt
  3406 ;;		_fputs
  3407 ;; This function uses a non-reentrant model
  3408 ;;
  3409                           
  3410                           	psect	text12
  3411  001E64                     __ptext12:
  3412                           	opt callstack 0
  3413  001E64                     _fputc:
  3414                           	opt callstack 22
  3415                           
  3416                           ;incstack = 0
  3417  001E64  5012               	movf	fputc@fp,w,c
  3418  001E66  1013               	iorwf	fputc@fp+1,w,c
  3419  001E68  B4D8               	btfsc	status,2,c
  3420  001E6A  D004               	goto	u1690
  3421  001E6C  5012               	movf	fputc@fp,w,c
  3422  001E6E  1013               	iorwf	fputc@fp+1,w,c
  3423  001E70  A4D8               	btfss	status,2,c
  3424  001E72  D004               	goto	l2170
  3425  001E74                     u1690:
  3426  001E74  5010               	movf	fputc@c,w,c
  3427  001E76  ECBA  F010         	call	_putch
  3428  001E7A  0012               	return	
  3429  001E7C                     l2170:
  3430  001E7C  EE20 F004          	lfsr	2,4
  3431  001E80  5012               	movf	fputc@fp,w,c
  3432  001E82  26D9               	addwf	fsr2l,f,c
  3433  001E84  5013               	movf	fputc@fp+1,w,c
  3434  001E86  22DA               	addwfc	fsr2h,f,c
  3435  001E88  50DE               	movf	postinc2,w,c
  3436  001E8A  10DE               	iorwf	postinc2,w,c
  3437  001E8C  B4D8               	btfsc	status,2,c
  3438  001E8E  D016               	goto	u1710
  3439  001E90  EE20 F004          	lfsr	2,4
  3440  001E94  5012               	movf	fputc@fp,w,c
  3441  001E96  26D9               	addwf	fsr2l,f,c
  3442  001E98  5013               	movf	fputc@fp+1,w,c
  3443  001E9A  22DA               	addwfc	fsr2h,f,c
  3444  001E9C  EE10 F002          	lfsr	1,2
  3445  001EA0  5012               	movf	fputc@fp,w,c
  3446  001EA2  26E1               	addwf	fsr1l,f,c
  3447  001EA4  5013               	movf	fputc@fp+1,w,c
  3448  001EA6  22E2               	addwfc	fsr1h,f,c
  3449  001EA8  50DE               	movf	postinc2,w,c
  3450  001EAA  5CE6               	subwf	postinc1,w,c
  3451  001EAC  50E6               	movf	postinc1,w,c
  3452  001EAE  0A80               	xorlw	128
  3453  001EB0  6E18               	movwf	(??_fputc+4)& (0+255),c
  3454  001EB2  50DE               	movf	postinc2,w,c
  3455  001EB4  0A80               	xorlw	128
  3456  001EB6  5818               	subwfb	(??_fputc+4)& (0+255),w,c
  3457  001EB8  B0D8               	btfsc	status,0,c
  3458  001EBA  0012               	return	
  3459  001EBC                     u1710:
  3460  001EBC  EE20 F002          	lfsr	2,2
  3461  001EC0  5012               	movf	fputc@fp,w,c
  3462  001EC2  26D9               	addwf	fsr2l,f,c
  3463  001EC4  5013               	movf	fputc@fp+1,w,c
  3464  001EC6  22DA               	addwfc	fsr2h,f,c
  3465  001EC8  2ADE               	incf	postinc2,f,c
  3466  001ECA  0E00               	movlw	0
  3467  001ECC  22DD               	addwfc	postdec2,f,c
  3468  001ECE  0012               	return		;funcret
  3469  001ED0                     __end_of_fputc:
  3470                           	opt callstack 0
  3471                           
  3472 ;; *************** function _putch *****************
  3473 ;; Defined at:
  3474 ;;		line 102 in file "lcd.c"
  3475 ;; Parameters:    Size  Location     Type
  3476 ;;  data            1    wreg     unsigned char 
  3477 ;; Auto vars:     Size  Location     Type
  3478 ;;  data            1   14[COMRAM] unsigned char 
  3479 ;; Return value:  Size  Location     Type
  3480 ;;                  1    wreg      void 
  3481 ;; Registers used:
  3482 ;;		wreg, status,2, status,0, cstack
  3483 ;; Tracked objects:
  3484 ;;		On entry : 0/0
  3485 ;;		On exit  : 0/0
  3486 ;;		Unchanged: 0/0
  3487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;Total ram usage:        1 bytes
  3493 ;; Hardware stack levels used:    1
  3494 ;; Hardware stack levels required when called:    4
  3495 ;; This function calls:
  3496 ;;		_send_byte
  3497 ;; This function is called by:
  3498 ;;		_fputc
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text13
  3503  002174                     __ptext13:
  3504                           	opt callstack 0
  3505  002174                     _putch:
  3506                           	opt callstack 22
  3507                           
  3508                           ;incstack = 0
  3509                           ;putch@data stored from wreg
  3510  002174  6E0F               	movwf	putch@data,c
  3511                           
  3512                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  3513  002176  848C               	bsf	3980,2,c	;volatile
  3514                           
  3515                           ;lcd.c: 104:     send_byte((unsigned char)data);
  3516  002178  500F               	movf	putch@data,w,c
  3517  00217A  ECB1  F010         	call	_send_byte
  3518  00217E  0012               	return		;funcret
  3519  002180                     __end_of_putch:
  3520                           	opt callstack 0
  3521                           
  3522 ;; *************** function _initLCD *****************
  3523 ;; Defined at:
  3524 ;;		line 69 in file "lcd.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;		None
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;		None
  3529 ;; Return value:  Size  Location     Type
  3530 ;;                  1    wreg      void 
  3531 ;; Registers used:
  3532 ;;		wreg, status,2, status,0, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3541 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3542 ;;Total ram usage:        1 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    5
  3545 ;; This function calls:
  3546 ;;		_lcdInst
  3547 ;;		_send_byte
  3548 ;;		_send_nibble
  3549 ;; This function is called by:
  3550 ;;		_main
  3551 ;; This function uses a non-reentrant model
  3552 ;;
  3553                           
  3554                           	psect	text14
  3555  001ED0                     __ptext14:
  3556                           	opt callstack 0
  3557  001ED0                     _initLCD:
  3558                           	opt callstack 25
  3559                           
  3560                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3561                           
  3562                           ;incstack = 0
  3563  001ED0  0E31               	movlw	49
  3564  001ED2  6E10               	movwf	??_initLCD& (0+255),c
  3565  001ED4  0EB2               	movlw	178
  3566  001ED6                     u2517:
  3567  001ED6  2EE8               	decfsz	wreg,f,c
  3568  001ED8  D7FE               	bra	u2517
  3569  001EDA  2E10               	decfsz	??_initLCD& (0+255),f,c
  3570  001EDC  D7FC               	bra	u2517
  3571  001EDE  D000               	nop2	
  3572                           
  3573                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  3574  001EE0  948C               	bcf	3980,2,c	;volatile
  3575                           
  3576                           ;lcd.c: 74:     send_nibble(0b0011);
  3577  001EE2  0E03               	movlw	3
  3578  001EE4  ECA6  F010         	call	_send_nibble
  3579                           
  3580                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3581  001EE8  0E11               	movlw	17
  3582  001EEA  6E10               	movwf	??_initLCD& (0+255),c
  3583  001EEC  0E3A               	movlw	58
  3584  001EEE                     u2527:
  3585  001EEE  2EE8               	decfsz	wreg,f,c
  3586  001EF0  D7FE               	bra	u2527
  3587  001EF2  2E10               	decfsz	??_initLCD& (0+255),f,c
  3588  001EF4  D7FC               	bra	u2527
  3589  001EF6  D000               	nop2	
  3590                           
  3591                           ;lcd.c: 76:     send_nibble(0b0011);
  3592  001EF8  0E03               	movlw	3
  3593  001EFA  ECA6  F010         	call	_send_nibble
  3594                           
  3595                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  3596  001EFE  0E7D               	movlw	125
  3597  001F00                     u2537:
  3598  001F00  2EE8               	decfsz	wreg,f,c
  3599  001F02  D7FE               	bra	u2537
  3600                           
  3601                           ;lcd.c: 78:     send_byte(0b00110010);
  3602  001F04  0E32               	movlw	50
  3603  001F06  ECB1  F010         	call	_send_byte
  3604                           
  3605                           ;lcd.c: 80:     send_byte(0b00101000);
  3606  001F0A  0E28               	movlw	40
  3607  001F0C  ECB1  F010         	call	_send_byte
  3608                           
  3609                           ;lcd.c: 81:     send_byte(0b00001000);
  3610  001F10  0E08               	movlw	8
  3611  001F12  ECB1  F010         	call	_send_byte
  3612                           
  3613                           ;lcd.c: 82:     send_byte(0b00000001);
  3614  001F16  0E01               	movlw	1
  3615  001F18  ECB1  F010         	call	_send_byte
  3616                           
  3617                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3618  001F1C  0E11               	movlw	17
  3619  001F1E  6E10               	movwf	??_initLCD& (0+255),c
  3620  001F20  0E3A               	movlw	58
  3621  001F22                     u2547:
  3622  001F22  2EE8               	decfsz	wreg,f,c
  3623  001F24  D7FE               	bra	u2547
  3624  001F26  2E10               	decfsz	??_initLCD& (0+255),f,c
  3625  001F28  D7FC               	bra	u2547
  3626  001F2A  D000               	nop2	
  3627                           
  3628                           ;lcd.c: 84:     send_byte(0b00000110);
  3629  001F2C  0E06               	movlw	6
  3630  001F2E  ECB1  F010         	call	_send_byte
  3631                           
  3632                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  3633  001F32  0E0F               	movlw	15
  3634  001F34  ECC0  F010         	call	_lcdInst
  3635  001F38  0012               	return		;funcret
  3636  001F3A                     __end_of_initLCD:
  3637                           	opt callstack 0
  3638                           
  3639 ;; *************** function _lcdInst *****************
  3640 ;; Defined at:
  3641 ;;		line 64 in file "lcd.c"
  3642 ;; Parameters:    Size  Location     Type
  3643 ;;  data            1    wreg     unsigned char 
  3644 ;; Auto vars:     Size  Location     Type
  3645 ;;  data            1   14[COMRAM] unsigned char 
  3646 ;; Return value:  Size  Location     Type
  3647 ;;                  1    wreg      void 
  3648 ;; Registers used:
  3649 ;;		wreg, status,2, status,0, cstack
  3650 ;; Tracked objects:
  3651 ;;		On entry : 0/0
  3652 ;;		On exit  : 0/0
  3653 ;;		Unchanged: 0/0
  3654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3658 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;Total ram usage:        1 bytes
  3660 ;; Hardware stack levels used:    1
  3661 ;; Hardware stack levels required when called:    4
  3662 ;; This function calls:
  3663 ;;		_send_byte
  3664 ;; This function is called by:
  3665 ;;		_initLCD
  3666 ;;		_main
  3667 ;;		_lcd_shift_cursor
  3668 ;;		_lcd_shift_display
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text15
  3673  002180                     __ptext15:
  3674                           	opt callstack 0
  3675  002180                     _lcdInst:
  3676                           	opt callstack 26
  3677                           
  3678                           ;incstack = 0
  3679                           ;lcdInst@data stored from wreg
  3680  002180  6E0F               	movwf	lcdInst@data,c
  3681                           
  3682                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  3683  002182  948C               	bcf	3980,2,c	;volatile
  3684                           
  3685                           ;lcd.c: 66:     send_byte(data);
  3686  002184  500F               	movf	lcdInst@data,w,c
  3687  002186  ECB1  F010         	call	_send_byte
  3688  00218A  0012               	return		;funcret
  3689  00218C                     __end_of_lcdInst:
  3690                           	opt callstack 0
  3691                           
  3692 ;; *************** function _send_byte *****************
  3693 ;; Defined at:
  3694 ;;		line 55 in file "lcd.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;  data            1    wreg     unsigned char 
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;  data            1   13[COMRAM] unsigned char 
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, status,2, status,0, cstack
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;Total ram usage:        1 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    3
  3715 ;; This function calls:
  3716 ;;		_send_nibble
  3717 ;; This function is called by:
  3718 ;;		_lcdInst
  3719 ;;		_initLCD
  3720 ;;		_putch
  3721 ;; This function uses a non-reentrant model
  3722 ;;
  3723                           
  3724                           	psect	text16
  3725  002162                     __ptext16:
  3726                           	opt callstack 0
  3727  002162                     _send_byte:
  3728                           	opt callstack 22
  3729                           
  3730                           ;incstack = 0
  3731                           ;send_byte@data stored from wreg
  3732  002162  6E0E               	movwf	send_byte@data,c
  3733                           
  3734                           ;lcd.c: 57:     send_nibble(data >> 4);
  3735  002164  380E               	swapf	send_byte@data,w,c
  3736  002166  0B0F               	andlw	15
  3737  002168  ECA6  F010         	call	_send_nibble
  3738                           
  3739                           ;lcd.c: 60:     send_nibble(data);
  3740  00216C  500E               	movf	send_byte@data,w,c
  3741  00216E  ECA6  F010         	call	_send_nibble
  3742  002172  0012               	return		;funcret
  3743  002174                     __end_of_send_byte:
  3744                           	opt callstack 0
  3745                           
  3746 ;; *************** function _send_nibble *****************
  3747 ;; Defined at:
  3748 ;;		line 44 in file "lcd.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;  data            1    wreg     unsigned char 
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;  data            1   12[COMRAM] unsigned char 
  3753 ;; Return value:  Size  Location     Type
  3754 ;;                  1    wreg      void 
  3755 ;; Registers used:
  3756 ;;		wreg, status,2, status,0, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3765 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3766 ;;Total ram usage:        1 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    2
  3769 ;; This function calls:
  3770 ;;		_pulse_e
  3771 ;; This function is called by:
  3772 ;;		_send_byte
  3773 ;;		_initLCD
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text17
  3778  00214C                     __ptext17:
  3779                           	opt callstack 0
  3780  00214C                     _send_nibble:
  3781                           	opt callstack 22
  3782                           
  3783                           ;incstack = 0
  3784                           ;send_nibble@data stored from wreg
  3785  00214C  6E0D               	movwf	send_nibble@data,c
  3786                           
  3787                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  3788  00214E  508C               	movf	3980,w,c	;volatile
  3789  002150  0B0F               	andlw	15
  3790  002152  6E8C               	movwf	3980,c	;volatile
  3791                           
  3792                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  3793  002154  380D               	swapf	send_nibble@data,w,c
  3794  002156  0BF0               	andlw	240
  3795  002158  108C               	iorwf	3980,w,c	;volatile
  3796  00215A  6E8C               	movwf	3980,c	;volatile
  3797                           
  3798                           ;lcd.c: 48:     pulse_e();
  3799  00215C  EC7D  F010         	call	_pulse_e	;wreg free
  3800  002160  0012               	return		;funcret
  3801  002162                     __end_of_send_nibble:
  3802                           	opt callstack 0
  3803                           
  3804 ;; *************** function _pulse_e *****************
  3805 ;; Defined at:
  3806 ;;		line 28 in file "lcd.c"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;		None
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  interruptSta    1   11[COMRAM] unsigned char 
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		wreg
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;Total ram usage:        1 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; Hardware stack levels required when called:    1
  3827 ;; This function calls:
  3828 ;;		Nothing
  3829 ;; This function is called by:
  3830 ;;		_send_nibble
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           	psect	text18
  3835  0020FA                     __ptext18:
  3836                           	opt callstack 0
  3837  0020FA                     _pulse_e:
  3838                           	opt callstack 22
  3839                           
  3840                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  3841                           
  3842                           ;incstack = 0
  3843  0020FA  0E00               	movlw	0
  3844  0020FC  BEF2               	btfsc	4082,7,c	;volatile
  3845  0020FE  0E01               	movlw	1
  3846  002100  6E0C               	movwf	pulse_e@interruptState,c
  3847                           
  3848                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  3849  002102  9EF2               	bcf	4082,7,c	;volatile
  3850                           
  3851                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  3852  002104  868C               	bsf	3980,3,c	;volatile
  3853                           
  3854                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  3855  002106  0E14               	movlw	20
  3856  002108                     u2557:
  3857  002108  2EE8               	decfsz	wreg,f,c
  3858  00210A  D7FE               	bra	u2557
  3859  00210C  D000               	nop2	
  3860                           
  3861                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  3862  00210E  968C               	bcf	3980,3,c	;volatile
  3863                           
  3864                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  3865  002110  0E53               	movlw	83
  3866  002112                     u2567:
  3867  002112  2EE8               	decfsz	wreg,f,c
  3868  002114  D7FE               	bra	u2567
  3869  002116  F000               	nop	
  3870                           
  3871                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  3872  002118  B00C               	btfsc	pulse_e@interruptState,0,c
  3873  00211A  D002               	bra	u1675
  3874  00211C  9EF2               	bcf	4082,7,c	;volatile
  3875  00211E  D001               	bra	u1676
  3876  002120                     u1675:
  3877  002120  8EF2               	bsf	4082,7,c	;volatile
  3878  002122                     u1676:
  3879  002122  0012               	return		;funcret
  3880  002124                     __end_of_pulse_e:
  3881                           	opt callstack 0
  3882                           
  3883 ;; *************** function ___awmod *****************
  3884 ;; Defined at:
  3885 ;;		line 7 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/awmod.c"
  3886 ;; Parameters:    Size  Location     Type
  3887 ;;  dividend        2   11[COMRAM] int 
  3888 ;;  divisor         2   13[COMRAM] int 
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;  sign            1   16[COMRAM] unsigned char 
  3891 ;;  counter         1   15[COMRAM] unsigned char 
  3892 ;; Return value:  Size  Location     Type
  3893 ;;                  2   11[COMRAM] int 
  3894 ;; Registers used:
  3895 ;;		wreg, status,2, status,0
  3896 ;; Tracked objects:
  3897 ;;		On entry : 0/0
  3898 ;;		On exit  : 0/0
  3899 ;;		Unchanged: 0/0
  3900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3901 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3905 ;;Total ram usage:        6 bytes
  3906 ;; Hardware stack levels used:    1
  3907 ;; Hardware stack levels required when called:    1
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		_main
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	text19
  3916  001DF4                     __ptext19:
  3917                           	opt callstack 0
  3918  001DF4                     ___awmod:
  3919                           	opt callstack 29
  3920                           
  3921                           ;incstack = 0
  3922  001DF4  0E00               	movlw	0
  3923  001DF6  6E11               	movwf	___awmod@sign,c
  3924  001DF8  AE0D               	btfss	___awmod@dividend+1,7,c
  3925  001DFA  D006               	goto	l1866
  3926  001DFC  6C0C               	negf	___awmod@dividend,c
  3927  001DFE  1E0D               	comf	___awmod@dividend+1,f,c
  3928  001E00  B0D8               	btfsc	status,0,c
  3929  001E02  2A0D               	incf	___awmod@dividend+1,f,c
  3930  001E04  0E01               	movlw	1
  3931  001E06  6E11               	movwf	___awmod@sign,c
  3932  001E08                     l1866:
  3933  001E08  AE0F               	btfss	___awmod@divisor+1,7,c
  3934  001E0A  D004               	goto	l1870
  3935  001E0C  6C0E               	negf	___awmod@divisor,c
  3936  001E0E  1E0F               	comf	___awmod@divisor+1,f,c
  3937  001E10  B0D8               	btfsc	status,0,c
  3938  001E12  2A0F               	incf	___awmod@divisor+1,f,c
  3939  001E14                     l1870:
  3940  001E14  500E               	movf	___awmod@divisor,w,c
  3941  001E16  100F               	iorwf	___awmod@divisor+1,w,c
  3942  001E18  B4D8               	btfsc	status,2,c
  3943  001E1A  D018               	goto	l1886
  3944  001E1C  0E01               	movlw	1
  3945  001E1E  6E10               	movwf	___awmod@counter,c
  3946  001E20  D004               	goto	l1876
  3947  001E22                     l1874:
  3948  001E22  90D8               	bcf	status,0,c
  3949  001E24  360E               	rlcf	___awmod@divisor,f,c
  3950  001E26  360F               	rlcf	___awmod@divisor+1,f,c
  3951  001E28  2A10               	incf	___awmod@counter,f,c
  3952  001E2A                     l1876:
  3953  001E2A  AE0F               	btfss	___awmod@divisor+1,7,c
  3954  001E2C  D7FA               	goto	l1874
  3955  001E2E                     u1340:
  3956  001E2E  500E               	movf	___awmod@divisor,w,c
  3957  001E30  5C0C               	subwf	___awmod@dividend,w,c
  3958  001E32  500F               	movf	___awmod@divisor+1,w,c
  3959  001E34  580D               	subwfb	___awmod@dividend+1,w,c
  3960  001E36  A0D8               	btfss	status,0,c
  3961  001E38  D004               	goto	l1882
  3962  001E3A  500E               	movf	___awmod@divisor,w,c
  3963  001E3C  5E0C               	subwf	___awmod@dividend,f,c
  3964  001E3E  500F               	movf	___awmod@divisor+1,w,c
  3965  001E40  5A0D               	subwfb	___awmod@dividend+1,f,c
  3966  001E42                     l1882:
  3967  001E42  90D8               	bcf	status,0,c
  3968  001E44  320F               	rrcf	___awmod@divisor+1,f,c
  3969  001E46  320E               	rrcf	___awmod@divisor,f,c
  3970  001E48  2E10               	decfsz	___awmod@counter,f,c
  3971  001E4A  D7F1               	goto	u1340
  3972  001E4C                     l1886:
  3973  001E4C  5011               	movf	___awmod@sign,w,c
  3974  001E4E  B4D8               	btfsc	status,2,c
  3975  001E50  D004               	goto	l1890
  3976  001E52  6C0C               	negf	___awmod@dividend,c
  3977  001E54  1E0D               	comf	___awmod@dividend+1,f,c
  3978  001E56  B0D8               	btfsc	status,0,c
  3979  001E58  2A0D               	incf	___awmod@dividend+1,f,c
  3980  001E5A                     l1890:
  3981  001E5A  C00C  F00C         	movff	___awmod@dividend,?___awmod
  3982  001E5E  C00D  F00D         	movff	___awmod@dividend+1,?___awmod+1
  3983  001E62  0012               	return		;funcret
  3984  001E64                     __end_of___awmod:
  3985                           	opt callstack 0
  3986                           
  3987 ;; *************** function _interruptHandler *****************
  3988 ;; Defined at:
  3989 ;;		line 198 in file "main.c"
  3990 ;; Parameters:    Size  Location     Type
  3991 ;;		None
  3992 ;; Auto vars:     Size  Location     Type
  3993 ;;  i               2    8[COMRAM] int 
  3994 ;;  keypress        1   10[COMRAM] unsigned char 
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4006 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4007 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4008 ;;Total ram usage:       11 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; This function calls:
  4011 ;;		Nothing
  4012 ;; This function is called by:
  4013 ;;		Interrupt level 2
  4014 ;; This function uses a non-reentrant model
  4015 ;;
  4016                           
  4017                           	psect	intcode
  4018  000008                     __pintcode:
  4019                           	opt callstack 0
  4020  000008                     _interruptHandler:
  4021                           	opt callstack 19
  4022                           
  4023                           ;incstack = 0
  4024  000008  8274               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4025  00000A  ED59  F00E         	call	int_func,f	;refresh shadow registers
  4026                           
  4027                           	psect	intcode_body
  4028  001CB2                     __pintcode_body:
  4029                           	opt callstack 19
  4030  001CB2                     int_func:
  4031                           	opt callstack 19
  4032  001CB2  0006               	pop		; remove dummy address from shadow register refresh
  4033  001CB4  CFF6 F005          	movff	tblptrl,??_interruptHandler+4
  4034  001CB8  CFF7 F006          	movff	tblptrh,??_interruptHandler+5
  4035  001CBC  CFF8 F007          	movff	tblptru,??_interruptHandler+6
  4036  001CC0  CFF5 F008          	movff	tablat,??_interruptHandler+7
  4037                           
  4038                           ;main.c: 200:     if(INT1IF){
  4039  001CC4  A0F0               	btfss	4080,0,c	;volatile
  4040  001CC6  D041               	goto	i2u166_40
  4041                           
  4042                           ;main.c: 204:         INT1IF = 0;
  4043  001CC8  90F0               	bcf	4080,0,c	;volatile
  4044                           
  4045                           ;main.c: 206:         unsigned char keypress = (PORTB & 0xF0) >> 4;
  4046  001CCA  3881               	swapf	3969,w,c	;volatile
  4047  001CCC  0B0F               	andlw	15
  4048  001CCE  0B0F               	andlw	15
  4049  001CD0  6E0B               	movwf	interruptHandler@keypress,c
  4050                           
  4051                           ;main.c: 208:         if (keys[keypress] == '*') {
  4052  001CD2  0E01               	movlw	low _keys
  4053  001CD4  240B               	addwf	interruptHandler@keypress,w,c
  4054  001CD6  6EF6               	movwf	tblptrl,c
  4055  001CD8  6AF7               	clrf	tblptrh,c
  4056  001CDA  0E10               	movlw	high _keys
  4057  001CDC  22F7               	addwfc	tblptrh,f,c
  4058  001CDE                     	if	0	;There are less than 3 active tblptr bytes
  4059  001CDE                     	endif
  4060  001CDE  0008               	tblrd		*
  4061  001CE0  50F5               	movf	tablat,w,c
  4062  001CE2  0A2A               	xorlw	42
  4063  001CE4  A4D8               	btfss	status,2,c
  4064  001CE6  D004               	goto	i2l2132
  4065                           
  4066                           ;main.c: 210:             exit_key = 1;
  4067  001CE8  0E01               	movlw	1
  4068  001CEA  0100               	movlb	0	; () banked
  4069  001CEC  6FC2               	movwf	_exit_key& (0+255),b	;volatile
  4070  001CEE  D02D               	goto	i2u166_40
  4071  001CF0                     i2l2132:
  4072                           
  4073                           ;main.c: 214:         for ( int i = 0; i < Canister; i++ ) {
  4074  001CF0  0E00               	movlw	0
  4075  001CF2  6E0A               	movwf	interruptHandler@i+1,c
  4076  001CF4  0E00               	movlw	0
  4077  001CF6  6E09               	movwf	interruptHandler@i,c
  4078  001CF8  D01D               	goto	i2l2142
  4079  001CFA                     i2l2134:
  4080                           
  4081                           ; BSR set to: 0
  4082                           ;main.c: 216:             if ((char)i + '0' == keys[keypress]) {
  4083  001CFA  0E01               	movlw	low _keys
  4084  001CFC  240B               	addwf	interruptHandler@keypress,w,c
  4085  001CFE  6EF6               	movwf	tblptrl,c
  4086  001D00  6AF7               	clrf	tblptrh,c
  4087  001D02  0E10               	movlw	high _keys
  4088  001D04  22F7               	addwfc	tblptrh,f,c
  4089  001D06                     	if	0	;There are less than 3 active tblptr bytes
  4090  001D06                     	endif
  4091  001D06  0008               	tblrd		*
  4092  001D08  50F5               	movf	tablat,w,c
  4093  001D0A  6E01               	movwf	??_interruptHandler& (0+255),c
  4094  001D0C  6A02               	clrf	(??_interruptHandler+1)& (0+255),c
  4095  001D0E  5009               	movf	interruptHandler@i,w,c
  4096  001D10  6E03               	movwf	(??_interruptHandler+2)& (0+255),c
  4097  001D12  6A04               	clrf	(??_interruptHandler+3)& (0+255),c
  4098  001D14  0E30               	movlw	48
  4099  001D16  2603               	addwf	??_interruptHandler+2,f,c
  4100  001D18  0E00               	movlw	0
  4101  001D1A  2204               	addwfc	??_interruptHandler+3,f,c
  4102  001D1C  5001               	movf	??_interruptHandler,w,c
  4103  001D1E  1803               	xorwf	??_interruptHandler+2,w,c
  4104  001D20  E107               	bnz	i2l2140
  4105  001D22  5002               	movf	??_interruptHandler+1,w,c
  4106  001D24  1804               	xorwf	??_interruptHandler+3,w,c
  4107  001D26  A4D8               	btfss	status,2,c
  4108  001D28  D003               	goto	i2l2140
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;main.c: 217:                 key_was_pressed = 1;
  4112  001D2A  0E01               	movlw	1
  4113  001D2C  6FC3               	movwf	_key_was_pressed& (0+255),b	;volatile
  4114  001D2E  D00D               	goto	i2u166_40
  4115  001D30                     i2l2140:
  4116                           
  4117                           ; BSR set to: 0
  4118                           ;main.c: 221:         }
  4119  001D30  4A09               	infsnz	interruptHandler@i,f,c
  4120  001D32  2A0A               	incf	interruptHandler@i+1,f,c
  4121  001D34                     i2l2142:
  4122  001D34  0100               	movlb	0	; () banked
  4123  001D36  51BE               	movf	_Canister& (0+255),w,b
  4124  001D38  5C09               	subwf	interruptHandler@i,w,c
  4125  001D3A  500A               	movf	interruptHandler@i+1,w,c
  4126  001D3C  0A80               	xorlw	128
  4127  001D3E  6E01               	movwf	??_interruptHandler& (0+255),c
  4128  001D40  51BF               	movf	(_Canister+1)& (0+255),w,b
  4129  001D42  0A80               	xorlw	128
  4130  001D44  5801               	subwfb	??_interruptHandler& (0+255),w,c
  4131  001D46  A0D8               	btfss	status,0,c
  4132  001D48  D7D8               	goto	i2l2134
  4133  001D4A                     i2u166_40:
  4134  001D4A  C008  FFF5         	movff	??_interruptHandler+7,tablat
  4135  001D4E  C007  FFF8         	movff	??_interruptHandler+6,tblptru
  4136  001D52  C006  FFF7         	movff	??_interruptHandler+5,tblptrh
  4137  001D56  C005  FFF6         	movff	??_interruptHandler+4,tblptrl
  4138  001D5A  9274               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4139  001D5C  0011               	retfie		f
  4140  001D5E                     __end_of_interruptHandler:
  4141                           	opt callstack 0
  4142                           
  4143                           	psect	rparam
  4144  0000                     
  4145                           	psect	temp
  4146  000074                     btemp:
  4147                           	opt callstack 0
  4148  000074                     	ds	1
  4149  0000                     int$flags	set	btemp
  4150  0000                     wtemp8	set	btemp+1
  4151  0000                     ttemp5	set	btemp+1
  4152  0000                     ttemp6	set	btemp+4
  4153  0000                     ttemp7	set	btemp+8
  4154                           tosu	equ	0xFFF
  4155                           tosh	equ	0xFFE
  4156                           tosl	equ	0xFFD
  4157                           stkptr	equ	0xFFC
  4158                           pclatu	equ	0xFFB
  4159                           pclath	equ	0xFFA
  4160                           pcl	equ	0xFF9
  4161                           tblptru	equ	0xFF8
  4162                           tblptrh	equ	0xFF7
  4163                           tblptrl	equ	0xFF6
  4164                           tablat	equ	0xFF5
  4165                           prodh	equ	0xFF4
  4166                           prodl	equ	0xFF3
  4167                           indf0	equ	0xFEF
  4168                           postinc0	equ	0xFEE
  4169                           postdec0	equ	0xFED
  4170                           preinc0	equ	0xFEC
  4171                           plusw0	equ	0xFEB
  4172                           fsr0h	equ	0xFEA
  4173                           fsr0l	equ	0xFE9
  4174                           wreg	equ	0xFE8
  4175                           indf1	equ	0xFE7
  4176                           postinc1	equ	0xFE6
  4177                           postdec1	equ	0xFE5
  4178                           preinc1	equ	0xFE4
  4179                           plusw1	equ	0xFE3
  4180                           fsr1h	equ	0xFE2
  4181                           fsr1l	equ	0xFE1
  4182                           bsr	equ	0xFE0
  4183                           indf2	equ	0xFDF
  4184                           postinc2	equ	0xFDE
  4185                           postdec2	equ	0xFDD
  4186                           preinc2	equ	0xFDC
  4187                           plusw2	equ	0xFDB
  4188                           fsr2h	equ	0xFDA
  4189                           fsr2l	equ	0xFD9
  4190                           status	equ	0xFD8


Data Sizes:
    Strings     223
    Constant    23
    Data        66
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    107     115
    BANK0           128     25     125
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[10]), STR_21(CODE[14]), STR_20(CODE[11]), STR_19(CODE[12]), 
		 -> STR_18(CODE[10]), STR_17(CODE[15]), STR_16(CODE[14]), STR_15(CODE[12]), 
		 -> STR_14(CODE[10]), STR_13(CODE[15]), STR_12(CODE[12]), STR_11(CODE[15]), 
		 -> STR_10(CODE[12]), STR_9(CODE[16]), STR_8(CODE[9]), STR_7(CODE[9]), 
		 -> STR_6(CODE[11]), STR_5(CODE[13]), STR_4(CODE[15]), STR_3(CODE[11]), 
		 -> STR_2(CODE[15]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S780_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[10]), STR_21(CODE[14]), STR_20(CODE[11]), STR_19(CODE[12]), 
		 -> STR_18(CODE[10]), STR_17(CODE[15]), STR_16(CODE[14]), STR_15(CODE[12]), 
		 -> STR_14(CODE[10]), STR_13(CODE[15]), STR_12(CODE[12]), STR_11(CODE[15]), 
		 -> STR_10(CODE[12]), STR_9(CODE[16]), STR_8(CODE[9]), STR_7(CODE[9]), 
		 -> STR_6(CODE[11]), STR_5(CODE[13]), STR_4(CODE[15]), STR_3(CODE[11]), 
		 -> STR_2(CODE[15]), STR_1(CODE[17]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[10]), STR_21(CODE[14]), STR_20(CODE[11]), STR_19(CODE[12]), 
		 -> STR_18(CODE[10]), STR_17(CODE[15]), STR_16(CODE[14]), STR_15(CODE[12]), 
		 -> STR_14(CODE[10]), STR_13(CODE[15]), STR_12(CODE[12]), STR_11(CODE[15]), 
		 -> STR_10(CODE[12]), STR_9(CODE[16]), STR_8(CODE[9]), STR_7(CODE[9]), 
		 -> STR_6(CODE[11]), STR_5(CODE[13]), STR_4(CODE[15]), STR_3(CODE[11]), 
		 -> STR_2(CODE[15]), STR_1(CODE[17]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   16498
                                              4 BANK0     21    21      0
                            ___awmod
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4   14726
                                            103 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   12659
                                             95 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6   12177
                                             78 COMRAM    17    11      6
                               _ctoa
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    6083
                                             42 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             29 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                             11 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                             11 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     4      3    4096
                                             42 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3817
                                             31 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1602
                                             24 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1102
                                             15 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     350
                                             15 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _send_byte                                            1     1      0     127
                                             13 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (7) _send_nibble                                          1     1      0      65
                                             12 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (8) _pulse_e                                              1     1      0      34
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     448
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _interruptHandler                                   11    11      0      91
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     19      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6B      73       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F0      34        0.0%
DATA                 0      0      F0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Feb  1 17:21:41 2019

              __CFG_CPD$ON 000000                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l112 1486                        l159 1D8C  
                      l177 1690                        l179 1698                        l890 20C6  
             __CFG_CPB$OFF 000000                        _abs 209E                        _pad 1D5E  
             ___awmod@sign 0011                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       ?_abs 001E                       l2200 1D76  
                     l2210 1DAE                       l2204 1D84                       l2214 1DDA  
                     l2206 1D96                       l2230 1A72                       l2170 1E7C  
                     l2306 1F9E                       l2242 1AC0                       l2322 1674  
                     l2410 19F0                       l2180 2070                       l2308 1FAA  
                     l2244 1AD4                       l2236 1A9A                       l2340 16C2  
                     l2404 19B4                       l2420 1A12                       l2190 20DE  
                     l2262 1B6C                       l2254 1B30                       l2350 17BA  
                     l2414 19FA                       l2184 2086                       l2336 16B2  
                     l2512 1164                       l2258 1B46                       l2290 1C54  
                     l2282 1BF8                       l2274 1BBA                       l2370 181E  
                     l2530 11C4                       l2188 20DA                       l2284 1C0C  
                     l2436 1F4C                       l2294 1C6A                       l2278 1BDE  
                     l2374 1836                       l2438 1F70                       l2632 147A  
                     l2616 13CA                       l2298 1C90                       l2394 1902  
                     l2652 154E                       l2660 1576                       l2636 149C  
                     l2548 1222                       l1870 1E14                       l2670 15B6  
                     l2654 155A                       l2568 128E                       l1890 1E5A  
                     l1882 1E42                       l1874 1E22                       l1866 1E08  
                     l2674 15CC                       l1876 1E2A                       l2588 1300  
                     l1886 1E4C                       l2598 1328                       l2678 15DC  
                     ?_pad 0020                       l2688 1606                       STR_1 1018  
                     STR_2 1048                       STR_3 10C5                       STR_4 1066  
                     STR_5 10A0                       STR_6 10D0                       STR_7 10E5  
                     STR_8 10EE                       STR_9 1029                       u2000 17C8  
                     u2020 17EA                       u2021 17E8                       u2030 17F8  
                     u2110 1936                       u2040 17FC                       u1340 1E2E  
                     u2060 1808                       u2300 144E                       _LATD 000F8C  
                     u2340 1520                       u1710 1EBC                       u2350 1522  
                     u2407 113E                       u2417 115A                       u2290 144C  
                     u1811 1AA0                       u2507 1612                       u2427 1184  
                     u2517 1ED6                       u2437 11E2                       u1830 1AD8  
                     u2527 1EEE                       u2447 1242                       u2537 1F00  
                     u2457 12AE                       u1690 1E74                       u1930 1646  
                     u1675 2120                       u2547 1F22                       u2467 1346  
                     u1676 2122                       u1780 20AC                       u1940 1648  
                     u2557 2108                       u2477 13E8                       u2567 2112  
                     u2487 14BC                       u2497 15C2                       u1890 1C10  
                     u1970 1686                       u1990 16AC                       abs@a 001E  
                     _dbuf 00C4                       _ctoa 1F8C                       _main 10F8  
                     _dtoa 161E   __end_of_interruptHandler 1D5E                       _keys 1001  
                     _prec 0070                       _time 00C0                       _nout 006C  
                     pad@i 0027                       pad@p 0024                       fsr1h 000FE2  
                     fsr2h 000FDA                       indf2 000FDF                       fsr1l 000FE1  
                     pad@w 0029                       fsr2l 000FD9                       btemp 0074  
                     start 000E              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                      ??_abs 0020                      ??_pad 0026  
          __end_of___aodiv 1B8E                      ?_ctoa 002B                      ?_main 0001  
                    ?_dtoa 002B            __end_of___aomod 1CB2                      STR_10 10B9  
                    STR_11 1039                      STR_20 1087                      STR_12 10AD  
                    STR_21 1084                      STR_13 1057                      STR_22 10DB  
                    STR_14 10DB                      STR_15 10AD                      STR_16 1092  
                    STR_17 1075                      STR_18 10DB                      STR_19 10AD  
          __end_of___awmod 1E64               vfpfcnvrt@fmt 0051                      _PORTB 000F81  
                    _TRISD 000F95              __CFG_PWRT$OFF 000000               main@miniTick 00F2  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 218C             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
             main@keypress 00FC             __CFG_EBTR3$OFF 000000                      _State 00A8  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
                    _balls 00BC            __end_of_initLCD 1F3A             __CFG_EBTRB$OFF 000000  
                    _flags 0072              _BallDispensed 0080                      _fputc 1E64  
                    _fputs 2066                      pad@fp 0020                      _width 006E  
                    ctoa@c 002D                      _putch 2174                      ctoa@w 002E  
                    dtoa@d 002D                      dtoa@i 004D                      dtoa@n 0045  
                    dtoa@p 003F                      dtoa@s 0043                      dtoa@w 0041  
                    tablat 000FF5            send_nibble@data 000D            __end_of_pulse_e 2124  
                    ttemp5 0075                      ttemp6 0078                      ttemp7 007C  
                    status 000FD8                      wtemp8 0075             __CFG_PBADEN$ON 000000  
          __initialization 1FDA               __end_of_ctoa 1FDA               __end_of_main 161E  
             __end_of_dtoa 1860               __end_of_keys 1012                     ??_ctoa 002E  
                   ??_main 00E8                     ??_dtoa 0035              __activetblptr 000001  
                   _ADCON1 000FC1               ?_send_nibble 0001                     ?_fputc 0010  
                   ?_fputs 0019                     ?_putch 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     i2l2140 1D30                     i2l2132 1CF0  
                   i2l2134 1CFA                     i2l2142 1D34              main@miniClear 00F4  
            main@miniState 00F6             __CFG_XINST$OFF 000000               vfprintf@cfmt 0066  
                ??___aodiv 001C                  ??___aomod 001C             __CFG_STVREN$ON 000000  
                ??___awmod 0010                     clear_0 2000                     clear_1 200C  
          ___awmod@divisor 000E            ___awmod@counter 0010                  ??_lcdInst 000F  
                   _printf 2124                     pad@buf 0022                     ctoa@fp 002B  
                   dtoa@fp 002B                     _strlen 20D0                  ??_initLCD 0010  
                   fputc@c 0010                     fputs@c 001D                     fputs@i 001E  
                   fputs@s 0019               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8           __end_of_vfprintf 1F8C  
                ??_pulse_e 000C      pulse_e@interruptState 000C                 __accesstop 0080  
  __end_of__initialization 2012              ___rparam_used 000001             __pcstackCOMRAM 0001  
             __pidataBANK0 2024              __end_of_fputc 1ED0              __end_of_fputs 209E  
            __end_of_putch 2180            _key_was_pressed 00C3                    ??_fputc 0014  
                  ??_fputs 001D                    ??_putch 000F                 __pbssBANK0 00C2  
        ?_interruptHandler 0001         ??_interruptHandler 0001         __size_of_send_byte 0012  
                  ?_printf 0068                    ?_strlen 000C         __size_of_vfpfcnvrt 01E6  
     __size_of_send_nibble 0016           _DistanceCanister 0094                    __Hparam 0000  
                  __Lparam 0000                    ___aodiv 1A46                    ___aomod 1B8E  
                  ___awmod 1DF4                  ?_vfprintf 0060               __psmallconst 1000  
 interruptHandler@keypress 000B                    __pcinit 1FDA                    __ramtop 1000  
                  _lcdInst 2180                    __ptext0 10F8                    __ptext1 2124  
                  __ptext2 1F3A                    __ptext3 1860                    __ptext4 161E  
                  __ptext5 209E                    __ptext6 1B8E                    __ptext7 1A46  
                  __ptext8 1F8C                    __ptext9 1D5E            __size_of_printf 0028  
          __size_of_strlen 002A                    _initLCD 1ED0               __size_of_abs 0032  
             __size_of_pad 0096           ___awmod@dividend 000C                    _pulse_e 20FA  
           __pintcode_body 1CB2       end_of_initialization 2012      __end_of_LCD_SIZE_HORZ 1018  
        __end_of_send_byte 2174      __end_of_LCD_SIZE_VERT 1017                    fputc@fp 0012  
                  int_func 1CB2                    fputs@fp 001B          __end_of_vfpfcnvrt 1A46  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                 ??_vfprintf 0066  
                  strlen@a 000E                    strlen@s 000C              send_byte@data 000E  
              vfpfcnvrt@ap 0053                vfpfcnvrt@fp 004F                vfpfcnvrt@ll 0057  
           __end_of_printf 214C             __end_of_strlen 20FA        start_initialization 1FDA  
              __end_of_abs 20D0                __end_of_pad 1DF4          interruptHandler@i 0009  
              vfprintf@fmt 0062                __pdataBANK0 0080           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 006C  __size_of_interruptHandler 1D56                   ??_strlen 000E  
              __pbssCOMRAM 006C              __pcstackBANK0 00E4           ___aodiv@dividend 000C  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008                   ?___aodiv 000C  
                 ?___aomod 000C           ___aodiv@quotient 001E                   ?___awmod 000C  
                 ?_lcdInst 0001          __size_of_vfprintf 0052                   ?_initLCD 0001  
              __smallconst 1000              ??_send_nibble 000D                   ?_pulse_e 0001  
           __size_of_fputc 006C             __size_of_fputs 0038             __size_of_putch 000C  
                 _LATDbits 000F8C                  _send_byte 2162             _LCD_LINE1_ADDR 1015  
           _LCD_LINE2_ADDR 1014             _LCD_LINE3_ADDR 1013             _LCD_LINE4_ADDR 1012  
                 i2u166_40 1D4A           __CFG_WDTPS$32768 000000                  _vfpfcnvrt 1860  
                main@clear 00F8                   _Canister 00BE                  main@state 00FA  
               vfpfcnvrt@c 005F                  copy_data0 1FEE     __end_of_LCD_LINE1_ADDR 1016  
   __end_of_LCD_LINE2_ADDR 1015     __end_of_LCD_LINE3_ADDR 1014     __end_of_LCD_LINE4_ADDR 1013  
      __end_of_send_nibble 2162                 ?_send_byte 0001                   __Hrparam 0000  
               vfprintf@ap 0064                   __Lrparam 0000                 vfprintf@fp 0060  
             __Lsmallconst 1000         __CFG_BOREN$SBORDIS 000000           __size_of___aodiv 0148  
         __size_of___aomod 0124           __size_of___awmod 0070                 ?_vfpfcnvrt 004F  
          ___aodiv@divisor 0014           _interruptHandler 0008            ___aodiv@counter 001C  
         __size_of_lcdInst 000C           __size_of_initLCD 006A                   _dtoa$319 003D  
                 __ptext10 20D0                   __ptext11 2066                   __ptext12 1E64  
                 __ptext13 2174                   __ptext14 1ED0                   __ptext15 2180  
                 __ptext16 2162                   __ptext17 214C                   __ptext18 20FA  
                 __ptext19 1DF4           __size_of_pulse_e 002A              __size_of_ctoa 004E  
            __size_of_main 0526              __size_of_dtoa 0242                   _exit_key 00C2  
                 int$flags 0074                   _vfprintf 1F3A                  printf@fmt 0068  
                 main@tick 00F0           ___aomod@dividend 000C                  putch@data 000F  
               _INTCONbits 000FF2                _send_nibble 214C                   intlevel2 0000  
            _LCD_SIZE_HORZ 1017              _LCD_SIZE_VERT 1016                ??_send_byte 000E  
                 printf@ap 00E6            ___aomod@divisor 0014                ??_vfpfcnvrt 0055  
              lcdInst@data 000F            ___aomod@counter 001C               ___aodiv@sign 001D  
             ___aomod@sign 001D  
