

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Sat Feb  2 21:25:51 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataBANK0
    75  001050                     __pidataBANK0:
    76                           	opt callstack 0
    77                           
    78                           ;initializer for _BallDispensed
    79  001050  0001               	dw	1
    80  001052  0001               	dw	1
    81  001054  0001               	dw	1
    82  001056  0000               	dw	0
    83  001058  0000               	dw	0
    84  00105A  0001               	dw	1
    85  00105C  0001               	dw	1
    86  00105E  0000               	dw	0
    87  001060  FFFF               	dw	65535
    88  001062  FFFF               	dw	65535
    89                           
    90                           ;initializer for _DistanceCanister
    91  001064  0014               	dw	20
    92  001066  001E               	dw	30
    93  001068  0028               	dw	40
    94  00106A  003B               	dw	59
    95  00106C  007B               	dw	123
    96  00106E  00D4               	dw	212
    97  001070  014C               	dw	332
    98  001072  0190               	dw	400
    99  001074  FFFF               	dw	65535
   100  001076  FFFF               	dw	65535
   101                           
   102                           ;initializer for _State
   103  001078  0001               	dw	1
   104  00107A  0001               	dw	1
   105  00107C  0001               	dw	1
   106  00107E  0000               	dw	0
   107  001080  0000               	dw	0
   108  001082  0001               	dw	1
   109  001084  0001               	dw	1
   110  001086  0000               	dw	0
   111  001088  FFFF               	dw	65535
   112  00108A  FFFF               	dw	65535
   113                           
   114                           ;initializer for _balls
   115  00108C  0005               	dw	5
   116                           
   117                           ;initializer for _Canister
   118  00108E  0008               	dw	8
   119                           
   120                           ;initializer for _time
   121  001090  001E               	dw	30
   122                           
   123                           	psect	mediumconst
   124  00FEA6                     __pmediumconst:
   125                           	opt callstack 0
   126  00FEA6  00                 	db	0
   127  00FEA7                     _keys:
   128                           	opt callstack 0
   129  00FEA7  31                 	db	49
   130  00FEA8  32                 	db	50
   131  00FEA9  33                 	db	51
   132  00FEAA  41                 	db	65
   133  00FEAB  34                 	db	52
   134  00FEAC  35                 	db	53
   135  00FEAD  36                 	db	54
   136  00FEAE  42                 	db	66
   137  00FEAF  37                 	db	55
   138  00FEB0  38                 	db	56
   139  00FEB1  39                 	db	57
   140  00FEB2  43                 	db	67
   141  00FEB3  2A                 	db	42
   142  00FEB4  30                 	db	48
   143  00FEB5  23                 	db	35
   144  00FEB6  44                 	db	68
   145  00FEB7  00                 	db	0
   146  00FEB8                     __end_of_keys:
   147                           	opt callstack 0
   148  00FEB8  50                 	db	80
   149  00FEB9                     __end_of_LCD_LINE4_ADDR:
   150                           	opt callstack 0
   151  00FEB9  10                 	db	16
   152  00FEBA                     __end_of_LCD_LINE3_ADDR:
   153                           	opt callstack 0
   154  00FEBA  40                 	db	64
   155  00FEBB                     __end_of_LCD_LINE2_ADDR:
   156                           	opt callstack 0
   157  00FEBB  00                 	db	0
   158  00FEBC                     __end_of_LCD_LINE1_ADDR:
   159                           	opt callstack 0
   160  00FEBC                     _LCD_SIZE_VERT:
   161                           	opt callstack 0
   162  00FEBC  04                 	db	4
   163  00FEBD                     __end_of_LCD_SIZE_VERT:
   164                           	opt callstack 0
   165  00FEBD                     _LCD_SIZE_HORZ:
   166                           	opt callstack 0
   167  00FEBD  10                 	db	16
   168  00FEBE                     __end_of_LCD_SIZE_HORZ:
   169                           	opt callstack 0
   170  0000                     _PORTB	set	3969
   171  0000                     _ADCON1	set	4033
   172  0000                     _TRISD	set	3989
   173  0000                     _LATD	set	3980
   174  0000                     _LATDbits	set	3980
   175  0000                     _INTCONbits	set	4082
   176  0000                     _INT1IF	set	32640
   177  0000                     _INT1IE	set	32643
   178  00FEBE                     STR_3:
   179  00FEBE  49                 	db	73	;'I'
   180  00FEBF  74                 	db	116	;'t'
   181  00FEC0  27                 	db	39
   182  00FEC1  73                 	db	115	;'s'
   183  00FEC2  20                 	db	32
   184  00FEC3  79                 	db	121	;'y'
   185  00FEC4  61                 	db	97	;'a'
   186  00FEC5  20                 	db	32
   187  00FEC6  62                 	db	98	;'b'
   188  00FEC7  6F                 	db	111	;'o'
   189  00FEC8  79                 	db	121	;'y'
   190  00FEC9  20                 	db	32
   191  00FECA  41                 	db	65	;'A'
   192  00FECB  6C                 	db	108	;'l'
   193  00FECC  69                 	db	105	;'i'
   194  00FECD  21                 	db	33
   195  00FECE  00                 	db	0
   196  00FECF                     STR_17:
   197  00FECF  49                 	db	73	;'I'
   198  00FED0  6E                 	db	110	;'n'
   199  00FED1  64                 	db	100	;'d'
   200  00FED2  69                 	db	105	;'i'
   201  00FED3  76                 	db	118	;'v'
   202  00FED4  69                 	db	105	;'i'
   203  00FED5  64                 	db	100	;'d'
   204  00FED6  75                 	db	117	;'u'
   205  00FED7  61                 	db	97	;'a'
   206  00FED8  6C                 	db	108	;'l'
   207  00FED9  20                 	db	32
   208  00FEDA  49                 	db	73	;'I'
   209  00FEDB  6E                 	db	110	;'n'
   210  00FEDC  66                 	db	102	;'f'
   211  00FEDD  6F                 	db	111	;'o'
   212  00FEDE  00                 	db	0
   213  00FEDF                     STR_19:
   214  00FEDF  50                 	db	80	;'P'
   215  00FEE0  72                 	db	114	;'r'
   216  00FEE1  65                 	db	101	;'e'
   217  00FEE2  73                 	db	115	;'s'
   218  00FEE3  73                 	db	115	;'s'
   219  00FEE4  20                 	db	32
   220  00FEE5  30                 	db	48	;'0'
   221  00FEE6  20                 	db	32
   222  00FEE7  74                 	db	116	;'t'
   223  00FEE8  6F                 	db	111	;'o'
   224  00FEE9  20                 	db	32
   225  00FEEA  25                 	db	37
   226  00FEEB  64                 	db	100	;'d'
   227  00FEEC  20                 	db	32
   228  00FEED  00                 	db	0
   229  00FEEE                     STR_4:
   230  00FEEE  48                 	db	72	;'H'
   231  00FEEF  65                 	db	101	;'e'
   232  00FEF0  20                 	db	32
   233  00FEF1  67                 	db	103	;'g'
   234  00FEF2  65                 	db	101	;'e'
   235  00FEF3  74                 	db	116	;'t'
   236  00FEF4  74                 	db	116	;'t'
   237  00FEF5  69                 	db	105	;'i'
   238  00FEF6  6E                 	db	110	;'n'
   239  00FEF7  20                 	db	32
   240  00FEF8  68                 	db	104	;'h'
   241  00FEF9  6F                 	db	111	;'o'
   242  00FEFA  74                 	db	116	;'t'
   243  00FEFB  20                 	db	32
   244  00FEFC  00                 	db	0
   245  00FEFD                     STR_10:
   246  00FEFD  4F                 	db	79	;'O'
   247  00FEFE  70                 	db	112	;'p'
   248  00FEFF  65                 	db	101	;'e'
   249  00FF00  72                 	db	114	;'r'
   250  00FF01  61                 	db	97	;'a'
   251  00FF02  74                 	db	116	;'t'
   252  00FF03  69                 	db	105	;'i'
   253  00FF04  6F                 	db	111	;'o'
   254  00FF05  6E                 	db	110	;'n'
   255  00FF06  20                 	db	32
   256  00FF07  54                 	db	84	;'T'
   257  00FF08  69                 	db	105	;'i'
   258  00FF09  6D                 	db	109	;'m'
   259  00FF0A  65                 	db	101	;'e'
   260  00FF0B  00                 	db	0
   261  00FF0C                     STR_21:
   262  00FF0C  44                 	db	68	;'D'
   263  00FF0D  69                 	db	105	;'i'
   264  00FF0E  73                 	db	115	;'s'
   265  00FF0F  74                 	db	116	;'t'
   266  00FF10  61                 	db	97	;'a'
   267  00FF11  6E                 	db	110	;'n'
   268  00FF12  63                 	db	99	;'c'
   269  00FF13  65                 	db	101	;'e'
   270  00FF14  20                 	db	32
   271  00FF15  25                 	db	37
   272  00FF16  64                 	db	100	;'d'
   273  00FF17  20                 	db	32
   274  00FF18  63                 	db	99	;'c'
   275  00FF19  6D                 	db	109	;'m'
   276  00FF1A  00                 	db	0
   277  00FF1B                     STR_12:
   278  00FF1B  23                 	db	35
   279  00FF1C  20                 	db	32
   280  00FF1D  6F                 	db	111	;'o'
   281  00FF1E  66                 	db	102	;'f'
   282  00FF1F  20                 	db	32
   283  00FF20  43                 	db	67	;'C'
   284  00FF21  61                 	db	97	;'a'
   285  00FF22  6E                 	db	110	;'n'
   286  00FF23  69                 	db	105	;'i'
   287  00FF24  73                 	db	115	;'s'
   288  00FF25  74                 	db	116	;'t'
   289  00FF26  65                 	db	101	;'e'
   290  00FF27  72                 	db	114	;'r'
   291  00FF28  73                 	db	115	;'s'
   292  00FF29  00                 	db	0
   293  00FF2A                     STR_8:
   294  00FF2A  43                 	db	67	;'C'
   295  00FF2B  61                 	db	97	;'a'
   296  00FF2C  6E                 	db	110	;'n'
   297  00FF2D  69                 	db	105	;'i'
   298  00FF2E  73                 	db	115	;'s'
   299  00FF2F  74                 	db	116	;'t'
   300  00FF30  65                 	db	101	;'e'
   301  00FF31  72                 	db	114	;'r'
   302  00FF32  20                 	db	32
   303  00FF33  49                 	db	73	;'I'
   304  00FF34  6E                 	db	110	;'n'
   305  00FF35  64                 	db	100	;'d'
   306  00FF36  65                 	db	101	;'e'
   307  00FF37  78                 	db	120	;'x'
   308  00FF38  00                 	db	0
   309  00FF39                     STR_25:
   310  00FF39  43                 	db	67	;'C'
   311  00FF3A  61                 	db	97	;'a'
   312  00FF3B  6E                 	db	110	;'n'
   313  00FF3C  69                 	db	105	;'i'
   314  00FF3D  73                 	db	115	;'s'
   315  00FF3E  74                 	db	116	;'t'
   316  00FF3F  65                 	db	101	;'e'
   317  00FF40  72                 	db	114	;'r'
   318  00FF41  20                 	db	32
   319  00FF42  45                 	db	69	;'E'
   320  00FF43  6D                 	db	109	;'m'
   321  00FF44  70                 	db	112	;'p'
   322  00FF45  74                 	db	116	;'t'
   323  00FF46  79                 	db	121	;'y'
   324  00FF47  00                 	db	0
   325  00FF48                     STR_29:
   326  00FF48  4E                 	db	78	;'N'
   327  00FF49  6F                 	db	111	;'o'
   328  00FF4A  20                 	db	32
   329  00FF4B  42                 	db	66	;'B'
   330  00FF4C  61                 	db	97	;'a'
   331  00FF4D  6C                 	db	108	;'l'
   332  00FF4E  6C                 	db	108	;'l'
   333  00FF4F  20                 	db	32
   334  00FF50  41                 	db	65	;'A'
   335  00FF51  64                 	db	100	;'d'
   336  00FF52  64                 	db	100	;'d'
   337  00FF53  65                 	db	101	;'e'
   338  00FF54  64                 	db	100	;'d'
   339  00FF55  00                 	db	0
   340  00FF56                     STR_24:
   341  00FF56  43                 	db	67	;'C'
   342  00FF57  61                 	db	97	;'a'
   343  00FF58  6E                 	db	110	;'n'
   344  00FF59  69                 	db	105	;'i'
   345  00FF5A  73                 	db	115	;'s'
   346  00FF5B  74                 	db	116	;'t'
   347  00FF5C  65                 	db	101	;'e'
   348  00FF5D  72                 	db	114	;'r'
   349  00FF5E  20                 	db	32
   350  00FF5F  46                 	db	70	;'F'
   351  00FF60  75                 	db	117	;'u'
   352  00FF61  6C                 	db	108	;'l'
   353  00FF62  6C                 	db	108	;'l'
   354  00FF63  00                 	db	0
   355  00FF64                     STR_2:
   356  00FF64  41                 	db	65	;'A'
   357  00FF65  20                 	db	32
   358  00FF66  66                 	db	102	;'f'
   359  00FF67  6F                 	db	111	;'o'
   360  00FF68  72                 	db	114	;'r'
   361  00FF69  20                 	db	32
   362  00FF6A  41                 	db	65	;'A'
   363  00FF6B  6C                 	db	108	;'l'
   364  00FF6C  69                 	db	105	;'i'
   365  00FF6D  20                 	db	32
   366  00FF6E  3B                 	db	59	;';'
   367  00FF6F  29                 	db	41
   368  00FF70  00                 	db	0
   369  00FF71                     STR_13:
   370  00FF71  25                 	db	37
   371  00FF72  64                 	db	100	;'d'
   372  00FF73  20                 	db	32
   373  00FF74  43                 	db	67	;'C'
   374  00FF75  61                 	db	97	;'a'
   375  00FF76  6E                 	db	110	;'n'
   376  00FF77  69                 	db	105	;'i'
   377  00FF78  73                 	db	115	;'s'
   378  00FF79  74                 	db	116	;'t'
   379  00FF7A  65                 	db	101	;'e'
   380  00FF7B  72                 	db	114	;'r'
   381  00FF7C  73                 	db	115	;'s'
   382  00FF7D  00                 	db	0
   383  00FF7E                     STR_9:
   384  00FF7E  73                 	db	115	;'s'
   385  00FF7F  74                 	db	116	;'t'
   386  00FF80  61                 	db	97	;'a'
   387  00FF81  72                 	db	114	;'r'
   388  00FF82  74                 	db	116	;'t'
   389  00FF83  73                 	db	115	;'s'
   390  00FF84  20                 	db	32
   391  00FF85  61                 	db	97	;'a'
   392  00FF86  74                 	db	116	;'t'
   393  00FF87  20                 	db	32
   394  00FF88  30                 	db	48	;'0'
   395  00FF89  00                 	db	0
   396  00FF8A                     STR_20:
   397  00FF8A  43                 	db	67	;'C'
   398  00FF8B  61                 	db	97	;'a'
   399  00FF8C  6E                 	db	110	;'n'
   400  00FF8D  73                 	db	115	;'s'
   401  00FF8E  69                 	db	105	;'i'
   402  00FF8F  74                 	db	116	;'t'
   403  00FF90  65                 	db	101	;'e'
   404  00FF91  72                 	db	114	;'r'
   405  00FF92  20                 	db	32
   406  00FF93  25                 	db	37
   407  00FF94  63                 	db	99	;'c'
   408  00FF95  00                 	db	0
   409  00FF96                     STR_6:
   410  00FF96  41                 	db	65	;'A'
   411  00FF97  6C                 	db	108	;'l'
   412  00FF98  6D                 	db	109	;'m'
   413  00FF99  6F                 	db	111	;'o'
   414  00FF9A  73                 	db	115	;'s'
   415  00FF9B  74                 	db	116	;'t'
   416  00FF9C  20                 	db	32
   417  00FF9D  64                 	db	100	;'d'
   418  00FF9E  6F                 	db	111	;'o'
   419  00FF9F  6E                 	db	110	;'n'
   420  00FFA0  65                 	db	101	;'e'
   421  00FFA1  00                 	db	0
   422  00FFA2                     STR_18:
   423  00FFA2  6F                 	db	111	;'o'
   424  00FFA3  66                 	db	102	;'f'
   425  00FFA4  20                 	db	32
   426  00FFA5  43                 	db	67	;'C'
   427  00FFA6  61                 	db	97	;'a'
   428  00FFA7  6E                 	db	110	;'n'
   429  00FFA8  69                 	db	105	;'i'
   430  00FFA9  73                 	db	115	;'s'
   431  00FFAA  74                 	db	116	;'t'
   432  00FFAB  65                 	db	101	;'e'
   433  00FFAC  72                 	db	114	;'r'
   434  00FFAD  00                 	db	0
   435  00FFAE                     STR_11:
   436  00FFAE  25                 	db	37
   437  00FFAF  64                 	db	100	;'d'
   438  00FFB0  20                 	db	32
   439  00FFB1  73                 	db	115	;'s'
   440  00FFB2  65                 	db	101	;'e'
   441  00FFB3  63                 	db	99	;'c'
   442  00FFB4  6F                 	db	111	;'o'
   443  00FFB5  6E                 	db	110	;'n'
   444  00FFB6  64                 	db	100	;'d'
   445  00FFB7  73                 	db	115	;'s'
   446  00FFB8  00                 	db	0
   447  00FFB9                     STR_14:
   448  00FFB9  23                 	db	35
   449  00FFBA  20                 	db	32
   450  00FFBB  6F                 	db	111	;'o'
   451  00FFBC  66                 	db	102	;'f'
   452  00FFBD  20                 	db	32
   453  00FFBE  42                 	db	66	;'B'
   454  00FFBF  61                 	db	97	;'a'
   455  00FFC0  6C                 	db	108	;'l'
   456  00FFC1  6C                 	db	108	;'l'
   457  00FFC2  73                 	db	115	;'s'
   458  00FFC3  00                 	db	0
   459  00FFC4                     STR_1:
   460  00FFC4  41                 	db	65	;'A'
   461  00FFC5  20                 	db	32
   462  00FFC6  74                 	db	116	;'t'
   463  00FFC7  6F                 	db	111	;'o'
   464  00FFC8  20                 	db	32
   465  00FFC9  73                 	db	115	;'s'
   466  00FFCA  74                 	db	116	;'t'
   467  00FFCB  61                 	db	97	;'a'
   468  00FFCC  72                 	db	114	;'r'
   469  00FFCD  74                 	db	116	;'t'
   470  00FFCE  00                 	db	0
   471  00FFCF                     STR_5:
   472  00FFCF  48                 	db	72	;'H'
   473  00FFD0  69                 	db	105	;'i'
   474  00FFD1  20                 	db	32
   475  00FFD2  43                 	db	67	;'C'
   476  00FFD3  75                 	db	117	;'u'
   477  00FFD4  6C                 	db	108	;'l'
   478  00FFD5  6C                 	db	108	;'l'
   479  00FFD6  20                 	db	32
   480  00FFD7  21                 	db	33
   481  00FFD8  00                 	db	0
   482  00FFD9                     STR_22:
   483  00FFD9  2A                 	db	42
   484  00FFDA  20                 	db	32
   485  00FFDB  74                 	db	116	;'t'
   486  00FFDC  6F                 	db	111	;'o'
   487  00FFDD  20                 	db	32
   488  00FFDE  65                 	db	101	;'e'
   489  00FFDF  78                 	db	120	;'x'
   490  00FFE0  69                 	db	105	;'i'
   491  00FFE1  74                 	db	116	;'t'
   492  00FFE2  00                 	db	0
   493  00FFE3                     STR_7:
   494  00FFE3  41                 	db	65	;'A'
   495  00FFE4  4E                 	db	78	;'N'
   496  00FFE5  44                 	db	68	;'D'
   497  00FFE6  20                 	db	32
   498  00FFE7  44                 	db	68	;'D'
   499  00FFE8  4F                 	db	79	;'O'
   500  00FFE9  4E                 	db	78	;'N'
   501  00FFEA  45                 	db	69	;'E'
   502  00FFEB  00                 	db	0
   503  00FFEC                     STR_15:
   504  00FFEC  73                 	db	115	;'s'
   505  00FFED  75                 	db	117	;'u'
   506  00FFEE  70                 	db	112	;'p'
   507  00FFEF  70                 	db	112	;'p'
   508  00FFF0  6C                 	db	108	;'l'
   509  00FFF1  69                 	db	105	;'i'
   510  00FFF2  65                 	db	101	;'e'
   511  00FFF3  64                 	db	100	;'d'
   512  00FFF4  00                 	db	0
   513  00FFF5                     STR_16:
   514  00FFF5  25                 	db	37
   515  00FFF6  64                 	db	100	;'d'
   516  00FFF7  20                 	db	32
   517  00FFF8  62                 	db	98	;'b'
   518  00FFF9  61                 	db	97	;'a'
   519  00FFFA  6C                 	db	108	;'l'
   520  00FFFB  6C                 	db	108	;'l'
   521  00FFFC  73                 	db	115	;'s'
   522  00FFFD  00                 	db	0
   523  0000                     
   524                           ; #config settings
   525  00FFFE  00                 	db	0	; dummy byte at the end
   526  0000                     
   527                           	psect	cinit
   528  00100A                     __pcinit:
   529                           	opt callstack 0
   530  00100A                     start_initialization:
   531                           	opt callstack 0
   532  00100A                     __initialization:
   533                           	opt callstack 0
   534                           
   535                           ; Initialize objects allocated to BANK0 (66 bytes)
   536                           ; load TBLPTR registers with __pidataBANK0
   537  00100A  0E50               	movlw	low __pidataBANK0
   538  00100C  6EF6               	movwf	tblptrl,c
   539  00100E  0E10               	movlw	high __pidataBANK0
   540  001010  6EF7               	movwf	tblptrh,c
   541  001012  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   542  001014  6EF8               	movwf	tblptru,c
   543  001016  EE00  F080         	lfsr	0,__pdataBANK0
   544  00101A  EE10 F042          	lfsr	1,66
   545  00101E                     copy_data0:
   546  00101E  0009               	tblrd		*+
   547  001020  CFF5 FFEE          	movff	tablat,postinc0
   548  001024  50E5               	movf	postdec1,w,c
   549  001026  50E1               	movf	fsr1l,w,c
   550  001028  E1FA               	bnz	copy_data0
   551                           
   552                           ; Clear objects allocated to BANK0 (35 bytes)
   553  00102A  EE00  F0C2         	lfsr	0,__pbssBANK0
   554  00102E  0E23               	movlw	35
   555  001030                     clear_0:
   556  001030  6AEE               	clrf	postinc0,c
   557  001032  06E8               	decf	wreg,f,c
   558  001034  E1FD               	bnz	clear_0
   559                           
   560                           ; Clear objects allocated to COMRAM (8 bytes)
   561  001036  EE00  F06C         	lfsr	0,__pbssCOMRAM
   562  00103A  0E08               	movlw	8
   563  00103C                     clear_1:
   564  00103C  6AEE               	clrf	postinc0,c
   565  00103E  06E8               	decf	wreg,f,c
   566  001040  E1FD               	bnz	clear_1
   567  001042                     end_of_initialization:
   568                           	opt callstack 0
   569  001042                     __end_of__initialization:
   570                           	opt callstack 0
   571  001042  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   572  001044  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   573  001046  0E00               	movlw	low (__Lmediumconst shr (0+16))
   574  001048  6EF8               	movwf	tblptru,c
   575  00104A  0100               	movlb	0
   576  00104C  EF09  F000         	goto	_main	;jump to C main() function
   577                           
   578                           	psect	bssCOMRAM
   579  00006C                     __pbssCOMRAM:
   580                           	opt callstack 0
   581  00006C                     _nout:
   582                           	opt callstack 0
   583  00006C                     	ds	2
   584  00006E                     _width:
   585                           	opt callstack 0
   586  00006E                     	ds	2
   587  000070                     _prec:
   588                           	opt callstack 0
   589  000070                     	ds	2
   590  000072                     _flags:
   591                           	opt callstack 0
   592  000072                     	ds	2
   593                           
   594                           	psect	bssBANK0
   595  0000C2                     __pbssBANK0:
   596                           	opt callstack 0
   597  0000C2                     _start:
   598                           	opt callstack 0
   599  0000C2                     	ds	1
   600  0000C3                     _exit_key:
   601                           	opt callstack 0
   602  0000C3                     	ds	1
   603  0000C4                     _key_was_pressed:
   604                           	opt callstack 0
   605  0000C4                     	ds	1
   606  0000C5                     _dbuf:
   607                           	opt callstack 0
   608  0000C5                     	ds	32
   609                           
   610                           	psect	dataBANK0
   611  000080                     __pdataBANK0:
   612                           	opt callstack 0
   613  000080                     _BallDispensed:
   614                           	opt callstack 0
   615  000080                     	ds	20
   616  000094                     _DistanceCanister:
   617                           	opt callstack 0
   618  000094                     	ds	20
   619  0000A8                     _State:
   620                           	opt callstack 0
   621  0000A8                     	ds	20
   622  0000BC                     _balls:
   623                           	opt callstack 0
   624  0000BC                     	ds	2
   625  0000BE                     _Canister:
   626                           	opt callstack 0
   627  0000BE                     	ds	2
   628  0000C0                     _time:
   629                           	opt callstack 0
   630  0000C0                     	ds	2
   631                           
   632                           	psect	cstackBANK0
   633  0000E5                     __pcstackBANK0:
   634                           	opt callstack 0
   635  0000E5                     	ds	2
   636  0000E7                     printf@ap:
   637                           	opt callstack 0
   638                           
   639                           ; 2 bytes @ 0x2
   640  0000E7                     	ds	2
   641  0000E9                     ??_main:
   642                           
   643                           ; 1 bytes @ 0x4
   644  0000E9                     	ds	2
   645  0000EB                     main@tick:
   646                           	opt callstack 0
   647                           
   648                           ; 2 bytes @ 0x6
   649  0000EB                     	ds	2
   650  0000ED                     main@miniTick:
   651                           	opt callstack 0
   652                           
   653                           ; 2 bytes @ 0x8
   654  0000ED                     	ds	2
   655  0000EF                     main@number_pressed:
   656                           	opt callstack 0
   657                           
   658                           ; 2 bytes @ 0xA
   659  0000EF                     	ds	2
   660  0000F1                     main@miniClear:
   661                           	opt callstack 0
   662                           
   663                           ; 2 bytes @ 0xC
   664  0000F1                     	ds	2
   665  0000F3                     main@keypress:
   666                           	opt callstack 0
   667                           
   668                           ; 1 bytes @ 0xE
   669  0000F3                     	ds	1
   670  0000F4                     main@miniState:
   671                           	opt callstack 0
   672                           
   673                           ; 2 bytes @ 0xF
   674  0000F4                     	ds	2
   675  0000F6                     main@clear:
   676                           	opt callstack 0
   677                           
   678                           ; 2 bytes @ 0x11
   679  0000F6                     	ds	2
   680  0000F8                     main@state:
   681                           	opt callstack 0
   682                           
   683                           ; 2 bytes @ 0x13
   684  0000F8                     	ds	2
   685                           
   686                           	psect	cstackCOMRAM
   687  000001                     __pcstackCOMRAM:
   688                           	opt callstack 0
   689  000001                     ??_interruptHandler:
   690                           
   691                           ; 1 bytes @ 0x0
   692  000001                     	ds	8
   693  000009                     interruptHandler@i:
   694                           	opt callstack 0
   695                           
   696                           ; 2 bytes @ 0x8
   697  000009                     	ds	2
   698  00000B                     interruptHandler@keypress:
   699                           	opt callstack 0
   700                           
   701                           ; 1 bytes @ 0xA
   702  00000B                     	ds	1
   703  00000C                     ?_strlen:
   704                           	opt callstack 0
   705  00000C                     ?___awmod:
   706                           	opt callstack 0
   707  00000C                     ?___aodiv:
   708                           	opt callstack 0
   709  00000C                     ?___aomod:
   710                           	opt callstack 0
   711  00000C                     pulse_e@interruptState:
   712                           	opt callstack 0
   713  00000C                     ___awmod@dividend:
   714                           	opt callstack 0
   715  00000C                     strlen@s:
   716                           	opt callstack 0
   717  00000C                     ___aodiv@dividend:
   718                           	opt callstack 0
   719  00000C                     ___aomod@dividend:
   720                           	opt callstack 0
   721                           
   722                           ; 8 bytes @ 0xB
   723  00000C                     	ds	1
   724  00000D                     send_nibble@data:
   725                           	opt callstack 0
   726                           
   727                           ; 1 bytes @ 0xC
   728  00000D                     	ds	1
   729  00000E                     send_byte@data:
   730                           	opt callstack 0
   731  00000E                     ___awmod@divisor:
   732                           	opt callstack 0
   733  00000E                     strlen@a:
   734                           	opt callstack 0
   735                           
   736                           ; 2 bytes @ 0xD
   737  00000E                     	ds	1
   738  00000F                     lcdInst@data:
   739                           	opt callstack 0
   740  00000F                     putch@data:
   741                           	opt callstack 0
   742                           
   743                           ; 1 bytes @ 0xE
   744  00000F                     	ds	1
   745  000010                     ??_initLCD:
   746  000010                     ___awmod@counter:
   747                           	opt callstack 0
   748  000010                     fputc@c:
   749                           	opt callstack 0
   750                           
   751                           ; 2 bytes @ 0xF
   752  000010                     	ds	1
   753  000011                     ___awmod@sign:
   754                           	opt callstack 0
   755                           
   756                           ; 1 bytes @ 0x10
   757  000011                     	ds	1
   758  000012                     fputc@fp:
   759                           	opt callstack 0
   760                           
   761                           ; 2 bytes @ 0x11
   762  000012                     	ds	2
   763  000014                     ??_fputc:
   764  000014                     ___aodiv@divisor:
   765                           	opt callstack 0
   766  000014                     ___aomod@divisor:
   767                           	opt callstack 0
   768                           
   769                           ; 8 bytes @ 0x13
   770  000014                     	ds	5
   771  000019                     fputs@s:
   772                           	opt callstack 0
   773                           
   774                           ; 2 bytes @ 0x18
   775  000019                     	ds	2
   776  00001B                     fputs@fp:
   777                           	opt callstack 0
   778                           
   779                           ; 2 bytes @ 0x1A
   780  00001B                     	ds	1
   781  00001C                     ___aodiv@counter:
   782                           	opt callstack 0
   783  00001C                     ___aomod@counter:
   784                           	opt callstack 0
   785                           
   786                           ; 1 bytes @ 0x1B
   787  00001C                     	ds	1
   788  00001D                     ___aodiv@sign:
   789                           	opt callstack 0
   790  00001D                     ___aomod@sign:
   791                           	opt callstack 0
   792  00001D                     fputs@c:
   793                           	opt callstack 0
   794                           
   795                           ; 1 bytes @ 0x1C
   796  00001D                     	ds	1
   797  00001E                     ?_abs:
   798                           	opt callstack 0
   799  00001E                     abs@a:
   800                           	opt callstack 0
   801  00001E                     fputs@i:
   802                           	opt callstack 0
   803  00001E                     ___aodiv@quotient:
   804                           	opt callstack 0
   805                           
   806                           ; 8 bytes @ 0x1D
   807  00001E                     	ds	2
   808  000020                     ??_abs:
   809  000020                     ?_pad:
   810                           	opt callstack 0
   811  000020                     pad@fp:
   812                           	opt callstack 0
   813                           
   814                           ; 2 bytes @ 0x1F
   815  000020                     	ds	2
   816  000022                     pad@buf:
   817                           	opt callstack 0
   818                           
   819                           ; 2 bytes @ 0x21
   820  000022                     	ds	2
   821  000024                     pad@p:
   822                           	opt callstack 0
   823                           
   824                           ; 2 bytes @ 0x23
   825  000024                     	ds	2
   826  000026                     ??_pad:
   827                           
   828                           ; 1 bytes @ 0x25
   829  000026                     	ds	1
   830  000027                     pad@i:
   831                           	opt callstack 0
   832                           
   833                           ; 2 bytes @ 0x26
   834  000027                     	ds	2
   835  000029                     pad@w:
   836                           	opt callstack 0
   837                           
   838                           ; 2 bytes @ 0x28
   839  000029                     	ds	2
   840  00002B                     ?_ctoa:
   841                           	opt callstack 0
   842  00002B                     ?_dtoa:
   843                           	opt callstack 0
   844  00002B                     ctoa@fp:
   845                           	opt callstack 0
   846  00002B                     dtoa@fp:
   847                           	opt callstack 0
   848                           
   849                           ; 2 bytes @ 0x2A
   850  00002B                     	ds	2
   851  00002D                     ctoa@c:
   852                           	opt callstack 0
   853  00002D                     dtoa@d:
   854                           	opt callstack 0
   855                           
   856                           ; 8 bytes @ 0x2C
   857  00002D                     	ds	1
   858  00002E                     ctoa@w:
   859                           	opt callstack 0
   860                           
   861                           ; 2 bytes @ 0x2D
   862  00002E                     	ds	7
   863  000035                     ??_dtoa:
   864                           
   865                           ; 1 bytes @ 0x34
   866  000035                     	ds	8
   867  00003D                     _dtoa$329:
   868                           	opt callstack 0
   869                           
   870                           ; 2 bytes @ 0x3C
   871  00003D                     	ds	2
   872  00003F                     dtoa@p:
   873                           	opt callstack 0
   874                           
   875                           ; 2 bytes @ 0x3E
   876  00003F                     	ds	2
   877  000041                     dtoa@w:
   878                           	opt callstack 0
   879                           
   880                           ; 2 bytes @ 0x40
   881  000041                     	ds	2
   882  000043                     dtoa@s:
   883                           	opt callstack 0
   884                           
   885                           ; 2 bytes @ 0x42
   886  000043                     	ds	2
   887  000045                     dtoa@n:
   888                           	opt callstack 0
   889                           
   890                           ; 8 bytes @ 0x44
   891  000045                     	ds	8
   892  00004D                     dtoa@i:
   893                           	opt callstack 0
   894                           
   895                           ; 2 bytes @ 0x4C
   896  00004D                     	ds	2
   897  00004F                     ?_vfpfcnvrt:
   898                           	opt callstack 0
   899  00004F                     vfpfcnvrt@fp:
   900                           	opt callstack 0
   901                           
   902                           ; 2 bytes @ 0x4E
   903  00004F                     	ds	2
   904  000051                     vfpfcnvrt@fmt:
   905                           	opt callstack 0
   906                           
   907                           ; 2 bytes @ 0x50
   908  000051                     	ds	2
   909  000053                     vfpfcnvrt@ap:
   910                           	opt callstack 0
   911                           
   912                           ; 2 bytes @ 0x52
   913  000053                     	ds	2
   914  000055                     ??_vfpfcnvrt:
   915                           
   916                           ; 1 bytes @ 0x54
   917  000055                     	ds	2
   918  000057                     vfpfcnvrt@ll:
   919                           	opt callstack 0
   920                           
   921                           ; 8 bytes @ 0x56
   922  000057                     	ds	8
   923  00005F                     vfpfcnvrt@c:
   924                           	opt callstack 0
   925                           
   926                           ; 1 bytes @ 0x5E
   927  00005F                     	ds	1
   928  000060                     ?_vfprintf:
   929                           	opt callstack 0
   930  000060                     vfprintf@fp:
   931                           	opt callstack 0
   932                           
   933                           ; 2 bytes @ 0x5F
   934  000060                     	ds	2
   935  000062                     vfprintf@fmt:
   936                           	opt callstack 0
   937                           
   938                           ; 2 bytes @ 0x61
   939  000062                     	ds	2
   940  000064                     vfprintf@ap:
   941                           	opt callstack 0
   942                           
   943                           ; 2 bytes @ 0x63
   944  000064                     	ds	2
   945  000066                     vfprintf@cfmt:
   946                           	opt callstack 0
   947                           
   948                           ; 2 bytes @ 0x65
   949  000066                     	ds	2
   950  000068                     ?_printf:
   951                           	opt callstack 0
   952  000068                     printf@fmt:
   953                           	opt callstack 0
   954                           
   955                           ; 2 bytes @ 0x67
   956  000068                     	ds	4
   957  00006C                     
   958                           ; 1 bytes @ 0x6B
   959 ;;
   960 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   961 ;;
   962 ;; *************** function _main *****************
   963 ;; Defined at:
   964 ;;		line 37 in file "main.c"
   965 ;; Parameters:    Size  Location     Type
   966 ;;		None
   967 ;; Auto vars:     Size  Location     Type
   968 ;;  miniState       2   15[BANK0 ] int 
   969 ;;  miniClear       2   12[BANK0 ] int 
   970 ;;  number_press    2   10[BANK0 ] int 
   971 ;;  miniTick        2    8[BANK0 ] int 
   972 ;;  keypress        1   14[BANK0 ] unsigned char 
   973 ;;  state           2   19[BANK0 ] int 
   974 ;;  clear           2   17[BANK0 ] int 
   975 ;;  tick            2    6[BANK0 ] int 
   976 ;; Return value:  Size  Location     Type
   977 ;;                  1    wreg      void 
   978 ;; Registers used:
   979 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   980 ;; Tracked objects:
   981 ;;		On entry : 0/0
   982 ;;		On exit  : 0/0
   983 ;;		Unchanged: 0/0
   984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   986 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   987 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   988 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   989 ;;Total ram usage:       17 bytes
   990 ;; Hardware stack levels required when called:   12
   991 ;; This function calls:
   992 ;;		___awmod
   993 ;;		_initLCD
   994 ;;		_lcdInst
   995 ;;		_printf
   996 ;; This function is called by:
   997 ;;		Startup code after reset
   998 ;; This function uses a non-reentrant model
   999 ;;
  1000                           
  1001                           	psect	text0
  1002  000012                     __ptext0:
  1003                           	opt callstack 0
  1004  000012                     _main:
  1005                           	opt callstack 19
  1006                           
  1007                           ;main.c: 41:     LATD = 0x00;
  1008                           
  1009                           ;incstack = 0
  1010  000012  0E00               	movlw	0
  1011  000014  6E8C               	movwf	3980,c	;volatile
  1012                           
  1013                           ;main.c: 42:     TRISD = 0x00;
  1014  000016  0E00               	movlw	0
  1015  000018  6E95               	movwf	3989,c	;volatile
  1016                           
  1017                           ;main.c: 45:     ADCON1 = 0b00001111;
  1018  00001A  0E0F               	movlw	15
  1019  00001C  6EC1               	movwf	4033,c	;volatile
  1020                           
  1021                           ;main.c: 48:     INT1IE = 1;
  1022  00001E  86F0               	bsf	4080,3,c	;volatile
  1023                           
  1024                           ;main.c: 51:     initLCD();
  1025  000020  EC80  F007         	call	_initLCD	;wreg free
  1026                           
  1027                           ;main.c: 54:     (INTCONbits.GIE = 1);
  1028  000024  8EF2               	bsf	4082,7,c	;volatile
  1029                           
  1030                           ;main.c: 57:     int state = 0;
  1031  000026  0E00               	movlw	0
  1032  000028  0100               	movlb	0	; () banked
  1033  00002A  6FF9               	movwf	(main@state+1)& (0+255),b
  1034  00002C  0E00               	movlw	0
  1035  00002E  6FF8               	movwf	main@state& (0+255),b
  1036                           
  1037                           ; BSR set to: 0
  1038                           ;main.c: 58:     int tick = 0;
  1039  000030  0E00               	movlw	0
  1040  000032  6FEC               	movwf	(main@tick+1)& (0+255),b
  1041  000034  0E00               	movlw	0
  1042  000036  6FEB               	movwf	main@tick& (0+255),b
  1043                           
  1044                           ; BSR set to: 0
  1045                           ;main.c: 59:     int clear = 1;
  1046  000038  0E00               	movlw	0
  1047  00003A  6FF7               	movwf	(main@clear+1)& (0+255),b
  1048  00003C  0E01               	movlw	1
  1049  00003E  6FF6               	movwf	main@clear& (0+255),b
  1050                           
  1051                           ;main.c: 64:     { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
  1052  000040  0E0C               	movlw	12
  1053  000042  ECD6  F008         	call	_lcdInst
  1054                           
  1055                           ;main.c: 65:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1056  000046  0E01               	movlw	1
  1057  000048  ECD6  F008         	call	_lcdInst
  1058  00004C  0E11               	movlw	17
  1059  00004E  0100               	movlb	0	; () banked
  1060  000050  6FE9               	movwf	??_main& (0+255),b
  1061  000052  0E3A               	movlw	58
  1062  000054                     u2337:
  1063  000054  2EE8               	decfsz	wreg,f,c
  1064  000056  D7FE               	bra	u2337
  1065  000058  2FE9               	decfsz	??_main& (0+255),f,b
  1066  00005A  D7FC               	bra	u2337
  1067  00005C  F000               	nop	
  1068                           
  1069                           ;main.c: 66:     printf("A to start");
  1070  00005E  0EC4               	movlw	low STR_1
  1071  000060  6E68               	movwf	printf@fmt,c
  1072  000062  0EFF               	movlw	high STR_1
  1073  000064  6E69               	movwf	printf@fmt+1,c
  1074  000066  ECA8  F008         	call	_printf	;wreg free
  1075  00006A  0E90               	movlw	144
  1076  00006C  ECD6  F008         	call	_lcdInst
  1077                           
  1078                           ;main.c: 68:     printf("A for Ali ;)");
  1079  000070  0E64               	movlw	low STR_2
  1080  000072  6E68               	movwf	printf@fmt,c
  1081  000074  0EFF               	movlw	high STR_2
  1082  000076  6E69               	movwf	printf@fmt+1,c
  1083  000078  ECA8  F008         	call	_printf	;wreg free
  1084  00007C                     l2630:
  1085  00007C  0100               	movlb	0	; () banked
  1086  00007E  51C2               	movf	_start& (0+255),w,b	;volatile
  1087  000080  B4D8               	btfsc	status,2,c
  1088  000082  D7FC               	goto	l2630
  1089                           
  1090                           ; BSR set to: 0
  1091                           ;main.c: 72:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1092  000084  0E01               	movlw	1
  1093  000086  ECD6  F008         	call	_lcdInst
  1094  00008A  0E11               	movlw	17
  1095  00008C  0100               	movlb	0	; () banked
  1096  00008E  6FE9               	movwf	??_main& (0+255),b
  1097  000090  0E3A               	movlw	58
  1098  000092                     u2347:
  1099  000092  2EE8               	decfsz	wreg,f,c
  1100  000094  D7FE               	bra	u2347
  1101  000096  2FE9               	decfsz	??_main& (0+255),f,b
  1102  000098  D7FC               	bra	u2347
  1103  00009A  F000               	nop	
  1104                           
  1105                           ;main.c: 73:     printf("It's ya boy Ali!");
  1106  00009C  0EBE               	movlw	low STR_3
  1107  00009E  6E68               	movwf	printf@fmt,c
  1108  0000A0  0EFE               	movlw	high STR_3
  1109  0000A2  6E69               	movwf	printf@fmt+1,c
  1110  0000A4  ECA8  F008         	call	_printf	;wreg free
  1111                           
  1112                           ;main.c: 74:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1113  0000A8  0E33               	movlw	51
  1114  0000AA  0100               	movlb	0	; () banked
  1115  0000AC  6FEA               	movwf	(??_main+1)& (0+255),b
  1116  0000AE  0EBB               	movlw	187
  1117  0000B0  6FE9               	movwf	??_main& (0+255),b
  1118  0000B2  0EDF               	movlw	223
  1119  0000B4                     u2357:
  1120  0000B4  2EE8               	decfsz	wreg,f,c
  1121  0000B6  D7FE               	bra	u2357
  1122  0000B8  2FE9               	decfsz	??_main& (0+255),f,b
  1123  0000BA  D7FC               	bra	u2357
  1124  0000BC  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1125  0000BE  D7FA               	bra	u2357
  1126  0000C0  D000               	nop2	
  1127  0000C2  0E90               	movlw	144
  1128  0000C4  ECD6  F008         	call	_lcdInst
  1129                           
  1130                           ;main.c: 76:     printf("He gettin hot ");
  1131  0000C8  0EEE               	movlw	low STR_4
  1132  0000CA  6E68               	movwf	printf@fmt,c
  1133  0000CC  0EFE               	movlw	high STR_4
  1134  0000CE  6E69               	movwf	printf@fmt+1,c
  1135  0000D0  ECA8  F008         	call	_printf	;wreg free
  1136                           
  1137                           ;main.c: 77:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1138  0000D4  0E33               	movlw	51
  1139  0000D6  0100               	movlb	0	; () banked
  1140  0000D8  6FEA               	movwf	(??_main+1)& (0+255),b
  1141  0000DA  0EBB               	movlw	187
  1142  0000DC  6FE9               	movwf	??_main& (0+255),b
  1143  0000DE  0EDF               	movlw	223
  1144  0000E0                     u2367:
  1145  0000E0  2EE8               	decfsz	wreg,f,c
  1146  0000E2  D7FE               	bra	u2367
  1147  0000E4  2FE9               	decfsz	??_main& (0+255),f,b
  1148  0000E6  D7FC               	bra	u2367
  1149  0000E8  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1150  0000EA  D7FA               	bra	u2367
  1151  0000EC  D000               	nop2	
  1152                           
  1153                           ;main.c: 79:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1154  0000EE  0E01               	movlw	1
  1155  0000F0  ECD6  F008         	call	_lcdInst
  1156  0000F4  0E11               	movlw	17
  1157  0000F6  0100               	movlb	0	; () banked
  1158  0000F8  6FE9               	movwf	??_main& (0+255),b
  1159  0000FA  0E3A               	movlw	58
  1160  0000FC                     u2377:
  1161  0000FC  2EE8               	decfsz	wreg,f,c
  1162  0000FE  D7FE               	bra	u2377
  1163  000100  2FE9               	decfsz	??_main& (0+255),f,b
  1164  000102  D7FC               	bra	u2377
  1165  000104  F000               	nop	
  1166                           
  1167                           ;main.c: 80:     printf("Hi Cull !");
  1168  000106  0ECF               	movlw	low STR_5
  1169  000108  6E68               	movwf	printf@fmt,c
  1170  00010A  0EFF               	movlw	high STR_5
  1171  00010C  6E69               	movwf	printf@fmt+1,c
  1172  00010E  ECA8  F008         	call	_printf	;wreg free
  1173                           
  1174                           ;main.c: 81:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1175  000112  0E33               	movlw	51
  1176  000114  0100               	movlb	0	; () banked
  1177  000116  6FEA               	movwf	(??_main+1)& (0+255),b
  1178  000118  0EBB               	movlw	187
  1179  00011A  6FE9               	movwf	??_main& (0+255),b
  1180  00011C  0EDF               	movlw	223
  1181  00011E                     u2387:
  1182  00011E  2EE8               	decfsz	wreg,f,c
  1183  000120  D7FE               	bra	u2387
  1184  000122  2FE9               	decfsz	??_main& (0+255),f,b
  1185  000124  D7FC               	bra	u2387
  1186  000126  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1187  000128  D7FA               	bra	u2387
  1188  00012A  D000               	nop2	
  1189  00012C  0E90               	movlw	144
  1190  00012E  ECD6  F008         	call	_lcdInst
  1191                           
  1192                           ;main.c: 83:     printf("Almost done");
  1193  000132  0E96               	movlw	low STR_6
  1194  000134  6E68               	movwf	printf@fmt,c
  1195  000136  0EFF               	movlw	high STR_6
  1196  000138  6E69               	movwf	printf@fmt+1,c
  1197  00013A  ECA8  F008         	call	_printf	;wreg free
  1198  00013E  0ED0               	movlw	208
  1199  000140  ECD6  F008         	call	_lcdInst
  1200                           
  1201                           ;main.c: 85:     _delay((unsigned long)((2000)*(10000000/4000.0)));
  1202  000144  0E1A               	movlw	26
  1203  000146  0100               	movlb	0	; () banked
  1204  000148  6FEA               	movwf	(??_main+1)& (0+255),b
  1205  00014A  0E5E               	movlw	94
  1206  00014C  6FE9               	movwf	??_main& (0+255),b
  1207  00014E  0E6E               	movlw	110
  1208  000150                     u2397:
  1209  000150  2EE8               	decfsz	wreg,f,c
  1210  000152  D7FE               	bra	u2397
  1211  000154  2FE9               	decfsz	??_main& (0+255),f,b
  1212  000156  D7FC               	bra	u2397
  1213  000158  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1214  00015A  D7FA               	bra	u2397
  1215  00015C  F000               	nop	
  1216                           
  1217                           ;main.c: 86:     printf("AND DONE");
  1218  00015E  0EE3               	movlw	low STR_7
  1219  000160  6E68               	movwf	printf@fmt,c
  1220  000162  0EFF               	movlw	high STR_7
  1221  000164  6E69               	movwf	printf@fmt+1,c
  1222  000166  ECA8  F008         	call	_printf	;wreg free
  1223                           
  1224                           ;main.c: 87:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1225  00016A  0E33               	movlw	51
  1226  00016C  0100               	movlb	0	; () banked
  1227  00016E  6FEA               	movwf	(??_main+1)& (0+255),b
  1228  000170  0EBB               	movlw	187
  1229  000172  6FE9               	movwf	??_main& (0+255),b
  1230  000174  0EDF               	movlw	223
  1231  000176                     u2407:
  1232  000176  2EE8               	decfsz	wreg,f,c
  1233  000178  D7FE               	bra	u2407
  1234  00017A  2FE9               	decfsz	??_main& (0+255),f,b
  1235  00017C  D7FC               	bra	u2407
  1236  00017E  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1237  000180  D7FA               	bra	u2407
  1238  000182  D000               	nop2	
  1239                           
  1240                           ;main.c: 91:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1241  000184  0E01               	movlw	1
  1242  000186  ECD6  F008         	call	_lcdInst
  1243  00018A  0E11               	movlw	17
  1244  00018C  0100               	movlb	0	; () banked
  1245  00018E  6FE9               	movwf	??_main& (0+255),b
  1246  000190  0E3A               	movlw	58
  1247  000192                     u2417:
  1248  000192  2EE8               	decfsz	wreg,f,c
  1249  000194  D7FE               	bra	u2417
  1250  000196  2FE9               	decfsz	??_main& (0+255),f,b
  1251  000198  D7FC               	bra	u2417
  1252  00019A  F000               	nop	
  1253                           
  1254                           ;main.c: 92:     printf("Canister Index");
  1255  00019C  0E2A               	movlw	low STR_8
  1256  00019E  6E68               	movwf	printf@fmt,c
  1257  0001A0  0EFF               	movlw	high STR_8
  1258  0001A2  6E69               	movwf	printf@fmt+1,c
  1259  0001A4  ECA8  F008         	call	_printf	;wreg free
  1260  0001A8  0E90               	movlw	144
  1261  0001AA  ECD6  F008         	call	_lcdInst
  1262                           
  1263                           ;main.c: 94:     printf("starts at 0");
  1264  0001AE  0E7E               	movlw	low STR_9
  1265  0001B0  6E68               	movwf	printf@fmt,c
  1266  0001B2  0EFF               	movlw	high STR_9
  1267  0001B4  6E69               	movwf	printf@fmt+1,c
  1268  0001B6  ECA8  F008         	call	_printf	;wreg free
  1269                           
  1270                           ;main.c: 95:     _delay((unsigned long)((4000)*(10000000/4000.0)));
  1271  0001BA  0E33               	movlw	51
  1272  0001BC  0100               	movlb	0	; () banked
  1273  0001BE  6FEA               	movwf	(??_main+1)& (0+255),b
  1274  0001C0  0EBB               	movlw	187
  1275  0001C2  6FE9               	movwf	??_main& (0+255),b
  1276  0001C4  0EDF               	movlw	223
  1277  0001C6                     u2427:
  1278  0001C6  2EE8               	decfsz	wreg,f,c
  1279  0001C8  D7FE               	bra	u2427
  1280  0001CA  2FE9               	decfsz	??_main& (0+255),f,b
  1281  0001CC  D7FC               	bra	u2427
  1282  0001CE  2FEA               	decfsz	(??_main+1)& (0+255),f,b
  1283  0001D0  D7FA               	bra	u2427
  1284  0001D2  D000               	nop2	
  1285                           
  1286                           ;main.c: 102:         if (state == 0 & clear == 1) {
  1287  0001D4  0100               	movlb	0	; () banked
  1288  0001D6  51F8               	movf	main@state& (0+255),w,b
  1289  0001D8  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1290  0001DA  A4D8               	btfss	status,2,c
  1291  0001DC  D028               	goto	l2690
  1292                           
  1293                           ; BSR set to: 0
  1294  0001DE  05F6               	decf	main@clear& (0+255),w,b
  1295  0001E0  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1296  0001E2  A4D8               	btfss	status,2,c
  1297  0001E4  D024               	goto	l2690
  1298                           
  1299                           ; BSR set to: 0
  1300                           ;main.c: 103:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
  1301  0001E6  0E01               	movlw	1
  1302  0001E8  ECD6  F008         	call	_lcdInst
  1303  0001EC  0E11               	movlw	17
  1304  0001EE  0100               	movlb	0	; () banked
  1305  0001F0  6FE9               	movwf	??_main& (0+255),b
  1306  0001F2  0E3A               	movlw	58
  1307  0001F4                     u2437:
  1308  0001F4  2EE8               	decfsz	wreg,f,c
  1309  0001F6  D7FE               	bra	u2437
  1310  0001F8  2FE9               	decfsz	??_main& (0+255),f,b
  1311  0001FA  D7FC               	bra	u2437
  1312  0001FC  F000               	nop	
  1313                           
  1314                           ;main.c: 104:         printf("Operation Time");
  1315  0001FE  0EFD               	movlw	low STR_10
  1316  000200  6E68               	movwf	printf@fmt,c
  1317  000202  0EFE               	movlw	high STR_10
  1318  000204  6E69               	movwf	printf@fmt+1,c
  1319  000206  ECA8  F008         	call	_printf	;wreg free
  1320  00020A  0E90               	movlw	144
  1321  00020C  ECD6  F008         	call	_lcdInst
  1322                           
  1323                           ;main.c: 106:         printf("%d seconds", time);
  1324  000210  0EAE               	movlw	low STR_11
  1325  000212  6E68               	movwf	printf@fmt,c
  1326  000214  0EFF               	movlw	high STR_11
  1327  000216  6E69               	movwf	printf@fmt+1,c
  1328  000218  0E00               	movlw	0
  1329  00021A  6E6B               	movwf	?_printf+3,c
  1330  00021C  0E1E               	movlw	30
  1331  00021E  6E6A               	movwf	?_printf+2,c
  1332  000220  ECA8  F008         	call	_printf	;wreg free
  1333                           
  1334                           ;main.c: 107:         clear = 0;
  1335  000224  0E00               	movlw	0
  1336  000226  0100               	movlb	0	; () banked
  1337  000228  6FF7               	movwf	(main@clear+1)& (0+255),b
  1338  00022A  0E00               	movlw	0
  1339  00022C  6FF6               	movwf	main@clear& (0+255),b
  1340  00022E                     l2690:
  1341                           
  1342                           ; BSR set to: 0
  1343                           ;main.c: 111:         if (state == 1 & clear == 1) {
  1344  00022E  05F8               	decf	main@state& (0+255),w,b
  1345  000230  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1346  000232  A4D8               	btfss	status,2,c
  1347  000234  D02B               	goto	l2708
  1348                           
  1349                           ; BSR set to: 0
  1350  000236  05F6               	decf	main@clear& (0+255),w,b
  1351  000238  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1352  00023A  A4D8               	btfss	status,2,c
  1353  00023C  D027               	goto	l2708
  1354                           
  1355                           ; BSR set to: 0
  1356                           ;main.c: 113:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1357  00023E  0E01               	movlw	1
  1358  000240  ECD6  F008         	call	_lcdInst
  1359  000244  0E11               	movlw	17
  1360  000246  0100               	movlb	0	; () banked
  1361  000248  6FE9               	movwf	??_main& (0+255),b
  1362  00024A  0E3A               	movlw	58
  1363  00024C                     u2447:
  1364  00024C  2EE8               	decfsz	wreg,f,c
  1365  00024E  D7FE               	bra	u2447
  1366  000250  2FE9               	decfsz	??_main& (0+255),f,b
  1367  000252  D7FC               	bra	u2447
  1368  000254  F000               	nop	
  1369                           
  1370                           ;main.c: 114:             { lcdInst(0x80 | LCD_LINE1_ADDR);};
  1371  000256  0E80               	movlw	128
  1372  000258  ECD6  F008         	call	_lcdInst
  1373                           
  1374                           ;main.c: 115:             printf("# of Canisters");
  1375  00025C  0E1B               	movlw	low STR_12
  1376  00025E  6E68               	movwf	printf@fmt,c
  1377  000260  0EFF               	movlw	high STR_12
  1378  000262  6E69               	movwf	printf@fmt+1,c
  1379  000264  ECA8  F008         	call	_printf	;wreg free
  1380  000268  0E90               	movlw	144
  1381  00026A  ECD6  F008         	call	_lcdInst
  1382                           
  1383                           ;main.c: 117:             printf("%d Canisters", Canister);
  1384  00026E  0E71               	movlw	low STR_13
  1385  000270  6E68               	movwf	printf@fmt,c
  1386  000272  0EFF               	movlw	high STR_13
  1387  000274  6E69               	movwf	printf@fmt+1,c
  1388  000276  C0BE  F06A         	movff	_Canister,?_printf+2
  1389  00027A  C0BF  F06B         	movff	_Canister+1,?_printf+3
  1390  00027E  ECA8  F008         	call	_printf	;wreg free
  1391                           
  1392                           ;main.c: 118:             clear = 0;
  1393  000282  0E00               	movlw	0
  1394  000284  0100               	movlb	0	; () banked
  1395  000286  6FF7               	movwf	(main@clear+1)& (0+255),b
  1396  000288  0E00               	movlw	0
  1397  00028A  6FF6               	movwf	main@clear& (0+255),b
  1398  00028C                     l2708:
  1399                           
  1400                           ; BSR set to: 0
  1401                           ;main.c: 122:         if (state == 2 & clear == 1) {
  1402  00028C  0E02               	movlw	2
  1403  00028E  19F8               	xorwf	main@state& (0+255),w,b
  1404  000290  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1405  000292  A4D8               	btfss	status,2,c
  1406  000294  D031               	goto	l2728
  1407                           
  1408                           ; BSR set to: 0
  1409  000296  05F6               	decf	main@clear& (0+255),w,b
  1410  000298  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1411  00029A  A4D8               	btfss	status,2,c
  1412  00029C  D02D               	goto	l2728
  1413                           
  1414                           ; BSR set to: 0
  1415                           ;main.c: 124:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1416  00029E  0E01               	movlw	1
  1417  0002A0  ECD6  F008         	call	_lcdInst
  1418  0002A4  0E11               	movlw	17
  1419  0002A6  0100               	movlb	0	; () banked
  1420  0002A8  6FE9               	movwf	??_main& (0+255),b
  1421  0002AA  0E3A               	movlw	58
  1422  0002AC                     u2457:
  1423  0002AC  2EE8               	decfsz	wreg,f,c
  1424  0002AE  D7FE               	bra	u2457
  1425  0002B0  2FE9               	decfsz	??_main& (0+255),f,b
  1426  0002B2  D7FC               	bra	u2457
  1427  0002B4  F000               	nop	
  1428                           
  1429                           ;main.c: 125:             printf("# of Balls");
  1430  0002B6  0EB9               	movlw	low STR_14
  1431  0002B8  6E68               	movwf	printf@fmt,c
  1432  0002BA  0EFF               	movlw	high STR_14
  1433  0002BC  6E69               	movwf	printf@fmt+1,c
  1434  0002BE  ECA8  F008         	call	_printf	;wreg free
  1435  0002C2  0EC0               	movlw	192
  1436  0002C4  ECD6  F008         	call	_lcdInst
  1437                           
  1438                           ;main.c: 127:             printf("supplied");
  1439  0002C8  0EEC               	movlw	low STR_15
  1440  0002CA  6E68               	movwf	printf@fmt,c
  1441  0002CC  0EFF               	movlw	high STR_15
  1442  0002CE  6E69               	movwf	printf@fmt+1,c
  1443  0002D0  ECA8  F008         	call	_printf	;wreg free
  1444  0002D4  0ED0               	movlw	208
  1445  0002D6  ECD6  F008         	call	_lcdInst
  1446                           
  1447                           ;main.c: 129:             printf("%d balls", balls);
  1448  0002DA  0EF5               	movlw	low STR_16
  1449  0002DC  6E68               	movwf	printf@fmt,c
  1450  0002DE  0EFF               	movlw	high STR_16
  1451  0002E0  6E69               	movwf	printf@fmt+1,c
  1452  0002E2  0E00               	movlw	0
  1453  0002E4  6E6B               	movwf	?_printf+3,c
  1454  0002E6  0E05               	movlw	5
  1455  0002E8  6E6A               	movwf	?_printf+2,c
  1456  0002EA  ECA8  F008         	call	_printf	;wreg free
  1457                           
  1458                           ;main.c: 130:             clear = 0;
  1459  0002EE  0E00               	movlw	0
  1460  0002F0  0100               	movlb	0	; () banked
  1461  0002F2  6FF7               	movwf	(main@clear+1)& (0+255),b
  1462  0002F4  0E00               	movlw	0
  1463  0002F6  6FF6               	movwf	main@clear& (0+255),b
  1464  0002F8                     l2728:
  1465                           
  1466                           ; BSR set to: 0
  1467                           ;main.c: 134:         if (state == 3 & clear == 1) {
  1468  0002F8  0E03               	movlw	3
  1469  0002FA  19F8               	xorwf	main@state& (0+255),w,b
  1470  0002FC  11F9               	iorwf	(main@state+1)& (0+255),w,b
  1471  0002FE  A4D8               	btfss	status,2,c
  1472  000300  D034               	goto	l2748
  1473                           
  1474                           ; BSR set to: 0
  1475  000302  05F6               	decf	main@clear& (0+255),w,b
  1476  000304  11F7               	iorwf	(main@clear+1)& (0+255),w,b
  1477  000306  A4D8               	btfss	status,2,c
  1478  000308  D030               	goto	l2748
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;main.c: 136:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1482  00030A  0E01               	movlw	1
  1483  00030C  ECD6  F008         	call	_lcdInst
  1484  000310  0E11               	movlw	17
  1485  000312  0100               	movlb	0	; () banked
  1486  000314  6FE9               	movwf	??_main& (0+255),b
  1487  000316  0E3A               	movlw	58
  1488  000318                     u2467:
  1489  000318  2EE8               	decfsz	wreg,f,c
  1490  00031A  D7FE               	bra	u2467
  1491  00031C  2FE9               	decfsz	??_main& (0+255),f,b
  1492  00031E  D7FC               	bra	u2467
  1493  000320  F000               	nop	
  1494                           
  1495                           ;main.c: 137:             printf("Individual Info");
  1496  000322  0ECF               	movlw	low STR_17
  1497  000324  6E68               	movwf	printf@fmt,c
  1498  000326  0EFE               	movlw	high STR_17
  1499  000328  6E69               	movwf	printf@fmt+1,c
  1500  00032A  ECA8  F008         	call	_printf	;wreg free
  1501  00032E  0EC0               	movlw	192
  1502  000330  ECD6  F008         	call	_lcdInst
  1503                           
  1504                           ;main.c: 139:             printf("of Canister");
  1505  000334  0EA2               	movlw	low STR_18
  1506  000336  6E68               	movwf	printf@fmt,c
  1507  000338  0EFF               	movlw	high STR_18
  1508  00033A  6E69               	movwf	printf@fmt+1,c
  1509  00033C  ECA8  F008         	call	_printf	;wreg free
  1510  000340  0ED0               	movlw	208
  1511  000342  ECD6  F008         	call	_lcdInst
  1512                           
  1513                           ;main.c: 141:             printf("Press 0 to %d ", Canister-1);
  1514  000346  0EDF               	movlw	low STR_19
  1515  000348  6E68               	movwf	printf@fmt,c
  1516  00034A  0EFE               	movlw	high STR_19
  1517  00034C  6E69               	movwf	printf@fmt+1,c
  1518  00034E  0EFF               	movlw	255
  1519  000350  0100               	movlb	0	; () banked
  1520  000352  25BE               	addwf	_Canister& (0+255),w,b
  1521  000354  6E6A               	movwf	?_printf+2,c
  1522  000356  0EFF               	movlw	255
  1523  000358  21BF               	addwfc	(_Canister+1)& (0+255),w,b
  1524  00035A  6E6B               	movwf	?_printf+3,c
  1525  00035C  ECA8  F008         	call	_printf	;wreg free
  1526                           
  1527                           ;main.c: 142:             clear = 0;
  1528  000360  0E00               	movlw	0
  1529  000362  0100               	movlb	0	; () banked
  1530  000364  6FF7               	movwf	(main@clear+1)& (0+255),b
  1531  000366  0E00               	movlw	0
  1532  000368  6FF6               	movwf	main@clear& (0+255),b
  1533  00036A                     l2748:
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;main.c: 146:         if(key_was_pressed){
  1537  00036A  51C4               	movf	_key_was_pressed& (0+255),w,b	;volatile
  1538  00036C  B4D8               	btfsc	status,2,c
  1539  00036E  D140               	goto	l2846
  1540                           
  1541                           ; BSR set to: 0
  1542                           ;main.c: 148:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  1543  000370  3881               	swapf	3969,w,c	;volatile
  1544  000372  0B0F               	andlw	15
  1545  000374  0B0F               	andlw	15
  1546  000376  6FF3               	movwf	main@keypress& (0+255),b
  1547                           
  1548                           ; BSR set to: 0
  1549                           ;main.c: 149:             int miniTick = 0;
  1550  000378  0E00               	movlw	0
  1551  00037A  6FEE               	movwf	(main@miniTick+1)& (0+255),b
  1552  00037C  0E00               	movlw	0
  1553  00037E  6FED               	movwf	main@miniTick& (0+255),b
  1554                           
  1555                           ; BSR set to: 0
  1556                           ;main.c: 150:             int miniState = 0;
  1557  000380  0E00               	movlw	0
  1558  000382  6FF5               	movwf	(main@miniState+1)& (0+255),b
  1559  000384  0E00               	movlw	0
  1560  000386  6FF4               	movwf	main@miniState& (0+255),b
  1561                           
  1562                           ; BSR set to: 0
  1563                           ;main.c: 151:             int miniClear = 1;
  1564  000388  0E00               	movlw	0
  1565  00038A  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1566  00038C  0E01               	movlw	1
  1567  00038E  6FF1               	movwf	main@miniClear& (0+255),b
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;main.c: 153:             int number_pressed = (int) (keys[keypress] - '0');
  1571  000390  0EA7               	movlw	low _keys
  1572  000392  25F3               	addwf	main@keypress& (0+255),w,b
  1573  000394  6EF6               	movwf	tblptrl,c
  1574  000396  6AF7               	clrf	tblptrh,c
  1575  000398  0EFE               	movlw	high _keys
  1576  00039A  22F7               	addwfc	tblptrh,f,c
  1577  00039C                     	if	0	;There are less than 3 active tblptr bytes
  1578  00039C                     	endif
  1579  00039C  0008               	tblrd		*
  1580  00039E  CFF5 F0E9          	movff	tablat,??_main
  1581  0003A2  0ED0               	movlw	208
  1582  0003A4  25E9               	addwf	??_main& (0+255),w,b
  1583  0003A6  6FEF               	movwf	main@number_pressed& (0+255),b
  1584  0003A8  6BF0               	clrf	(main@number_pressed+1)& (0+255),b
  1585  0003AA  0EFF               	movlw	255
  1586  0003AC  23F0               	addwfc	(main@number_pressed+1)& (0+255),f,b
  1587                           
  1588                           ;main.c: 155:             while(!exit_key) {
  1589  0003AE  D118               	goto	l2842
  1590  0003B0                     l2760:
  1591                           
  1592                           ; BSR set to: 0
  1593                           ;main.c: 157:                 if (miniState == 0 & miniClear == 1) {
  1594  0003B0  51F4               	movf	main@miniState& (0+255),w,b
  1595  0003B2  11F5               	iorwf	(main@miniState+1)& (0+255),w,b
  1596  0003B4  A4D8               	btfss	status,2,c
  1597  0003B6  D046               	goto	l2780
  1598                           
  1599                           ; BSR set to: 0
  1600  0003B8  05F1               	decf	main@miniClear& (0+255),w,b
  1601  0003BA  11F2               	iorwf	(main@miniClear+1)& (0+255),w,b
  1602  0003BC  A4D8               	btfss	status,2,c
  1603  0003BE  D042               	goto	l2780
  1604                           
  1605                           ; BSR set to: 0
  1606                           ;main.c: 159:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1607  0003C0  0E01               	movlw	1
  1608  0003C2  ECD6  F008         	call	_lcdInst
  1609  0003C6  0E11               	movlw	17
  1610  0003C8  0100               	movlb	0	; () banked
  1611  0003CA  6FE9               	movwf	??_main& (0+255),b
  1612  0003CC  0E3A               	movlw	58
  1613  0003CE                     u2477:
  1614  0003CE  2EE8               	decfsz	wreg,f,c
  1615  0003D0  D7FE               	bra	u2477
  1616  0003D2  2FE9               	decfsz	??_main& (0+255),f,b
  1617  0003D4  D7FC               	bra	u2477
  1618  0003D6  F000               	nop	
  1619                           
  1620                           ;main.c: 160:                     printf("Cansiter %c", keys[keypress]);
  1621  0003D8  0E8A               	movlw	low STR_20
  1622  0003DA  6E68               	movwf	printf@fmt,c
  1623  0003DC  0EFF               	movlw	high STR_20
  1624  0003DE  6E69               	movwf	printf@fmt+1,c
  1625  0003E0  0EA7               	movlw	low _keys
  1626  0003E2  0100               	movlb	0	; () banked
  1627  0003E4  25F3               	addwf	main@keypress& (0+255),w,b
  1628  0003E6  6EF6               	movwf	tblptrl,c
  1629  0003E8  6AF7               	clrf	tblptrh,c
  1630  0003EA  0EFE               	movlw	high _keys
  1631  0003EC  22F7               	addwfc	tblptrh,f,c
  1632  0003EE                     	if	0	;There are less than 3 active tblptr bytes
  1633  0003EE                     	endif
  1634  0003EE  0008               	tblrd		*
  1635  0003F0  50F5               	movf	tablat,w,c
  1636  0003F2  6E6A               	movwf	?_printf+2,c
  1637  0003F4  6A6B               	clrf	?_printf+3,c
  1638  0003F6  ECA8  F008         	call	_printf	;wreg free
  1639  0003FA  0E90               	movlw	144
  1640  0003FC  ECD6  F008         	call	_lcdInst
  1641                           
  1642                           ;main.c: 162:                     printf("Distance %d cm", DistanceCanister[number_press
      +                          ed] );
  1643  000400  0E0C               	movlw	low STR_21
  1644  000402  6E68               	movwf	printf@fmt,c
  1645  000404  0EFF               	movlw	high STR_21
  1646  000406  6E69               	movwf	printf@fmt+1,c
  1647  000408  90D8               	bcf	status,0,c
  1648  00040A  0100               	movlb	0	; () banked
  1649  00040C  35EF               	rlcf	main@number_pressed& (0+255),w,b
  1650  00040E  6ED9               	movwf	fsr2l,c
  1651  000410  35F0               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1652  000412  6EDA               	movwf	fsr2h,c
  1653  000414  0E94               	movlw	low _DistanceCanister
  1654  000416  26D9               	addwf	fsr2l,f,c
  1655  000418  0E00               	movlw	high _DistanceCanister
  1656  00041A  22DA               	addwfc	fsr2h,f,c
  1657  00041C  CFDE F06A          	movff	postinc2,?_printf+2
  1658  000420  CFDD F06B          	movff	postdec2,?_printf+3
  1659  000424  ECA8  F008         	call	_printf	;wreg free
  1660  000428  0ED0               	movlw	208
  1661  00042A  ECD6  F008         	call	_lcdInst
  1662                           
  1663                           ;main.c: 164:                     printf("* to exit");
  1664  00042E  0ED9               	movlw	low STR_22
  1665  000430  6E68               	movwf	printf@fmt,c
  1666  000432  0EFF               	movlw	high STR_22
  1667  000434  6E69               	movwf	printf@fmt+1,c
  1668  000436  ECA8  F008         	call	_printf	;wreg free
  1669                           
  1670                           ;main.c: 165:                     miniClear = 0;
  1671  00043A  0E00               	movlw	0
  1672  00043C  0100               	movlb	0	; () banked
  1673  00043E  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1674  000440  0E00               	movlw	0
  1675  000442  6FF1               	movwf	main@miniClear& (0+255),b
  1676  000444                     l2780:
  1677                           
  1678                           ; BSR set to: 0
  1679                           ;main.c: 168:                 if (miniState == 1 & miniClear == 1) {
  1680  000444  05F4               	decf	main@miniState& (0+255),w,b
  1681  000446  11F5               	iorwf	(main@miniState+1)& (0+255),w,b
  1682  000448  A4D8               	btfss	status,2,c
  1683  00044A  D04D               	goto	l2804
  1684                           
  1685                           ; BSR set to: 0
  1686  00044C  05F1               	decf	main@miniClear& (0+255),w,b
  1687  00044E  11F2               	iorwf	(main@miniClear+1)& (0+255),w,b
  1688  000450  A4D8               	btfss	status,2,c
  1689  000452  D049               	goto	l2804
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;main.c: 170:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1693  000454  0E01               	movlw	1
  1694  000456  ECD6  F008         	call	_lcdInst
  1695  00045A  0E11               	movlw	17
  1696  00045C  0100               	movlb	0	; () banked
  1697  00045E  6FE9               	movwf	??_main& (0+255),b
  1698  000460  0E3A               	movlw	58
  1699  000462                     u2487:
  1700  000462  2EE8               	decfsz	wreg,f,c
  1701  000464  D7FE               	bra	u2487
  1702  000466  2FE9               	decfsz	??_main& (0+255),f,b
  1703  000468  D7FC               	bra	u2487
  1704  00046A  F000               	nop	
  1705                           
  1706                           ;main.c: 171:                     printf("Cansiter %c", keys[keypress]);
  1707  00046C  0E8A               	movlw	low STR_20
  1708  00046E  6E68               	movwf	printf@fmt,c
  1709  000470  0EFF               	movlw	high STR_20
  1710  000472  6E69               	movwf	printf@fmt+1,c
  1711  000474  0EA7               	movlw	low _keys
  1712  000476  0100               	movlb	0	; () banked
  1713  000478  25F3               	addwf	main@keypress& (0+255),w,b
  1714  00047A  6EF6               	movwf	tblptrl,c
  1715  00047C  6AF7               	clrf	tblptrh,c
  1716  00047E  0EFE               	movlw	high _keys
  1717  000480  22F7               	addwfc	tblptrh,f,c
  1718  000482                     	if	0	;There are less than 3 active tblptr bytes
  1719  000482                     	endif
  1720  000482  0008               	tblrd		*
  1721  000484  50F5               	movf	tablat,w,c
  1722  000486  6E6A               	movwf	?_printf+2,c
  1723  000488  6A6B               	clrf	?_printf+3,c
  1724  00048A  ECA8  F008         	call	_printf	;wreg free
  1725  00048E  0E90               	movlw	144
  1726  000490  ECD6  F008         	call	_lcdInst
  1727                           
  1728                           ;main.c: 173:                     if (State[number_pressed] == 1)
  1729  000494  90D8               	bcf	status,0,c
  1730  000496  0100               	movlb	0	; () banked
  1731  000498  35EF               	rlcf	main@number_pressed& (0+255),w,b
  1732  00049A  6ED9               	movwf	fsr2l,c
  1733  00049C  35F0               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1734  00049E  6EDA               	movwf	fsr2h,c
  1735  0004A0  0EA8               	movlw	low _State
  1736  0004A2  26D9               	addwf	fsr2l,f,c
  1737  0004A4  0E00               	movlw	high _State
  1738  0004A6  22DA               	addwfc	fsr2h,f,c
  1739  0004A8  04DE               	decf	postinc2,w,c
  1740  0004AA  10DE               	iorwf	postinc2,w,c
  1741  0004AC  A4D8               	btfss	status,2,c
  1742  0004AE  D007               	goto	l2796
  1743                           
  1744                           ; BSR set to: 0
  1745                           ;main.c: 174:                         printf("Canister Full");
  1746  0004B0  0E56               	movlw	low STR_24
  1747  0004B2  6E68               	movwf	printf@fmt,c
  1748  0004B4  0EFF               	movlw	high STR_24
  1749  0004B6  6E69               	movwf	printf@fmt+1,c
  1750  0004B8  ECA8  F008         	call	_printf	;wreg free
  1751  0004BC  D006               	goto	l2798
  1752  0004BE                     l2796:
  1753                           
  1754                           ; BSR set to: 0
  1755                           ;main.c: 176:                         printf("Canister Empty");
  1756  0004BE  0E39               	movlw	low STR_25
  1757  0004C0  6E68               	movwf	printf@fmt,c
  1758  0004C2  0EFF               	movlw	high STR_25
  1759  0004C4  6E69               	movwf	printf@fmt+1,c
  1760  0004C6  ECA8  F008         	call	_printf	;wreg free
  1761  0004CA                     l2798:
  1762  0004CA  0ED0               	movlw	208
  1763  0004CC  ECD6  F008         	call	_lcdInst
  1764                           
  1765                           ;main.c: 178:                     printf("* to exit");
  1766  0004D0  0ED9               	movlw	low STR_22
  1767  0004D2  6E68               	movwf	printf@fmt,c
  1768  0004D4  0EFF               	movlw	high STR_22
  1769  0004D6  6E69               	movwf	printf@fmt+1,c
  1770  0004D8  ECA8  F008         	call	_printf	;wreg free
  1771                           
  1772                           ;main.c: 179:                     miniClear = 0;
  1773  0004DC  0E00               	movlw	0
  1774  0004DE  0100               	movlb	0	; () banked
  1775  0004E0  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1776  0004E2  0E00               	movlw	0
  1777  0004E4  6FF1               	movwf	main@miniClear& (0+255),b
  1778  0004E6                     l2804:
  1779                           
  1780                           ; BSR set to: 0
  1781                           ;main.c: 182:                 if (miniState == 2 & miniClear == 1) {
  1782  0004E6  0E02               	movlw	2
  1783  0004E8  19F4               	xorwf	main@miniState& (0+255),w,b
  1784  0004EA  11F5               	iorwf	(main@miniState+1)& (0+255),w,b
  1785  0004EC  A4D8               	btfss	status,2,c
  1786  0004EE  D04D               	goto	l2828
  1787                           
  1788                           ; BSR set to: 0
  1789  0004F0  05F1               	decf	main@miniClear& (0+255),w,b
  1790  0004F2  11F2               	iorwf	(main@miniClear+1)& (0+255),w,b
  1791  0004F4  A4D8               	btfss	status,2,c
  1792  0004F6  D049               	goto	l2828
  1793                           
  1794                           ; BSR set to: 0
  1795                           ;main.c: 184:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1796  0004F8  0E01               	movlw	1
  1797  0004FA  ECD6  F008         	call	_lcdInst
  1798  0004FE  0E11               	movlw	17
  1799  000500  0100               	movlb	0	; () banked
  1800  000502  6FE9               	movwf	??_main& (0+255),b
  1801  000504  0E3A               	movlw	58
  1802  000506                     u2497:
  1803  000506  2EE8               	decfsz	wreg,f,c
  1804  000508  D7FE               	bra	u2497
  1805  00050A  2FE9               	decfsz	??_main& (0+255),f,b
  1806  00050C  D7FC               	bra	u2497
  1807  00050E  F000               	nop	
  1808                           
  1809                           ;main.c: 185:                     printf("Cansiter %c", keys[keypress]);
  1810  000510  0E8A               	movlw	low STR_20
  1811  000512  6E68               	movwf	printf@fmt,c
  1812  000514  0EFF               	movlw	high STR_20
  1813  000516  6E69               	movwf	printf@fmt+1,c
  1814  000518  0EA7               	movlw	low _keys
  1815  00051A  0100               	movlb	0	; () banked
  1816  00051C  25F3               	addwf	main@keypress& (0+255),w,b
  1817  00051E  6EF6               	movwf	tblptrl,c
  1818  000520  6AF7               	clrf	tblptrh,c
  1819  000522  0EFE               	movlw	high _keys
  1820  000524  22F7               	addwfc	tblptrh,f,c
  1821  000526                     	if	0	;There are less than 3 active tblptr bytes
  1822  000526                     	endif
  1823  000526  0008               	tblrd		*
  1824  000528  50F5               	movf	tablat,w,c
  1825  00052A  6E6A               	movwf	?_printf+2,c
  1826  00052C  6A6B               	clrf	?_printf+3,c
  1827  00052E  ECA8  F008         	call	_printf	;wreg free
  1828  000532  0E90               	movlw	144
  1829  000534  ECD6  F008         	call	_lcdInst
  1830                           
  1831                           ;main.c: 187:                     if (BallDispensed[number_pressed] == 1)
  1832  000538  90D8               	bcf	status,0,c
  1833  00053A  0100               	movlb	0	; () banked
  1834  00053C  35EF               	rlcf	main@number_pressed& (0+255),w,b
  1835  00053E  6ED9               	movwf	fsr2l,c
  1836  000540  35F0               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1837  000542  6EDA               	movwf	fsr2h,c
  1838  000544  0E80               	movlw	low _BallDispensed
  1839  000546  26D9               	addwf	fsr2l,f,c
  1840  000548  0E00               	movlw	high _BallDispensed
  1841  00054A  22DA               	addwfc	fsr2h,f,c
  1842  00054C  04DE               	decf	postinc2,w,c
  1843  00054E  10DE               	iorwf	postinc2,w,c
  1844  000550  A4D8               	btfss	status,2,c
  1845  000552  D007               	goto	l2820
  1846                           
  1847                           ; BSR set to: 0
  1848                           ;main.c: 188:                         printf("Ball Added");
  1849  000554  0E4B               	movlw	low (STR_29+3)
  1850  000556  6E68               	movwf	printf@fmt,c
  1851  000558  0EFF               	movlw	high (STR_29+3)
  1852  00055A  6E69               	movwf	printf@fmt+1,c
  1853  00055C  ECA8  F008         	call	_printf	;wreg free
  1854  000560  D006               	goto	l2822
  1855  000562                     l2820:
  1856                           
  1857                           ; BSR set to: 0
  1858                           ;main.c: 190:                         printf("No Ball Added");
  1859  000562  0E48               	movlw	low STR_29
  1860  000564  6E68               	movwf	printf@fmt,c
  1861  000566  0EFF               	movlw	high STR_29
  1862  000568  6E69               	movwf	printf@fmt+1,c
  1863  00056A  ECA8  F008         	call	_printf	;wreg free
  1864  00056E                     l2822:
  1865  00056E  0ED0               	movlw	208
  1866  000570  ECD6  F008         	call	_lcdInst
  1867                           
  1868                           ;main.c: 192:                     printf("* to exit");
  1869  000574  0ED9               	movlw	low STR_22
  1870  000576  6E68               	movwf	printf@fmt,c
  1871  000578  0EFF               	movlw	high STR_22
  1872  00057A  6E69               	movwf	printf@fmt+1,c
  1873  00057C  ECA8  F008         	call	_printf	;wreg free
  1874                           
  1875                           ;main.c: 195:                     miniClear = 0;
  1876  000580  0E00               	movlw	0
  1877  000582  0100               	movlb	0	; () banked
  1878  000584  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1879  000586  0E00               	movlw	0
  1880  000588  6FF1               	movwf	main@miniClear& (0+255),b
  1881  00058A                     l2828:
  1882                           
  1883                           ; BSR set to: 0
  1884                           ;main.c: 198:                 if (miniTick == 3000) {
  1885  00058A  0EB8               	movlw	184
  1886  00058C  19ED               	xorwf	main@miniTick& (0+255),w,b
  1887  00058E  E11D               	bnz	l2838
  1888  000590  0E0B               	movlw	11
  1889  000592  19EE               	xorwf	(main@miniTick+1)& (0+255),w,b
  1890  000594  A4D8               	btfss	status,2,c
  1891  000596  D019               	goto	l2838
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;main.c: 199:                     miniClear = 1;
  1895  000598  0E00               	movlw	0
  1896  00059A  6FF2               	movwf	(main@miniClear+1)& (0+255),b
  1897  00059C  0E01               	movlw	1
  1898  00059E  6FF1               	movwf	main@miniClear& (0+255),b
  1899                           
  1900                           ; BSR set to: 0
  1901                           ;main.c: 200:                     miniState++;
  1902  0005A0  4BF4               	infsnz	main@miniState& (0+255),f,b
  1903  0005A2  2BF5               	incf	(main@miniState+1)& (0+255),f,b
  1904                           
  1905                           ; BSR set to: 0
  1906                           ;main.c: 201:                     miniState = miniState % 3;
  1907  0005A4  C0F4  F00C         	movff	main@miniState,___awmod@dividend
  1908  0005A8  C0F5  F00D         	movff	main@miniState+1,___awmod@dividend+1
  1909  0005AC  0E00               	movlw	0
  1910  0005AE  6E0F               	movwf	___awmod@divisor+1,c
  1911  0005B0  0E03               	movlw	3
  1912  0005B2  6E0E               	movwf	___awmod@divisor,c
  1913  0005B4  EC12  F007         	call	___awmod	;wreg free
  1914  0005B8  C00C  F0F4         	movff	?___awmod,main@miniState
  1915  0005BC  C00D  F0F5         	movff	?___awmod+1,main@miniState+1
  1916                           
  1917                           ;main.c: 202:                     miniTick = 0;
  1918  0005C0  0E00               	movlw	0
  1919  0005C2  0100               	movlb	0	; () banked
  1920  0005C4  6FEE               	movwf	(main@miniTick+1)& (0+255),b
  1921  0005C6  0E00               	movlw	0
  1922  0005C8  6FED               	movwf	main@miniTick& (0+255),b
  1923  0005CA                     l2838:
  1924                           
  1925                           ; BSR set to: 0
  1926                           ;main.c: 205:                 miniTick++;
  1927  0005CA  4BED               	infsnz	main@miniTick& (0+255),f,b
  1928  0005CC  2BEE               	incf	(main@miniTick+1)& (0+255),f,b
  1929                           
  1930                           ; BSR set to: 0
  1931                           ;main.c: 206:                 _delay((unsigned long)((1)*(10000000/4000.0)));
  1932  0005CE  0E04               	movlw	4
  1933  0005D0  0100               	movlb	0	; () banked
  1934  0005D2  6FE9               	movwf	??_main& (0+255),b
  1935  0005D4  0E3D               	movlw	61
  1936  0005D6                     u2507:
  1937  0005D6  2EE8               	decfsz	wreg,f,c
  1938  0005D8  D7FE               	bra	u2507
  1939  0005DA  2FE9               	decfsz	??_main& (0+255),f,b
  1940  0005DC  D7FC               	bra	u2507
  1941  0005DE  D000               	nop2	
  1942  0005E0                     l2842:
  1943                           
  1944                           ;main.c: 155:             while(!exit_key) {
  1945  0005E0  0100               	movlb	0	; () banked
  1946  0005E2  51C3               	movf	_exit_key& (0+255),w,b	;volatile
  1947  0005E4  B4D8               	btfsc	status,2,c
  1948  0005E6  D6E4               	goto	l2760
  1949                           
  1950                           ; BSR set to: 0
  1951                           ;main.c: 211:             key_was_pressed = 0;
  1952  0005E8  0E00               	movlw	0
  1953  0005EA  6FC4               	movwf	_key_was_pressed& (0+255),b	;volatile
  1954                           
  1955                           ;main.c: 212:             exit_key = 0;
  1956  0005EC  0E00               	movlw	0
  1957  0005EE  6FC3               	movwf	_exit_key& (0+255),b	;volatile
  1958  0005F0                     l2846:
  1959                           
  1960                           ; BSR set to: 0
  1961                           ;main.c: 216:         if (tick == 2000) {
  1962  0005F0  0ED0               	movlw	208
  1963  0005F2  19EB               	xorwf	main@tick& (0+255),w,b
  1964  0005F4  E112               	bnz	l2856
  1965  0005F6  0E07               	movlw	7
  1966  0005F8  19EC               	xorwf	(main@tick+1)& (0+255),w,b
  1967  0005FA  A4D8               	btfss	status,2,c
  1968  0005FC  D00E               	goto	l2856
  1969                           
  1970                           ; BSR set to: 0
  1971                           ;main.c: 217:             clear = 1;
  1972  0005FE  0E00               	movlw	0
  1973  000600  6FF7               	movwf	(main@clear+1)& (0+255),b
  1974  000602  0E01               	movlw	1
  1975  000604  6FF6               	movwf	main@clear& (0+255),b
  1976                           
  1977                           ; BSR set to: 0
  1978                           ;main.c: 218:             state++;
  1979  000606  4BF8               	infsnz	main@state& (0+255),f,b
  1980  000608  2BF9               	incf	(main@state+1)& (0+255),f,b
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;main.c: 219:             state = state % 4;
  1984  00060A  0E03               	movlw	3
  1985  00060C  15F8               	andwf	main@state& (0+255),w,b
  1986  00060E  6FF8               	movwf	main@state& (0+255),b
  1987  000610  6BF9               	clrf	(main@state+1)& (0+255),b
  1988                           
  1989                           ; BSR set to: 0
  1990                           ;main.c: 220:             tick = 0;
  1991  000612  0E00               	movlw	0
  1992  000614  6FEC               	movwf	(main@tick+1)& (0+255),b
  1993  000616  0E00               	movlw	0
  1994  000618  6FEB               	movwf	main@tick& (0+255),b
  1995  00061A                     l2856:
  1996                           
  1997                           ; BSR set to: 0
  1998                           ;main.c: 223:         tick++;
  1999  00061A  4BEB               	infsnz	main@tick& (0+255),f,b
  2000  00061C  2BEC               	incf	(main@tick+1)& (0+255),f,b
  2001                           
  2002                           ; BSR set to: 0
  2003                           ;main.c: 224:         _delay((unsigned long)((1)*(10000000/4000.0)));
  2004  00061E  0E04               	movlw	4
  2005  000620  0100               	movlb	0	; () banked
  2006  000622  6FE9               	movwf	??_main& (0+255),b
  2007  000624  0E3D               	movlw	61
  2008  000626                     u2517:
  2009  000626  2EE8               	decfsz	wreg,f,c
  2010  000628  D7FE               	bra	u2517
  2011  00062A  2FE9               	decfsz	??_main& (0+255),f,b
  2012  00062C  D7FC               	bra	u2517
  2013  00062E  D5D1               	goto	L1
  2014  000630                     __end_of_main:
  2015                           	opt callstack 0
  2016                           
  2017 ;; *************** function _printf *****************
  2018 ;; Defined at:
  2019 ;;		line 5 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/printf.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;  fmt             2  103[COMRAM] PTR const unsigned char 
  2022 ;;		 -> STR_30(10), STR_29(14), STR_28(11), STR_27(12), 
  2023 ;;		 -> STR_26(10), STR_25(15), STR_24(14), STR_23(12), 
  2024 ;;		 -> STR_22(10), STR_21(15), STR_20(12), STR_19(15), 
  2025 ;;		 -> STR_18(12), STR_17(16), STR_16(9), STR_15(9), 
  2026 ;;		 -> STR_14(11), STR_13(13), STR_12(15), STR_11(11), 
  2027 ;;		 -> STR_10(15), STR_9(12), STR_8(15), STR_7(9), 
  2028 ;;		 -> STR_6(12), STR_5(10), STR_4(15), STR_3(17), 
  2029 ;;		 -> STR_2(13), STR_1(11), 
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;  ap              2    2[BANK0 ] PTR void [1]
  2032 ;;		 -> ?_printf(2), 
  2033 ;;  ret             2    0        int 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  2  103[COMRAM] int 
  2036 ;; Registers used:
  2037 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2043 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2046 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2047 ;;Total ram usage:        8 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:   11
  2050 ;; This function calls:
  2051 ;;		_vfprintf
  2052 ;; This function is called by:
  2053 ;;		_main
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           	psect	text1
  2058  001150                     __ptext1:
  2059                           	opt callstack 0
  2060  001150                     _printf:
  2061                           	opt callstack 19
  2062                           
  2063                           ;incstack = 0
  2064  001150  0E6A               	movlw	low (?_printf+2)
  2065  001152  0100               	movlb	0	; () banked
  2066  001154  6FE7               	movwf	printf@ap& (0+255),b
  2067  001156  0E00               	movlw	high (?_printf+2)
  2068  001158  6FE8               	movwf	(printf@ap+1)& (0+255),b
  2069                           
  2070                           ; BSR set to: 0
  2071  00115A  0E00               	movlw	0
  2072  00115C  6E60               	movwf	vfprintf@fp,c
  2073  00115E  0E00               	movlw	0
  2074  001160  6E61               	movwf	vfprintf@fp+1,c
  2075  001162  C068  F062         	movff	printf@fmt,vfprintf@fmt
  2076  001166  C069  F063         	movff	printf@fmt+1,vfprintf@fmt+1
  2077  00116A  0EE7               	movlw	low printf@ap
  2078  00116C  6E64               	movwf	vfprintf@ap,c
  2079  00116E  0E00               	movlw	high printf@ap
  2080  001170  6E65               	movwf	vfprintf@ap+1,c
  2081  001172  ECB5  F007         	call	_vfprintf	;wreg free
  2082  001176  0012               	return		;funcret
  2083  001178                     __end_of_printf:
  2084                           	opt callstack 0
  2085                           
  2086 ;; *************** function _vfprintf *****************
  2087 ;; Defined at:
  2088 ;;		line 1368 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;  fp              2   95[COMRAM] PTR struct _IO_FILE
  2091 ;;		 -> NULL(0), 
  2092 ;;  fmt             2   97[COMRAM] PTR const unsigned char 
  2093 ;;		 -> STR_30(10), STR_29(14), STR_28(11), STR_27(12), 
  2094 ;;		 -> STR_26(10), STR_25(15), STR_24(14), STR_23(12), 
  2095 ;;		 -> STR_22(10), STR_21(15), STR_20(12), STR_19(15), 
  2096 ;;		 -> STR_18(12), STR_17(16), STR_16(9), STR_15(9), 
  2097 ;;		 -> STR_14(11), STR_13(13), STR_12(15), STR_11(11), 
  2098 ;;		 -> STR_10(15), STR_9(12), STR_8(15), STR_7(9), 
  2099 ;;		 -> STR_6(12), STR_5(10), STR_4(15), STR_3(17), 
  2100 ;;		 -> STR_2(13), STR_1(11), 
  2101 ;;  ap              2   99[COMRAM] PTR PTR void 
  2102 ;;		 -> printf@ap(2), 
  2103 ;; Auto vars:     Size  Location     Type
  2104 ;;  cfmt            2  101[COMRAM] PTR unsigned char 
  2105 ;;		 -> STR_30(10), STR_29(14), STR_28(11), STR_27(12), 
  2106 ;;		 -> STR_26(10), STR_25(15), STR_24(14), STR_23(12), 
  2107 ;;		 -> STR_22(10), STR_21(15), STR_20(12), STR_19(15), 
  2108 ;;		 -> STR_18(12), STR_17(16), STR_16(9), STR_15(9), 
  2109 ;;		 -> STR_14(11), STR_13(13), STR_12(15), STR_11(11), 
  2110 ;;		 -> STR_10(15), STR_9(12), STR_8(15), STR_7(9), 
  2111 ;;		 -> STR_6(12), STR_5(10), STR_4(15), STR_3(17), 
  2112 ;;		 -> STR_2(13), STR_1(11), 
  2113 ;; Return value:  Size  Location     Type
  2114 ;;                  2   95[COMRAM] int 
  2115 ;; Registers used:
  2116 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2117 ;; Tracked objects:
  2118 ;;		On entry : 0/0
  2119 ;;		On exit  : 0/0
  2120 ;;		Unchanged: 0/0
  2121 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2122 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2123 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2124 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2125 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2126 ;;Total ram usage:        8 bytes
  2127 ;; Hardware stack levels used:    1
  2128 ;; Hardware stack levels required when called:   10
  2129 ;; This function calls:
  2130 ;;		_vfpfcnvrt
  2131 ;; This function is called by:
  2132 ;;		_printf
  2133 ;; This function uses a non-reentrant model
  2134 ;;
  2135                           
  2136                           	psect	text2
  2137  000F6A                     __ptext2:
  2138                           	opt callstack 0
  2139  000F6A                     _vfprintf:
  2140                           	opt callstack 19
  2141                           
  2142                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
  2143                           
  2144                           ;incstack = 0
  2145  000F6A  C062  F066         	movff	vfprintf@fmt,vfprintf@cfmt
  2146  000F6E  C063  F067         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  2147                           
  2148                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  2149  000F72  0E00               	movlw	0
  2150  000F74  6E6D               	movwf	_nout+1,c
  2151  000F76  0E00               	movlw	0
  2152  000F78  6E6C               	movwf	_nout,c
  2153                           
  2154                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  2155  000F7A  D012               	goto	l2556
  2156  000F7C                     l2554:
  2157                           
  2158                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
  2159  000F7C  C060  F04F         	movff	vfprintf@fp,vfpfcnvrt@fp
  2160  000F80  C061  F050         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  2161  000F84  0E66               	movlw	low vfprintf@cfmt
  2162  000F86  6E51               	movwf	vfpfcnvrt@fmt,c
  2163  000F88  0E00               	movlw	high vfprintf@cfmt
  2164  000F8A  6E52               	movwf	vfpfcnvrt@fmt+1,c
  2165  000F8C  C064  F053         	movff	vfprintf@ap,vfpfcnvrt@ap
  2166  000F90  C065  F054         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  2167  000F94  EC39  F004         	call	_vfpfcnvrt	;wreg free
  2168  000F98  504F               	movf	?_vfpfcnvrt,w,c
  2169  000F9A  266C               	addwf	_nout,f,c
  2170  000F9C  5050               	movf	?_vfpfcnvrt+1,w,c
  2171  000F9E  226D               	addwfc	_nout+1,f,c
  2172  000FA0                     l2556:
  2173                           
  2174                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  2175  000FA0  C066  FFF6         	movff	vfprintf@cfmt,tblptrl
  2176  000FA4  C067  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  2177  000FA8                     	if	0	;tblptru may be non-zero
  2178  000FA8                     	endif
  2179  000FA8                     	if	0	;tblptru may be non-zero
  2180  000FA8                     	endif
  2181  000FA8  0008               	tblrd		*
  2182  000FAA  50F5               	movf	tablat,w,c
  2183  000FAC  0900               	iorlw	0
  2184  000FAE  A4D8               	btfss	status,2,c
  2185  000FB0  D7E5               	goto	l2554
  2186                           
  2187                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
  2188  000FB2  C06C  F060         	movff	_nout,?_vfprintf
  2189  000FB6  C06D  F061         	movff	_nout+1,?_vfprintf+1
  2190  000FBA  0012               	return		;funcret
  2191  000FBC                     __end_of_vfprintf:
  2192                           	opt callstack 0
  2193                           
  2194 ;; *************** function _vfpfcnvrt *****************
  2195 ;; Defined at:
  2196 ;;		line 670 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2197 ;; Parameters:    Size  Location     Type
  2198 ;;  fp              2   78[COMRAM] PTR struct _IO_FILE
  2199 ;;		 -> NULL(0), 
  2200 ;;  fmt             2   80[COMRAM] PTR PTR unsigned char 
  2201 ;;		 -> vfprintf@cfmt(2), 
  2202 ;;  ap              2   82[COMRAM] PTR PTR void 
  2203 ;;		 -> printf@ap(2), 
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  ll              8   86[COMRAM] long long 
  2206 ;;  llu             8    0        unsigned long long 
  2207 ;;  f               4    0        unsigned long long 
  2208 ;;  vp              3    0        PTR void 
  2209 ;;  ct              3    0        unsigned char [3]
  2210 ;;  cp              3    0        PTR unsigned char 
  2211 ;;  i               2    0        int 
  2212 ;;  done            2    0        int 
  2213 ;;  c               1   94[COMRAM] unsigned char 
  2214 ;; Return value:  Size  Location     Type
  2215 ;;                  2   78[COMRAM] int 
  2216 ;; Registers used:
  2217 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2218 ;; Tracked objects:
  2219 ;;		On entry : 0/0
  2220 ;;		On exit  : 0/0
  2221 ;;		Unchanged: 0/0
  2222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2223 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2224 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2225 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2226 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2227 ;;Total ram usage:       17 bytes
  2228 ;; Hardware stack levels used:    1
  2229 ;; Hardware stack levels required when called:    9
  2230 ;; This function calls:
  2231 ;;		_ctoa
  2232 ;;		_dtoa
  2233 ;;		_fputc
  2234 ;; This function is called by:
  2235 ;;		_vfprintf
  2236 ;; This function uses a non-reentrant model
  2237 ;;
  2238                           
  2239                           	psect	text3
  2240  000872                     __ptext3:
  2241                           	opt callstack 0
  2242  000872                     _vfpfcnvrt:
  2243                           	opt callstack 19
  2244                           
  2245                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.05/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.05/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
  2246                           
  2247                           ;incstack = 0
  2248  000872  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2249  000876  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2250  00087A  CFDE FFF6          	movff	postinc2,tblptrl
  2251  00087E  CFDD FFF7          	movff	postdec2,tblptrh
  2252  000882                     	if	0	;tblptru may be non-zero
  2253  000882                     	endif
  2254  000882                     	if	0	;tblptru may be non-zero
  2255  000882                     	endif
  2256  000882  0008               	tblrd		*
  2257  000884  50F5               	movf	tablat,w,c
  2258  000886  0A25               	xorlw	37
  2259  000888  A4D8               	btfss	status,2,c
  2260  00088A  D0CC               	goto	l2538
  2261                           
  2262                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  2263  00088C  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2264  000890  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2265  000894  2ADE               	incf	postinc2,f,c
  2266  000896  0E00               	movlw	0
  2267  000898  22DD               	addwfc	postdec2,f,c
  2268                           
  2269                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
  2270  00089A  0E00               	movlw	0
  2271  00089C  6E6F               	movwf	_width+1,c
  2272  00089E  0E00               	movlw	0
  2273  0008A0  6E6E               	movwf	_width,c
  2274  0008A2  C06E  F072         	movff	_width,_flags
  2275  0008A6  C06F  F073         	movff	_width+1,_flags+1
  2276                           
  2277                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
  2278  0008AA  6870               	setf	_prec,c
  2279  0008AC  6871               	setf	_prec+1,c
  2280                           
  2281                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 792:         if (*fm
      +                          t[0] == 'c') {
  2282  0008AE  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2283  0008B2  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2284  0008B6  CFDE FFF6          	movff	postinc2,tblptrl
  2285  0008BA  CFDD FFF7          	movff	postdec2,tblptrh
  2286  0008BE                     	if	0	;tblptru may be non-zero
  2287  0008BE                     	endif
  2288  0008BE                     	if	0	;tblptru may be non-zero
  2289  0008BE                     	endif
  2290  0008BE  0008               	tblrd		*
  2291  0008C0  50F5               	movf	tablat,w,c
  2292  0008C2  0A63               	xorlw	99
  2293  0008C4  A4D8               	btfss	status,2,c
  2294  0008C6  D026               	goto	l2512
  2295                           
  2296                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 793:             ++*
      +                          fmt;
  2297  0008C8  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2298  0008CC  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2299  0008D0  2ADE               	incf	postinc2,f,c
  2300  0008D2  0E00               	movlw	0
  2301  0008D4  22DD               	addwfc	postdec2,f,c
  2302                           
  2303                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 794:             c =
      +                           (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  2304  0008D6  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2305  0008DA  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2306  0008DE  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2307  0008E2  0E02               	movlw	2
  2308  0008E4  26DE               	addwf	postinc2,f,c
  2309  0008E6  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2310  0008EA  0E00               	movlw	0
  2311  0008EC  22DD               	addwfc	postdec2,f,c
  2312  0008EE  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2313  0008F2  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2314  0008F6  50DF               	movf	indf2,w,c
  2315  0008F8  6E5F               	movwf	vfpfcnvrt@c,c
  2316                           
  2317                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 795:             ret
      +                          urn ctoa(fp, c);
  2318  0008FA  C04F  F02B         	movff	vfpfcnvrt@fp,ctoa@fp
  2319  0008FE  C050  F02C         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  2320  000902  C05F  F02D         	movff	vfpfcnvrt@c,ctoa@c
  2321  000906  ECDE  F007         	call	_ctoa	;wreg free
  2322  00090A  C02B  F04F         	movff	?_ctoa,?_vfpfcnvrt
  2323  00090E  C02C  F050         	movff	?_ctoa+1,?_vfpfcnvrt+1
  2324  000912  0012               	return	
  2325  000914                     l2512:
  2326                           
  2327                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 825:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
  2328  000914  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2329  000918  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2330  00091C  CFDE FFF6          	movff	postinc2,tblptrl
  2331  000920  CFDD FFF7          	movff	postdec2,tblptrh
  2332  000924                     	if	0	;tblptru may be non-zero
  2333  000924                     	endif
  2334  000924                     	if	0	;tblptru may be non-zero
  2335  000924                     	endif
  2336  000924  0008               	tblrd		*
  2337  000926  50F5               	movf	tablat,w,c
  2338  000928  0A64               	xorlw	100
  2339  00092A  B4D8               	btfsc	status,2,c
  2340  00092C  D00D               	goto	u2070
  2341  00092E  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2342  000932  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2343  000936  CFDE FFF6          	movff	postinc2,tblptrl
  2344  00093A  CFDD FFF7          	movff	postdec2,tblptrh
  2345  00093E                     	if	0	;tblptru may be non-zero
  2346  00093E                     	endif
  2347  00093E                     	if	0	;tblptru may be non-zero
  2348  00093E                     	endif
  2349  00093E  0008               	tblrd		*
  2350  000940  50F5               	movf	tablat,w,c
  2351  000942  0A69               	xorlw	105
  2352  000944  A4D8               	btfss	status,2,c
  2353  000946  D03F               	goto	l2522
  2354  000948                     u2070:
  2355                           
  2356                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 827:             ++*
      +                          fmt;
  2357  000948  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2358  00094C  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2359  000950  2ADE               	incf	postinc2,f,c
  2360  000952  0E00               	movlw	0
  2361  000954  22DD               	addwfc	postdec2,f,c
  2362                           
  2363                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 828:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2364  000956  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2365  00095A  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2366  00095E  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2367  000962  0E02               	movlw	2
  2368  000964  26DE               	addwf	postinc2,f,c
  2369  000966  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2370  00096A  0E00               	movlw	0
  2371  00096C  22DD               	addwfc	postdec2,f,c
  2372  00096E  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2373  000972  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2374  000976  CFDE F057          	movff	postinc2,vfpfcnvrt@ll
  2375  00097A  CFDD F058          	movff	postdec2,vfpfcnvrt@ll+1
  2376  00097E  0E00               	movlw	0
  2377  000980  BE58               	btfsc	vfpfcnvrt@ll+1,7,c
  2378  000982  0EFF               	movlw	-1
  2379  000984  6E59               	movwf	vfpfcnvrt@ll+2,c
  2380  000986  6E5A               	movwf	vfpfcnvrt@ll+3,c
  2381  000988  6E5B               	movwf	vfpfcnvrt@ll+4,c
  2382  00098A  6E5C               	movwf	vfpfcnvrt@ll+5,c
  2383  00098C  6E5D               	movwf	vfpfcnvrt@ll+6,c
  2384  00098E  6E5E               	movwf	vfpfcnvrt@ll+7,c
  2385                           
  2386                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 830:             ret
      +                          urn dtoa(fp, ll);
  2387  000990  C04F  F02B         	movff	vfpfcnvrt@fp,dtoa@fp
  2388  000994  C050  F02C         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2389  000998  C057  F02D         	movff	vfpfcnvrt@ll,dtoa@d
  2390  00099C  C058  F02E         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2391  0009A0  C059  F02F         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2392  0009A4  C05A  F030         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2393  0009A8  C05B  F031         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2394  0009AC  C05C  F032         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2395  0009B0  C05D  F033         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2396  0009B4  C05E  F034         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2397  0009B8  EC18  F003         	call	_dtoa	;wreg free
  2398  0009BC  C02B  F04F         	movff	?_dtoa,?_vfpfcnvrt
  2399  0009C0  C02C  F050         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2400  0009C4  0012               	return	
  2401  0009C6                     l2522:
  2402                           
  2403                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
  2404  0009C6  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2405  0009CA  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2406  0009CE  CFDE FFF6          	movff	postinc2,tblptrl
  2407  0009D2  CFDD FFF7          	movff	postdec2,tblptrh
  2408  0009D6                     	if	0	;tblptru may be non-zero
  2409  0009D6                     	endif
  2410  0009D6                     	if	0	;tblptru may be non-zero
  2411  0009D6                     	endif
  2412  0009D6  0008               	tblrd		*
  2413  0009D8  50F5               	movf	tablat,w,c
  2414  0009DA  0A25               	xorlw	37
  2415  0009DC  A4D8               	btfss	status,2,c
  2416  0009DE  D016               	goto	l2532
  2417                           
  2418                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
  2419  0009E0  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2420  0009E4  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2421  0009E8  2ADE               	incf	postinc2,f,c
  2422  0009EA  0E00               	movlw	0
  2423  0009EC  22DD               	addwfc	postdec2,f,c
  2424                           
  2425                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
  2426  0009EE  0E00               	movlw	0
  2427  0009F0  6E11               	movwf	fputc@c+1,c
  2428  0009F2  0E25               	movlw	37
  2429  0009F4  6E10               	movwf	fputc@c,c
  2430  0009F6  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2431  0009FA  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2432  0009FE  EC4A  F007         	call	_fputc	;wreg free
  2433  000A02                     l2528:
  2434                           
  2435                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
  2436  000A02  0E00               	movlw	0
  2437  000A04  6E50               	movwf	?_vfpfcnvrt+1,c
  2438  000A06  0E01               	movlw	1
  2439  000A08  6E4F               	movwf	?_vfpfcnvrt,c
  2440  000A0A  0012               	return	
  2441  000A0C                     l2532:
  2442                           
  2443                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  2444  000A0C  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2445  000A10  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2446  000A14  2ADE               	incf	postinc2,f,c
  2447  000A16  0E00               	movlw	0
  2448  000A18  22DD               	addwfc	postdec2,f,c
  2449                           
  2450                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  2451  000A1A  0E00               	movlw	0
  2452  000A1C  6E50               	movwf	?_vfpfcnvrt+1,c
  2453  000A1E  0E00               	movlw	0
  2454  000A20  6E4F               	movwf	?_vfpfcnvrt,c
  2455  000A22  0012               	return	
  2456  000A24                     l2538:
  2457                           
  2458                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  2459  000A24  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2460  000A28  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2461  000A2C  CFDE FFF6          	movff	postinc2,tblptrl
  2462  000A30  CFDD FFF7          	movff	postdec2,tblptrh
  2463  000A34                     	if	0	;tblptru may be non-zero
  2464  000A34                     	endif
  2465  000A34                     	if	0	;tblptru may be non-zero
  2466  000A34                     	endif
  2467  000A34  0008               	tblrd		*
  2468  000A36  50F5               	movf	tablat,w,c
  2469  000A38  6E10               	movwf	fputc@c,c
  2470  000A3A  6A11               	clrf	fputc@c+1,c
  2471  000A3C  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2472  000A40  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2473  000A44  EC4A  F007         	call	_fputc	;wreg free
  2474                           
  2475                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  2476  000A48  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2477  000A4C  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2478  000A50  2ADE               	incf	postinc2,f,c
  2479  000A52  0E00               	movlw	0
  2480  000A54  22DD               	addwfc	postdec2,f,c
  2481  000A56  D7D5               	goto	l2528
  2482  000A58                     __end_of_vfpfcnvrt:
  2483                           	opt callstack 0
  2484                           
  2485 ;; *************** function _dtoa *****************
  2486 ;; Defined at:
  2487 ;;		line 274 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  2490 ;;		 -> NULL(0), 
  2491 ;;  d               8   44[COMRAM] long long 
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;  n               8   68[COMRAM] long long 
  2494 ;;  i               2   76[COMRAM] int 
  2495 ;;  s               2   66[COMRAM] int 
  2496 ;;  w               2   64[COMRAM] int 
  2497 ;;  p               2   62[COMRAM] int 
  2498 ;; Return value:  Size  Location     Type
  2499 ;;                  2   42[COMRAM] int 
  2500 ;; Registers used:
  2501 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2502 ;; Tracked objects:
  2503 ;;		On entry : 0/0
  2504 ;;		On exit  : 0/0
  2505 ;;		Unchanged: 0/0
  2506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2507 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2508 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2509 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2510 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2511 ;;Total ram usage:       36 bytes
  2512 ;; Hardware stack levels used:    1
  2513 ;; Hardware stack levels required when called:    8
  2514 ;; This function calls:
  2515 ;;		___aodiv
  2516 ;;		___aomod
  2517 ;;		_abs
  2518 ;;		_pad
  2519 ;; This function is called by:
  2520 ;;		_vfpfcnvrt
  2521 ;; This function uses a non-reentrant model
  2522 ;;
  2523                           
  2524                           	psect	text4
  2525  000630                     __ptext4:
  2526                           	opt callstack 0
  2527  000630                     _dtoa:
  2528                           	opt callstack 19
  2529                           
  2530                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 274: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.
      +                          c: 275: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 276:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 277:   
      +                            long long n;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 280:  
      +                             n = d;
  2531                           
  2532                           ;incstack = 0
  2533  000630  C02D  F045         	movff	dtoa@d,dtoa@n
  2534  000634  C02E  F046         	movff	dtoa@d+1,dtoa@n+1
  2535  000638  C02F  F047         	movff	dtoa@d+2,dtoa@n+2
  2536  00063C  C030  F048         	movff	dtoa@d+3,dtoa@n+3
  2537  000640  C031  F049         	movff	dtoa@d+4,dtoa@n+4
  2538  000644  C032  F04A         	movff	dtoa@d+5,dtoa@n+5
  2539  000648  C033  F04B         	movff	dtoa@d+6,dtoa@n+6
  2540  00064C  C034  F04C         	movff	dtoa@d+7,dtoa@n+7
  2541                           
  2542                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ?
      +                           1 : 0;
  2543  000650  AE4C               	btfss	dtoa@n+7,7,c
  2544  000652  D002               	goto	u1890
  2545  000654  0E01               	movlw	1
  2546  000656  D001               	goto	u1900
  2547  000658                     u1890:
  2548  000658  0E00               	movlw	0
  2549  00065A                     u1900:
  2550  00065A  6E43               	movwf	dtoa@s,c
  2551  00065C  6A44               	clrf	dtoa@s+1,c
  2552                           
  2553                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  2554  00065E  5043               	movf	dtoa@s,w,c
  2555  000660  1044               	iorwf	dtoa@s+1,w,c
  2556  000662  B4D8               	btfsc	status,2,c
  2557  000664  D010               	goto	l2440
  2558                           
  2559                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  2560  000666  1E4C               	comf	dtoa@n+7,f,c
  2561  000668  1E4B               	comf	dtoa@n+6,f,c
  2562  00066A  1E4A               	comf	dtoa@n+5,f,c
  2563  00066C  1E49               	comf	dtoa@n+4,f,c
  2564  00066E  1E48               	comf	dtoa@n+3,f,c
  2565  000670  1E47               	comf	dtoa@n+2,f,c
  2566  000672  1E46               	comf	dtoa@n+1,f,c
  2567  000674  6C45               	negf	dtoa@n,c
  2568  000676  0E00               	movlw	0
  2569  000678  2246               	addwfc	dtoa@n+1,f,c
  2570  00067A  2247               	addwfc	dtoa@n+2,f,c
  2571  00067C  2248               	addwfc	dtoa@n+3,f,c
  2572  00067E  2249               	addwfc	dtoa@n+4,f,c
  2573  000680  224A               	addwfc	dtoa@n+5,f,c
  2574  000682  224B               	addwfc	dtoa@n+6,f,c
  2575  000684  224C               	addwfc	dtoa@n+7,f,c
  2576  000686                     l2440:
  2577                           
  2578                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 287:     if (!(prec 
      +                          < 0)) {
  2579  000686  AE71               	btfss	_prec+1,7,c
  2580                           
  2581                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 288:         flags &
      +                          = ~(1 << 1);
  2582  000688  9272               	bcf	_flags,1,c
  2583                           
  2584                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 290:     p = (0 < pr
      +                          ec) ? prec : 1;
  2585  00068A  BE71               	btfsc	_prec+1,7,c
  2586  00068C  D005               	goto	u1930
  2587  00068E  5071               	movf	_prec+1,w,c
  2588  000690  E108               	bnz	l183
  2589  000692  0470               	decf	_prec,w,c
  2590  000694  B0D8               	btfsc	status,0,c
  2591  000696  D005               	goto	l183
  2592  000698                     u1930:
  2593  000698  0E00               	movlw	0
  2594  00069A  6E40               	movwf	dtoa@p+1,c
  2595  00069C  0E01               	movlw	1
  2596  00069E  6E3F               	movwf	dtoa@p,c
  2597  0006A0  D004               	goto	l185
  2598  0006A2                     l183:
  2599  0006A2  C070  F03F         	movff	_prec,dtoa@p
  2600  0006A6  C071  F040         	movff	_prec+1,dtoa@p+1
  2601  0006AA                     l185:
  2602                           
  2603                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 291:     w = width;
  2604  0006AA  C06E  F041         	movff	_width,dtoa@w
  2605  0006AE  C06F  F042         	movff	_width+1,dtoa@w+1
  2606                           
  2607                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 292:     if (s || (f
      +                          lags & (1 << 2))) {
  2608  0006B2  5043               	movf	dtoa@s,w,c
  2609  0006B4  1044               	iorwf	dtoa@s+1,w,c
  2610  0006B6  A4D8               	btfss	status,2,c
  2611  0006B8  D002               	goto	u1950
  2612  0006BA  A472               	btfss	_flags,2,c
  2613  0006BC  D003               	goto	l2454
  2614  0006BE                     u1950:
  2615                           
  2616                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 293:         --w;
  2617  0006BE  0641               	decf	dtoa@w,f,c
  2618  0006C0  A0D8               	btfss	status,0,c
  2619  0006C2  0642               	decf	dtoa@w+1,f,c
  2620  0006C4                     l2454:
  2621                           
  2622                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(
      +                          dbuf) - 1;
  2623  0006C4  0E00               	movlw	0
  2624  0006C6  6E4E               	movwf	dtoa@i+1,c
  2625  0006C8  0E1F               	movlw	31
  2626  0006CA  6E4D               	movwf	dtoa@i,c
  2627                           
  2628                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '
      +                          \0';
  2629  0006CC  0E00               	movlw	0
  2630  0006CE  0100               	movlb	0	; () banked
  2631  0006D0  6FE4               	movwf	(_dbuf+31)& (0+255),b
  2632                           
  2633                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2634  0006D2  D07C               	goto	l2468
  2635  0006D4                     l2458:
  2636                           
  2637                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 300:         --i;
  2638  0006D4  064D               	decf	dtoa@i,f,c
  2639  0006D6  A0D8               	btfss	status,0,c
  2640  0006D8  064E               	decf	dtoa@i+1,f,c
  2641                           
  2642                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 301:         dbuf[i]
      +                           = '0' + abs(n % 10);
  2643  0006DA  0EC5               	movlw	low _dbuf
  2644  0006DC  244D               	addwf	dtoa@i,w,c
  2645  0006DE  6ED9               	movwf	fsr2l,c
  2646  0006E0  0E00               	movlw	high _dbuf
  2647  0006E2  204E               	addwfc	dtoa@i+1,w,c
  2648  0006E4  6EDA               	movwf	fsr2h,c
  2649  0006E6  C045  F00C         	movff	dtoa@n,___aomod@dividend
  2650  0006EA  C046  F00D         	movff	dtoa@n+1,___aomod@dividend+1
  2651  0006EE  C047  F00E         	movff	dtoa@n+2,___aomod@dividend+2
  2652  0006F2  C048  F00F         	movff	dtoa@n+3,___aomod@dividend+3
  2653  0006F6  C049  F010         	movff	dtoa@n+4,___aomod@dividend+4
  2654  0006FA  C04A  F011         	movff	dtoa@n+5,___aomod@dividend+5
  2655  0006FE  C04B  F012         	movff	dtoa@n+6,___aomod@dividend+6
  2656  000702  C04C  F013         	movff	dtoa@n+7,___aomod@dividend+7
  2657  000706  0E0A               	movlw	10
  2658  000708  6E14               	movwf	___aomod@divisor,c
  2659  00070A  0E00               	movlw	0
  2660  00070C  6E15               	movwf	___aomod@divisor+1,c
  2661  00070E  0E00               	movlw	0
  2662  000710  6E16               	movwf	___aomod@divisor+2,c
  2663  000712  0E00               	movlw	0
  2664  000714  6E17               	movwf	___aomod@divisor+3,c
  2665  000716  0E00               	movlw	0
  2666  000718  6E18               	movwf	___aomod@divisor+4,c
  2667  00071A  0E00               	movlw	0
  2668  00071C  6E19               	movwf	___aomod@divisor+5,c
  2669  00071E  0E00               	movlw	0
  2670  000720  6E1A               	movwf	___aomod@divisor+6,c
  2671  000722  0E00               	movlw	0
  2672  000724  6E1B               	movwf	___aomod@divisor+7,c
  2673  000726  ECD0  F005         	call	___aomod	;wreg free
  2674  00072A  C00C  F035         	movff	?___aomod,??_dtoa
  2675  00072E  C00D  F036         	movff	?___aomod+1,??_dtoa+1
  2676  000732  C00E  F037         	movff	?___aomod+2,??_dtoa+2
  2677  000736  C00F  F038         	movff	?___aomod+3,??_dtoa+3
  2678  00073A  C010  F039         	movff	?___aomod+4,??_dtoa+4
  2679  00073E  C011  F03A         	movff	?___aomod+5,??_dtoa+5
  2680  000742  C012  F03B         	movff	?___aomod+6,??_dtoa+6
  2681  000746  C013  F03C         	movff	?___aomod+7,??_dtoa+7
  2682  00074A  C035  F01E         	movff	??_dtoa,abs@a
  2683  00074E  C037  F01F         	movff	??_dtoa+2,abs@a+1
  2684  000752  EC65  F008         	call	_abs	;wreg free
  2685  000756  501E               	movf	?_abs,w,c
  2686  000758  0F30               	addlw	48
  2687  00075A  6EDF               	movwf	indf2,c
  2688                           
  2689                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 302:         --p;
  2690  00075C  063F               	decf	dtoa@p,f,c
  2691  00075E  A0D8               	btfss	status,0,c
  2692  000760  0640               	decf	dtoa@p+1,f,c
  2693                           
  2694                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 303:         --w;
  2695  000762  0641               	decf	dtoa@w,f,c
  2696  000764  A0D8               	btfss	status,0,c
  2697  000766  0642               	decf	dtoa@w+1,f,c
  2698                           
  2699                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 304:         n = n /
      +                           10;
  2700  000768  C045  F00C         	movff	dtoa@n,___aodiv@dividend
  2701  00076C  C046  F00D         	movff	dtoa@n+1,___aodiv@dividend+1
  2702  000770  C047  F00E         	movff	dtoa@n+2,___aodiv@dividend+2
  2703  000774  C048  F00F         	movff	dtoa@n+3,___aodiv@dividend+3
  2704  000778  C049  F010         	movff	dtoa@n+4,___aodiv@dividend+4
  2705  00077C  C04A  F011         	movff	dtoa@n+5,___aodiv@dividend+5
  2706  000780  C04B  F012         	movff	dtoa@n+6,___aodiv@dividend+6
  2707  000784  C04C  F013         	movff	dtoa@n+7,___aodiv@dividend+7
  2708  000788  0E0A               	movlw	10
  2709  00078A  6E14               	movwf	___aodiv@divisor,c
  2710  00078C  0E00               	movlw	0
  2711  00078E  6E15               	movwf	___aodiv@divisor+1,c
  2712  000790  0E00               	movlw	0
  2713  000792  6E16               	movwf	___aodiv@divisor+2,c
  2714  000794  0E00               	movlw	0
  2715  000796  6E17               	movwf	___aodiv@divisor+3,c
  2716  000798  0E00               	movlw	0
  2717  00079A  6E18               	movwf	___aodiv@divisor+4,c
  2718  00079C  0E00               	movlw	0
  2719  00079E  6E19               	movwf	___aodiv@divisor+5,c
  2720  0007A0  0E00               	movlw	0
  2721  0007A2  6E1A               	movwf	___aodiv@divisor+6,c
  2722  0007A4  0E00               	movlw	0
  2723  0007A6  6E1B               	movwf	___aodiv@divisor+7,c
  2724  0007A8  EC2C  F005         	call	___aodiv	;wreg free
  2725  0007AC  C00C  F045         	movff	?___aodiv,dtoa@n
  2726  0007B0  C00D  F046         	movff	?___aodiv+1,dtoa@n+1
  2727  0007B4  C00E  F047         	movff	?___aodiv+2,dtoa@n+2
  2728  0007B8  C00F  F048         	movff	?___aodiv+3,dtoa@n+3
  2729  0007BC  C010  F049         	movff	?___aodiv+4,dtoa@n+4
  2730  0007C0  C011  F04A         	movff	?___aodiv+5,dtoa@n+5
  2731  0007C4  C012  F04B         	movff	?___aodiv+6,dtoa@n+6
  2732  0007C8  C013  F04C         	movff	?___aodiv+7,dtoa@n+7
  2733  0007CC                     l2468:
  2734                           
  2735                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2736  0007CC  BE4E               	btfsc	dtoa@i+1,7,c
  2737  0007CE  D01F               	goto	u2000
  2738  0007D0  504E               	movf	dtoa@i+1,w,c
  2739  0007D2  E103               	bnz	u1960
  2740  0007D4  044D               	decf	dtoa@i,w,c
  2741  0007D6  A0D8               	btfss	status,0,c
  2742  0007D8  D01A               	goto	u2000
  2743  0007DA                     u1960:
  2744  0007DA  5045               	movf	dtoa@n,w,c
  2745  0007DC  1046               	iorwf	dtoa@n+1,w,c
  2746  0007DE  1047               	iorwf	dtoa@n+2,w,c
  2747  0007E0  1048               	iorwf	dtoa@n+3,w,c
  2748  0007E2  1049               	iorwf	dtoa@n+4,w,c
  2749  0007E4  104A               	iorwf	dtoa@n+5,w,c
  2750  0007E6  104B               	iorwf	dtoa@n+6,w,c
  2751  0007E8  104C               	iorwf	dtoa@n+7,w,c
  2752  0007EA  A4D8               	btfss	status,2,c
  2753  0007EC  D773               	goto	l2458
  2754  0007EE  BE40               	btfsc	dtoa@p+1,7,c
  2755  0007F0  D005               	goto	u1980
  2756  0007F2  5040               	movf	dtoa@p+1,w,c
  2757  0007F4  E102               	bnz	u1981
  2758  0007F6  043F               	decf	dtoa@p,w,c
  2759  0007F8  B0D8               	btfsc	status,0,c
  2760  0007FA                     u1981:
  2761  0007FA  D76C               	goto	l2458
  2762  0007FC                     u1980:
  2763  0007FC  BE42               	btfsc	dtoa@w+1,7,c
  2764  0007FE  D007               	goto	u2000
  2765  000800  5042               	movf	dtoa@w+1,w,c
  2766  000802  E103               	bnz	u1990
  2767  000804  0441               	decf	dtoa@w,w,c
  2768  000806  A0D8               	btfss	status,0,c
  2769  000808  D002               	goto	u2000
  2770  00080A                     u1990:
  2771  00080A  B272               	btfsc	_flags,1,c
  2772  00080C  D763               	goto	l2458
  2773  00080E                     u2000:
  2774                           
  2775                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 308:     if (s || (f
      +                          lags & (1 << 2))) {
  2776  00080E  5043               	movf	dtoa@s,w,c
  2777  000810  1044               	iorwf	dtoa@s+1,w,c
  2778  000812  A4D8               	btfss	status,2,c
  2779  000814  D002               	goto	u2020
  2780  000816  A472               	btfss	_flags,2,c
  2781  000818  D017               	goto	l2492
  2782  00081A                     u2020:
  2783                           
  2784                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 309:         --i;
  2785  00081A  064D               	decf	dtoa@i,f,c
  2786  00081C  A0D8               	btfss	status,0,c
  2787  00081E  064E               	decf	dtoa@i+1,f,c
  2788                           
  2789                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 310:         dbuf[i]
      +                           = s ? '-' : '+';
  2790  000820  5043               	movf	dtoa@s,w,c
  2791  000822  1044               	iorwf	dtoa@s+1,w,c
  2792  000824  A4D8               	btfss	status,2,c
  2793  000826  D004               	goto	l2488
  2794  000828  0E00               	movlw	0
  2795  00082A  6E3E               	movwf	_dtoa$329+1,c
  2796  00082C  0E2B               	movlw	43
  2797  00082E  D003               	goto	L2
  2798  000830                     l2488:
  2799  000830  0E00               	movlw	0
  2800  000832  6E3E               	movwf	_dtoa$329+1,c
  2801  000834  0E2D               	movlw	45
  2802  000836                     L2:
  2803  000836  6E3D               	movwf	_dtoa$329,c
  2804  000838  0EC5               	movlw	low _dbuf
  2805  00083A  244D               	addwf	dtoa@i,w,c
  2806  00083C  6ED9               	movwf	fsr2l,c
  2807  00083E  0E00               	movlw	high _dbuf
  2808  000840  204E               	addwfc	dtoa@i+1,w,c
  2809  000842  6EDA               	movwf	fsr2h,c
  2810  000844  C03D  FFDF         	movff	_dtoa$329,indf2
  2811  000848                     l2492:
  2812                           
  2813                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 314:     return pad(
      +                          fp, &dbuf[i], w);
  2814  000848  C02B  F020         	movff	dtoa@fp,pad@fp
  2815  00084C  C02C  F021         	movff	dtoa@fp+1,pad@fp+1
  2816  000850  0EC5               	movlw	low _dbuf
  2817  000852  244D               	addwf	dtoa@i,w,c
  2818  000854  6E22               	movwf	pad@buf,c
  2819  000856  0E00               	movlw	high _dbuf
  2820  000858  204E               	addwfc	dtoa@i+1,w,c
  2821  00085A  6E23               	movwf	pad@buf+1,c
  2822  00085C  C041  F024         	movff	dtoa@w,pad@p
  2823  000860  C042  F025         	movff	dtoa@w+1,pad@p+1
  2824  000864  ECC7  F006         	call	_pad	;wreg free
  2825  000868  C020  F02B         	movff	?_pad,?_dtoa
  2826  00086C  C021  F02C         	movff	?_pad+1,?_dtoa+1
  2827  000870  0012               	return		;funcret
  2828  000872                     __end_of_dtoa:
  2829                           	opt callstack 0
  2830                           
  2831 ;; *************** function _abs *****************
  2832 ;; Defined at:
  2833 ;;		line 1 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/abs.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;  a               2   29[COMRAM] int 
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;		None
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  2   29[COMRAM] int 
  2840 ;; Registers used:
  2841 ;;		wreg, status,2, status,0
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2847 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2849 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2850 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;Total ram usage:        4 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:    1
  2854 ;; This function calls:
  2855 ;;		Nothing
  2856 ;; This function is called by:
  2857 ;;		_dtoa
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           	psect	text5
  2862  0010CA                     __ptext5:
  2863                           	opt callstack 0
  2864  0010CA                     _abs:
  2865                           	opt callstack 25
  2866                           
  2867                           ;incstack = 0
  2868  0010CA  BE1F               	btfsc	abs@a+1,7,c
  2869  0010CC  D005               	goto	u1740
  2870  0010CE  501F               	movf	abs@a+1,w,c
  2871  0010D0  E110               	bnz	l896
  2872  0010D2  041E               	decf	abs@a,w,c
  2873  0010D4  B0D8               	btfsc	status,0,c
  2874  0010D6  D00D               	goto	l896
  2875  0010D8                     u1740:
  2876  0010D8  C01E  F020         	movff	abs@a,??_abs
  2877  0010DC  C01F  F021         	movff	abs@a+1,??_abs+1
  2878  0010E0  1E20               	comf	??_abs,f,c
  2879  0010E2  1E21               	comf	??_abs+1,f,c
  2880  0010E4  4A20               	infsnz	??_abs,f,c
  2881  0010E6  2A21               	incf	??_abs+1,f,c
  2882  0010E8  C020  F01E         	movff	??_abs,?_abs
  2883  0010EC  C021  F01F         	movff	??_abs+1,?_abs+1
  2884  0010F0  0012               	return	
  2885  0010F2                     l896:
  2886  0010F2  C01E  F01E         	movff	abs@a,?_abs
  2887  0010F6  C01F  F01F         	movff	abs@a+1,?_abs+1
  2888  0010FA  0012               	return		;funcret
  2889  0010FC                     __end_of_abs:
  2890                           	opt callstack 0
  2891                           
  2892 ;; *************** function ___aomod *****************
  2893 ;; Defined at:
  2894 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aomod.c"
  2895 ;; Parameters:    Size  Location     Type
  2896 ;;  dividend        8   11[COMRAM] long long 
  2897 ;;  divisor         8   19[COMRAM] long long 
  2898 ;; Auto vars:     Size  Location     Type
  2899 ;;  sign            1   28[COMRAM] unsigned char 
  2900 ;;  counter         1   27[COMRAM] unsigned char 
  2901 ;; Return value:  Size  Location     Type
  2902 ;;                  8   11[COMRAM] long long 
  2903 ;; Registers used:
  2904 ;;		wreg, status,2, status,0
  2905 ;; Tracked objects:
  2906 ;;		On entry : 0/0
  2907 ;;		On exit  : 0/0
  2908 ;;		Unchanged: 0/0
  2909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2910 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;Total ram usage:       18 bytes
  2915 ;; Hardware stack levels used:    1
  2916 ;; Hardware stack levels required when called:    1
  2917 ;; This function calls:
  2918 ;;		Nothing
  2919 ;; This function is called by:
  2920 ;;		_dtoa
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text6
  2925  000BA0                     __ptext6:
  2926                           	opt callstack 0
  2927  000BA0                     ___aomod:
  2928                           	opt callstack 25
  2929                           
  2930                           ;incstack = 0
  2931  000BA0  0E00               	movlw	0
  2932  000BA2  6E1D               	movwf	___aomod@sign,c
  2933  000BA4  AE13               	btfss	___aomod@dividend+7,7,c
  2934  000BA6  D012               	goto	l2392
  2935  000BA8  1E13               	comf	___aomod@dividend+7,f,c
  2936  000BAA  1E12               	comf	___aomod@dividend+6,f,c
  2937  000BAC  1E11               	comf	___aomod@dividend+5,f,c
  2938  000BAE  1E10               	comf	___aomod@dividend+4,f,c
  2939  000BB0  1E0F               	comf	___aomod@dividend+3,f,c
  2940  000BB2  1E0E               	comf	___aomod@dividend+2,f,c
  2941  000BB4  1E0D               	comf	___aomod@dividend+1,f,c
  2942  000BB6  6C0C               	negf	___aomod@dividend,c
  2943  000BB8  0E00               	movlw	0
  2944  000BBA  220D               	addwfc	___aomod@dividend+1,f,c
  2945  000BBC  220E               	addwfc	___aomod@dividend+2,f,c
  2946  000BBE  220F               	addwfc	___aomod@dividend+3,f,c
  2947  000BC0  2210               	addwfc	___aomod@dividend+4,f,c
  2948  000BC2  2211               	addwfc	___aomod@dividend+5,f,c
  2949  000BC4  2212               	addwfc	___aomod@dividend+6,f,c
  2950  000BC6  2213               	addwfc	___aomod@dividend+7,f,c
  2951  000BC8  0E01               	movlw	1
  2952  000BCA  6E1D               	movwf	___aomod@sign,c
  2953  000BCC                     l2392:
  2954  000BCC  AE1B               	btfss	___aomod@divisor+7,7,c
  2955  000BCE  D010               	goto	l2396
  2956  000BD0  1E1B               	comf	___aomod@divisor+7,f,c
  2957  000BD2  1E1A               	comf	___aomod@divisor+6,f,c
  2958  000BD4  1E19               	comf	___aomod@divisor+5,f,c
  2959  000BD6  1E18               	comf	___aomod@divisor+4,f,c
  2960  000BD8  1E17               	comf	___aomod@divisor+3,f,c
  2961  000BDA  1E16               	comf	___aomod@divisor+2,f,c
  2962  000BDC  1E15               	comf	___aomod@divisor+1,f,c
  2963  000BDE  6C14               	negf	___aomod@divisor,c
  2964  000BE0  0E00               	movlw	0
  2965  000BE2  2215               	addwfc	___aomod@divisor+1,f,c
  2966  000BE4  2216               	addwfc	___aomod@divisor+2,f,c
  2967  000BE6  2217               	addwfc	___aomod@divisor+3,f,c
  2968  000BE8  2218               	addwfc	___aomod@divisor+4,f,c
  2969  000BEA  2219               	addwfc	___aomod@divisor+5,f,c
  2970  000BEC  221A               	addwfc	___aomod@divisor+6,f,c
  2971  000BEE  221B               	addwfc	___aomod@divisor+7,f,c
  2972  000BF0                     l2396:
  2973  000BF0  5014               	movf	___aomod@divisor,w,c
  2974  000BF2  1015               	iorwf	___aomod@divisor+1,w,c
  2975  000BF4  1016               	iorwf	___aomod@divisor+2,w,c
  2976  000BF6  1017               	iorwf	___aomod@divisor+3,w,c
  2977  000BF8  1018               	iorwf	___aomod@divisor+4,w,c
  2978  000BFA  1019               	iorwf	___aomod@divisor+5,w,c
  2979  000BFC  101A               	iorwf	___aomod@divisor+6,w,c
  2980  000BFE  101B               	iorwf	___aomod@divisor+7,w,c
  2981  000C00  B4D8               	btfsc	status,2,c
  2982  000C02  D03C               	goto	l2412
  2983  000C04  0E01               	movlw	1
  2984  000C06  6E1C               	movwf	___aomod@counter,c
  2985  000C08  D00A               	goto	l2402
  2986  000C0A                     l2400:
  2987  000C0A  90D8               	bcf	status,0,c
  2988  000C0C  3614               	rlcf	___aomod@divisor,f,c
  2989  000C0E  3615               	rlcf	___aomod@divisor+1,f,c
  2990  000C10  3616               	rlcf	___aomod@divisor+2,f,c
  2991  000C12  3617               	rlcf	___aomod@divisor+3,f,c
  2992  000C14  3618               	rlcf	___aomod@divisor+4,f,c
  2993  000C16  3619               	rlcf	___aomod@divisor+5,f,c
  2994  000C18  361A               	rlcf	___aomod@divisor+6,f,c
  2995  000C1A  361B               	rlcf	___aomod@divisor+7,f,c
  2996  000C1C  2A1C               	incf	___aomod@counter,f,c
  2997  000C1E                     l2402:
  2998  000C1E  AE1B               	btfss	___aomod@divisor+7,7,c
  2999  000C20  D7F4               	goto	l2400
  3000  000C22                     u1850:
  3001  000C22  5014               	movf	___aomod@divisor,w,c
  3002  000C24  5C0C               	subwf	___aomod@dividend,w,c
  3003  000C26  5015               	movf	___aomod@divisor+1,w,c
  3004  000C28  580D               	subwfb	___aomod@dividend+1,w,c
  3005  000C2A  5016               	movf	___aomod@divisor+2,w,c
  3006  000C2C  580E               	subwfb	___aomod@dividend+2,w,c
  3007  000C2E  5017               	movf	___aomod@divisor+3,w,c
  3008  000C30  580F               	subwfb	___aomod@dividend+3,w,c
  3009  000C32  5018               	movf	___aomod@divisor+4,w,c
  3010  000C34  5810               	subwfb	___aomod@dividend+4,w,c
  3011  000C36  5019               	movf	___aomod@divisor+5,w,c
  3012  000C38  5811               	subwfb	___aomod@dividend+5,w,c
  3013  000C3A  501A               	movf	___aomod@divisor+6,w,c
  3014  000C3C  5812               	subwfb	___aomod@dividend+6,w,c
  3015  000C3E  501B               	movf	___aomod@divisor+7,w,c
  3016  000C40  5813               	subwfb	___aomod@dividend+7,w,c
  3017  000C42  A0D8               	btfss	status,0,c
  3018  000C44  D010               	goto	l2408
  3019  000C46  5014               	movf	___aomod@divisor,w,c
  3020  000C48  5E0C               	subwf	___aomod@dividend,f,c
  3021  000C4A  5015               	movf	___aomod@divisor+1,w,c
  3022  000C4C  5A0D               	subwfb	___aomod@dividend+1,f,c
  3023  000C4E  5016               	movf	___aomod@divisor+2,w,c
  3024  000C50  5A0E               	subwfb	___aomod@dividend+2,f,c
  3025  000C52  5017               	movf	___aomod@divisor+3,w,c
  3026  000C54  5A0F               	subwfb	___aomod@dividend+3,f,c
  3027  000C56  5018               	movf	___aomod@divisor+4,w,c
  3028  000C58  5A10               	subwfb	___aomod@dividend+4,f,c
  3029  000C5A  5019               	movf	___aomod@divisor+5,w,c
  3030  000C5C  5A11               	subwfb	___aomod@dividend+5,f,c
  3031  000C5E  501A               	movf	___aomod@divisor+6,w,c
  3032  000C60  5A12               	subwfb	___aomod@dividend+6,f,c
  3033  000C62  501B               	movf	___aomod@divisor+7,w,c
  3034  000C64  5A13               	subwfb	___aomod@dividend+7,f,c
  3035  000C66                     l2408:
  3036  000C66  90D8               	bcf	status,0,c
  3037  000C68  321B               	rrcf	___aomod@divisor+7,f,c
  3038  000C6A  321A               	rrcf	___aomod@divisor+6,f,c
  3039  000C6C  3219               	rrcf	___aomod@divisor+5,f,c
  3040  000C6E  3218               	rrcf	___aomod@divisor+4,f,c
  3041  000C70  3217               	rrcf	___aomod@divisor+3,f,c
  3042  000C72  3216               	rrcf	___aomod@divisor+2,f,c
  3043  000C74  3215               	rrcf	___aomod@divisor+1,f,c
  3044  000C76  3214               	rrcf	___aomod@divisor,f,c
  3045  000C78  2E1C               	decfsz	___aomod@counter,f,c
  3046  000C7A  D7D3               	goto	u1850
  3047  000C7C                     l2412:
  3048  000C7C  501D               	movf	___aomod@sign,w,c
  3049  000C7E  B4D8               	btfsc	status,2,c
  3050  000C80  D010               	goto	l2416
  3051  000C82  1E13               	comf	___aomod@dividend+7,f,c
  3052  000C84  1E12               	comf	___aomod@dividend+6,f,c
  3053  000C86  1E11               	comf	___aomod@dividend+5,f,c
  3054  000C88  1E10               	comf	___aomod@dividend+4,f,c
  3055  000C8A  1E0F               	comf	___aomod@dividend+3,f,c
  3056  000C8C  1E0E               	comf	___aomod@dividend+2,f,c
  3057  000C8E  1E0D               	comf	___aomod@dividend+1,f,c
  3058  000C90  6C0C               	negf	___aomod@dividend,c
  3059  000C92  0E00               	movlw	0
  3060  000C94  220D               	addwfc	___aomod@dividend+1,f,c
  3061  000C96  220E               	addwfc	___aomod@dividend+2,f,c
  3062  000C98  220F               	addwfc	___aomod@dividend+3,f,c
  3063  000C9A  2210               	addwfc	___aomod@dividend+4,f,c
  3064  000C9C  2211               	addwfc	___aomod@dividend+5,f,c
  3065  000C9E  2212               	addwfc	___aomod@dividend+6,f,c
  3066  000CA0  2213               	addwfc	___aomod@dividend+7,f,c
  3067  000CA2                     l2416:
  3068  000CA2  C00C  F00C         	movff	___aomod@dividend,?___aomod
  3069  000CA6  C00D  F00D         	movff	___aomod@dividend+1,?___aomod+1
  3070  000CAA  C00E  F00E         	movff	___aomod@dividend+2,?___aomod+2
  3071  000CAE  C00F  F00F         	movff	___aomod@dividend+3,?___aomod+3
  3072  000CB2  C010  F010         	movff	___aomod@dividend+4,?___aomod+4
  3073  000CB6  C011  F011         	movff	___aomod@dividend+5,?___aomod+5
  3074  000CBA  C012  F012         	movff	___aomod@dividend+6,?___aomod+6
  3075  000CBE  C013  F013         	movff	___aomod@dividend+7,?___aomod+7
  3076  000CC2  0012               	return		;funcret
  3077  000CC4                     __end_of___aomod:
  3078                           	opt callstack 0
  3079                           
  3080 ;; *************** function ___aodiv *****************
  3081 ;; Defined at:
  3082 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aodiv.c"
  3083 ;; Parameters:    Size  Location     Type
  3084 ;;  dividend        8   11[COMRAM] long long 
  3085 ;;  divisor         8   19[COMRAM] long long 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;  quotient        8   29[COMRAM] long long 
  3088 ;;  sign            1   28[COMRAM] unsigned char 
  3089 ;;  counter         1   27[COMRAM] unsigned char 
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  8   11[COMRAM] long long 
  3092 ;; Registers used:
  3093 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3099 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3102 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3103 ;;Total ram usage:       26 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:    1
  3106 ;; This function calls:
  3107 ;;		Nothing
  3108 ;; This function is called by:
  3109 ;;		_dtoa
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text7
  3114  000A58                     __ptext7:
  3115                           	opt callstack 0
  3116  000A58                     ___aodiv:
  3117                           	opt callstack 25
  3118                           
  3119                           ;incstack = 0
  3120  000A58  0E00               	movlw	0
  3121  000A5A  6E1D               	movwf	___aodiv@sign,c
  3122  000A5C  AE1B               	btfss	___aodiv@divisor+7,7,c
  3123  000A5E  D012               	goto	l2348
  3124  000A60  1E1B               	comf	___aodiv@divisor+7,f,c
  3125  000A62  1E1A               	comf	___aodiv@divisor+6,f,c
  3126  000A64  1E19               	comf	___aodiv@divisor+5,f,c
  3127  000A66  1E18               	comf	___aodiv@divisor+4,f,c
  3128  000A68  1E17               	comf	___aodiv@divisor+3,f,c
  3129  000A6A  1E16               	comf	___aodiv@divisor+2,f,c
  3130  000A6C  1E15               	comf	___aodiv@divisor+1,f,c
  3131  000A6E  6C14               	negf	___aodiv@divisor,c
  3132  000A70  0E00               	movlw	0
  3133  000A72  2215               	addwfc	___aodiv@divisor+1,f,c
  3134  000A74  2216               	addwfc	___aodiv@divisor+2,f,c
  3135  000A76  2217               	addwfc	___aodiv@divisor+3,f,c
  3136  000A78  2218               	addwfc	___aodiv@divisor+4,f,c
  3137  000A7A  2219               	addwfc	___aodiv@divisor+5,f,c
  3138  000A7C  221A               	addwfc	___aodiv@divisor+6,f,c
  3139  000A7E  221B               	addwfc	___aodiv@divisor+7,f,c
  3140  000A80  0E01               	movlw	1
  3141  000A82  6E1D               	movwf	___aodiv@sign,c
  3142  000A84                     l2348:
  3143  000A84  AE13               	btfss	___aodiv@dividend+7,7,c
  3144  000A86  D012               	goto	l2354
  3145  000A88  1E13               	comf	___aodiv@dividend+7,f,c
  3146  000A8A  1E12               	comf	___aodiv@dividend+6,f,c
  3147  000A8C  1E11               	comf	___aodiv@dividend+5,f,c
  3148  000A8E  1E10               	comf	___aodiv@dividend+4,f,c
  3149  000A90  1E0F               	comf	___aodiv@dividend+3,f,c
  3150  000A92  1E0E               	comf	___aodiv@dividend+2,f,c
  3151  000A94  1E0D               	comf	___aodiv@dividend+1,f,c
  3152  000A96  6C0C               	negf	___aodiv@dividend,c
  3153  000A98  0E00               	movlw	0
  3154  000A9A  220D               	addwfc	___aodiv@dividend+1,f,c
  3155  000A9C  220E               	addwfc	___aodiv@dividend+2,f,c
  3156  000A9E  220F               	addwfc	___aodiv@dividend+3,f,c
  3157  000AA0  2210               	addwfc	___aodiv@dividend+4,f,c
  3158  000AA2  2211               	addwfc	___aodiv@dividend+5,f,c
  3159  000AA4  2212               	addwfc	___aodiv@dividend+6,f,c
  3160  000AA6  2213               	addwfc	___aodiv@dividend+7,f,c
  3161  000AA8  0E01               	movlw	1
  3162  000AAA  1A1D               	xorwf	___aodiv@sign,f,c
  3163  000AAC                     l2354:
  3164  000AAC  EE20  F01E         	lfsr	2,___aodiv@quotient
  3165  000AB0  0E07               	movlw	7
  3166  000AB2                     u1771:
  3167  000AB2  6ADE               	clrf	postinc2,c
  3168  000AB4  06E8               	decf	wreg,f,c
  3169  000AB6  E2FD               	bc	u1771
  3170  000AB8  5014               	movf	___aodiv@divisor,w,c
  3171  000ABA  1015               	iorwf	___aodiv@divisor+1,w,c
  3172  000ABC  1016               	iorwf	___aodiv@divisor+2,w,c
  3173  000ABE  1017               	iorwf	___aodiv@divisor+3,w,c
  3174  000AC0  1018               	iorwf	___aodiv@divisor+4,w,c
  3175  000AC2  1019               	iorwf	___aodiv@divisor+5,w,c
  3176  000AC4  101A               	iorwf	___aodiv@divisor+6,w,c
  3177  000AC6  101B               	iorwf	___aodiv@divisor+7,w,c
  3178  000AC8  B4D8               	btfsc	status,2,c
  3179  000ACA  D046               	goto	l2376
  3180  000ACC  0E01               	movlw	1
  3181  000ACE  6E1C               	movwf	___aodiv@counter,c
  3182  000AD0  D00A               	goto	l2362
  3183  000AD2                     l2360:
  3184  000AD2  90D8               	bcf	status,0,c
  3185  000AD4  3614               	rlcf	___aodiv@divisor,f,c
  3186  000AD6  3615               	rlcf	___aodiv@divisor+1,f,c
  3187  000AD8  3616               	rlcf	___aodiv@divisor+2,f,c
  3188  000ADA  3617               	rlcf	___aodiv@divisor+3,f,c
  3189  000ADC  3618               	rlcf	___aodiv@divisor+4,f,c
  3190  000ADE  3619               	rlcf	___aodiv@divisor+5,f,c
  3191  000AE0  361A               	rlcf	___aodiv@divisor+6,f,c
  3192  000AE2  361B               	rlcf	___aodiv@divisor+7,f,c
  3193  000AE4  2A1C               	incf	___aodiv@counter,f,c
  3194  000AE6                     l2362:
  3195  000AE6  AE1B               	btfss	___aodiv@divisor+7,7,c
  3196  000AE8  D7F4               	goto	l2360
  3197  000AEA                     u1790:
  3198  000AEA  90D8               	bcf	status,0,c
  3199  000AEC  361E               	rlcf	___aodiv@quotient,f,c
  3200  000AEE  361F               	rlcf	___aodiv@quotient+1,f,c
  3201  000AF0  3620               	rlcf	___aodiv@quotient+2,f,c
  3202  000AF2  3621               	rlcf	___aodiv@quotient+3,f,c
  3203  000AF4  3622               	rlcf	___aodiv@quotient+4,f,c
  3204  000AF6  3623               	rlcf	___aodiv@quotient+5,f,c
  3205  000AF8  3624               	rlcf	___aodiv@quotient+6,f,c
  3206  000AFA  3625               	rlcf	___aodiv@quotient+7,f,c
  3207  000AFC  5014               	movf	___aodiv@divisor,w,c
  3208  000AFE  5C0C               	subwf	___aodiv@dividend,w,c
  3209  000B00  5015               	movf	___aodiv@divisor+1,w,c
  3210  000B02  580D               	subwfb	___aodiv@dividend+1,w,c
  3211  000B04  5016               	movf	___aodiv@divisor+2,w,c
  3212  000B06  580E               	subwfb	___aodiv@dividend+2,w,c
  3213  000B08  5017               	movf	___aodiv@divisor+3,w,c
  3214  000B0A  580F               	subwfb	___aodiv@dividend+3,w,c
  3215  000B0C  5018               	movf	___aodiv@divisor+4,w,c
  3216  000B0E  5810               	subwfb	___aodiv@dividend+4,w,c
  3217  000B10  5019               	movf	___aodiv@divisor+5,w,c
  3218  000B12  5811               	subwfb	___aodiv@dividend+5,w,c
  3219  000B14  501A               	movf	___aodiv@divisor+6,w,c
  3220  000B16  5812               	subwfb	___aodiv@dividend+6,w,c
  3221  000B18  501B               	movf	___aodiv@divisor+7,w,c
  3222  000B1A  5813               	subwfb	___aodiv@dividend+7,w,c
  3223  000B1C  A0D8               	btfss	status,0,c
  3224  000B1E  D011               	goto	l2372
  3225  000B20  5014               	movf	___aodiv@divisor,w,c
  3226  000B22  5E0C               	subwf	___aodiv@dividend,f,c
  3227  000B24  5015               	movf	___aodiv@divisor+1,w,c
  3228  000B26  5A0D               	subwfb	___aodiv@dividend+1,f,c
  3229  000B28  5016               	movf	___aodiv@divisor+2,w,c
  3230  000B2A  5A0E               	subwfb	___aodiv@dividend+2,f,c
  3231  000B2C  5017               	movf	___aodiv@divisor+3,w,c
  3232  000B2E  5A0F               	subwfb	___aodiv@dividend+3,f,c
  3233  000B30  5018               	movf	___aodiv@divisor+4,w,c
  3234  000B32  5A10               	subwfb	___aodiv@dividend+4,f,c
  3235  000B34  5019               	movf	___aodiv@divisor+5,w,c
  3236  000B36  5A11               	subwfb	___aodiv@dividend+5,f,c
  3237  000B38  501A               	movf	___aodiv@divisor+6,w,c
  3238  000B3A  5A12               	subwfb	___aodiv@dividend+6,f,c
  3239  000B3C  501B               	movf	___aodiv@divisor+7,w,c
  3240  000B3E  5A13               	subwfb	___aodiv@dividend+7,f,c
  3241  000B40  801E               	bsf	___aodiv@quotient,0,c
  3242  000B42                     l2372:
  3243  000B42  90D8               	bcf	status,0,c
  3244  000B44  321B               	rrcf	___aodiv@divisor+7,f,c
  3245  000B46  321A               	rrcf	___aodiv@divisor+6,f,c
  3246  000B48  3219               	rrcf	___aodiv@divisor+5,f,c
  3247  000B4A  3218               	rrcf	___aodiv@divisor+4,f,c
  3248  000B4C  3217               	rrcf	___aodiv@divisor+3,f,c
  3249  000B4E  3216               	rrcf	___aodiv@divisor+2,f,c
  3250  000B50  3215               	rrcf	___aodiv@divisor+1,f,c
  3251  000B52  3214               	rrcf	___aodiv@divisor,f,c
  3252  000B54  2E1C               	decfsz	___aodiv@counter,f,c
  3253  000B56  D7C9               	goto	u1790
  3254  000B58                     l2376:
  3255  000B58  501D               	movf	___aodiv@sign,w,c
  3256  000B5A  B4D8               	btfsc	status,2,c
  3257  000B5C  D010               	goto	l2380
  3258  000B5E  1E25               	comf	___aodiv@quotient+7,f,c
  3259  000B60  1E24               	comf	___aodiv@quotient+6,f,c
  3260  000B62  1E23               	comf	___aodiv@quotient+5,f,c
  3261  000B64  1E22               	comf	___aodiv@quotient+4,f,c
  3262  000B66  1E21               	comf	___aodiv@quotient+3,f,c
  3263  000B68  1E20               	comf	___aodiv@quotient+2,f,c
  3264  000B6A  1E1F               	comf	___aodiv@quotient+1,f,c
  3265  000B6C  6C1E               	negf	___aodiv@quotient,c
  3266  000B6E  0E00               	movlw	0
  3267  000B70  221F               	addwfc	___aodiv@quotient+1,f,c
  3268  000B72  2220               	addwfc	___aodiv@quotient+2,f,c
  3269  000B74  2221               	addwfc	___aodiv@quotient+3,f,c
  3270  000B76  2222               	addwfc	___aodiv@quotient+4,f,c
  3271  000B78  2223               	addwfc	___aodiv@quotient+5,f,c
  3272  000B7A  2224               	addwfc	___aodiv@quotient+6,f,c
  3273  000B7C  2225               	addwfc	___aodiv@quotient+7,f,c
  3274  000B7E                     l2380:
  3275  000B7E  C01E  F00C         	movff	___aodiv@quotient,?___aodiv
  3276  000B82  C01F  F00D         	movff	___aodiv@quotient+1,?___aodiv+1
  3277  000B86  C020  F00E         	movff	___aodiv@quotient+2,?___aodiv+2
  3278  000B8A  C021  F00F         	movff	___aodiv@quotient+3,?___aodiv+3
  3279  000B8E  C022  F010         	movff	___aodiv@quotient+4,?___aodiv+4
  3280  000B92  C023  F011         	movff	___aodiv@quotient+5,?___aodiv+5
  3281  000B96  C024  F012         	movff	___aodiv@quotient+6,?___aodiv+6
  3282  000B9A  C025  F013         	movff	___aodiv@quotient+7,?___aodiv+7
  3283  000B9E  0012               	return		;funcret
  3284  000BA0                     __end_of___aodiv:
  3285                           	opt callstack 0
  3286                           
  3287 ;; *************** function _ctoa *****************
  3288 ;; Defined at:
  3289 ;;		line 259 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3290 ;; Parameters:    Size  Location     Type
  3291 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  3292 ;;		 -> NULL(0), 
  3293 ;;  c               1   44[COMRAM] unsigned char 
  3294 ;; Auto vars:     Size  Location     Type
  3295 ;;  w               2   45[COMRAM] int 
  3296 ;;  l               2    0        int 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  2   42[COMRAM] int 
  3299 ;; Registers used:
  3300 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3306 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;Total ram usage:        5 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:    8
  3313 ;; This function calls:
  3314 ;;		_pad
  3315 ;; This function is called by:
  3316 ;;		_vfpfcnvrt
  3317 ;; This function uses a non-reentrant model
  3318 ;;
  3319                           
  3320                           	psect	text8
  3321  000FBC                     __ptext8:
  3322                           	opt callstack 0
  3323  000FBC                     _ctoa:
  3324                           	opt callstack 19
  3325                           
  3326                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 259: static int ctoa
      +                          (FILE *fp, char c);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 26
      +                          0: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 261:     int l, 
      +                          w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 264:     w = width
      +                           ? width - 1 : width;
  3327                           
  3328                           ;incstack = 0
  3329  000FBC  506E               	movf	_width,w,c
  3330  000FBE  106F               	iorwf	_width+1,w,c
  3331  000FC0  A4D8               	btfss	status,2,c
  3332  000FC2  D005               	goto	l2424
  3333  000FC4  C06E  F02E         	movff	_width,ctoa@w
  3334  000FC8  C06F  F02F         	movff	_width+1,ctoa@w+1
  3335  000FCC  D006               	goto	l2426
  3336  000FCE                     l2424:
  3337  000FCE  0EFF               	movlw	255
  3338  000FD0  246E               	addwf	_width,w,c
  3339  000FD2  6E2E               	movwf	ctoa@w,c
  3340  000FD4  0EFF               	movlw	255
  3341  000FD6  206F               	addwfc	_width+1,w,c
  3342  000FD8  6E2F               	movwf	ctoa@w+1,c
  3343  000FDA                     l2426:
  3344                           
  3345                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 267:     dbuf[0] = c
      +                          ;
  3346  000FDA  C02D  F0C5         	movff	ctoa@c,_dbuf
  3347                           
  3348                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 268:     dbuf[1] = '
      +                          \0';
  3349  000FDE  0E00               	movlw	0
  3350  000FE0  0100               	movlb	0	; () banked
  3351  000FE2  6FC6               	movwf	(_dbuf+1)& (0+255),b
  3352                           
  3353                           ; BSR set to: 0
  3354                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 269:     return pad(
      +                          fp, &dbuf[0], w);
  3355  000FE4  C02B  F020         	movff	ctoa@fp,pad@fp
  3356  000FE8  C02C  F021         	movff	ctoa@fp+1,pad@fp+1
  3357  000FEC  0EC5               	movlw	low _dbuf
  3358  000FEE  6E22               	movwf	pad@buf,c
  3359  000FF0  0E00               	movlw	high _dbuf
  3360  000FF2  6E23               	movwf	pad@buf+1,c
  3361  000FF4  C02E  F024         	movff	ctoa@w,pad@p
  3362  000FF8  C02F  F025         	movff	ctoa@w+1,pad@p+1
  3363  000FFC  ECC7  F006         	call	_pad	;wreg free
  3364  001000  C020  F02B         	movff	?_pad,?_ctoa
  3365  001004  C021  F02C         	movff	?_pad+1,?_ctoa+1
  3366  001008  0012               	return		;funcret
  3367  00100A                     __end_of_ctoa:
  3368                           	opt callstack 0
  3369                           
  3370 ;; *************** function _pad *****************
  3371 ;; Defined at:
  3372 ;;		line 72 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  3375 ;;		 -> NULL(0), 
  3376 ;;  buf             2   33[COMRAM] PTR unsigned char 
  3377 ;;		 -> dbuf(32), 
  3378 ;;  p               2   35[COMRAM] int 
  3379 ;; Auto vars:     Size  Location     Type
  3380 ;;  w               2   40[COMRAM] int 
  3381 ;;  i               2   38[COMRAM] int 
  3382 ;; Return value:  Size  Location     Type
  3383 ;;                  2   31[COMRAM] int 
  3384 ;; Registers used:
  3385 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3386 ;; Tracked objects:
  3387 ;;		On entry : 0/0
  3388 ;;		On exit  : 0/0
  3389 ;;		Unchanged: 0/0
  3390 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3391 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3392 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3393 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3394 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3395 ;;Total ram usage:       11 bytes
  3396 ;; Hardware stack levels used:    1
  3397 ;; Hardware stack levels required when called:    7
  3398 ;; This function calls:
  3399 ;;		_fputc
  3400 ;;		_fputs
  3401 ;;		_strlen
  3402 ;; This function is called by:
  3403 ;;		_ctoa
  3404 ;;		_dtoa
  3405 ;; This function uses a non-reentrant model
  3406 ;;
  3407                           
  3408                           	psect	text9
  3409  000D8E                     __ptext9:
  3410                           	opt callstack 0
  3411  000D8E                     _pad:
  3412                           	opt callstack 19
  3413                           
  3414                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  3415                           
  3416                           ;incstack = 0
  3417  000D8E  A072               	btfss	_flags,0,c
  3418  000D90  D00A               	goto	l2318
  3419                           
  3420                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  3421  000D92  C022  F019         	movff	pad@buf,fputs@s
  3422  000D96  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3423  000D9A  C020  F01B         	movff	pad@fp,fputs@fp
  3424  000D9E  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3425  000DA2  EC49  F008         	call	_fputs	;wreg free
  3426  000DA6                     l2318:
  3427                           
  3428                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  3429  000DA6  BE25               	btfsc	pad@p+1,7,c
  3430  000DA8  D005               	goto	l2322
  3431  000DAA  C024  F029         	movff	pad@p,pad@w
  3432  000DAE  C025  F02A         	movff	pad@p+1,pad@w+1
  3433  000DB2  D004               	goto	l165
  3434  000DB4                     l2322:
  3435  000DB4  0E00               	movlw	0
  3436  000DB6  6E2A               	movwf	pad@w+1,c
  3437  000DB8  0E00               	movlw	0
  3438  000DBA  6E29               	movwf	pad@w,c
  3439  000DBC                     l165:
  3440                           
  3441                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  3442  000DBC  0E00               	movlw	0
  3443  000DBE  6E28               	movwf	pad@i+1,c
  3444  000DC0  0E00               	movlw	0
  3445  000DC2  6E27               	movwf	pad@i,c
  3446                           
  3447                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3448  000DC4  D00C               	goto	l2328
  3449  000DC6                     l2324:
  3450                           
  3451                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  3452  000DC6  0E00               	movlw	0
  3453  000DC8  6E11               	movwf	fputc@c+1,c
  3454  000DCA  0E20               	movlw	32
  3455  000DCC  6E10               	movwf	fputc@c,c
  3456  000DCE  C020  F012         	movff	pad@fp,fputc@fp
  3457  000DD2  C021  F013         	movff	pad@fp+1,fputc@fp+1
  3458  000DD6  EC4A  F007         	call	_fputc	;wreg free
  3459                           
  3460                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 86:         ++i;
  3461  000DDA  4A27               	infsnz	pad@i,f,c
  3462  000DDC  2A28               	incf	pad@i+1,f,c
  3463  000DDE                     l2328:
  3464                           
  3465                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3466  000DDE  5029               	movf	pad@w,w,c
  3467  000DE0  5C27               	subwf	pad@i,w,c
  3468  000DE2  5028               	movf	pad@i+1,w,c
  3469  000DE4  0A80               	xorlw	128
  3470  000DE6  6E26               	movwf	??_pad& (0+255),c
  3471  000DE8  502A               	movf	pad@w+1,w,c
  3472  000DEA  0A80               	xorlw	128
  3473  000DEC  5826               	subwfb	??_pad& (0+255),w,c
  3474  000DEE  A0D8               	btfss	status,0,c
  3475  000DF0  D7EA               	goto	l2324
  3476                           
  3477                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  3478  000DF2  B072               	btfsc	_flags,0,c
  3479  000DF4  D00A               	goto	l2332
  3480                           
  3481                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  3482  000DF6  C022  F019         	movff	pad@buf,fputs@s
  3483  000DFA  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3484  000DFE  C020  F01B         	movff	pad@fp,fputs@fp
  3485  000E02  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3486  000E06  EC49  F008         	call	_fputs	;wreg free
  3487  000E0A                     l2332:
  3488                           
  3489                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 94:     return strle
      +                          n(buf) + w;
  3490  000E0A  C022  F00C         	movff	pad@buf,strlen@s
  3491  000E0E  C023  F00D         	movff	pad@buf+1,strlen@s+1
  3492  000E12  EC7E  F008         	call	_strlen	;wreg free
  3493  000E16  5029               	movf	pad@w,w,c
  3494  000E18  240C               	addwf	?_strlen,w,c
  3495  000E1A  6E20               	movwf	?_pad,c
  3496  000E1C  502A               	movf	pad@w+1,w,c
  3497  000E1E  200D               	addwfc	?_strlen+1,w,c
  3498  000E20  6E21               	movwf	?_pad+1,c
  3499  000E22  0012               	return		;funcret
  3500  000E24                     __end_of_pad:
  3501                           	opt callstack 0
  3502                           
  3503 ;; *************** function _strlen *****************
  3504 ;; Defined at:
  3505 ;;		line 12 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/strlen.c"
  3506 ;; Parameters:    Size  Location     Type
  3507 ;;  s               2   11[COMRAM] PTR const unsigned char 
  3508 ;;		 -> dbuf(32), 
  3509 ;; Auto vars:     Size  Location     Type
  3510 ;;  a               2   13[COMRAM] PTR const unsigned char 
  3511 ;;		 -> dbuf(32), 
  3512 ;; Return value:  Size  Location     Type
  3513 ;;                  2   11[COMRAM] unsigned int 
  3514 ;; Registers used:
  3515 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3521 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;Total ram usage:        4 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    1
  3528 ;; This function calls:
  3529 ;;		Nothing
  3530 ;; This function is called by:
  3531 ;;		_pad
  3532 ;; This function uses a non-reentrant model
  3533 ;;
  3534                           
  3535                           	psect	text10
  3536  0010FC                     __ptext10:
  3537                           	opt callstack 0
  3538  0010FC                     _strlen:
  3539                           	opt callstack 24
  3540                           
  3541                           ;incstack = 0
  3542  0010FC  C00C  F00E         	movff	strlen@s,strlen@a
  3543  001100  C00D  F00F         	movff	strlen@s+1,strlen@a+1
  3544  001104  D002               	goto	l2308
  3545  001106                     l2306:
  3546  001106  4A0C               	infsnz	strlen@s,f,c
  3547  001108  2A0D               	incf	strlen@s+1,f,c
  3548  00110A                     l2308:
  3549  00110A  C00C  FFD9         	movff	strlen@s,fsr2l
  3550  00110E  C00D  FFDA         	movff	strlen@s+1,fsr2h
  3551  001112  50DF               	movf	indf2,w,c
  3552  001114  A4D8               	btfss	status,2,c
  3553  001116  D7F7               	goto	l2306
  3554  001118  500E               	movf	strlen@a,w,c
  3555  00111A  5C0C               	subwf	strlen@s,w,c
  3556  00111C  6E0C               	movwf	?_strlen,c
  3557  00111E  500F               	movf	strlen@a+1,w,c
  3558  001120  580D               	subwfb	strlen@s+1,w,c
  3559  001122  6E0D               	movwf	?_strlen+1,c
  3560  001124  0012               	return		;funcret
  3561  001126                     __end_of_strlen:
  3562                           	opt callstack 0
  3563                           
  3564 ;; *************** function _fputs *****************
  3565 ;; Defined at:
  3566 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputs.c"
  3567 ;; Parameters:    Size  Location     Type
  3568 ;;  s               2   24[COMRAM] PTR const unsigned char 
  3569 ;;		 -> dbuf(32), 
  3570 ;;  fp              2   26[COMRAM] PTR struct _IO_FILE
  3571 ;;		 -> NULL(0), 
  3572 ;; Auto vars:     Size  Location     Type
  3573 ;;  i               2   29[COMRAM] int 
  3574 ;;  c               1   28[COMRAM] unsigned char 
  3575 ;; Return value:  Size  Location     Type
  3576 ;;                  2   24[COMRAM] int 
  3577 ;; Registers used:
  3578 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3579 ;; Tracked objects:
  3580 ;;		On entry : 0/0
  3581 ;;		On exit  : 0/0
  3582 ;;		Unchanged: 0/0
  3583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3584 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3585 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3587 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3588 ;;Total ram usage:        7 bytes
  3589 ;; Hardware stack levels used:    1
  3590 ;; Hardware stack levels required when called:    6
  3591 ;; This function calls:
  3592 ;;		_fputc
  3593 ;; This function is called by:
  3594 ;;		_pad
  3595 ;; This function uses a non-reentrant model
  3596 ;;
  3597                           
  3598                           	psect	text11
  3599  001092                     __ptext11:
  3600                           	opt callstack 0
  3601  001092                     _fputs:
  3602                           	opt callstack 19
  3603                           
  3604                           ;incstack = 0
  3605  001092  0E00               	movlw	0
  3606  001094  6E1F               	movwf	fputs@i+1,c
  3607  001096  0E00               	movlw	0
  3608  001098  6E1E               	movwf	fputs@i,c
  3609  00109A  D00B               	goto	l2302
  3610  00109C                     l2298:
  3611  00109C  C01D  F010         	movff	fputs@c,fputc@c
  3612  0010A0  6A11               	clrf	fputc@c+1,c
  3613  0010A2  C01B  F012         	movff	fputs@fp,fputc@fp
  3614  0010A6  C01C  F013         	movff	fputs@fp+1,fputc@fp+1
  3615  0010AA  EC4A  F007         	call	_fputc	;wreg free
  3616  0010AE  4A1E               	infsnz	fputs@i,f,c
  3617  0010B0  2A1F               	incf	fputs@i+1,f,c
  3618  0010B2                     l2302:
  3619  0010B2  501E               	movf	fputs@i,w,c
  3620  0010B4  2419               	addwf	fputs@s,w,c
  3621  0010B6  6ED9               	movwf	fsr2l,c
  3622  0010B8  501F               	movf	fputs@i+1,w,c
  3623  0010BA  201A               	addwfc	fputs@s+1,w,c
  3624  0010BC  6EDA               	movwf	fsr2h,c
  3625  0010BE  50DF               	movf	indf2,w,c
  3626  0010C0  6E1D               	movwf	fputs@c,c
  3627  0010C2  501D               	movf	fputs@c,w,c
  3628  0010C4  B4D8               	btfsc	status,2,c
  3629  0010C6  0012               	return	
  3630  0010C8  D7E9               	goto	l2298
  3631  0010CA                     __end_of_fputs:
  3632                           	opt callstack 0
  3633                           
  3634 ;; *************** function _fputc *****************
  3635 ;; Defined at:
  3636 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputc.c"
  3637 ;; Parameters:    Size  Location     Type
  3638 ;;  c               2   15[COMRAM] int 
  3639 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  3640 ;;		 -> NULL(0), 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;		None
  3643 ;; Return value:  Size  Location     Type
  3644 ;;                  2   15[COMRAM] int 
  3645 ;; Registers used:
  3646 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3647 ;; Tracked objects:
  3648 ;;		On entry : 0/0
  3649 ;;		On exit  : 0/0
  3650 ;;		Unchanged: 0/0
  3651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3652 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3654 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3655 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3656 ;;Total ram usage:        9 bytes
  3657 ;; Hardware stack levels used:    1
  3658 ;; Hardware stack levels required when called:    5
  3659 ;; This function calls:
  3660 ;;		_putch
  3661 ;; This function is called by:
  3662 ;;		_pad
  3663 ;;		_vfpfcnvrt
  3664 ;;		_fputs
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text12
  3669  000E94                     __ptext12:
  3670                           	opt callstack 0
  3671  000E94                     _fputc:
  3672                           	opt callstack 22
  3673                           
  3674                           ;incstack = 0
  3675  000E94  5012               	movf	fputc@fp,w,c
  3676  000E96  1013               	iorwf	fputc@fp+1,w,c
  3677  000E98  B4D8               	btfsc	status,2,c
  3678  000E9A  D004               	goto	u1650
  3679  000E9C  5012               	movf	fputc@fp,w,c
  3680  000E9E  1013               	iorwf	fputc@fp+1,w,c
  3681  000EA0  A4D8               	btfss	status,2,c
  3682  000EA2  D004               	goto	l2288
  3683  000EA4                     u1650:
  3684  000EA4  5010               	movf	fputc@c,w,c
  3685  000EA6  ECD0  F008         	call	_putch
  3686  000EAA  0012               	return	
  3687  000EAC                     l2288:
  3688  000EAC  EE20 F004          	lfsr	2,4
  3689  000EB0  5012               	movf	fputc@fp,w,c
  3690  000EB2  26D9               	addwf	fsr2l,f,c
  3691  000EB4  5013               	movf	fputc@fp+1,w,c
  3692  000EB6  22DA               	addwfc	fsr2h,f,c
  3693  000EB8  50DE               	movf	postinc2,w,c
  3694  000EBA  10DE               	iorwf	postinc2,w,c
  3695  000EBC  B4D8               	btfsc	status,2,c
  3696  000EBE  D016               	goto	u1670
  3697  000EC0  EE20 F004          	lfsr	2,4
  3698  000EC4  5012               	movf	fputc@fp,w,c
  3699  000EC6  26D9               	addwf	fsr2l,f,c
  3700  000EC8  5013               	movf	fputc@fp+1,w,c
  3701  000ECA  22DA               	addwfc	fsr2h,f,c
  3702  000ECC  EE10 F002          	lfsr	1,2
  3703  000ED0  5012               	movf	fputc@fp,w,c
  3704  000ED2  26E1               	addwf	fsr1l,f,c
  3705  000ED4  5013               	movf	fputc@fp+1,w,c
  3706  000ED6  22E2               	addwfc	fsr1h,f,c
  3707  000ED8  50DE               	movf	postinc2,w,c
  3708  000EDA  5CE6               	subwf	postinc1,w,c
  3709  000EDC  50E6               	movf	postinc1,w,c
  3710  000EDE  0A80               	xorlw	128
  3711  000EE0  6E18               	movwf	(??_fputc+4)& (0+255),c
  3712  000EE2  50DE               	movf	postinc2,w,c
  3713  000EE4  0A80               	xorlw	128
  3714  000EE6  5818               	subwfb	(??_fputc+4)& (0+255),w,c
  3715  000EE8  B0D8               	btfsc	status,0,c
  3716  000EEA  0012               	return	
  3717  000EEC                     u1670:
  3718  000EEC  EE20 F002          	lfsr	2,2
  3719  000EF0  5012               	movf	fputc@fp,w,c
  3720  000EF2  26D9               	addwf	fsr2l,f,c
  3721  000EF4  5013               	movf	fputc@fp+1,w,c
  3722  000EF6  22DA               	addwfc	fsr2h,f,c
  3723  000EF8  2ADE               	incf	postinc2,f,c
  3724  000EFA  0E00               	movlw	0
  3725  000EFC  22DD               	addwfc	postdec2,f,c
  3726  000EFE  0012               	return		;funcret
  3727  000F00                     __end_of_fputc:
  3728                           	opt callstack 0
  3729                           
  3730 ;; *************** function _putch *****************
  3731 ;; Defined at:
  3732 ;;		line 102 in file "lcd.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;  data            1    wreg     unsigned char 
  3735 ;; Auto vars:     Size  Location     Type
  3736 ;;  data            1   14[COMRAM] unsigned char 
  3737 ;; Return value:  Size  Location     Type
  3738 ;;                  1    wreg      void 
  3739 ;; Registers used:
  3740 ;;		wreg, status,2, status,0, cstack
  3741 ;; Tracked objects:
  3742 ;;		On entry : 0/0
  3743 ;;		On exit  : 0/0
  3744 ;;		Unchanged: 0/0
  3745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3747 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;Total ram usage:        1 bytes
  3751 ;; Hardware stack levels used:    1
  3752 ;; Hardware stack levels required when called:    4
  3753 ;; This function calls:
  3754 ;;		_send_byte
  3755 ;; This function is called by:
  3756 ;;		_fputc
  3757 ;; This function uses a non-reentrant model
  3758 ;;
  3759                           
  3760                           	psect	text13
  3761  0011A0                     __ptext13:
  3762                           	opt callstack 0
  3763  0011A0                     _putch:
  3764                           	opt callstack 22
  3765                           
  3766                           ;incstack = 0
  3767                           ;putch@data stored from wreg
  3768  0011A0  6E0F               	movwf	putch@data,c
  3769                           
  3770                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  3771  0011A2  848C               	bsf	3980,2,c	;volatile
  3772                           
  3773                           ;lcd.c: 104:     send_byte((unsigned char)data);
  3774  0011A4  500F               	movf	putch@data,w,c
  3775  0011A6  ECC7  F008         	call	_send_byte
  3776  0011AA  0012               	return		;funcret
  3777  0011AC                     __end_of_putch:
  3778                           	opt callstack 0
  3779                           
  3780 ;; *************** function _initLCD *****************
  3781 ;; Defined at:
  3782 ;;		line 69 in file "lcd.c"
  3783 ;; Parameters:    Size  Location     Type
  3784 ;;		None
  3785 ;; Auto vars:     Size  Location     Type
  3786 ;;		None
  3787 ;; Return value:  Size  Location     Type
  3788 ;;                  1    wreg      void 
  3789 ;; Registers used:
  3790 ;;		wreg, status,2, status,0, cstack
  3791 ;; Tracked objects:
  3792 ;;		On entry : 0/0
  3793 ;;		On exit  : 0/0
  3794 ;;		Unchanged: 0/0
  3795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3798 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3799 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3800 ;;Total ram usage:        1 bytes
  3801 ;; Hardware stack levels used:    1
  3802 ;; Hardware stack levels required when called:    5
  3803 ;; This function calls:
  3804 ;;		_lcdInst
  3805 ;;		_send_byte
  3806 ;;		_send_nibble
  3807 ;; This function is called by:
  3808 ;;		_main
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           	psect	text14
  3813  000F00                     __ptext14:
  3814                           	opt callstack 0
  3815  000F00                     _initLCD:
  3816                           	opt callstack 25
  3817                           
  3818                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3819                           
  3820                           ;incstack = 0
  3821  000F00  0E31               	movlw	49
  3822  000F02  6E10               	movwf	??_initLCD& (0+255),c
  3823  000F04  0EB2               	movlw	178
  3824  000F06                     u2527:
  3825  000F06  2EE8               	decfsz	wreg,f,c
  3826  000F08  D7FE               	bra	u2527
  3827  000F0A  2E10               	decfsz	??_initLCD& (0+255),f,c
  3828  000F0C  D7FC               	bra	u2527
  3829  000F0E  D000               	nop2	
  3830                           
  3831                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  3832  000F10  948C               	bcf	3980,2,c	;volatile
  3833                           
  3834                           ;lcd.c: 74:     send_nibble(0b0011);
  3835  000F12  0E03               	movlw	3
  3836  000F14  ECBC  F008         	call	_send_nibble
  3837                           
  3838                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3839  000F18  0E11               	movlw	17
  3840  000F1A  6E10               	movwf	??_initLCD& (0+255),c
  3841  000F1C  0E3A               	movlw	58
  3842  000F1E                     u2537:
  3843  000F1E  2EE8               	decfsz	wreg,f,c
  3844  000F20  D7FE               	bra	u2537
  3845  000F22  2E10               	decfsz	??_initLCD& (0+255),f,c
  3846  000F24  D7FC               	bra	u2537
  3847  000F26  D000               	nop2	
  3848                           
  3849                           ;lcd.c: 76:     send_nibble(0b0011);
  3850  000F28  0E03               	movlw	3
  3851  000F2A  ECBC  F008         	call	_send_nibble
  3852                           
  3853                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  3854  000F2E  0E7D               	movlw	125
  3855  000F30                     u2547:
  3856  000F30  2EE8               	decfsz	wreg,f,c
  3857  000F32  D7FE               	bra	u2547
  3858                           
  3859                           ;lcd.c: 78:     send_byte(0b00110010);
  3860  000F34  0E32               	movlw	50
  3861  000F36  ECC7  F008         	call	_send_byte
  3862                           
  3863                           ;lcd.c: 80:     send_byte(0b00101000);
  3864  000F3A  0E28               	movlw	40
  3865  000F3C  ECC7  F008         	call	_send_byte
  3866                           
  3867                           ;lcd.c: 81:     send_byte(0b00001000);
  3868  000F40  0E08               	movlw	8
  3869  000F42  ECC7  F008         	call	_send_byte
  3870                           
  3871                           ;lcd.c: 82:     send_byte(0b00000001);
  3872  000F46  0E01               	movlw	1
  3873  000F48  ECC7  F008         	call	_send_byte
  3874                           
  3875                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3876  000F4C  0E11               	movlw	17
  3877  000F4E  6E10               	movwf	??_initLCD& (0+255),c
  3878  000F50  0E3A               	movlw	58
  3879  000F52                     u2557:
  3880  000F52  2EE8               	decfsz	wreg,f,c
  3881  000F54  D7FE               	bra	u2557
  3882  000F56  2E10               	decfsz	??_initLCD& (0+255),f,c
  3883  000F58  D7FC               	bra	u2557
  3884  000F5A  D000               	nop2	
  3885                           
  3886                           ;lcd.c: 84:     send_byte(0b00000110);
  3887  000F5C  0E06               	movlw	6
  3888  000F5E  ECC7  F008         	call	_send_byte
  3889                           
  3890                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  3891  000F62  0E0F               	movlw	15
  3892  000F64  ECD6  F008         	call	_lcdInst
  3893  000F68  0012               	return		;funcret
  3894  000F6A                     __end_of_initLCD:
  3895                           	opt callstack 0
  3896                           
  3897 ;; *************** function _lcdInst *****************
  3898 ;; Defined at:
  3899 ;;		line 64 in file "lcd.c"
  3900 ;; Parameters:    Size  Location     Type
  3901 ;;  data            1    wreg     unsigned char 
  3902 ;; Auto vars:     Size  Location     Type
  3903 ;;  data            1   14[COMRAM] unsigned char 
  3904 ;; Return value:  Size  Location     Type
  3905 ;;                  1    wreg      void 
  3906 ;; Registers used:
  3907 ;;		wreg, status,2, status,0, cstack
  3908 ;; Tracked objects:
  3909 ;;		On entry : 0/0
  3910 ;;		On exit  : 0/0
  3911 ;;		Unchanged: 0/0
  3912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3913 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3914 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;Total ram usage:        1 bytes
  3918 ;; Hardware stack levels used:    1
  3919 ;; Hardware stack levels required when called:    4
  3920 ;; This function calls:
  3921 ;;		_send_byte
  3922 ;; This function is called by:
  3923 ;;		_initLCD
  3924 ;;		_main
  3925 ;;		_lcd_shift_cursor
  3926 ;;		_lcd_shift_display
  3927 ;; This function uses a non-reentrant model
  3928 ;;
  3929                           
  3930                           	psect	text15
  3931  0011AC                     __ptext15:
  3932                           	opt callstack 0
  3933  0011AC                     _lcdInst:
  3934                           	opt callstack 26
  3935                           
  3936                           ;incstack = 0
  3937                           ;lcdInst@data stored from wreg
  3938  0011AC  6E0F               	movwf	lcdInst@data,c
  3939                           
  3940                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  3941  0011AE  948C               	bcf	3980,2,c	;volatile
  3942                           
  3943                           ;lcd.c: 66:     send_byte(data);
  3944  0011B0  500F               	movf	lcdInst@data,w,c
  3945  0011B2  ECC7  F008         	call	_send_byte
  3946  0011B6  0012               	return		;funcret
  3947  0011B8                     __end_of_lcdInst:
  3948                           	opt callstack 0
  3949                           
  3950 ;; *************** function _send_byte *****************
  3951 ;; Defined at:
  3952 ;;		line 55 in file "lcd.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;  data            1    wreg     unsigned char 
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  data            1   13[COMRAM] unsigned char 
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      void 
  3959 ;; Registers used:
  3960 ;;		wreg, status,2, status,0, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;Total ram usage:        1 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:    3
  3973 ;; This function calls:
  3974 ;;		_send_nibble
  3975 ;; This function is called by:
  3976 ;;		_lcdInst
  3977 ;;		_initLCD
  3978 ;;		_putch
  3979 ;; This function uses a non-reentrant model
  3980 ;;
  3981                           
  3982                           	psect	text16
  3983  00118E                     __ptext16:
  3984                           	opt callstack 0
  3985  00118E                     _send_byte:
  3986                           	opt callstack 22
  3987                           
  3988                           ;incstack = 0
  3989                           ;send_byte@data stored from wreg
  3990  00118E  6E0E               	movwf	send_byte@data,c
  3991                           
  3992                           ;lcd.c: 57:     send_nibble(data >> 4);
  3993  001190  380E               	swapf	send_byte@data,w,c
  3994  001192  0B0F               	andlw	15
  3995  001194  ECBC  F008         	call	_send_nibble
  3996                           
  3997                           ;lcd.c: 60:     send_nibble(data);
  3998  001198  500E               	movf	send_byte@data,w,c
  3999  00119A  ECBC  F008         	call	_send_nibble
  4000  00119E  0012               	return		;funcret
  4001  0011A0                     __end_of_send_byte:
  4002                           	opt callstack 0
  4003                           
  4004 ;; *************** function _send_nibble *****************
  4005 ;; Defined at:
  4006 ;;		line 44 in file "lcd.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  data            1    wreg     unsigned char 
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;  data            1   12[COMRAM] unsigned char 
  4011 ;; Return value:  Size  Location     Type
  4012 ;;                  1    wreg      void 
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;Total ram usage:        1 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    2
  4027 ;; This function calls:
  4028 ;;		_pulse_e
  4029 ;; This function is called by:
  4030 ;;		_send_byte
  4031 ;;		_initLCD
  4032 ;; This function uses a non-reentrant model
  4033 ;;
  4034                           
  4035                           	psect	text17
  4036  001178                     __ptext17:
  4037                           	opt callstack 0
  4038  001178                     _send_nibble:
  4039                           	opt callstack 22
  4040                           
  4041                           ;incstack = 0
  4042                           ;send_nibble@data stored from wreg
  4043  001178  6E0D               	movwf	send_nibble@data,c
  4044                           
  4045                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  4046  00117A  508C               	movf	3980,w,c	;volatile
  4047  00117C  0B0F               	andlw	15
  4048  00117E  6E8C               	movwf	3980,c	;volatile
  4049                           
  4050                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  4051  001180  380D               	swapf	send_nibble@data,w,c
  4052  001182  0BF0               	andlw	240
  4053  001184  108C               	iorwf	3980,w,c	;volatile
  4054  001186  6E8C               	movwf	3980,c	;volatile
  4055                           
  4056                           ;lcd.c: 48:     pulse_e();
  4057  001188  EC93  F008         	call	_pulse_e	;wreg free
  4058  00118C  0012               	return		;funcret
  4059  00118E                     __end_of_send_nibble:
  4060                           	opt callstack 0
  4061                           
  4062 ;; *************** function _pulse_e *****************
  4063 ;; Defined at:
  4064 ;;		line 28 in file "lcd.c"
  4065 ;; Parameters:    Size  Location     Type
  4066 ;;		None
  4067 ;; Auto vars:     Size  Location     Type
  4068 ;;  interruptSta    1   11[COMRAM] unsigned char 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  1    wreg      void 
  4071 ;; Registers used:
  4072 ;;		wreg
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;Total ram usage:        1 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    1
  4085 ;; This function calls:
  4086 ;;		Nothing
  4087 ;; This function is called by:
  4088 ;;		_send_nibble
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           	psect	text18
  4093  001126                     __ptext18:
  4094                           	opt callstack 0
  4095  001126                     _pulse_e:
  4096                           	opt callstack 22
  4097                           
  4098                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  4099                           
  4100                           ;incstack = 0
  4101  001126  0E00               	movlw	0
  4102  001128  BEF2               	btfsc	4082,7,c	;volatile
  4103  00112A  0E01               	movlw	1
  4104  00112C  6E0C               	movwf	pulse_e@interruptState,c
  4105                           
  4106                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  4107  00112E  9EF2               	bcf	4082,7,c	;volatile
  4108                           
  4109                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  4110  001130  868C               	bsf	3980,3,c	;volatile
  4111                           
  4112                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  4113  001132  0E14               	movlw	20
  4114  001134                     u2567:
  4115  001134  2EE8               	decfsz	wreg,f,c
  4116  001136  D7FE               	bra	u2567
  4117  001138  D000               	nop2	
  4118                           
  4119                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  4120  00113A  968C               	bcf	3980,3,c	;volatile
  4121                           
  4122                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  4123  00113C  0E53               	movlw	83
  4124  00113E                     u2577:
  4125  00113E  2EE8               	decfsz	wreg,f,c
  4126  001140  D7FE               	bra	u2577
  4127  001142  F000               	nop	
  4128                           
  4129                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  4130  001144  B00C               	btfsc	pulse_e@interruptState,0,c
  4131  001146  D002               	bra	u1635
  4132  001148  9EF2               	bcf	4082,7,c	;volatile
  4133  00114A  D001               	bra	u1636
  4134  00114C                     u1635:
  4135  00114C  8EF2               	bsf	4082,7,c	;volatile
  4136  00114E                     u1636:
  4137  00114E  0012               	return		;funcret
  4138  001150                     __end_of_pulse_e:
  4139                           	opt callstack 0
  4140                           
  4141 ;; *************** function ___awmod *****************
  4142 ;; Defined at:
  4143 ;;		line 7 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/awmod.c"
  4144 ;; Parameters:    Size  Location     Type
  4145 ;;  dividend        2   11[COMRAM] int 
  4146 ;;  divisor         2   13[COMRAM] int 
  4147 ;; Auto vars:     Size  Location     Type
  4148 ;;  sign            1   16[COMRAM] unsigned char 
  4149 ;;  counter         1   15[COMRAM] unsigned char 
  4150 ;; Return value:  Size  Location     Type
  4151 ;;                  2   11[COMRAM] int 
  4152 ;; Registers used:
  4153 ;;		wreg, status,2, status,0
  4154 ;; Tracked objects:
  4155 ;;		On entry : 0/0
  4156 ;;		On exit  : 0/0
  4157 ;;		Unchanged: 0/0
  4158 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4159 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4160 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4161 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;Total ram usage:        6 bytes
  4164 ;; Hardware stack levels used:    1
  4165 ;; Hardware stack levels required when called:    1
  4166 ;; This function calls:
  4167 ;;		Nothing
  4168 ;; This function is called by:
  4169 ;;		_main
  4170 ;; This function uses a non-reentrant model
  4171 ;;
  4172                           
  4173                           	psect	text19
  4174  000E24                     __ptext19:
  4175                           	opt callstack 0
  4176  000E24                     ___awmod:
  4177                           	opt callstack 29
  4178                           
  4179                           ;incstack = 0
  4180  000E24  0E00               	movlw	0
  4181  000E26  6E11               	movwf	___awmod@sign,c
  4182  000E28  AE0D               	btfss	___awmod@dividend+1,7,c
  4183  000E2A  D006               	goto	l1928
  4184  000E2C  6C0C               	negf	___awmod@dividend,c
  4185  000E2E  1E0D               	comf	___awmod@dividend+1,f,c
  4186  000E30  B0D8               	btfsc	status,0,c
  4187  000E32  2A0D               	incf	___awmod@dividend+1,f,c
  4188  000E34  0E01               	movlw	1
  4189  000E36  6E11               	movwf	___awmod@sign,c
  4190  000E38                     l1928:
  4191  000E38  AE0F               	btfss	___awmod@divisor+1,7,c
  4192  000E3A  D004               	goto	l1932
  4193  000E3C  6C0E               	negf	___awmod@divisor,c
  4194  000E3E  1E0F               	comf	___awmod@divisor+1,f,c
  4195  000E40  B0D8               	btfsc	status,0,c
  4196  000E42  2A0F               	incf	___awmod@divisor+1,f,c
  4197  000E44                     l1932:
  4198  000E44  500E               	movf	___awmod@divisor,w,c
  4199  000E46  100F               	iorwf	___awmod@divisor+1,w,c
  4200  000E48  B4D8               	btfsc	status,2,c
  4201  000E4A  D018               	goto	l1948
  4202  000E4C  0E01               	movlw	1
  4203  000E4E  6E10               	movwf	___awmod@counter,c
  4204  000E50  D004               	goto	l1938
  4205  000E52                     l1936:
  4206  000E52  90D8               	bcf	status,0,c
  4207  000E54  360E               	rlcf	___awmod@divisor,f,c
  4208  000E56  360F               	rlcf	___awmod@divisor+1,f,c
  4209  000E58  2A10               	incf	___awmod@counter,f,c
  4210  000E5A                     l1938:
  4211  000E5A  AE0F               	btfss	___awmod@divisor+1,7,c
  4212  000E5C  D7FA               	goto	l1936
  4213  000E5E                     u1320:
  4214  000E5E  500E               	movf	___awmod@divisor,w,c
  4215  000E60  5C0C               	subwf	___awmod@dividend,w,c
  4216  000E62  500F               	movf	___awmod@divisor+1,w,c
  4217  000E64  580D               	subwfb	___awmod@dividend+1,w,c
  4218  000E66  A0D8               	btfss	status,0,c
  4219  000E68  D004               	goto	l1944
  4220  000E6A  500E               	movf	___awmod@divisor,w,c
  4221  000E6C  5E0C               	subwf	___awmod@dividend,f,c
  4222  000E6E  500F               	movf	___awmod@divisor+1,w,c
  4223  000E70  5A0D               	subwfb	___awmod@dividend+1,f,c
  4224  000E72                     l1944:
  4225  000E72  90D8               	bcf	status,0,c
  4226  000E74  320F               	rrcf	___awmod@divisor+1,f,c
  4227  000E76  320E               	rrcf	___awmod@divisor,f,c
  4228  000E78  2E10               	decfsz	___awmod@counter,f,c
  4229  000E7A  D7F1               	goto	u1320
  4230  000E7C                     l1948:
  4231  000E7C  5011               	movf	___awmod@sign,w,c
  4232  000E7E  B4D8               	btfsc	status,2,c
  4233  000E80  D004               	goto	l1952
  4234  000E82  6C0C               	negf	___awmod@dividend,c
  4235  000E84  1E0D               	comf	___awmod@dividend+1,f,c
  4236  000E86  B0D8               	btfsc	status,0,c
  4237  000E88  2A0D               	incf	___awmod@dividend+1,f,c
  4238  000E8A                     l1952:
  4239  000E8A  C00C  F00C         	movff	___awmod@dividend,?___awmod
  4240  000E8E  C00D  F00D         	movff	___awmod@dividend+1,?___awmod+1
  4241  000E92  0012               	return		;funcret
  4242  000E94                     __end_of___awmod:
  4243                           	opt callstack 0
  4244                           
  4245 ;; *************** function _interruptHandler *****************
  4246 ;; Defined at:
  4247 ;;		line 232 in file "main.c"
  4248 ;; Parameters:    Size  Location     Type
  4249 ;;		None
  4250 ;; Auto vars:     Size  Location     Type
  4251 ;;  i               2    8[COMRAM] int 
  4252 ;;  keypress        1   10[COMRAM] unsigned char 
  4253 ;; Return value:  Size  Location     Type
  4254 ;;                  1    wreg      void 
  4255 ;; Registers used:
  4256 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  4257 ;; Tracked objects:
  4258 ;;		On entry : 0/0
  4259 ;;		On exit  : 0/0
  4260 ;;		Unchanged: 0/0
  4261 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4262 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4263 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;Total ram usage:       11 bytes
  4267 ;; Hardware stack levels used:    1
  4268 ;; This function calls:
  4269 ;;		Nothing
  4270 ;; This function is called by:
  4271 ;;		Interrupt level 2
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           	psect	intcode
  4276  000008                     __pintcode:
  4277                           	opt callstack 0
  4278  000008                     _interruptHandler:
  4279                           	opt callstack 19
  4280                           
  4281                           ;incstack = 0
  4282  000008  8274               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4283  00000A  ED62  F006         	call	int_func,f	;refresh shadow registers
  4284                           
  4285                           	psect	intcode_body
  4286  000CC4                     __pintcode_body:
  4287                           	opt callstack 19
  4288  000CC4                     int_func:
  4289                           	opt callstack 19
  4290  000CC4  0006               	pop		; remove dummy address from shadow register refresh
  4291  000CC6  CFF6 F005          	movff	tblptrl,??_interruptHandler+4
  4292  000CCA  CFF7 F006          	movff	tblptrh,??_interruptHandler+5
  4293  000CCE  CFF8 F007          	movff	tblptru,??_interruptHandler+6
  4294  000CD2  CFF5 F008          	movff	tablat,??_interruptHandler+7
  4295                           
  4296                           ;main.c: 234:     if(INT1IF){
  4297  000CD6  A0F0               	btfss	4080,0,c	;volatile
  4298  000CD8  D050               	goto	i2u162_40
  4299                           
  4300                           ;main.c: 238:         INT1IF = 0;
  4301  000CDA  90F0               	bcf	4080,0,c	;volatile
  4302                           
  4303                           ;main.c: 240:         unsigned char keypress = (PORTB & 0xF0) >> 4;
  4304  000CDC  3881               	swapf	3969,w,c	;volatile
  4305  000CDE  0B0F               	andlw	15
  4306  000CE0  0B0F               	andlw	15
  4307  000CE2  6E0B               	movwf	interruptHandler@keypress,c
  4308                           
  4309                           ;main.c: 242:         if (keys[keypress] == 'A') {
  4310  000CE4  0EA7               	movlw	low _keys
  4311  000CE6  240B               	addwf	interruptHandler@keypress,w,c
  4312  000CE8  6EF6               	movwf	tblptrl,c
  4313  000CEA  6AF7               	clrf	tblptrh,c
  4314  000CEC  0EFE               	movlw	high _keys
  4315  000CEE  22F7               	addwfc	tblptrh,f,c
  4316  000CF0                     	if	0	;There are less than 3 active tblptr bytes
  4317  000CF0                     	endif
  4318  000CF0  0008               	tblrd		*
  4319  000CF2  50F5               	movf	tablat,w,c
  4320  000CF4  0A41               	xorlw	65
  4321  000CF6  A4D8               	btfss	status,2,c
  4322  000CF8  D004               	goto	i2l2244
  4323                           
  4324                           ;main.c: 244:             start = 1;
  4325  000CFA  0E01               	movlw	1
  4326  000CFC  0100               	movlb	0	; () banked
  4327  000CFE  6FC2               	movwf	_start& (0+255),b	;volatile
  4328  000D00  D03C               	goto	i2u162_40
  4329  000D02                     i2l2244:
  4330                           
  4331                           ;main.c: 248:         if (keys[keypress] == '*') {
  4332  000D02  0EA7               	movlw	low _keys
  4333  000D04  240B               	addwf	interruptHandler@keypress,w,c
  4334  000D06  6EF6               	movwf	tblptrl,c
  4335  000D08  6AF7               	clrf	tblptrh,c
  4336  000D0A  0EFE               	movlw	high _keys
  4337  000D0C  22F7               	addwfc	tblptrh,f,c
  4338  000D0E                     	if	0	;There are less than 3 active tblptr bytes
  4339  000D0E                     	endif
  4340  000D0E  0008               	tblrd		*
  4341  000D10  50F5               	movf	tablat,w,c
  4342  000D12  0A2A               	xorlw	42
  4343  000D14  A4D8               	btfss	status,2,c
  4344  000D16  D004               	goto	i2l2250
  4345                           
  4346                           ;main.c: 250:             exit_key = 1;
  4347  000D18  0E01               	movlw	1
  4348  000D1A  0100               	movlb	0	; () banked
  4349  000D1C  6FC3               	movwf	_exit_key& (0+255),b	;volatile
  4350  000D1E  D02D               	goto	i2u162_40
  4351  000D20                     i2l2250:
  4352                           
  4353                           ;main.c: 254:         for ( int i = 0; i < Canister; i++ ) {
  4354  000D20  0E00               	movlw	0
  4355  000D22  6E0A               	movwf	interruptHandler@i+1,c
  4356  000D24  0E00               	movlw	0
  4357  000D26  6E09               	movwf	interruptHandler@i,c
  4358  000D28  D01D               	goto	i2l2260
  4359  000D2A                     i2l2252:
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;main.c: 256:             if ((char)i + '0' == keys[keypress]) {
  4363  000D2A  0EA7               	movlw	low _keys
  4364  000D2C  240B               	addwf	interruptHandler@keypress,w,c
  4365  000D2E  6EF6               	movwf	tblptrl,c
  4366  000D30  6AF7               	clrf	tblptrh,c
  4367  000D32  0EFE               	movlw	high _keys
  4368  000D34  22F7               	addwfc	tblptrh,f,c
  4369  000D36                     	if	0	;There are less than 3 active tblptr bytes
  4370  000D36                     	endif
  4371  000D36  0008               	tblrd		*
  4372  000D38  50F5               	movf	tablat,w,c
  4373  000D3A  6E01               	movwf	??_interruptHandler& (0+255),c
  4374  000D3C  6A02               	clrf	(??_interruptHandler+1)& (0+255),c
  4375  000D3E  5009               	movf	interruptHandler@i,w,c
  4376  000D40  6E03               	movwf	(??_interruptHandler+2)& (0+255),c
  4377  000D42  6A04               	clrf	(??_interruptHandler+3)& (0+255),c
  4378  000D44  0E30               	movlw	48
  4379  000D46  2603               	addwf	??_interruptHandler+2,f,c
  4380  000D48  0E00               	movlw	0
  4381  000D4A  2204               	addwfc	??_interruptHandler+3,f,c
  4382  000D4C  5001               	movf	??_interruptHandler,w,c
  4383  000D4E  1803               	xorwf	??_interruptHandler+2,w,c
  4384  000D50  E107               	bnz	i2l2258
  4385  000D52  5002               	movf	??_interruptHandler+1,w,c
  4386  000D54  1804               	xorwf	??_interruptHandler+3,w,c
  4387  000D56  A4D8               	btfss	status,2,c
  4388  000D58  D003               	goto	i2l2258
  4389                           
  4390                           ; BSR set to: 0
  4391                           ;main.c: 257:                 key_was_pressed = 1;
  4392  000D5A  0E01               	movlw	1
  4393  000D5C  6FC4               	movwf	_key_was_pressed& (0+255),b	;volatile
  4394  000D5E  D00D               	goto	i2u162_40
  4395  000D60                     i2l2258:
  4396                           
  4397                           ; BSR set to: 0
  4398                           ;main.c: 261:         }
  4399  000D60  4A09               	infsnz	interruptHandler@i,f,c
  4400  000D62  2A0A               	incf	interruptHandler@i+1,f,c
  4401  000D64                     i2l2260:
  4402  000D64  0100               	movlb	0	; () banked
  4403  000D66  51BE               	movf	_Canister& (0+255),w,b
  4404  000D68  5C09               	subwf	interruptHandler@i,w,c
  4405  000D6A  500A               	movf	interruptHandler@i+1,w,c
  4406  000D6C  0A80               	xorlw	128
  4407  000D6E  6E01               	movwf	??_interruptHandler& (0+255),c
  4408  000D70  51BF               	movf	(_Canister+1)& (0+255),w,b
  4409  000D72  0A80               	xorlw	128
  4410  000D74  5801               	subwfb	??_interruptHandler& (0+255),w,c
  4411  000D76  A0D8               	btfss	status,0,c
  4412  000D78  D7D8               	goto	i2l2252
  4413  000D7A                     i2u162_40:
  4414  000D7A  C008  FFF5         	movff	??_interruptHandler+7,tablat
  4415  000D7E  C007  FFF8         	movff	??_interruptHandler+6,tblptru
  4416  000D82  C006  FFF7         	movff	??_interruptHandler+5,tblptrh
  4417  000D86  C005  FFF6         	movff	??_interruptHandler+4,tblptrl
  4418  000D8A  9274               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4419  000D8C  0011               	retfie		f
  4420  000D8E                     __end_of_interruptHandler:
  4421                           	opt callstack 0
  4422                           
  4423                           	psect	rparam
  4424  0000                     
  4425                           	psect	temp
  4426  000074                     btemp:
  4427                           	opt callstack 0
  4428  000074                     	ds	1
  4429  0000                     int$flags	set	btemp
  4430  0000                     wtemp8	set	btemp+1
  4431  0000                     ttemp5	set	btemp+1
  4432  0000                     ttemp6	set	btemp+4
  4433  0000                     ttemp7	set	btemp+8
  4434                           tosu	equ	0xFFF
  4435                           tosh	equ	0xFFE
  4436                           tosl	equ	0xFFD
  4437                           stkptr	equ	0xFFC
  4438                           pclatu	equ	0xFFB
  4439                           pclath	equ	0xFFA
  4440                           pcl	equ	0xFF9
  4441                           tblptru	equ	0xFF8
  4442                           tblptrh	equ	0xFF7
  4443                           tblptrl	equ	0xFF6
  4444                           tablat	equ	0xFF5
  4445                           prodh	equ	0xFF4
  4446                           prodl	equ	0xFF3
  4447                           indf0	equ	0xFEF
  4448                           postinc0	equ	0xFEE
  4449                           postdec0	equ	0xFED
  4450                           preinc0	equ	0xFEC
  4451                           plusw0	equ	0xFEB
  4452                           fsr0h	equ	0xFEA
  4453                           fsr0l	equ	0xFE9
  4454                           wreg	equ	0xFE8
  4455                           indf1	equ	0xFE7
  4456                           postinc1	equ	0xFE6
  4457                           postdec1	equ	0xFE5
  4458                           preinc1	equ	0xFE4
  4459                           plusw1	equ	0xFE3
  4460                           fsr1h	equ	0xFE2
  4461                           fsr1l	equ	0xFE1
  4462                           bsr	equ	0xFE0
  4463                           indf2	equ	0xFDF
  4464                           postinc2	equ	0xFDE
  4465                           postdec2	equ	0xFDD
  4466                           preinc2	equ	0xFDC
  4467                           plusw2	equ	0xFDB
  4468                           fsr2h	equ	0xFDA
  4469                           fsr2l	equ	0xFD9
  4470                           status	equ	0xFD8


Data Sizes:
    Strings     320
    Constant    23
    Data        66
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    107     115
    BANK0           128     21     122
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_30(CODE[10]), STR_29(CODE[14]), STR_28(CODE[11]), STR_27(CODE[12]), 
		 -> STR_26(CODE[10]), STR_25(CODE[15]), STR_24(CODE[14]), STR_23(CODE[12]), 
		 -> STR_22(CODE[10]), STR_21(CODE[15]), STR_20(CODE[12]), STR_19(CODE[15]), 
		 -> STR_18(CODE[12]), STR_17(CODE[16]), STR_16(CODE[9]), STR_15(CODE[9]), 
		 -> STR_14(CODE[11]), STR_13(CODE[13]), STR_12(CODE[15]), STR_11(CODE[11]), 
		 -> STR_10(CODE[15]), STR_9(CODE[12]), STR_8(CODE[15]), STR_7(CODE[9]), 
		 -> STR_6(CODE[12]), STR_5(CODE[10]), STR_4(CODE[15]), STR_3(CODE[17]), 
		 -> STR_2(CODE[13]), STR_1(CODE[11]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S790_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_30(CODE[10]), STR_29(CODE[14]), STR_28(CODE[11]), STR_27(CODE[12]), 
		 -> STR_26(CODE[10]), STR_25(CODE[15]), STR_24(CODE[14]), STR_23(CODE[12]), 
		 -> STR_22(CODE[10]), STR_21(CODE[15]), STR_20(CODE[12]), STR_19(CODE[15]), 
		 -> STR_18(CODE[12]), STR_17(CODE[16]), STR_16(CODE[9]), STR_15(CODE[9]), 
		 -> STR_14(CODE[11]), STR_13(CODE[13]), STR_12(CODE[15]), STR_11(CODE[11]), 
		 -> STR_10(CODE[15]), STR_9(CODE[12]), STR_8(CODE[15]), STR_7(CODE[9]), 
		 -> STR_6(CODE[12]), STR_5(CODE[10]), STR_4(CODE[15]), STR_3(CODE[17]), 
		 -> STR_2(CODE[13]), STR_1(CODE[11]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 17
		 -> STR_30(CODE[10]), STR_29(CODE[14]), STR_28(CODE[11]), STR_27(CODE[12]), 
		 -> STR_26(CODE[10]), STR_25(CODE[15]), STR_24(CODE[14]), STR_23(CODE[12]), 
		 -> STR_22(CODE[10]), STR_21(CODE[15]), STR_20(CODE[12]), STR_19(CODE[15]), 
		 -> STR_18(CODE[12]), STR_17(CODE[16]), STR_16(CODE[9]), STR_15(CODE[9]), 
		 -> STR_14(CODE[11]), STR_13(CODE[13]), STR_12(CODE[15]), STR_11(CODE[11]), 
		 -> STR_10(CODE[15]), STR_9(CODE[12]), STR_8(CODE[15]), STR_7(CODE[9]), 
		 -> STR_6(CODE[12]), STR_5(CODE[10]), STR_4(CODE[15]), STR_3(CODE[17]), 
		 -> STR_2(CODE[13]), STR_1(CODE[11]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   17252
                                              4 BANK0     17    17      0
                            ___awmod
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4   15446
                                            103 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   12659
                                             95 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6   12177
                                             78 COMRAM    17    11      6
                               _ctoa
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    6083
                                             42 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             29 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                             11 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                             11 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     4      3    4096
                                             42 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3817
                                             31 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1602
                                             24 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1102
                                             15 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     350
                                             15 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _send_byte                                            1     1      0     127
                                             13 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (7) _send_nibble                                          1     1      0      65
                                             12 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (8) _pulse_e                                              1     1      0      34
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     448
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _interruptHandler                                   11    11      0     113
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     15      7A       5       95.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6B      73       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      ED      34        0.0%
DATA                 0      0      ED       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Sat Feb  2 21:25:51 2019

              __CFG_CPD$ON 000000                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l165 0DBC                        l183 06A2  
                      l185 06AA                        l896 10F2               __CFG_CPB$OFF 000000  
                      _abs 10CA                        _pad 0D8E               ___awmod@sign 0011  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     ?_abs 001E                       l2302 10B2                       l2400 0C0A  
                     l2306 1106                       l2322 0DB4                       l2402 0C1E  
                     l2308 110A                       l2332 0E0A                       l2324 0DC6  
                     l2412 0C7C                       l2318 0DA6                       l2328 0DDE  
                     l2424 0FCE                       l2360 0AD2                       l2416 0CA2  
                     l2408 0C66                       l2440 0686                       l2512 0914  
                     l2426 0FDA                       l2362 0AE6                       l2354 0AAC  
                     l2522 09C6                       l2380 0B7E                       l2372 0B42  
                     l2348 0A84                       l2532 0A0C                       l2454 06C4  
                     l2630 007C                       l2288 0EAC                       l2376 0B58  
                     l2392 0BCC                       l2528 0A02                       l2298 109C  
                     l2458 06D4                       l2538 0A24                       l2554 0F7C  
                     l1932 0E44                       l2396 0BF0                       l2492 0848  
                     l2468 07CC                       l2556 0FA0                       l2820 0562  
                     l2804 04E6                       l2708 028C                       l2822 056E  
                     l1952 0E8A                       l1944 0E72                       l1936 0E52  
                     l1928 0E38                       l2488 0830                       l2760 03B0  
                     l2728 02F8                       l1938 0E5A                       l2842 05E0  
                     l2690 022E                       l1948 0E7C                       l2828 058A  
                     l2780 0444                       l2748 036A                       l2838 05CA  
                     l2846 05F0                       ?_pad 0020                       l2856 061A  
                     l2796 04BE                       l2798 04CA                       STR_1 FFC4  
                     STR_2 FF64                       STR_3 FEBE                       STR_4 FEEE  
                     STR_5 FFCF                       STR_6 FF96                       STR_7 FFE3  
                     STR_8 FF2A                       STR_9 FF7E                       u2000 080E  
                     u2020 081A                       u1320 0E5E                       u2070 0948  
                     _LATD 000F8C                       u2407 0176                       u2417 0192  
                     u2337 0054                       u1650 0EA4                       u1635 114C  
                     u2507 05D6                       u2427 01C6                       u2347 0092  
                     u1636 114E                       u1740 10D8                       u1900 065A  
                     u2517 0626                       u2437 01F4                       u2357 00B4  
                     u1670 0EEC                       u2527 0F06                       u2447 024C  
                     u2367 00E0                       u2537 0F1E                       u2457 02AC  
                     u2377 00FC                       u1850 0C22                       u1930 0698  
                     u2547 0F30                       u1771 0AB2                       u2467 0318  
                     u2387 011E                       u2557 0F52                       u2477 03CE  
                     u2397 0150                       u1790 0AEA                       u1950 06BE  
                     u2567 1134                       u2487 0462                       u1960 07DA  
                     u2577 113E                       u2497 0506                       u1890 0658  
                     u1980 07FC                       u1981 07FA                       u1990 080A  
                     abs@a 001E                       _dbuf 00C5                       _ctoa 0FBC  
                     _main 0012                       _dtoa 0630   __end_of_interruptHandler 0D8E  
                     _keys FEA7                       _prec 0070                       _time 00C0  
                     _nout 006C                       pad@i 0027                       pad@p 0024  
                     fsr1h 000FE2                       fsr2h 000FDA                       indf2 000FDF  
                     fsr1l 000FE1                       pad@w 0029                       fsr2l 000FD9  
                     btemp 0074                       start 000E              __CFG_IESO$OFF 000000  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                      ??_abs 0020  
                    ??_pad 0026            __end_of___aodiv 0BA0                      ?_ctoa 002B  
                    ?_main 0001                      ?_dtoa 002B            __end_of___aomod 0CC4  
                    STR_10 FEFD                      STR_11 FFAE                      STR_20 FF8A  
                    STR_12 FF1B                      STR_13 FF71                      STR_21 FF0C  
                    STR_30 FFD9                      STR_22 FFD9                      STR_14 FFB9  
                    STR_23 FF8A                      STR_15 FFEC                      STR_16 FFF5  
                    STR_24 FF56                      STR_25 FF39                      STR_17 FECF  
                    STR_26 FFD9                      STR_18 FFA2                      STR_27 FF8A  
                    STR_19 FEDF                      STR_28 FF4B            __end_of___awmod 0E94  
                    STR_29 FF48               vfpfcnvrt@fmt 0051                      _PORTB 000F81  
                    _TRISD 000F95              __CFG_PWRT$OFF 000000               main@miniTick 00ED  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 11B8             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
             main@keypress 00F3             __CFG_EBTR3$OFF 000000                      _State 00A8  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
                    _balls 00BC            __end_of_initLCD 0F6A             __CFG_EBTRB$OFF 000000  
                    _flags 0072              _BallDispensed 0080                      _fputc 0E94  
                    _fputs 1092                      pad@fp 0020                      _width 006E  
                    ctoa@c 002D                      _putch 11A0                      _start 00C2  
                    ctoa@w 002E                      dtoa@d 002D                      dtoa@i 004D  
                    dtoa@n 0045                      dtoa@p 003F                      dtoa@s 0043  
                    dtoa@w 0041                      tablat 000FF5            send_nibble@data 000D  
          __end_of_pulse_e 1150                      ttemp5 0075                      ttemp6 0078  
                    ttemp7 007C                      status 000FD8                      wtemp8 0075  
           __CFG_PBADEN$ON 000000         main@number_pressed 00EF            __initialization 100A  
             __end_of_ctoa 100A               __end_of_main 0630               __end_of_dtoa 0872  
             __end_of_keys FEB8                     ??_ctoa 002E                     ??_main 00E9  
                   ??_dtoa 0035              __activetblptr 000002                     _ADCON1 000FC1  
             ?_send_nibble 0001                     ?_fputc 0010                     ?_fputs 0019  
                   ?_putch 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l2250 0D20                     i2l2252 0D2A                     i2l2260 0D64  
                   i2l2244 0D02                     i2l2258 0D60              main@miniClear 00F1  
            main@miniState 00F4             __CFG_XINST$OFF 000000               vfprintf@cfmt 0066  
                ??___aodiv 001C                  ??___aomod 001C             __CFG_STVREN$ON 000000  
                ??___awmod 0010                     clear_0 1030                     clear_1 103C  
          ___awmod@divisor 000E            ___awmod@counter 0010                  ??_lcdInst 000F  
                   _printf 1150                     pad@buf 0022                     ctoa@fp 002B  
                   dtoa@fp 002B                     _strlen 10FC                  ??_initLCD 0010  
                   fputc@c 0010                     fputs@c 001D                     fputs@i 001E  
                   fputs@s 0019               __mediumconst FEA6                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8           __end_of_vfprintf 0FBC  
                ??_pulse_e 000C      pulse_e@interruptState 000C                 __accesstop 0080  
  __end_of__initialization 1042              ___rparam_used 000001             __pcstackCOMRAM 0001  
             __pidataBANK0 1050              __end_of_fputc 0F00              __end_of_fputs 10CA  
            __end_of_putch 11AC            _key_was_pressed 00C4                    ??_fputc 0014  
                  ??_fputs 001D                    ??_putch 000F                 __pbssBANK0 00C2  
        ?_interruptHandler 0001         ??_interruptHandler 0001         __size_of_send_byte 0012  
                  ?_printf 0068                    ?_strlen 000C         __size_of_vfpfcnvrt 01E6  
     __size_of_send_nibble 0016           _DistanceCanister 0094                    __Hparam 0000  
                  __Lparam 0000                    ___aodiv 0A58                    ___aomod 0BA0  
                  ___awmod 0E24                  ?_vfprintf 0060   interruptHandler@keypress 000B  
                  __pcinit 100A                    __ramtop 1000                    _lcdInst 11AC  
                  __ptext0 0012                    __ptext1 1150                    __ptext2 0F6A  
                  __ptext3 0872                    __ptext4 0630                    __ptext5 10CA  
                  __ptext6 0BA0                    __ptext7 0A58                    __ptext8 0FBC  
                  __ptext9 0D8E            __size_of_printf 0028            __size_of_strlen 002A  
                  _initLCD 0F00               __size_of_abs 0032               __size_of_pad 0096  
         ___awmod@dividend 000C                    _pulse_e 1126             __pintcode_body 0CC4  
     end_of_initialization 1042      __end_of_LCD_SIZE_HORZ FEBE          __end_of_send_byte 11A0  
    __end_of_LCD_SIZE_VERT FEBD                    fputc@fp 0012              __Lmediumconst FEA6  
                  int_func 0CC4                    fputs@fp 001B          __end_of_vfpfcnvrt 0A58  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                 ??_vfprintf 0066  
                  strlen@a 000E                    strlen@s 000C              send_byte@data 000E  
              vfpfcnvrt@ap 0053                vfpfcnvrt@fp 004F                vfpfcnvrt@ll 0057  
           __end_of_printf 1178             __end_of_strlen 1126        start_initialization 100A  
              __end_of_abs 10FC                __end_of_pad 0E24          interruptHandler@i 0009  
              vfprintf@fmt 0062                __pdataBANK0 0080           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 006C  __size_of_interruptHandler 0D86                   ??_strlen 000E  
              __pbssCOMRAM 006C              __pcstackBANK0 00E5           ___aodiv@dividend 000C  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008              __pmediumconst FEA6  
                 ?___aodiv 000C                   ?___aomod 000C           ___aodiv@quotient 001E  
                 ?___awmod 000C                   ?_lcdInst 0001          __size_of_vfprintf 0052  
                 ?_initLCD 0001              ??_send_nibble 000D                   ?_pulse_e 0001  
           __size_of_fputc 006C             __size_of_fputs 0038             __size_of_putch 000C  
                 _LATDbits 000F8C                  _send_byte 118E             _LCD_LINE1_ADDR FEBB  
           _LCD_LINE2_ADDR FEBA             _LCD_LINE3_ADDR FEB9             _LCD_LINE4_ADDR FEB8  
                 i2u162_40 0D7A           __CFG_WDTPS$32768 000000                  _vfpfcnvrt 0872  
                main@clear 00F6                   _Canister 00BE                  main@state 00F8  
               vfpfcnvrt@c 005F                  copy_data0 101E     __end_of_LCD_LINE1_ADDR FEBC  
   __end_of_LCD_LINE2_ADDR FEBB     __end_of_LCD_LINE3_ADDR FEBA     __end_of_LCD_LINE4_ADDR FEB9  
      __end_of_send_nibble 118E                 ?_send_byte 0001                   __Hrparam 0000  
               vfprintf@ap 0064                   __Lrparam 0000                 vfprintf@fp 0060  
       __CFG_BOREN$SBORDIS 000000           __size_of___aodiv 0148           __size_of___aomod 0124  
         __size_of___awmod 0070                 ?_vfpfcnvrt 004F            ___aodiv@divisor 0014  
         _interruptHandler 0008            ___aodiv@counter 001C           __size_of_lcdInst 000C  
         __size_of_initLCD 006A                   _dtoa$329 003D                   __ptext10 10FC  
                 __ptext11 1092                   __ptext12 0E94                   __ptext13 11A0  
                 __ptext14 0F00                   __ptext15 11AC                   __ptext16 118E  
                 __ptext17 1178                   __ptext18 1126                   __ptext19 0E24  
         __size_of_pulse_e 002A              __size_of_ctoa 004E              __size_of_main 061E  
            __size_of_dtoa 0242                   _exit_key 00C3                   int$flags 0074  
                 _vfprintf 0F6A                  printf@fmt 0068                   main@tick 00EB  
         ___aomod@dividend 000C                  putch@data 000F                 _INTCONbits 000FF2  
              _send_nibble 1178                   intlevel2 0000              _LCD_SIZE_HORZ FEBD  
            _LCD_SIZE_VERT FEBC                ??_send_byte 000E                   printf@ap 00E7  
          ___aomod@divisor 0014                ??_vfpfcnvrt 0055                lcdInst@data 000F  
          ___aomod@counter 001C               ___aodiv@sign 001D               ___aomod@sign 001D  
