

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Feb  1 17:54:13 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataBANK0
    75  001FCE                     __pidataBANK0:
    76                           	opt callstack 0
    77                           
    78                           ;initializer for _BallDispensed
    79  001FCE  FFFF               	dw	65535
    80  001FD0  FFFF               	dw	65535
    81  001FD2  FFFF               	dw	65535
    82  001FD4  FFFF               	dw	65535
    83  001FD6  FFFF               	dw	65535
    84  001FD8  FFFF               	dw	65535
    85  001FDA  FFFF               	dw	65535
    86  001FDC  FFFF               	dw	65535
    87  001FDE  FFFF               	dw	65535
    88  001FE0  FFFF               	dw	65535
    89                           
    90                           ;initializer for _DistanceCanister
    91  001FE2  FFFF               	dw	65535
    92  001FE4  FFFF               	dw	65535
    93  001FE6  FFFF               	dw	65535
    94  001FE8  FFFF               	dw	65535
    95  001FEA  FFFF               	dw	65535
    96  001FEC  FFFF               	dw	65535
    97  001FEE  FFFF               	dw	65535
    98  001FF0  FFFF               	dw	65535
    99  001FF2  FFFF               	dw	65535
   100  001FF4  FFFF               	dw	65535
   101                           
   102                           ;initializer for _State
   103  001FF6  FFFF               	dw	65535
   104  001FF8  FFFF               	dw	65535
   105  001FFA  FFFF               	dw	65535
   106  001FFC  FFFF               	dw	65535
   107  001FFE  FFFF               	dw	65535
   108  002000  FFFF               	dw	65535
   109  002002  FFFF               	dw	65535
   110  002004  FFFF               	dw	65535
   111  002006  FFFF               	dw	65535
   112  002008  FFFF               	dw	65535
   113                           
   114                           ;initializer for _balls
   115  00200A  0005               	dw	5
   116                           
   117                           ;initializer for _Canister
   118  00200C  0007               	dw	7
   119                           
   120                           ;initializer for _time
   121  00200E  001E               	dw	30
   122                           
   123                           	psect	smallconst
   124  001000                     __psmallconst:
   125                           	opt callstack 0
   126  001000  00                 	db	0
   127  001001                     _keys:
   128                           	opt callstack 0
   129  001001  31                 	db	49
   130  001002  32                 	db	50
   131  001003  33                 	db	51
   132  001004  41                 	db	65
   133  001005  34                 	db	52
   134  001006  35                 	db	53
   135  001007  36                 	db	54
   136  001008  42                 	db	66
   137  001009  37                 	db	55
   138  00100A  38                 	db	56
   139  00100B  39                 	db	57
   140  00100C  43                 	db	67
   141  00100D  2A                 	db	42
   142  00100E  30                 	db	48
   143  00100F  23                 	db	35
   144  001010  44                 	db	68
   145  001011  00                 	db	0
   146  001012                     __end_of_keys:
   147                           	opt callstack 0
   148  001012  50                 	db	80
   149  001013                     __end_of_LCD_LINE4_ADDR:
   150                           	opt callstack 0
   151  001013  10                 	db	16
   152  001014                     __end_of_LCD_LINE3_ADDR:
   153                           	opt callstack 0
   154  001014  40                 	db	64
   155  001015                     __end_of_LCD_LINE2_ADDR:
   156                           	opt callstack 0
   157  001015  00                 	db	0
   158  001016                     __end_of_LCD_LINE1_ADDR:
   159                           	opt callstack 0
   160  001016                     _LCD_SIZE_VERT:
   161                           	opt callstack 0
   162  001016  04                 	db	4
   163  001017                     __end_of_LCD_SIZE_VERT:
   164                           	opt callstack 0
   165  001017                     _LCD_SIZE_HORZ:
   166                           	opt callstack 0
   167  001017  10                 	db	16
   168  001018                     __end_of_LCD_SIZE_HORZ:
   169                           	opt callstack 0
   170  0000                     _PORTB	set	3969
   171  0000                     _ADCON1	set	4033
   172  0000                     _TRISD	set	3989
   173  0000                     _LATD	set	3980
   174  0000                     _LATDbits	set	3980
   175  0000                     _INTCONbits	set	4082
   176  0000                     _INT1IF	set	32640
   177  0000                     _INT1IE	set	32643
   178  001018                     STR_1:
   179  001018  49                 	db	73	;'I'
   180  001019  74                 	db	116	;'t'
   181  00101A  27                 	db	39
   182  00101B  73                 	db	115	;'s'
   183  00101C  20                 	db	32
   184  00101D  79                 	db	121	;'y'
   185  00101E  61                 	db	97	;'a'
   186  00101F  20                 	db	32
   187  001020  62                 	db	98	;'b'
   188  001021  6F                 	db	111	;'o'
   189  001022  79                 	db	121	;'y'
   190  001023  20                 	db	32
   191  001024  41                 	db	65	;'A'
   192  001025  6C                 	db	108	;'l'
   193  001026  69                 	db	105	;'i'
   194  001027  21                 	db	33
   195  001028  00                 	db	0
   196  001029                     STR_9:
   197  001029  49                 	db	73	;'I'
   198  00102A  6E                 	db	110	;'n'
   199  00102B  64                 	db	100	;'d'
   200  00102C  69                 	db	105	;'i'
   201  00102D  76                 	db	118	;'v'
   202  00102E  69                 	db	105	;'i'
   203  00102F  64                 	db	100	;'d'
   204  001030  75                 	db	117	;'u'
   205  001031  61                 	db	97	;'a'
   206  001032  6C                 	db	108	;'l'
   207  001033  20                 	db	32
   208  001034  49                 	db	73	;'I'
   209  001035  6E                 	db	110	;'n'
   210  001036  66                 	db	102	;'f'
   211  001037  6F                 	db	111	;'o'
   212  001038  00                 	db	0
   213  001039                     STR_11:
   214  001039  50                 	db	80	;'P'
   215  00103A  72                 	db	114	;'r'
   216  00103B  65                 	db	101	;'e'
   217  00103C  73                 	db	115	;'s'
   218  00103D  73                 	db	115	;'s'
   219  00103E  20                 	db	32
   220  00103F  30                 	db	48	;'0'
   221  001040  20                 	db	32
   222  001041  74                 	db	116	;'t'
   223  001042  6F                 	db	111	;'o'
   224  001043  20                 	db	32
   225  001044  25                 	db	37
   226  001045  64                 	db	100	;'d'
   227  001046  20                 	db	32
   228  001047  00                 	db	0
   229  001048                     STR_2:
   230  001048  4F                 	db	79	;'O'
   231  001049  70                 	db	112	;'p'
   232  00104A  65                 	db	101	;'e'
   233  00104B  72                 	db	114	;'r'
   234  00104C  61                 	db	97	;'a'
   235  00104D  74                 	db	116	;'t'
   236  00104E  69                 	db	105	;'i'
   237  00104F  6F                 	db	111	;'o'
   238  001050  6E                 	db	110	;'n'
   239  001051  20                 	db	32
   240  001052  54                 	db	84	;'T'
   241  001053  69                 	db	105	;'i'
   242  001054  6D                 	db	109	;'m'
   243  001055  65                 	db	101	;'e'
   244  001056  00                 	db	0
   245  001057                     STR_13:
   246  001057  44                 	db	68	;'D'
   247  001058  69                 	db	105	;'i'
   248  001059  73                 	db	115	;'s'
   249  00105A  74                 	db	116	;'t'
   250  00105B  61                 	db	97	;'a'
   251  00105C  6E                 	db	110	;'n'
   252  00105D  63                 	db	99	;'c'
   253  00105E  65                 	db	101	;'e'
   254  00105F  20                 	db	32
   255  001060  25                 	db	37
   256  001061  64                 	db	100	;'d'
   257  001062  20                 	db	32
   258  001063  63                 	db	99	;'c'
   259  001064  6D                 	db	109	;'m'
   260  001065  00                 	db	0
   261  001066                     STR_4:
   262  001066  23                 	db	35
   263  001067  20                 	db	32
   264  001068  6F                 	db	111	;'o'
   265  001069  66                 	db	102	;'f'
   266  00106A  20                 	db	32
   267  00106B  43                 	db	67	;'C'
   268  00106C  61                 	db	97	;'a'
   269  00106D  6E                 	db	110	;'n'
   270  00106E  69                 	db	105	;'i'
   271  00106F  73                 	db	115	;'s'
   272  001070  74                 	db	116	;'t'
   273  001071  65                 	db	101	;'e'
   274  001072  72                 	db	114	;'r'
   275  001073  73                 	db	115	;'s'
   276  001074  00                 	db	0
   277  001075                     STR_17:
   278  001075  43                 	db	67	;'C'
   279  001076  61                 	db	97	;'a'
   280  001077  6E                 	db	110	;'n'
   281  001078  69                 	db	105	;'i'
   282  001079  73                 	db	115	;'s'
   283  00107A  74                 	db	116	;'t'
   284  00107B  65                 	db	101	;'e'
   285  00107C  72                 	db	114	;'r'
   286  00107D  20                 	db	32
   287  00107E  45                 	db	69	;'E'
   288  00107F  6D                 	db	109	;'m'
   289  001080  70                 	db	112	;'p'
   290  001081  74                 	db	116	;'t'
   291  001082  79                 	db	121	;'y'
   292  001083  00                 	db	0
   293  001084                     STR_21:
   294  001084  4E                 	db	78	;'N'
   295  001085  6F                 	db	111	;'o'
   296  001086  20                 	db	32
   297  001087  42                 	db	66	;'B'
   298  001088  61                 	db	97	;'a'
   299  001089  6C                 	db	108	;'l'
   300  00108A  6C                 	db	108	;'l'
   301  00108B  20                 	db	32
   302  00108C  41                 	db	65	;'A'
   303  00108D  64                 	db	100	;'d'
   304  00108E  64                 	db	100	;'d'
   305  00108F  65                 	db	101	;'e'
   306  001090  64                 	db	100	;'d'
   307  001091  00                 	db	0
   308  001092                     STR_16:
   309  001092  43                 	db	67	;'C'
   310  001093  61                 	db	97	;'a'
   311  001094  6E                 	db	110	;'n'
   312  001095  69                 	db	105	;'i'
   313  001096  73                 	db	115	;'s'
   314  001097  74                 	db	116	;'t'
   315  001098  65                 	db	101	;'e'
   316  001099  72                 	db	114	;'r'
   317  00109A  20                 	db	32
   318  00109B  46                 	db	70	;'F'
   319  00109C  75                 	db	117	;'u'
   320  00109D  6C                 	db	108	;'l'
   321  00109E  6C                 	db	108	;'l'
   322  00109F  00                 	db	0
   323  0010A0                     STR_5:
   324  0010A0  25                 	db	37
   325  0010A1  64                 	db	100	;'d'
   326  0010A2  20                 	db	32
   327  0010A3  43                 	db	67	;'C'
   328  0010A4  61                 	db	97	;'a'
   329  0010A5  6E                 	db	110	;'n'
   330  0010A6  69                 	db	105	;'i'
   331  0010A7  73                 	db	115	;'s'
   332  0010A8  74                 	db	116	;'t'
   333  0010A9  65                 	db	101	;'e'
   334  0010AA  72                 	db	114	;'r'
   335  0010AB  73                 	db	115	;'s'
   336  0010AC  00                 	db	0
   337  0010AD                     STR_12:
   338  0010AD  43                 	db	67	;'C'
   339  0010AE  61                 	db	97	;'a'
   340  0010AF  6E                 	db	110	;'n'
   341  0010B0  73                 	db	115	;'s'
   342  0010B1  69                 	db	105	;'i'
   343  0010B2  74                 	db	116	;'t'
   344  0010B3  65                 	db	101	;'e'
   345  0010B4  72                 	db	114	;'r'
   346  0010B5  20                 	db	32
   347  0010B6  25                 	db	37
   348  0010B7  63                 	db	99	;'c'
   349  0010B8  00                 	db	0
   350  0010B9                     STR_10:
   351  0010B9  6F                 	db	111	;'o'
   352  0010BA  66                 	db	102	;'f'
   353  0010BB  20                 	db	32
   354  0010BC  43                 	db	67	;'C'
   355  0010BD  61                 	db	97	;'a'
   356  0010BE  6E                 	db	110	;'n'
   357  0010BF  69                 	db	105	;'i'
   358  0010C0  73                 	db	115	;'s'
   359  0010C1  74                 	db	116	;'t'
   360  0010C2  65                 	db	101	;'e'
   361  0010C3  72                 	db	114	;'r'
   362  0010C4  00                 	db	0
   363  0010C5                     STR_3:
   364  0010C5  25                 	db	37
   365  0010C6  64                 	db	100	;'d'
   366  0010C7  20                 	db	32
   367  0010C8  73                 	db	115	;'s'
   368  0010C9  65                 	db	101	;'e'
   369  0010CA  63                 	db	99	;'c'
   370  0010CB  6F                 	db	111	;'o'
   371  0010CC  6E                 	db	110	;'n'
   372  0010CD  64                 	db	100	;'d'
   373  0010CE  73                 	db	115	;'s'
   374  0010CF  00                 	db	0
   375  0010D0                     STR_6:
   376  0010D0  23                 	db	35
   377  0010D1  20                 	db	32
   378  0010D2  6F                 	db	111	;'o'
   379  0010D3  66                 	db	102	;'f'
   380  0010D4  20                 	db	32
   381  0010D5  42                 	db	66	;'B'
   382  0010D6  61                 	db	97	;'a'
   383  0010D7  6C                 	db	108	;'l'
   384  0010D8  6C                 	db	108	;'l'
   385  0010D9  73                 	db	115	;'s'
   386  0010DA  00                 	db	0
   387  0010DB                     STR_14:
   388  0010DB  2A                 	db	42
   389  0010DC  20                 	db	32
   390  0010DD  74                 	db	116	;'t'
   391  0010DE  6F                 	db	111	;'o'
   392  0010DF  20                 	db	32
   393  0010E0  65                 	db	101	;'e'
   394  0010E1  78                 	db	120	;'x'
   395  0010E2  69                 	db	105	;'i'
   396  0010E3  74                 	db	116	;'t'
   397  0010E4  00                 	db	0
   398  0010E5                     STR_7:
   399  0010E5  73                 	db	115	;'s'
   400  0010E6  75                 	db	117	;'u'
   401  0010E7  70                 	db	112	;'p'
   402  0010E8  70                 	db	112	;'p'
   403  0010E9  6C                 	db	108	;'l'
   404  0010EA  69                 	db	105	;'i'
   405  0010EB  65                 	db	101	;'e'
   406  0010EC  64                 	db	100	;'d'
   407  0010ED  00                 	db	0
   408  0010EE                     STR_8:
   409  0010EE  25                 	db	37
   410  0010EF  64                 	db	100	;'d'
   411  0010F0  20                 	db	32
   412  0010F1  62                 	db	98	;'b'
   413  0010F2  61                 	db	97	;'a'
   414  0010F3  6C                 	db	108	;'l'
   415  0010F4  6C                 	db	108	;'l'
   416  0010F5  73                 	db	115	;'s'
   417  0010F6  00                 	db	0
   418  0000                     
   419                           ; #config settings
   420  0010F7  00                 	db	0	; dummy byte at the end
   421  0000                     
   422                           	psect	cinit
   423  001F84                     __pcinit:
   424                           	opt callstack 0
   425  001F84                     start_initialization:
   426                           	opt callstack 0
   427  001F84                     __initialization:
   428                           	opt callstack 0
   429                           
   430                           ; Initialize objects allocated to BANK0 (66 bytes)
   431                           ; load TBLPTR registers with __pidataBANK0
   432  001F84  0ECE               	movlw	low __pidataBANK0
   433  001F86  6EF6               	movwf	tblptrl,c
   434  001F88  0E1F               	movlw	high __pidataBANK0
   435  001F8A  6EF7               	movwf	tblptrh,c
   436  001F8C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   437  001F8E  6EF8               	movwf	tblptru,c
   438  001F90  EE00  F080         	lfsr	0,__pdataBANK0
   439  001F94  EE10 F042          	lfsr	1,66
   440  001F98                     copy_data0:
   441  001F98  0009               	tblrd		*+
   442  001F9A  CFF5 FFEE          	movff	tablat,postinc0
   443  001F9E  50E5               	movf	postdec1,w,c
   444  001FA0  50E1               	movf	fsr1l,w,c
   445  001FA2  E1FA               	bnz	copy_data0
   446                           
   447                           ; Clear objects allocated to BANK0 (34 bytes)
   448  001FA4  EE00  F0C2         	lfsr	0,__pbssBANK0
   449  001FA8  0E22               	movlw	34
   450  001FAA                     clear_0:
   451  001FAA  6AEE               	clrf	postinc0,c
   452  001FAC  06E8               	decf	wreg,f,c
   453  001FAE  E1FD               	bnz	clear_0
   454                           
   455                           ; Clear objects allocated to COMRAM (8 bytes)
   456  001FB0  EE00  F06C         	lfsr	0,__pbssCOMRAM
   457  001FB4  0E08               	movlw	8
   458  001FB6                     clear_1:
   459  001FB6  6AEE               	clrf	postinc0,c
   460  001FB8  06E8               	decf	wreg,f,c
   461  001FBA  E1FD               	bnz	clear_1
   462  001FBC                     end_of_initialization:
   463                           	opt callstack 0
   464  001FBC                     __end_of__initialization:
   465                           	opt callstack 0
   466  001FBC  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   467  001FBE  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   468  001FC0  0E00               	movlw	low (__Lsmallconst shr (0+16))
   469  001FC2  6EF8               	movwf	tblptru,c
   470  001FC4  0E10               	movlw	high __Lsmallconst
   471  001FC6  6EF7               	movwf	tblptrh,c
   472  001FC8  0100               	movlb	0
   473  001FCA  EF7C  F008         	goto	_main	;jump to C main() function
   474                           
   475                           	psect	bssCOMRAM
   476  00006C                     __pbssCOMRAM:
   477                           	opt callstack 0
   478  00006C                     _nout:
   479                           	opt callstack 0
   480  00006C                     	ds	2
   481  00006E                     _width:
   482                           	opt callstack 0
   483  00006E                     	ds	2
   484  000070                     _prec:
   485                           	opt callstack 0
   486  000070                     	ds	2
   487  000072                     _flags:
   488                           	opt callstack 0
   489  000072                     	ds	2
   490                           
   491                           	psect	bssBANK0
   492  0000C2                     __pbssBANK0:
   493                           	opt callstack 0
   494  0000C2                     _exit_key:
   495                           	opt callstack 0
   496  0000C2                     	ds	1
   497  0000C3                     _key_was_pressed:
   498                           	opt callstack 0
   499  0000C3                     	ds	1
   500  0000C4                     _dbuf:
   501                           	opt callstack 0
   502  0000C4                     	ds	32
   503                           
   504                           	psect	dataBANK0
   505  000080                     __pdataBANK0:
   506                           	opt callstack 0
   507  000080                     _BallDispensed:
   508                           	opt callstack 0
   509  000080                     	ds	20
   510  000094                     _DistanceCanister:
   511                           	opt callstack 0
   512  000094                     	ds	20
   513  0000A8                     _State:
   514                           	opt callstack 0
   515  0000A8                     	ds	20
   516  0000BC                     _balls:
   517                           	opt callstack 0
   518  0000BC                     	ds	2
   519  0000BE                     _Canister:
   520                           	opt callstack 0
   521  0000BE                     	ds	2
   522  0000C0                     _time:
   523                           	opt callstack 0
   524  0000C0                     	ds	2
   525                           
   526                           	psect	cstackBANK0
   527  0000E4                     __pcstackBANK0:
   528                           	opt callstack 0
   529  0000E4                     	ds	2
   530  0000E6                     printf@ap:
   531                           	opt callstack 0
   532                           
   533                           ; 2 bytes @ 0x2
   534  0000E6                     	ds	2
   535  0000E8                     ??_main:
   536                           
   537                           ; 1 bytes @ 0x4
   538  0000E8                     	ds	2
   539  0000EA                     main@tick:
   540                           	opt callstack 0
   541                           
   542                           ; 2 bytes @ 0x6
   543  0000EA                     	ds	2
   544  0000EC                     main@miniTick:
   545                           	opt callstack 0
   546                           
   547                           ; 2 bytes @ 0x8
   548  0000EC                     	ds	2
   549  0000EE                     main@number_pressed:
   550                           	opt callstack 0
   551                           
   552                           ; 2 bytes @ 0xA
   553  0000EE                     	ds	2
   554  0000F0                     main@miniClear:
   555                           	opt callstack 0
   556                           
   557                           ; 2 bytes @ 0xC
   558  0000F0                     	ds	2
   559  0000F2                     main@keypress:
   560                           	opt callstack 0
   561                           
   562                           ; 1 bytes @ 0xE
   563  0000F2                     	ds	1
   564  0000F3                     main@miniState:
   565                           	opt callstack 0
   566                           
   567                           ; 2 bytes @ 0xF
   568  0000F3                     	ds	2
   569  0000F5                     main@clear:
   570                           	opt callstack 0
   571                           
   572                           ; 2 bytes @ 0x11
   573  0000F5                     	ds	2
   574  0000F7                     main@state:
   575                           	opt callstack 0
   576                           
   577                           ; 2 bytes @ 0x13
   578  0000F7                     	ds	2
   579                           
   580                           	psect	cstackCOMRAM
   581  000001                     __pcstackCOMRAM:
   582                           	opt callstack 0
   583  000001                     ??_interruptHandler:
   584                           
   585                           ; 1 bytes @ 0x0
   586  000001                     	ds	8
   587  000009                     interruptHandler@i:
   588                           	opt callstack 0
   589                           
   590                           ; 2 bytes @ 0x8
   591  000009                     	ds	2
   592  00000B                     interruptHandler@keypress:
   593                           	opt callstack 0
   594                           
   595                           ; 1 bytes @ 0xA
   596  00000B                     	ds	1
   597  00000C                     ?_strlen:
   598                           	opt callstack 0
   599  00000C                     ?___awmod:
   600                           	opt callstack 0
   601  00000C                     ?___aodiv:
   602                           	opt callstack 0
   603  00000C                     ?___aomod:
   604                           	opt callstack 0
   605  00000C                     pulse_e@interruptState:
   606                           	opt callstack 0
   607  00000C                     ___awmod@dividend:
   608                           	opt callstack 0
   609  00000C                     strlen@s:
   610                           	opt callstack 0
   611  00000C                     ___aodiv@dividend:
   612                           	opt callstack 0
   613  00000C                     ___aomod@dividend:
   614                           	opt callstack 0
   615                           
   616                           ; 8 bytes @ 0xB
   617  00000C                     	ds	1
   618  00000D                     send_nibble@data:
   619                           	opt callstack 0
   620                           
   621                           ; 1 bytes @ 0xC
   622  00000D                     	ds	1
   623  00000E                     send_byte@data:
   624                           	opt callstack 0
   625  00000E                     ___awmod@divisor:
   626                           	opt callstack 0
   627  00000E                     strlen@a:
   628                           	opt callstack 0
   629                           
   630                           ; 2 bytes @ 0xD
   631  00000E                     	ds	1
   632  00000F                     lcdInst@data:
   633                           	opt callstack 0
   634  00000F                     putch@data:
   635                           	opt callstack 0
   636                           
   637                           ; 1 bytes @ 0xE
   638  00000F                     	ds	1
   639  000010                     ??_initLCD:
   640  000010                     ___awmod@counter:
   641                           	opt callstack 0
   642  000010                     fputc@c:
   643                           	opt callstack 0
   644                           
   645                           ; 2 bytes @ 0xF
   646  000010                     	ds	1
   647  000011                     ___awmod@sign:
   648                           	opt callstack 0
   649                           
   650                           ; 1 bytes @ 0x10
   651  000011                     	ds	1
   652  000012                     fputc@fp:
   653                           	opt callstack 0
   654                           
   655                           ; 2 bytes @ 0x11
   656  000012                     	ds	2
   657  000014                     ??_fputc:
   658  000014                     ___aodiv@divisor:
   659                           	opt callstack 0
   660  000014                     ___aomod@divisor:
   661                           	opt callstack 0
   662                           
   663                           ; 8 bytes @ 0x13
   664  000014                     	ds	5
   665  000019                     fputs@s:
   666                           	opt callstack 0
   667                           
   668                           ; 2 bytes @ 0x18
   669  000019                     	ds	2
   670  00001B                     fputs@fp:
   671                           	opt callstack 0
   672                           
   673                           ; 2 bytes @ 0x1A
   674  00001B                     	ds	1
   675  00001C                     ___aodiv@counter:
   676                           	opt callstack 0
   677  00001C                     ___aomod@counter:
   678                           	opt callstack 0
   679                           
   680                           ; 1 bytes @ 0x1B
   681  00001C                     	ds	1
   682  00001D                     ___aodiv@sign:
   683                           	opt callstack 0
   684  00001D                     ___aomod@sign:
   685                           	opt callstack 0
   686  00001D                     fputs@c:
   687                           	opt callstack 0
   688                           
   689                           ; 1 bytes @ 0x1C
   690  00001D                     	ds	1
   691  00001E                     ?_abs:
   692                           	opt callstack 0
   693  00001E                     abs@a:
   694                           	opt callstack 0
   695  00001E                     fputs@i:
   696                           	opt callstack 0
   697  00001E                     ___aodiv@quotient:
   698                           	opt callstack 0
   699                           
   700                           ; 8 bytes @ 0x1D
   701  00001E                     	ds	2
   702  000020                     ??_abs:
   703  000020                     ?_pad:
   704                           	opt callstack 0
   705  000020                     pad@fp:
   706                           	opt callstack 0
   707                           
   708                           ; 2 bytes @ 0x1F
   709  000020                     	ds	2
   710  000022                     pad@buf:
   711                           	opt callstack 0
   712                           
   713                           ; 2 bytes @ 0x21
   714  000022                     	ds	2
   715  000024                     pad@p:
   716                           	opt callstack 0
   717                           
   718                           ; 2 bytes @ 0x23
   719  000024                     	ds	2
   720  000026                     ??_pad:
   721                           
   722                           ; 1 bytes @ 0x25
   723  000026                     	ds	1
   724  000027                     pad@i:
   725                           	opt callstack 0
   726                           
   727                           ; 2 bytes @ 0x26
   728  000027                     	ds	2
   729  000029                     pad@w:
   730                           	opt callstack 0
   731                           
   732                           ; 2 bytes @ 0x28
   733  000029                     	ds	2
   734  00002B                     ?_ctoa:
   735                           	opt callstack 0
   736  00002B                     ?_dtoa:
   737                           	opt callstack 0
   738  00002B                     ctoa@fp:
   739                           	opt callstack 0
   740  00002B                     dtoa@fp:
   741                           	opt callstack 0
   742                           
   743                           ; 2 bytes @ 0x2A
   744  00002B                     	ds	2
   745  00002D                     ctoa@c:
   746                           	opt callstack 0
   747  00002D                     dtoa@d:
   748                           	opt callstack 0
   749                           
   750                           ; 8 bytes @ 0x2C
   751  00002D                     	ds	1
   752  00002E                     ctoa@w:
   753                           	opt callstack 0
   754                           
   755                           ; 2 bytes @ 0x2D
   756  00002E                     	ds	7
   757  000035                     ??_dtoa:
   758                           
   759                           ; 1 bytes @ 0x34
   760  000035                     	ds	8
   761  00003D                     _dtoa$320:
   762                           	opt callstack 0
   763                           
   764                           ; 2 bytes @ 0x3C
   765  00003D                     	ds	2
   766  00003F                     dtoa@p:
   767                           	opt callstack 0
   768                           
   769                           ; 2 bytes @ 0x3E
   770  00003F                     	ds	2
   771  000041                     dtoa@w:
   772                           	opt callstack 0
   773                           
   774                           ; 2 bytes @ 0x40
   775  000041                     	ds	2
   776  000043                     dtoa@s:
   777                           	opt callstack 0
   778                           
   779                           ; 2 bytes @ 0x42
   780  000043                     	ds	2
   781  000045                     dtoa@n:
   782                           	opt callstack 0
   783                           
   784                           ; 8 bytes @ 0x44
   785  000045                     	ds	8
   786  00004D                     dtoa@i:
   787                           	opt callstack 0
   788                           
   789                           ; 2 bytes @ 0x4C
   790  00004D                     	ds	2
   791  00004F                     ?_vfpfcnvrt:
   792                           	opt callstack 0
   793  00004F                     vfpfcnvrt@fp:
   794                           	opt callstack 0
   795                           
   796                           ; 2 bytes @ 0x4E
   797  00004F                     	ds	2
   798  000051                     vfpfcnvrt@fmt:
   799                           	opt callstack 0
   800                           
   801                           ; 2 bytes @ 0x50
   802  000051                     	ds	2
   803  000053                     vfpfcnvrt@ap:
   804                           	opt callstack 0
   805                           
   806                           ; 2 bytes @ 0x52
   807  000053                     	ds	2
   808  000055                     ??_vfpfcnvrt:
   809                           
   810                           ; 1 bytes @ 0x54
   811  000055                     	ds	2
   812  000057                     vfpfcnvrt@ll:
   813                           	opt callstack 0
   814                           
   815                           ; 8 bytes @ 0x56
   816  000057                     	ds	8
   817  00005F                     vfpfcnvrt@c:
   818                           	opt callstack 0
   819                           
   820                           ; 1 bytes @ 0x5E
   821  00005F                     	ds	1
   822  000060                     ?_vfprintf:
   823                           	opt callstack 0
   824  000060                     vfprintf@fp:
   825                           	opt callstack 0
   826                           
   827                           ; 2 bytes @ 0x5F
   828  000060                     	ds	2
   829  000062                     vfprintf@fmt:
   830                           	opt callstack 0
   831                           
   832                           ; 2 bytes @ 0x61
   833  000062                     	ds	2
   834  000064                     vfprintf@ap:
   835                           	opt callstack 0
   836                           
   837                           ; 2 bytes @ 0x63
   838  000064                     	ds	2
   839  000066                     vfprintf@cfmt:
   840                           	opt callstack 0
   841                           
   842                           ; 2 bytes @ 0x65
   843  000066                     	ds	2
   844  000068                     ?_printf:
   845                           	opt callstack 0
   846  000068                     printf@fmt:
   847                           	opt callstack 0
   848                           
   849                           ; 2 bytes @ 0x67
   850  000068                     	ds	4
   851  00006C                     
   852                           ; 1 bytes @ 0x6B
   853 ;;
   854 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   855 ;;
   856 ;; *************** function _main *****************
   857 ;; Defined at:
   858 ;;		line 36 in file "main.c"
   859 ;; Parameters:    Size  Location     Type
   860 ;;		None
   861 ;; Auto vars:     Size  Location     Type
   862 ;;  miniState       2   15[BANK0 ] int 
   863 ;;  miniClear       2   12[BANK0 ] int 
   864 ;;  number_press    2   10[BANK0 ] int 
   865 ;;  miniTick        2    8[BANK0 ] int 
   866 ;;  keypress        1   14[BANK0 ] unsigned char 
   867 ;;  state           2   19[BANK0 ] int 
   868 ;;  clear           2   17[BANK0 ] int 
   869 ;;  tick            2    6[BANK0 ] int 
   870 ;; Return value:  Size  Location     Type
   871 ;;                  1    wreg      void 
   872 ;; Registers used:
   873 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   874 ;; Tracked objects:
   875 ;;		On entry : 0/0
   876 ;;		On exit  : 0/0
   877 ;;		Unchanged: 0/0
   878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   880 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   881 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   882 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   883 ;;Total ram usage:       17 bytes
   884 ;; Hardware stack levels required when called:   12
   885 ;; This function calls:
   886 ;;		___awmod
   887 ;;		_initLCD
   888 ;;		_lcdInst
   889 ;;		_printf
   890 ;; This function is called by:
   891 ;;		Startup code after reset
   892 ;; This function uses a non-reentrant model
   893 ;;
   894                           
   895                           	psect	text0
   896  0010F8                     __ptext0:
   897                           	opt callstack 0
   898  0010F8                     _main:
   899                           	opt callstack 19
   900                           
   901                           ;main.c: 40:     LATD = 0x00;
   902                           
   903                           ;incstack = 0
   904  0010F8  0E00               	movlw	0
   905  0010FA  6E8C               	movwf	3980,c	;volatile
   906                           
   907                           ;main.c: 41:     TRISD = 0x00;
   908  0010FC  0E00               	movlw	0
   909  0010FE  6E95               	movwf	3989,c	;volatile
   910                           
   911                           ;main.c: 44:     ADCON1 = 0b00001111;
   912  001100  0E0F               	movlw	15
   913  001102  6EC1               	movwf	4033,c	;volatile
   914                           
   915                           ;main.c: 47:     INT1IE = 1;
   916  001104  86F0               	bsf	4080,3,c	;volatile
   917                           
   918                           ;main.c: 50:     initLCD();
   919  001106  EC3D  F00F         	call	_initLCD	;wreg free
   920                           
   921                           ;main.c: 53:     (INTCONbits.GIE = 1);
   922  00110A  8EF2               	bsf	4082,7,c	;volatile
   923                           
   924                           ;main.c: 56:     int state = 0;
   925  00110C  0E00               	movlw	0
   926  00110E  0100               	movlb	0	; () banked
   927  001110  6FF8               	movwf	(main@state+1)& (0+255),b
   928  001112  0E00               	movlw	0
   929  001114  6FF7               	movwf	main@state& (0+255),b
   930                           
   931                           ; BSR set to: 0
   932                           ;main.c: 57:     int tick = 0;
   933  001116  0E00               	movlw	0
   934  001118  6FEB               	movwf	(main@tick+1)& (0+255),b
   935  00111A  0E00               	movlw	0
   936  00111C  6FEA               	movwf	main@tick& (0+255),b
   937                           
   938                           ; BSR set to: 0
   939                           ;main.c: 58:     int clear = 1;
   940  00111E  0E00               	movlw	0
   941  001120  6FF6               	movwf	(main@clear+1)& (0+255),b
   942  001122  0E01               	movlw	1
   943  001124  6FF5               	movwf	main@clear& (0+255),b
   944                           
   945                           ; BSR set to: 0
   946                           ;main.c: 62:     printf("It's ya boy Ali!");
   947  001126  0E18               	movlw	low STR_1
   948  001128  6E68               	movwf	printf@fmt,c
   949  00112A  0E10               	movlw	high STR_1
   950  00112C  6E69               	movwf	printf@fmt+1,c
   951  00112E  EC67  F010         	call	_printf	;wreg free
   952                           
   953                           ;main.c: 63:     _delay((unsigned long)((2000)*(10000000/4000.0)));
   954  001132  0E1A               	movlw	26
   955  001134  0100               	movlb	0	; () banked
   956  001136  6FE9               	movwf	(??_main+1)& (0+255),b
   957  001138  0E5E               	movlw	94
   958  00113A  6FE8               	movwf	??_main& (0+255),b
   959  00113C  0E6E               	movlw	110
   960  00113E                     u2287:
   961  00113E  2EE8               	decfsz	wreg,f,c
   962  001140  D7FE               	bra	u2287
   963  001142  2FE8               	decfsz	??_main& (0+255),f,b
   964  001144  D7FC               	bra	u2287
   965  001146  2FE9               	decfsz	(??_main+1)& (0+255),f,b
   966  001148  D7FA               	bra	u2287
   967  00114A  F000               	nop	
   968                           
   969                           ;main.c: 64:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   970  00114C  0E01               	movlw	1
   971  00114E  EC95  F010         	call	_lcdInst
   972  001152  0E11               	movlw	17
   973  001154  0100               	movlb	0	; () banked
   974  001156  6FE8               	movwf	??_main& (0+255),b
   975  001158  0E3A               	movlw	58
   976  00115A                     u2297:
   977  00115A  2EE8               	decfsz	wreg,f,c
   978  00115C  D7FE               	bra	u2297
   979  00115E  2FE8               	decfsz	??_main& (0+255),f,b
   980  001160  D7FC               	bra	u2297
   981  001162  F000               	nop	
   982  001164                     l2528:
   983                           
   984                           ;main.c: 71:         if (state == 0 & clear == 1) {
   985  001164  0100               	movlb	0	; () banked
   986  001166  51F7               	movf	main@state& (0+255),w,b
   987  001168  11F8               	iorwf	(main@state+1)& (0+255),w,b
   988  00116A  A4D8               	btfss	status,2,c
   989  00116C  D02B               	goto	l2546
   990                           
   991                           ; BSR set to: 0
   992  00116E  05F5               	decf	main@clear& (0+255),w,b
   993  001170  11F6               	iorwf	(main@clear+1)& (0+255),w,b
   994  001172  A4D8               	btfss	status,2,c
   995  001174  D027               	goto	l2546
   996                           
   997                           ; BSR set to: 0
   998                           ;main.c: 72:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   999  001176  0E01               	movlw	1
  1000  001178  EC95  F010         	call	_lcdInst
  1001  00117C  0E11               	movlw	17
  1002  00117E  0100               	movlb	0	; () banked
  1003  001180  6FE8               	movwf	??_main& (0+255),b
  1004  001182  0E3A               	movlw	58
  1005  001184                     u2307:
  1006  001184  2EE8               	decfsz	wreg,f,c
  1007  001186  D7FE               	bra	u2307
  1008  001188  2FE8               	decfsz	??_main& (0+255),f,b
  1009  00118A  D7FC               	bra	u2307
  1010  00118C  F000               	nop	
  1011                           
  1012                           ;main.c: 73:         { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
  1013  00118E  0E0C               	movlw	12
  1014  001190  EC95  F010         	call	_lcdInst
  1015                           
  1016                           ;main.c: 74:         printf("Operation Time");
  1017  001194  0E48               	movlw	low STR_2
  1018  001196  6E68               	movwf	printf@fmt,c
  1019  001198  0E10               	movlw	high STR_2
  1020  00119A  6E69               	movwf	printf@fmt+1,c
  1021  00119C  EC67  F010         	call	_printf	;wreg free
  1022  0011A0  0E90               	movlw	144
  1023  0011A2  EC95  F010         	call	_lcdInst
  1024                           
  1025                           ;main.c: 76:         printf("%d seconds", time);
  1026  0011A6  0EC5               	movlw	low STR_3
  1027  0011A8  6E68               	movwf	printf@fmt,c
  1028  0011AA  0E10               	movlw	high STR_3
  1029  0011AC  6E69               	movwf	printf@fmt+1,c
  1030  0011AE  0E00               	movlw	0
  1031  0011B0  6E6B               	movwf	?_printf+3,c
  1032  0011B2  0E1E               	movlw	30
  1033  0011B4  6E6A               	movwf	?_printf+2,c
  1034  0011B6  EC67  F010         	call	_printf	;wreg free
  1035                           
  1036                           ;main.c: 77:         clear = 0;
  1037  0011BA  0E00               	movlw	0
  1038  0011BC  0100               	movlb	0	; () banked
  1039  0011BE  6FF6               	movwf	(main@clear+1)& (0+255),b
  1040  0011C0  0E00               	movlw	0
  1041  0011C2  6FF5               	movwf	main@clear& (0+255),b
  1042  0011C4                     l2546:
  1043                           
  1044                           ; BSR set to: 0
  1045                           ;main.c: 81:         if (state == 1 & clear == 1) {
  1046  0011C4  05F7               	decf	main@state& (0+255),w,b
  1047  0011C6  11F8               	iorwf	(main@state+1)& (0+255),w,b
  1048  0011C8  A4D8               	btfss	status,2,c
  1049  0011CA  D02B               	goto	l2564
  1050                           
  1051                           ; BSR set to: 0
  1052  0011CC  05F5               	decf	main@clear& (0+255),w,b
  1053  0011CE  11F6               	iorwf	(main@clear+1)& (0+255),w,b
  1054  0011D0  A4D8               	btfss	status,2,c
  1055  0011D2  D027               	goto	l2564
  1056                           
  1057                           ; BSR set to: 0
  1058                           ;main.c: 83:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)))
      +                          ;};
  1059  0011D4  0E01               	movlw	1
  1060  0011D6  EC95  F010         	call	_lcdInst
  1061  0011DA  0E11               	movlw	17
  1062  0011DC  0100               	movlb	0	; () banked
  1063  0011DE  6FE8               	movwf	??_main& (0+255),b
  1064  0011E0  0E3A               	movlw	58
  1065  0011E2                     u2317:
  1066  0011E2  2EE8               	decfsz	wreg,f,c
  1067  0011E4  D7FE               	bra	u2317
  1068  0011E6  2FE8               	decfsz	??_main& (0+255),f,b
  1069  0011E8  D7FC               	bra	u2317
  1070  0011EA  F000               	nop	
  1071                           
  1072                           ;main.c: 84:             { lcdInst(0x80 | LCD_LINE1_ADDR);};
  1073  0011EC  0E80               	movlw	128
  1074  0011EE  EC95  F010         	call	_lcdInst
  1075                           
  1076                           ;main.c: 85:             printf("# of Canisters");
  1077  0011F2  0E66               	movlw	low STR_4
  1078  0011F4  6E68               	movwf	printf@fmt,c
  1079  0011F6  0E10               	movlw	high STR_4
  1080  0011F8  6E69               	movwf	printf@fmt+1,c
  1081  0011FA  EC67  F010         	call	_printf	;wreg free
  1082  0011FE  0E90               	movlw	144
  1083  001200  EC95  F010         	call	_lcdInst
  1084                           
  1085                           ;main.c: 87:             printf("%d Canisters", Canister);
  1086  001204  0EA0               	movlw	low STR_5
  1087  001206  6E68               	movwf	printf@fmt,c
  1088  001208  0E10               	movlw	high STR_5
  1089  00120A  6E69               	movwf	printf@fmt+1,c
  1090  00120C  C0BE  F06A         	movff	_Canister,?_printf+2
  1091  001210  C0BF  F06B         	movff	_Canister+1,?_printf+3
  1092  001214  EC67  F010         	call	_printf	;wreg free
  1093                           
  1094                           ;main.c: 88:             clear = 0;
  1095  001218  0E00               	movlw	0
  1096  00121A  0100               	movlb	0	; () banked
  1097  00121C  6FF6               	movwf	(main@clear+1)& (0+255),b
  1098  00121E  0E00               	movlw	0
  1099  001220  6FF5               	movwf	main@clear& (0+255),b
  1100  001222                     l2564:
  1101                           
  1102                           ; BSR set to: 0
  1103                           ;main.c: 92:         if (state == 2 & clear == 1) {
  1104  001222  0E02               	movlw	2
  1105  001224  19F7               	xorwf	main@state& (0+255),w,b
  1106  001226  11F8               	iorwf	(main@state+1)& (0+255),w,b
  1107  001228  A4D8               	btfss	status,2,c
  1108  00122A  D031               	goto	l2584
  1109                           
  1110                           ; BSR set to: 0
  1111  00122C  05F5               	decf	main@clear& (0+255),w,b
  1112  00122E  11F6               	iorwf	(main@clear+1)& (0+255),w,b
  1113  001230  A4D8               	btfss	status,2,c
  1114  001232  D02D               	goto	l2584
  1115                           
  1116                           ; BSR set to: 0
  1117                           ;main.c: 94:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)))
      +                          ;};
  1118  001234  0E01               	movlw	1
  1119  001236  EC95  F010         	call	_lcdInst
  1120  00123A  0E11               	movlw	17
  1121  00123C  0100               	movlb	0	; () banked
  1122  00123E  6FE8               	movwf	??_main& (0+255),b
  1123  001240  0E3A               	movlw	58
  1124  001242                     u2327:
  1125  001242  2EE8               	decfsz	wreg,f,c
  1126  001244  D7FE               	bra	u2327
  1127  001246  2FE8               	decfsz	??_main& (0+255),f,b
  1128  001248  D7FC               	bra	u2327
  1129  00124A  F000               	nop	
  1130                           
  1131                           ;main.c: 95:             printf("# of Balls");
  1132  00124C  0ED0               	movlw	low STR_6
  1133  00124E  6E68               	movwf	printf@fmt,c
  1134  001250  0E10               	movlw	high STR_6
  1135  001252  6E69               	movwf	printf@fmt+1,c
  1136  001254  EC67  F010         	call	_printf	;wreg free
  1137  001258  0EC0               	movlw	192
  1138  00125A  EC95  F010         	call	_lcdInst
  1139                           
  1140                           ;main.c: 97:             printf("supplied");
  1141  00125E  0EE5               	movlw	low STR_7
  1142  001260  6E68               	movwf	printf@fmt,c
  1143  001262  0E10               	movlw	high STR_7
  1144  001264  6E69               	movwf	printf@fmt+1,c
  1145  001266  EC67  F010         	call	_printf	;wreg free
  1146  00126A  0ED0               	movlw	208
  1147  00126C  EC95  F010         	call	_lcdInst
  1148                           
  1149                           ;main.c: 99:             printf("%d balls", balls);
  1150  001270  0EEE               	movlw	low STR_8
  1151  001272  6E68               	movwf	printf@fmt,c
  1152  001274  0E10               	movlw	high STR_8
  1153  001276  6E69               	movwf	printf@fmt+1,c
  1154  001278  0E00               	movlw	0
  1155  00127A  6E6B               	movwf	?_printf+3,c
  1156  00127C  0E05               	movlw	5
  1157  00127E  6E6A               	movwf	?_printf+2,c
  1158  001280  EC67  F010         	call	_printf	;wreg free
  1159                           
  1160                           ;main.c: 100:             clear = 0;
  1161  001284  0E00               	movlw	0
  1162  001286  0100               	movlb	0	; () banked
  1163  001288  6FF6               	movwf	(main@clear+1)& (0+255),b
  1164  00128A  0E00               	movlw	0
  1165  00128C  6FF5               	movwf	main@clear& (0+255),b
  1166  00128E                     l2584:
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;main.c: 104:         if (state == 3 & clear == 1) {
  1170  00128E  0E03               	movlw	3
  1171  001290  19F7               	xorwf	main@state& (0+255),w,b
  1172  001292  11F8               	iorwf	(main@state+1)& (0+255),w,b
  1173  001294  A4D8               	btfss	status,2,c
  1174  001296  D034               	goto	l2604
  1175                           
  1176                           ; BSR set to: 0
  1177  001298  05F5               	decf	main@clear& (0+255),w,b
  1178  00129A  11F6               	iorwf	(main@clear+1)& (0+255),w,b
  1179  00129C  A4D8               	btfss	status,2,c
  1180  00129E  D030               	goto	l2604
  1181                           
  1182                           ; BSR set to: 0
  1183                           ;main.c: 106:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1184  0012A0  0E01               	movlw	1
  1185  0012A2  EC95  F010         	call	_lcdInst
  1186  0012A6  0E11               	movlw	17
  1187  0012A8  0100               	movlb	0	; () banked
  1188  0012AA  6FE8               	movwf	??_main& (0+255),b
  1189  0012AC  0E3A               	movlw	58
  1190  0012AE                     u2337:
  1191  0012AE  2EE8               	decfsz	wreg,f,c
  1192  0012B0  D7FE               	bra	u2337
  1193  0012B2  2FE8               	decfsz	??_main& (0+255),f,b
  1194  0012B4  D7FC               	bra	u2337
  1195  0012B6  F000               	nop	
  1196                           
  1197                           ;main.c: 107:             printf("Individual Info");
  1198  0012B8  0E29               	movlw	low STR_9
  1199  0012BA  6E68               	movwf	printf@fmt,c
  1200  0012BC  0E10               	movlw	high STR_9
  1201  0012BE  6E69               	movwf	printf@fmt+1,c
  1202  0012C0  EC67  F010         	call	_printf	;wreg free
  1203  0012C4  0EC0               	movlw	192
  1204  0012C6  EC95  F010         	call	_lcdInst
  1205                           
  1206                           ;main.c: 109:             printf("of Canister");
  1207  0012CA  0EB9               	movlw	low STR_10
  1208  0012CC  6E68               	movwf	printf@fmt,c
  1209  0012CE  0E10               	movlw	high STR_10
  1210  0012D0  6E69               	movwf	printf@fmt+1,c
  1211  0012D2  EC67  F010         	call	_printf	;wreg free
  1212  0012D6  0ED0               	movlw	208
  1213  0012D8  EC95  F010         	call	_lcdInst
  1214                           
  1215                           ;main.c: 111:             printf("Press 0 to %d ", Canister-1);
  1216  0012DC  0E39               	movlw	low STR_11
  1217  0012DE  6E68               	movwf	printf@fmt,c
  1218  0012E0  0E10               	movlw	high STR_11
  1219  0012E2  6E69               	movwf	printf@fmt+1,c
  1220  0012E4  0EFF               	movlw	255
  1221  0012E6  0100               	movlb	0	; () banked
  1222  0012E8  25BE               	addwf	_Canister& (0+255),w,b
  1223  0012EA  6E6A               	movwf	?_printf+2,c
  1224  0012EC  0EFF               	movlw	255
  1225  0012EE  21BF               	addwfc	(_Canister+1)& (0+255),w,b
  1226  0012F0  6E6B               	movwf	?_printf+3,c
  1227  0012F2  EC67  F010         	call	_printf	;wreg free
  1228                           
  1229                           ;main.c: 112:             clear = 0;
  1230  0012F6  0E00               	movlw	0
  1231  0012F8  0100               	movlb	0	; () banked
  1232  0012FA  6FF6               	movwf	(main@clear+1)& (0+255),b
  1233  0012FC  0E00               	movlw	0
  1234  0012FE  6FF5               	movwf	main@clear& (0+255),b
  1235  001300                     l2604:
  1236                           
  1237                           ; BSR set to: 0
  1238                           ;main.c: 116:         if(key_was_pressed){
  1239  001300  51C3               	movf	_key_was_pressed& (0+255),w,b	;volatile
  1240  001302  B4D8               	btfsc	status,2,c
  1241  001304  D140               	goto	l2702
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;main.c: 118:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  1245  001306  3881               	swapf	3969,w,c	;volatile
  1246  001308  0B0F               	andlw	15
  1247  00130A  0B0F               	andlw	15
  1248  00130C  6FF2               	movwf	main@keypress& (0+255),b
  1249                           
  1250                           ; BSR set to: 0
  1251                           ;main.c: 119:             int miniTick = 0;
  1252  00130E  0E00               	movlw	0
  1253  001310  6FED               	movwf	(main@miniTick+1)& (0+255),b
  1254  001312  0E00               	movlw	0
  1255  001314  6FEC               	movwf	main@miniTick& (0+255),b
  1256                           
  1257                           ; BSR set to: 0
  1258                           ;main.c: 120:             int miniState = 0;
  1259  001316  0E00               	movlw	0
  1260  001318  6FF4               	movwf	(main@miniState+1)& (0+255),b
  1261  00131A  0E00               	movlw	0
  1262  00131C  6FF3               	movwf	main@miniState& (0+255),b
  1263                           
  1264                           ; BSR set to: 0
  1265                           ;main.c: 121:             int miniClear = 1;
  1266  00131E  0E00               	movlw	0
  1267  001320  6FF1               	movwf	(main@miniClear+1)& (0+255),b
  1268  001322  0E01               	movlw	1
  1269  001324  6FF0               	movwf	main@miniClear& (0+255),b
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main.c: 123:             int number_pressed = (int) (keys[keypress] - '0');
  1273  001326  0E01               	movlw	low _keys
  1274  001328  25F2               	addwf	main@keypress& (0+255),w,b
  1275  00132A  6EF6               	movwf	tblptrl,c
  1276  00132C  6AF7               	clrf	tblptrh,c
  1277  00132E  0E10               	movlw	high _keys
  1278  001330  22F7               	addwfc	tblptrh,f,c
  1279  001332                     	if	0	;There are less than 3 active tblptr bytes
  1280  001332                     	endif
  1281  001332  0008               	tblrd		*
  1282  001334  CFF5 F0E8          	movff	tablat,??_main
  1283  001338  0ED0               	movlw	208
  1284  00133A  25E8               	addwf	??_main& (0+255),w,b
  1285  00133C  6FEE               	movwf	main@number_pressed& (0+255),b
  1286  00133E  6BEF               	clrf	(main@number_pressed+1)& (0+255),b
  1287  001340  0EFF               	movlw	255
  1288  001342  23EF               	addwfc	(main@number_pressed+1)& (0+255),f,b
  1289                           
  1290                           ;main.c: 125:             while(!exit_key) {
  1291  001344  D118               	goto	l2698
  1292  001346                     l2616:
  1293                           
  1294                           ; BSR set to: 0
  1295                           ;main.c: 127:                 if (miniState == 0 & miniClear == 1) {
  1296  001346  51F3               	movf	main@miniState& (0+255),w,b
  1297  001348  11F4               	iorwf	(main@miniState+1)& (0+255),w,b
  1298  00134A  A4D8               	btfss	status,2,c
  1299  00134C  D046               	goto	l2636
  1300                           
  1301                           ; BSR set to: 0
  1302  00134E  05F0               	decf	main@miniClear& (0+255),w,b
  1303  001350  11F1               	iorwf	(main@miniClear+1)& (0+255),w,b
  1304  001352  A4D8               	btfss	status,2,c
  1305  001354  D042               	goto	l2636
  1306                           
  1307                           ; BSR set to: 0
  1308                           ;main.c: 129:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1309  001356  0E01               	movlw	1
  1310  001358  EC95  F010         	call	_lcdInst
  1311  00135C  0E11               	movlw	17
  1312  00135E  0100               	movlb	0	; () banked
  1313  001360  6FE8               	movwf	??_main& (0+255),b
  1314  001362  0E3A               	movlw	58
  1315  001364                     u2347:
  1316  001364  2EE8               	decfsz	wreg,f,c
  1317  001366  D7FE               	bra	u2347
  1318  001368  2FE8               	decfsz	??_main& (0+255),f,b
  1319  00136A  D7FC               	bra	u2347
  1320  00136C  F000               	nop	
  1321                           
  1322                           ;main.c: 130:                     printf("Cansiter %c", keys[keypress]);
  1323  00136E  0EAD               	movlw	low STR_12
  1324  001370  6E68               	movwf	printf@fmt,c
  1325  001372  0E10               	movlw	high STR_12
  1326  001374  6E69               	movwf	printf@fmt+1,c
  1327  001376  0E01               	movlw	low _keys
  1328  001378  0100               	movlb	0	; () banked
  1329  00137A  25F2               	addwf	main@keypress& (0+255),w,b
  1330  00137C  6EF6               	movwf	tblptrl,c
  1331  00137E  6AF7               	clrf	tblptrh,c
  1332  001380  0E10               	movlw	high _keys
  1333  001382  22F7               	addwfc	tblptrh,f,c
  1334  001384                     	if	0	;There are less than 3 active tblptr bytes
  1335  001384                     	endif
  1336  001384  0008               	tblrd		*
  1337  001386  50F5               	movf	tablat,w,c
  1338  001388  6E6A               	movwf	?_printf+2,c
  1339  00138A  6A6B               	clrf	?_printf+3,c
  1340  00138C  EC67  F010         	call	_printf	;wreg free
  1341  001390  0E90               	movlw	144
  1342  001392  EC95  F010         	call	_lcdInst
  1343                           
  1344                           ;main.c: 132:                     printf("Distance %d cm", DistanceCanister[number_press
      +                          ed] );
  1345  001396  0E57               	movlw	low STR_13
  1346  001398  6E68               	movwf	printf@fmt,c
  1347  00139A  0E10               	movlw	high STR_13
  1348  00139C  6E69               	movwf	printf@fmt+1,c
  1349  00139E  90D8               	bcf	status,0,c
  1350  0013A0  0100               	movlb	0	; () banked
  1351  0013A2  35EE               	rlcf	main@number_pressed& (0+255),w,b
  1352  0013A4  6ED9               	movwf	fsr2l,c
  1353  0013A6  35EF               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1354  0013A8  6EDA               	movwf	fsr2h,c
  1355  0013AA  0E94               	movlw	low _DistanceCanister
  1356  0013AC  26D9               	addwf	fsr2l,f,c
  1357  0013AE  0E00               	movlw	high _DistanceCanister
  1358  0013B0  22DA               	addwfc	fsr2h,f,c
  1359  0013B2  CFDE F06A          	movff	postinc2,?_printf+2
  1360  0013B6  CFDD F06B          	movff	postdec2,?_printf+3
  1361  0013BA  EC67  F010         	call	_printf	;wreg free
  1362  0013BE  0ED0               	movlw	208
  1363  0013C0  EC95  F010         	call	_lcdInst
  1364                           
  1365                           ;main.c: 134:                     printf("* to exit");
  1366  0013C4  0EDB               	movlw	low STR_14
  1367  0013C6  6E68               	movwf	printf@fmt,c
  1368  0013C8  0E10               	movlw	high STR_14
  1369  0013CA  6E69               	movwf	printf@fmt+1,c
  1370  0013CC  EC67  F010         	call	_printf	;wreg free
  1371                           
  1372                           ;main.c: 135:                     miniClear = 0;
  1373  0013D0  0E00               	movlw	0
  1374  0013D2  0100               	movlb	0	; () banked
  1375  0013D4  6FF1               	movwf	(main@miniClear+1)& (0+255),b
  1376  0013D6  0E00               	movlw	0
  1377  0013D8  6FF0               	movwf	main@miniClear& (0+255),b
  1378  0013DA                     l2636:
  1379                           
  1380                           ; BSR set to: 0
  1381                           ;main.c: 138:                 if (miniState == 1 & miniClear == 1) {
  1382  0013DA  05F3               	decf	main@miniState& (0+255),w,b
  1383  0013DC  11F4               	iorwf	(main@miniState+1)& (0+255),w,b
  1384  0013DE  A4D8               	btfss	status,2,c
  1385  0013E0  D04D               	goto	l2660
  1386                           
  1387                           ; BSR set to: 0
  1388  0013E2  05F0               	decf	main@miniClear& (0+255),w,b
  1389  0013E4  11F1               	iorwf	(main@miniClear+1)& (0+255),w,b
  1390  0013E6  A4D8               	btfss	status,2,c
  1391  0013E8  D049               	goto	l2660
  1392                           
  1393                           ; BSR set to: 0
  1394                           ;main.c: 140:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1395  0013EA  0E01               	movlw	1
  1396  0013EC  EC95  F010         	call	_lcdInst
  1397  0013F0  0E11               	movlw	17
  1398  0013F2  0100               	movlb	0	; () banked
  1399  0013F4  6FE8               	movwf	??_main& (0+255),b
  1400  0013F6  0E3A               	movlw	58
  1401  0013F8                     u2357:
  1402  0013F8  2EE8               	decfsz	wreg,f,c
  1403  0013FA  D7FE               	bra	u2357
  1404  0013FC  2FE8               	decfsz	??_main& (0+255),f,b
  1405  0013FE  D7FC               	bra	u2357
  1406  001400  F000               	nop	
  1407                           
  1408                           ;main.c: 141:                     printf("Cansiter %c", keys[keypress]);
  1409  001402  0EAD               	movlw	low STR_12
  1410  001404  6E68               	movwf	printf@fmt,c
  1411  001406  0E10               	movlw	high STR_12
  1412  001408  6E69               	movwf	printf@fmt+1,c
  1413  00140A  0E01               	movlw	low _keys
  1414  00140C  0100               	movlb	0	; () banked
  1415  00140E  25F2               	addwf	main@keypress& (0+255),w,b
  1416  001410  6EF6               	movwf	tblptrl,c
  1417  001412  6AF7               	clrf	tblptrh,c
  1418  001414  0E10               	movlw	high _keys
  1419  001416  22F7               	addwfc	tblptrh,f,c
  1420  001418                     	if	0	;There are less than 3 active tblptr bytes
  1421  001418                     	endif
  1422  001418  0008               	tblrd		*
  1423  00141A  50F5               	movf	tablat,w,c
  1424  00141C  6E6A               	movwf	?_printf+2,c
  1425  00141E  6A6B               	clrf	?_printf+3,c
  1426  001420  EC67  F010         	call	_printf	;wreg free
  1427  001424  0E90               	movlw	144
  1428  001426  EC95  F010         	call	_lcdInst
  1429                           
  1430                           ;main.c: 143:                     if (State[number_pressed] == 1)
  1431  00142A  90D8               	bcf	status,0,c
  1432  00142C  0100               	movlb	0	; () banked
  1433  00142E  35EE               	rlcf	main@number_pressed& (0+255),w,b
  1434  001430  6ED9               	movwf	fsr2l,c
  1435  001432  35EF               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1436  001434  6EDA               	movwf	fsr2h,c
  1437  001436  0EA8               	movlw	low _State
  1438  001438  26D9               	addwf	fsr2l,f,c
  1439  00143A  0E00               	movlw	high _State
  1440  00143C  22DA               	addwfc	fsr2h,f,c
  1441  00143E  04DE               	decf	postinc2,w,c
  1442  001440  10DE               	iorwf	postinc2,w,c
  1443  001442  A4D8               	btfss	status,2,c
  1444  001444  D007               	goto	l2652
  1445                           
  1446                           ; BSR set to: 0
  1447                           ;main.c: 144:                         printf("Canister Full");
  1448  001446  0E92               	movlw	low STR_16
  1449  001448  6E68               	movwf	printf@fmt,c
  1450  00144A  0E10               	movlw	high STR_16
  1451  00144C  6E69               	movwf	printf@fmt+1,c
  1452  00144E  EC67  F010         	call	_printf	;wreg free
  1453  001452  D006               	goto	l2654
  1454  001454                     l2652:
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;main.c: 146:                         printf("Canister Empty");
  1458  001454  0E75               	movlw	low STR_17
  1459  001456  6E68               	movwf	printf@fmt,c
  1460  001458  0E10               	movlw	high STR_17
  1461  00145A  6E69               	movwf	printf@fmt+1,c
  1462  00145C  EC67  F010         	call	_printf	;wreg free
  1463  001460                     l2654:
  1464  001460  0ED0               	movlw	208
  1465  001462  EC95  F010         	call	_lcdInst
  1466                           
  1467                           ;main.c: 148:                     printf("* to exit");
  1468  001466  0EDB               	movlw	low STR_14
  1469  001468  6E68               	movwf	printf@fmt,c
  1470  00146A  0E10               	movlw	high STR_14
  1471  00146C  6E69               	movwf	printf@fmt+1,c
  1472  00146E  EC67  F010         	call	_printf	;wreg free
  1473                           
  1474                           ;main.c: 149:                     miniClear = 0;
  1475  001472  0E00               	movlw	0
  1476  001474  0100               	movlb	0	; () banked
  1477  001476  6FF1               	movwf	(main@miniClear+1)& (0+255),b
  1478  001478  0E00               	movlw	0
  1479  00147A  6FF0               	movwf	main@miniClear& (0+255),b
  1480  00147C                     l2660:
  1481                           
  1482                           ; BSR set to: 0
  1483                           ;main.c: 152:                 if (miniState == 2 & miniClear == 1) {
  1484  00147C  0E02               	movlw	2
  1485  00147E  19F3               	xorwf	main@miniState& (0+255),w,b
  1486  001480  11F4               	iorwf	(main@miniState+1)& (0+255),w,b
  1487  001482  A4D8               	btfss	status,2,c
  1488  001484  D04D               	goto	l2684
  1489                           
  1490                           ; BSR set to: 0
  1491  001486  05F0               	decf	main@miniClear& (0+255),w,b
  1492  001488  11F1               	iorwf	(main@miniClear+1)& (0+255),w,b
  1493  00148A  A4D8               	btfss	status,2,c
  1494  00148C  D049               	goto	l2684
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;main.c: 154:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1498  00148E  0E01               	movlw	1
  1499  001490  EC95  F010         	call	_lcdInst
  1500  001494  0E11               	movlw	17
  1501  001496  0100               	movlb	0	; () banked
  1502  001498  6FE8               	movwf	??_main& (0+255),b
  1503  00149A  0E3A               	movlw	58
  1504  00149C                     u2367:
  1505  00149C  2EE8               	decfsz	wreg,f,c
  1506  00149E  D7FE               	bra	u2367
  1507  0014A0  2FE8               	decfsz	??_main& (0+255),f,b
  1508  0014A2  D7FC               	bra	u2367
  1509  0014A4  F000               	nop	
  1510                           
  1511                           ;main.c: 155:                     printf("Cansiter %c", keys[keypress]);
  1512  0014A6  0EAD               	movlw	low STR_12
  1513  0014A8  6E68               	movwf	printf@fmt,c
  1514  0014AA  0E10               	movlw	high STR_12
  1515  0014AC  6E69               	movwf	printf@fmt+1,c
  1516  0014AE  0E01               	movlw	low _keys
  1517  0014B0  0100               	movlb	0	; () banked
  1518  0014B2  25F2               	addwf	main@keypress& (0+255),w,b
  1519  0014B4  6EF6               	movwf	tblptrl,c
  1520  0014B6  6AF7               	clrf	tblptrh,c
  1521  0014B8  0E10               	movlw	high _keys
  1522  0014BA  22F7               	addwfc	tblptrh,f,c
  1523  0014BC                     	if	0	;There are less than 3 active tblptr bytes
  1524  0014BC                     	endif
  1525  0014BC  0008               	tblrd		*
  1526  0014BE  50F5               	movf	tablat,w,c
  1527  0014C0  6E6A               	movwf	?_printf+2,c
  1528  0014C2  6A6B               	clrf	?_printf+3,c
  1529  0014C4  EC67  F010         	call	_printf	;wreg free
  1530  0014C8  0E90               	movlw	144
  1531  0014CA  EC95  F010         	call	_lcdInst
  1532                           
  1533                           ;main.c: 157:                     if (BallDispensed[number_pressed] == 1)
  1534  0014CE  90D8               	bcf	status,0,c
  1535  0014D0  0100               	movlb	0	; () banked
  1536  0014D2  35EE               	rlcf	main@number_pressed& (0+255),w,b
  1537  0014D4  6ED9               	movwf	fsr2l,c
  1538  0014D6  35EF               	rlcf	(main@number_pressed+1)& (0+255),w,b
  1539  0014D8  6EDA               	movwf	fsr2h,c
  1540  0014DA  0E80               	movlw	low _BallDispensed
  1541  0014DC  26D9               	addwf	fsr2l,f,c
  1542  0014DE  0E00               	movlw	high _BallDispensed
  1543  0014E0  22DA               	addwfc	fsr2h,f,c
  1544  0014E2  04DE               	decf	postinc2,w,c
  1545  0014E4  10DE               	iorwf	postinc2,w,c
  1546  0014E6  A4D8               	btfss	status,2,c
  1547  0014E8  D007               	goto	l2676
  1548                           
  1549                           ; BSR set to: 0
  1550                           ;main.c: 158:                         printf("Ball Added");
  1551  0014EA  0E87               	movlw	low (STR_21+3)
  1552  0014EC  6E68               	movwf	printf@fmt,c
  1553  0014EE  0E10               	movlw	high (STR_21+3)
  1554  0014F0  6E69               	movwf	printf@fmt+1,c
  1555  0014F2  EC67  F010         	call	_printf	;wreg free
  1556  0014F6  D006               	goto	l2678
  1557  0014F8                     l2676:
  1558                           
  1559                           ; BSR set to: 0
  1560                           ;main.c: 160:                         printf("No Ball Added");
  1561  0014F8  0E84               	movlw	low STR_21
  1562  0014FA  6E68               	movwf	printf@fmt,c
  1563  0014FC  0E10               	movlw	high STR_21
  1564  0014FE  6E69               	movwf	printf@fmt+1,c
  1565  001500  EC67  F010         	call	_printf	;wreg free
  1566  001504                     l2678:
  1567  001504  0ED0               	movlw	208
  1568  001506  EC95  F010         	call	_lcdInst
  1569                           
  1570                           ;main.c: 162:                     printf("* to exit");
  1571  00150A  0EDB               	movlw	low STR_14
  1572  00150C  6E68               	movwf	printf@fmt,c
  1573  00150E  0E10               	movlw	high STR_14
  1574  001510  6E69               	movwf	printf@fmt+1,c
  1575  001512  EC67  F010         	call	_printf	;wreg free
  1576                           
  1577                           ;main.c: 165:                     miniClear = 0;
  1578  001516  0E00               	movlw	0
  1579  001518  0100               	movlb	0	; () banked
  1580  00151A  6FF1               	movwf	(main@miniClear+1)& (0+255),b
  1581  00151C  0E00               	movlw	0
  1582  00151E  6FF0               	movwf	main@miniClear& (0+255),b
  1583  001520                     l2684:
  1584                           
  1585                           ; BSR set to: 0
  1586                           ;main.c: 168:                 if (miniTick == 2000) {
  1587  001520  0ED0               	movlw	208
  1588  001522  19EC               	xorwf	main@miniTick& (0+255),w,b
  1589  001524  E11D               	bnz	l2694
  1590  001526  0E07               	movlw	7
  1591  001528  19ED               	xorwf	(main@miniTick+1)& (0+255),w,b
  1592  00152A  A4D8               	btfss	status,2,c
  1593  00152C  D019               	goto	l2694
  1594                           
  1595                           ; BSR set to: 0
  1596                           ;main.c: 169:                     miniClear = 1;
  1597  00152E  0E00               	movlw	0
  1598  001530  6FF1               	movwf	(main@miniClear+1)& (0+255),b
  1599  001532  0E01               	movlw	1
  1600  001534  6FF0               	movwf	main@miniClear& (0+255),b
  1601                           
  1602                           ; BSR set to: 0
  1603                           ;main.c: 170:                     miniState++;
  1604  001536  4BF3               	infsnz	main@miniState& (0+255),f,b
  1605  001538  2BF4               	incf	(main@miniState+1)& (0+255),f,b
  1606                           
  1607                           ; BSR set to: 0
  1608                           ;main.c: 171:                     miniState = miniState % 3;
  1609  00153A  C0F3  F00C         	movff	main@miniState,___awmod@dividend
  1610  00153E  C0F4  F00D         	movff	main@miniState+1,___awmod@dividend+1
  1611  001542  0E00               	movlw	0
  1612  001544  6E0F               	movwf	___awmod@divisor+1,c
  1613  001546  0E03               	movlw	3
  1614  001548  6E0E               	movwf	___awmod@divisor,c
  1615  00154A  ECCF  F00E         	call	___awmod	;wreg free
  1616  00154E  C00C  F0F3         	movff	?___awmod,main@miniState
  1617  001552  C00D  F0F4         	movff	?___awmod+1,main@miniState+1
  1618                           
  1619                           ;main.c: 172:                     miniTick = 0;
  1620  001556  0E00               	movlw	0
  1621  001558  0100               	movlb	0	; () banked
  1622  00155A  6FED               	movwf	(main@miniTick+1)& (0+255),b
  1623  00155C  0E00               	movlw	0
  1624  00155E  6FEC               	movwf	main@miniTick& (0+255),b
  1625  001560                     l2694:
  1626                           
  1627                           ; BSR set to: 0
  1628                           ;main.c: 175:                 miniTick++;
  1629  001560  4BEC               	infsnz	main@miniTick& (0+255),f,b
  1630  001562  2BED               	incf	(main@miniTick+1)& (0+255),f,b
  1631                           
  1632                           ; BSR set to: 0
  1633                           ;main.c: 176:                 _delay((unsigned long)((1)*(10000000/4000.0)));
  1634  001564  0E04               	movlw	4
  1635  001566  0100               	movlb	0	; () banked
  1636  001568  6FE8               	movwf	??_main& (0+255),b
  1637  00156A  0E3D               	movlw	61
  1638  00156C                     u2377:
  1639  00156C  2EE8               	decfsz	wreg,f,c
  1640  00156E  D7FE               	bra	u2377
  1641  001570  2FE8               	decfsz	??_main& (0+255),f,b
  1642  001572  D7FC               	bra	u2377
  1643  001574  D000               	nop2	
  1644  001576                     l2698:
  1645                           
  1646                           ;main.c: 125:             while(!exit_key) {
  1647  001576  0100               	movlb	0	; () banked
  1648  001578  51C2               	movf	_exit_key& (0+255),w,b	;volatile
  1649  00157A  B4D8               	btfsc	status,2,c
  1650  00157C  D6E4               	goto	l2616
  1651                           
  1652                           ; BSR set to: 0
  1653                           ;main.c: 181:             key_was_pressed = 0;
  1654  00157E  0E00               	movlw	0
  1655  001580  6FC3               	movwf	_key_was_pressed& (0+255),b	;volatile
  1656                           
  1657                           ;main.c: 182:             exit_key = 0;
  1658  001582  0E00               	movlw	0
  1659  001584  6FC2               	movwf	_exit_key& (0+255),b	;volatile
  1660  001586                     l2702:
  1661                           
  1662                           ; BSR set to: 0
  1663                           ;main.c: 186:         if (tick == 2000) {
  1664  001586  0ED0               	movlw	208
  1665  001588  19EA               	xorwf	main@tick& (0+255),w,b
  1666  00158A  E112               	bnz	l2712
  1667  00158C  0E07               	movlw	7
  1668  00158E  19EB               	xorwf	(main@tick+1)& (0+255),w,b
  1669  001590  A4D8               	btfss	status,2,c
  1670  001592  D00E               	goto	l2712
  1671                           
  1672                           ; BSR set to: 0
  1673                           ;main.c: 187:             clear = 1;
  1674  001594  0E00               	movlw	0
  1675  001596  6FF6               	movwf	(main@clear+1)& (0+255),b
  1676  001598  0E01               	movlw	1
  1677  00159A  6FF5               	movwf	main@clear& (0+255),b
  1678                           
  1679                           ; BSR set to: 0
  1680                           ;main.c: 188:             state++;
  1681  00159C  4BF7               	infsnz	main@state& (0+255),f,b
  1682  00159E  2BF8               	incf	(main@state+1)& (0+255),f,b
  1683                           
  1684                           ; BSR set to: 0
  1685                           ;main.c: 189:             state = state % 4;
  1686  0015A0  0E03               	movlw	3
  1687  0015A2  15F7               	andwf	main@state& (0+255),w,b
  1688  0015A4  6FF7               	movwf	main@state& (0+255),b
  1689  0015A6  6BF8               	clrf	(main@state+1)& (0+255),b
  1690                           
  1691                           ; BSR set to: 0
  1692                           ;main.c: 190:             tick = 0;
  1693  0015A8  0E00               	movlw	0
  1694  0015AA  6FEB               	movwf	(main@tick+1)& (0+255),b
  1695  0015AC  0E00               	movlw	0
  1696  0015AE  6FEA               	movwf	main@tick& (0+255),b
  1697  0015B0                     l2712:
  1698                           
  1699                           ; BSR set to: 0
  1700                           ;main.c: 193:         tick++;
  1701  0015B0  4BEA               	infsnz	main@tick& (0+255),f,b
  1702  0015B2  2BEB               	incf	(main@tick+1)& (0+255),f,b
  1703                           
  1704                           ; BSR set to: 0
  1705                           ;main.c: 194:         _delay((unsigned long)((1)*(10000000/4000.0)));
  1706  0015B4  0E04               	movlw	4
  1707  0015B6  0100               	movlb	0	; () banked
  1708  0015B8  6FE8               	movwf	??_main& (0+255),b
  1709  0015BA  0E3D               	movlw	61
  1710  0015BC                     u2387:
  1711  0015BC  2EE8               	decfsz	wreg,f,c
  1712  0015BE  D7FE               	bra	u2387
  1713  0015C0  2FE8               	decfsz	??_main& (0+255),f,b
  1714  0015C2  D7FC               	bra	u2387
  1715  0015C4  D000               	nop2	
  1716  0015C6  D5CE               	goto	l2528
  1717  0015C8                     __end_of_main:
  1718                           	opt callstack 0
  1719                           
  1720 ;; *************** function _printf *****************
  1721 ;; Defined at:
  1722 ;;		line 5 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/printf.c"
  1723 ;; Parameters:    Size  Location     Type
  1724 ;;  fmt             2  103[COMRAM] PTR const unsigned char 
  1725 ;;		 -> STR_22(10), STR_21(14), STR_20(11), STR_19(12), 
  1726 ;;		 -> STR_18(10), STR_17(15), STR_16(14), STR_15(12), 
  1727 ;;		 -> STR_14(10), STR_13(15), STR_12(12), STR_11(15), 
  1728 ;;		 -> STR_10(12), STR_9(16), STR_8(9), STR_7(9), 
  1729 ;;		 -> STR_6(11), STR_5(13), STR_4(15), STR_3(11), 
  1730 ;;		 -> STR_2(15), STR_1(17), 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  ap              2    2[BANK0 ] PTR void [1]
  1733 ;;		 -> ?_printf(2), 
  1734 ;;  ret             2    0        int 
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  2  103[COMRAM] int 
  1737 ;; Registers used:
  1738 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1744 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1745 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1747 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1748 ;;Total ram usage:        8 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:   11
  1751 ;; This function calls:
  1752 ;;		_vfprintf
  1753 ;; This function is called by:
  1754 ;;		_main
  1755 ;; This function uses a non-reentrant model
  1756 ;;
  1757                           
  1758                           	psect	text1
  1759  0020CE                     __ptext1:
  1760                           	opt callstack 0
  1761  0020CE                     _printf:
  1762                           	opt callstack 19
  1763                           
  1764                           ;incstack = 0
  1765  0020CE  0E6A               	movlw	low (?_printf+2)
  1766  0020D0  0100               	movlb	0	; () banked
  1767  0020D2  6FE6               	movwf	printf@ap& (0+255),b
  1768  0020D4  0E00               	movlw	high (?_printf+2)
  1769  0020D6  6FE7               	movwf	(printf@ap+1)& (0+255),b
  1770                           
  1771                           ; BSR set to: 0
  1772  0020D8  0E00               	movlw	0
  1773  0020DA  6E60               	movwf	vfprintf@fp,c
  1774  0020DC  0E00               	movlw	0
  1775  0020DE  6E61               	movwf	vfprintf@fp+1,c
  1776  0020E0  C068  F062         	movff	printf@fmt,vfprintf@fmt
  1777  0020E4  C069  F063         	movff	printf@fmt+1,vfprintf@fmt+1
  1778  0020E8  0EE6               	movlw	low printf@ap
  1779  0020EA  6E64               	movwf	vfprintf@ap,c
  1780  0020EC  0E00               	movlw	high printf@ap
  1781  0020EE  6E65               	movwf	vfprintf@ap+1,c
  1782  0020F0  EC72  F00F         	call	_vfprintf	;wreg free
  1783  0020F4  0012               	return		;funcret
  1784  0020F6                     __end_of_printf:
  1785                           	opt callstack 0
  1786                           
  1787 ;; *************** function _vfprintf *****************
  1788 ;; Defined at:
  1789 ;;		line 1368 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  fp              2   95[COMRAM] PTR struct _IO_FILE
  1792 ;;		 -> NULL(0), 
  1793 ;;  fmt             2   97[COMRAM] PTR const unsigned char 
  1794 ;;		 -> STR_22(10), STR_21(14), STR_20(11), STR_19(12), 
  1795 ;;		 -> STR_18(10), STR_17(15), STR_16(14), STR_15(12), 
  1796 ;;		 -> STR_14(10), STR_13(15), STR_12(12), STR_11(15), 
  1797 ;;		 -> STR_10(12), STR_9(16), STR_8(9), STR_7(9), 
  1798 ;;		 -> STR_6(11), STR_5(13), STR_4(15), STR_3(11), 
  1799 ;;		 -> STR_2(15), STR_1(17), 
  1800 ;;  ap              2   99[COMRAM] PTR PTR void 
  1801 ;;		 -> printf@ap(2), 
  1802 ;; Auto vars:     Size  Location     Type
  1803 ;;  cfmt            2  101[COMRAM] PTR unsigned char 
  1804 ;;		 -> STR_22(10), STR_21(14), STR_20(11), STR_19(12), 
  1805 ;;		 -> STR_18(10), STR_17(15), STR_16(14), STR_15(12), 
  1806 ;;		 -> STR_14(10), STR_13(15), STR_12(12), STR_11(15), 
  1807 ;;		 -> STR_10(12), STR_9(16), STR_8(9), STR_7(9), 
  1808 ;;		 -> STR_6(11), STR_5(13), STR_4(15), STR_3(11), 
  1809 ;;		 -> STR_2(15), STR_1(17), 
  1810 ;; Return value:  Size  Location     Type
  1811 ;;                  2   95[COMRAM] int 
  1812 ;; Registers used:
  1813 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1814 ;; Tracked objects:
  1815 ;;		On entry : 0/0
  1816 ;;		On exit  : 0/0
  1817 ;;		Unchanged: 0/0
  1818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1819 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1820 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1822 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;Total ram usage:        8 bytes
  1824 ;; Hardware stack levels used:    1
  1825 ;; Hardware stack levels required when called:   10
  1826 ;; This function calls:
  1827 ;;		_vfpfcnvrt
  1828 ;; This function is called by:
  1829 ;;		_printf
  1830 ;; This function uses a non-reentrant model
  1831 ;;
  1832                           
  1833                           	psect	text2
  1834  001EE4                     __ptext2:
  1835                           	opt callstack 0
  1836  001EE4                     _vfprintf:
  1837                           	opt callstack 19
  1838                           
  1839                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
  1840                           
  1841                           ;incstack = 0
  1842  001EE4  C062  F066         	movff	vfprintf@fmt,vfprintf@cfmt
  1843  001EE8  C063  F067         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1844                           
  1845                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  1846  001EEC  0E00               	movlw	0
  1847  001EEE  6E6D               	movwf	_nout+1,c
  1848  001EF0  0E00               	movlw	0
  1849  001EF2  6E6C               	movwf	_nout,c
  1850                           
  1851                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  1852  001EF4  D012               	goto	l2454
  1853  001EF6                     l2452:
  1854                           
  1855                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
  1856  001EF6  C060  F04F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1857  001EFA  C061  F050         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1858  001EFE  0E66               	movlw	low vfprintf@cfmt
  1859  001F00  6E51               	movwf	vfpfcnvrt@fmt,c
  1860  001F02  0E00               	movlw	high vfprintf@cfmt
  1861  001F04  6E52               	movwf	vfpfcnvrt@fmt+1,c
  1862  001F06  C064  F053         	movff	vfprintf@ap,vfpfcnvrt@ap
  1863  001F0A  C065  F054         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1864  001F0E  EC05  F00C         	call	_vfpfcnvrt	;wreg free
  1865  001F12  504F               	movf	?_vfpfcnvrt,w,c
  1866  001F14  266C               	addwf	_nout,f,c
  1867  001F16  5050               	movf	?_vfpfcnvrt+1,w,c
  1868  001F18  226D               	addwfc	_nout+1,f,c
  1869  001F1A                     l2454:
  1870                           
  1871                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  1872  001F1A  C066  FFF6         	movff	vfprintf@cfmt,tblptrl
  1873  001F1E  C067  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1874  001F22                     	if	0	;tblptru may be non-zero
  1875  001F22                     	endif
  1876  001F22                     	if	0	;tblptru may be non-zero
  1877  001F22                     	endif
  1878  001F22  0008               	tblrd		*
  1879  001F24  50F5               	movf	tablat,w,c
  1880  001F26  0900               	iorlw	0
  1881  001F28  A4D8               	btfss	status,2,c
  1882  001F2A  D7E5               	goto	l2452
  1883                           
  1884                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
  1885  001F2C  C06C  F060         	movff	_nout,?_vfprintf
  1886  001F30  C06D  F061         	movff	_nout+1,?_vfprintf+1
  1887  001F34  0012               	return		;funcret
  1888  001F36                     __end_of_vfprintf:
  1889                           	opt callstack 0
  1890                           
  1891 ;; *************** function _vfpfcnvrt *****************
  1892 ;; Defined at:
  1893 ;;		line 670 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1894 ;; Parameters:    Size  Location     Type
  1895 ;;  fp              2   78[COMRAM] PTR struct _IO_FILE
  1896 ;;		 -> NULL(0), 
  1897 ;;  fmt             2   80[COMRAM] PTR PTR unsigned char 
  1898 ;;		 -> vfprintf@cfmt(2), 
  1899 ;;  ap              2   82[COMRAM] PTR PTR void 
  1900 ;;		 -> printf@ap(2), 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  ll              8   86[COMRAM] long long 
  1903 ;;  llu             8    0        unsigned long long 
  1904 ;;  f               4    0        unsigned long long 
  1905 ;;  vp              3    0        PTR void 
  1906 ;;  ct              3    0        unsigned char [3]
  1907 ;;  cp              3    0        PTR unsigned char 
  1908 ;;  i               2    0        int 
  1909 ;;  done            2    0        int 
  1910 ;;  c               1   94[COMRAM] unsigned char 
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  2   78[COMRAM] int 
  1913 ;; Registers used:
  1914 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1920 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;Total ram usage:       17 bytes
  1925 ;; Hardware stack levels used:    1
  1926 ;; Hardware stack levels required when called:    9
  1927 ;; This function calls:
  1928 ;;		_ctoa
  1929 ;;		_dtoa
  1930 ;;		_fputc
  1931 ;; This function is called by:
  1932 ;;		_vfprintf
  1933 ;; This function uses a non-reentrant model
  1934 ;;
  1935                           
  1936                           	psect	text3
  1937  00180A                     __ptext3:
  1938                           	opt callstack 0
  1939  00180A                     _vfpfcnvrt:
  1940                           	opt callstack 19
  1941                           
  1942                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.05/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.05/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
  1943                           
  1944                           ;incstack = 0
  1945  00180A  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1946  00180E  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1947  001812  CFDE FFF6          	movff	postinc2,tblptrl
  1948  001816  CFDD FFF7          	movff	postdec2,tblptrh
  1949  00181A                     	if	0	;tblptru may be non-zero
  1950  00181A                     	endif
  1951  00181A                     	if	0	;tblptru may be non-zero
  1952  00181A                     	endif
  1953  00181A  0008               	tblrd		*
  1954  00181C  50F5               	movf	tablat,w,c
  1955  00181E  0A25               	xorlw	37
  1956  001820  A4D8               	btfss	status,2,c
  1957  001822  D0CC               	goto	l2436
  1958                           
  1959                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  1960  001824  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1961  001828  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1962  00182C  2ADE               	incf	postinc2,f,c
  1963  00182E  0E00               	movlw	0
  1964  001830  22DD               	addwfc	postdec2,f,c
  1965                           
  1966                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
  1967  001832  0E00               	movlw	0
  1968  001834  6E6F               	movwf	_width+1,c
  1969  001836  0E00               	movlw	0
  1970  001838  6E6E               	movwf	_width,c
  1971  00183A  C06E  F072         	movff	_width,_flags
  1972  00183E  C06F  F073         	movff	_width+1,_flags+1
  1973                           
  1974                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
  1975  001842  6870               	setf	_prec,c
  1976  001844  6871               	setf	_prec+1,c
  1977                           
  1978                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 792:         if (*fm
      +                          t[0] == 'c') {
  1979  001846  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1980  00184A  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1981  00184E  CFDE FFF6          	movff	postinc2,tblptrl
  1982  001852  CFDD FFF7          	movff	postdec2,tblptrh
  1983  001856                     	if	0	;tblptru may be non-zero
  1984  001856                     	endif
  1985  001856                     	if	0	;tblptru may be non-zero
  1986  001856                     	endif
  1987  001856  0008               	tblrd		*
  1988  001858  50F5               	movf	tablat,w,c
  1989  00185A  0A63               	xorlw	99
  1990  00185C  A4D8               	btfss	status,2,c
  1991  00185E  D026               	goto	l2410
  1992                           
  1993                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 793:             ++*
      +                          fmt;
  1994  001860  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1995  001864  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1996  001868  2ADE               	incf	postinc2,f,c
  1997  00186A  0E00               	movlw	0
  1998  00186C  22DD               	addwfc	postdec2,f,c
  1999                           
  2000                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 794:             c =
      +                           (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  2001  00186E  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2002  001872  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2003  001876  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2004  00187A  0E02               	movlw	2
  2005  00187C  26DE               	addwf	postinc2,f,c
  2006  00187E  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2007  001882  0E00               	movlw	0
  2008  001884  22DD               	addwfc	postdec2,f,c
  2009  001886  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2010  00188A  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2011  00188E  50DF               	movf	indf2,w,c
  2012  001890  6E5F               	movwf	vfpfcnvrt@c,c
  2013                           
  2014                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 795:             ret
      +                          urn ctoa(fp, c);
  2015  001892  C04F  F02B         	movff	vfpfcnvrt@fp,ctoa@fp
  2016  001896  C050  F02C         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  2017  00189A  C05F  F02D         	movff	vfpfcnvrt@c,ctoa@c
  2018  00189E  EC9B  F00F         	call	_ctoa	;wreg free
  2019  0018A2  C02B  F04F         	movff	?_ctoa,?_vfpfcnvrt
  2020  0018A6  C02C  F050         	movff	?_ctoa+1,?_vfpfcnvrt+1
  2021  0018AA  0012               	return	
  2022  0018AC                     l2410:
  2023                           
  2024                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 825:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
  2025  0018AC  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2026  0018B0  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2027  0018B4  CFDE FFF6          	movff	postinc2,tblptrl
  2028  0018B8  CFDD FFF7          	movff	postdec2,tblptrh
  2029  0018BC                     	if	0	;tblptru may be non-zero
  2030  0018BC                     	endif
  2031  0018BC                     	if	0	;tblptru may be non-zero
  2032  0018BC                     	endif
  2033  0018BC  0008               	tblrd		*
  2034  0018BE  50F5               	movf	tablat,w,c
  2035  0018C0  0A64               	xorlw	100
  2036  0018C2  B4D8               	btfsc	status,2,c
  2037  0018C4  D00D               	goto	u2030
  2038  0018C6  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2039  0018CA  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2040  0018CE  CFDE FFF6          	movff	postinc2,tblptrl
  2041  0018D2  CFDD FFF7          	movff	postdec2,tblptrh
  2042  0018D6                     	if	0	;tblptru may be non-zero
  2043  0018D6                     	endif
  2044  0018D6                     	if	0	;tblptru may be non-zero
  2045  0018D6                     	endif
  2046  0018D6  0008               	tblrd		*
  2047  0018D8  50F5               	movf	tablat,w,c
  2048  0018DA  0A69               	xorlw	105
  2049  0018DC  A4D8               	btfss	status,2,c
  2050  0018DE  D03F               	goto	l2420
  2051  0018E0                     u2030:
  2052                           
  2053                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 827:             ++*
      +                          fmt;
  2054  0018E0  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2055  0018E4  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2056  0018E8  2ADE               	incf	postinc2,f,c
  2057  0018EA  0E00               	movlw	0
  2058  0018EC  22DD               	addwfc	postdec2,f,c
  2059                           
  2060                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 828:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2061  0018EE  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2062  0018F2  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2063  0018F6  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2064  0018FA  0E02               	movlw	2
  2065  0018FC  26DE               	addwf	postinc2,f,c
  2066  0018FE  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2067  001902  0E00               	movlw	0
  2068  001904  22DD               	addwfc	postdec2,f,c
  2069  001906  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2070  00190A  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2071  00190E  CFDE F057          	movff	postinc2,vfpfcnvrt@ll
  2072  001912  CFDD F058          	movff	postdec2,vfpfcnvrt@ll+1
  2073  001916  0E00               	movlw	0
  2074  001918  BE58               	btfsc	vfpfcnvrt@ll+1,7,c
  2075  00191A  0EFF               	movlw	-1
  2076  00191C  6E59               	movwf	vfpfcnvrt@ll+2,c
  2077  00191E  6E5A               	movwf	vfpfcnvrt@ll+3,c
  2078  001920  6E5B               	movwf	vfpfcnvrt@ll+4,c
  2079  001922  6E5C               	movwf	vfpfcnvrt@ll+5,c
  2080  001924  6E5D               	movwf	vfpfcnvrt@ll+6,c
  2081  001926  6E5E               	movwf	vfpfcnvrt@ll+7,c
  2082                           
  2083                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 830:             ret
      +                          urn dtoa(fp, ll);
  2084  001928  C04F  F02B         	movff	vfpfcnvrt@fp,dtoa@fp
  2085  00192C  C050  F02C         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2086  001930  C057  F02D         	movff	vfpfcnvrt@ll,dtoa@d
  2087  001934  C058  F02E         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2088  001938  C059  F02F         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2089  00193C  C05A  F030         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2090  001940  C05B  F031         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2091  001944  C05C  F032         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2092  001948  C05D  F033         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2093  00194C  C05E  F034         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2094  001950  ECE4  F00A         	call	_dtoa	;wreg free
  2095  001954  C02B  F04F         	movff	?_dtoa,?_vfpfcnvrt
  2096  001958  C02C  F050         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2097  00195C  0012               	return	
  2098  00195E                     l2420:
  2099                           
  2100                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
  2101  00195E  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2102  001962  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2103  001966  CFDE FFF6          	movff	postinc2,tblptrl
  2104  00196A  CFDD FFF7          	movff	postdec2,tblptrh
  2105  00196E                     	if	0	;tblptru may be non-zero
  2106  00196E                     	endif
  2107  00196E                     	if	0	;tblptru may be non-zero
  2108  00196E                     	endif
  2109  00196E  0008               	tblrd		*
  2110  001970  50F5               	movf	tablat,w,c
  2111  001972  0A25               	xorlw	37
  2112  001974  A4D8               	btfss	status,2,c
  2113  001976  D016               	goto	l2430
  2114                           
  2115                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
  2116  001978  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2117  00197C  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2118  001980  2ADE               	incf	postinc2,f,c
  2119  001982  0E00               	movlw	0
  2120  001984  22DD               	addwfc	postdec2,f,c
  2121                           
  2122                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
  2123  001986  0E00               	movlw	0
  2124  001988  6E11               	movwf	fputc@c+1,c
  2125  00198A  0E25               	movlw	37
  2126  00198C  6E10               	movwf	fputc@c,c
  2127  00198E  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2128  001992  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2129  001996  EC07  F00F         	call	_fputc	;wreg free
  2130  00199A                     l2426:
  2131                           
  2132                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
  2133  00199A  0E00               	movlw	0
  2134  00199C  6E50               	movwf	?_vfpfcnvrt+1,c
  2135  00199E  0E01               	movlw	1
  2136  0019A0  6E4F               	movwf	?_vfpfcnvrt,c
  2137  0019A2  0012               	return	
  2138  0019A4                     l2430:
  2139                           
  2140                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  2141  0019A4  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2142  0019A8  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2143  0019AC  2ADE               	incf	postinc2,f,c
  2144  0019AE  0E00               	movlw	0
  2145  0019B0  22DD               	addwfc	postdec2,f,c
  2146                           
  2147                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  2148  0019B2  0E00               	movlw	0
  2149  0019B4  6E50               	movwf	?_vfpfcnvrt+1,c
  2150  0019B6  0E00               	movlw	0
  2151  0019B8  6E4F               	movwf	?_vfpfcnvrt,c
  2152  0019BA  0012               	return	
  2153  0019BC                     l2436:
  2154                           
  2155                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  2156  0019BC  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2157  0019C0  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2158  0019C4  CFDE FFF6          	movff	postinc2,tblptrl
  2159  0019C8  CFDD FFF7          	movff	postdec2,tblptrh
  2160  0019CC                     	if	0	;tblptru may be non-zero
  2161  0019CC                     	endif
  2162  0019CC                     	if	0	;tblptru may be non-zero
  2163  0019CC                     	endif
  2164  0019CC  0008               	tblrd		*
  2165  0019CE  50F5               	movf	tablat,w,c
  2166  0019D0  6E10               	movwf	fputc@c,c
  2167  0019D2  6A11               	clrf	fputc@c+1,c
  2168  0019D4  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2169  0019D8  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2170  0019DC  EC07  F00F         	call	_fputc	;wreg free
  2171                           
  2172                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  2173  0019E0  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2174  0019E4  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2175  0019E8  2ADE               	incf	postinc2,f,c
  2176  0019EA  0E00               	movlw	0
  2177  0019EC  22DD               	addwfc	postdec2,f,c
  2178  0019EE  D7D5               	goto	l2426
  2179  0019F0                     __end_of_vfpfcnvrt:
  2180                           	opt callstack 0
  2181                           
  2182 ;; *************** function _dtoa *****************
  2183 ;; Defined at:
  2184 ;;		line 274 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  2187 ;;		 -> NULL(0), 
  2188 ;;  d               8   44[COMRAM] long long 
  2189 ;; Auto vars:     Size  Location     Type
  2190 ;;  n               8   68[COMRAM] long long 
  2191 ;;  i               2   76[COMRAM] int 
  2192 ;;  s               2   66[COMRAM] int 
  2193 ;;  w               2   64[COMRAM] int 
  2194 ;;  p               2   62[COMRAM] int 
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  2   42[COMRAM] int 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2204 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2205 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2206 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2207 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2208 ;;Total ram usage:       36 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    8
  2211 ;; This function calls:
  2212 ;;		___aodiv
  2213 ;;		___aomod
  2214 ;;		_abs
  2215 ;;		_pad
  2216 ;; This function is called by:
  2217 ;;		_vfpfcnvrt
  2218 ;; This function uses a non-reentrant model
  2219 ;;
  2220                           
  2221                           	psect	text4
  2222  0015C8                     __ptext4:
  2223                           	opt callstack 0
  2224  0015C8                     _dtoa:
  2225                           	opt callstack 19
  2226                           
  2227                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 274: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.
      +                          c: 275: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 276:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 277:   
      +                            long long n;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 280:  
      +                             n = d;
  2228                           
  2229                           ;incstack = 0
  2230  0015C8  C02D  F045         	movff	dtoa@d,dtoa@n
  2231  0015CC  C02E  F046         	movff	dtoa@d+1,dtoa@n+1
  2232  0015D0  C02F  F047         	movff	dtoa@d+2,dtoa@n+2
  2233  0015D4  C030  F048         	movff	dtoa@d+3,dtoa@n+3
  2234  0015D8  C031  F049         	movff	dtoa@d+4,dtoa@n+4
  2235  0015DC  C032  F04A         	movff	dtoa@d+5,dtoa@n+5
  2236  0015E0  C033  F04B         	movff	dtoa@d+6,dtoa@n+6
  2237  0015E4  C034  F04C         	movff	dtoa@d+7,dtoa@n+7
  2238                           
  2239                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ?
      +                           1 : 0;
  2240  0015E8  AE4C               	btfss	dtoa@n+7,7,c
  2241  0015EA  D002               	goto	u1850
  2242  0015EC  0E01               	movlw	1
  2243  0015EE  D001               	goto	u1860
  2244  0015F0                     u1850:
  2245  0015F0  0E00               	movlw	0
  2246  0015F2                     u1860:
  2247  0015F2  6E43               	movwf	dtoa@s,c
  2248  0015F4  6A44               	clrf	dtoa@s+1,c
  2249                           
  2250                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  2251  0015F6  5043               	movf	dtoa@s,w,c
  2252  0015F8  1044               	iorwf	dtoa@s+1,w,c
  2253  0015FA  B4D8               	btfsc	status,2,c
  2254  0015FC  D010               	goto	l2338
  2255                           
  2256                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  2257  0015FE  1E4C               	comf	dtoa@n+7,f,c
  2258  001600  1E4B               	comf	dtoa@n+6,f,c
  2259  001602  1E4A               	comf	dtoa@n+5,f,c
  2260  001604  1E49               	comf	dtoa@n+4,f,c
  2261  001606  1E48               	comf	dtoa@n+3,f,c
  2262  001608  1E47               	comf	dtoa@n+2,f,c
  2263  00160A  1E46               	comf	dtoa@n+1,f,c
  2264  00160C  6C45               	negf	dtoa@n,c
  2265  00160E  0E00               	movlw	0
  2266  001610  2246               	addwfc	dtoa@n+1,f,c
  2267  001612  2247               	addwfc	dtoa@n+2,f,c
  2268  001614  2248               	addwfc	dtoa@n+3,f,c
  2269  001616  2249               	addwfc	dtoa@n+4,f,c
  2270  001618  224A               	addwfc	dtoa@n+5,f,c
  2271  00161A  224B               	addwfc	dtoa@n+6,f,c
  2272  00161C  224C               	addwfc	dtoa@n+7,f,c
  2273  00161E                     l2338:
  2274                           
  2275                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 287:     if (!(prec 
      +                          < 0)) {
  2276  00161E  AE71               	btfss	_prec+1,7,c
  2277                           
  2278                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 288:         flags &
      +                          = ~(1 << 1);
  2279  001620  9272               	bcf	_flags,1,c
  2280                           
  2281                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 290:     p = (0 < pr
      +                          ec) ? prec : 1;
  2282  001622  BE71               	btfsc	_prec+1,7,c
  2283  001624  D005               	goto	u1890
  2284  001626  5071               	movf	_prec+1,w,c
  2285  001628  E108               	bnz	l177
  2286  00162A  0470               	decf	_prec,w,c
  2287  00162C  B0D8               	btfsc	status,0,c
  2288  00162E  D005               	goto	l177
  2289  001630                     u1890:
  2290  001630  0E00               	movlw	0
  2291  001632  6E40               	movwf	dtoa@p+1,c
  2292  001634  0E01               	movlw	1
  2293  001636  6E3F               	movwf	dtoa@p,c
  2294  001638  D004               	goto	l179
  2295  00163A                     l177:
  2296  00163A  C070  F03F         	movff	_prec,dtoa@p
  2297  00163E  C071  F040         	movff	_prec+1,dtoa@p+1
  2298  001642                     l179:
  2299                           
  2300                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 291:     w = width;
  2301  001642  C06E  F041         	movff	_width,dtoa@w
  2302  001646  C06F  F042         	movff	_width+1,dtoa@w+1
  2303                           
  2304                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 292:     if (s || (f
      +                          lags & (1 << 2))) {
  2305  00164A  5043               	movf	dtoa@s,w,c
  2306  00164C  1044               	iorwf	dtoa@s+1,w,c
  2307  00164E  A4D8               	btfss	status,2,c
  2308  001650  D002               	goto	u1910
  2309  001652  A472               	btfss	_flags,2,c
  2310  001654  D003               	goto	l2352
  2311  001656                     u1910:
  2312                           
  2313                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 293:         --w;
  2314  001656  0641               	decf	dtoa@w,f,c
  2315  001658  A0D8               	btfss	status,0,c
  2316  00165A  0642               	decf	dtoa@w+1,f,c
  2317  00165C                     l2352:
  2318                           
  2319                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(
      +                          dbuf) - 1;
  2320  00165C  0E00               	movlw	0
  2321  00165E  6E4E               	movwf	dtoa@i+1,c
  2322  001660  0E1F               	movlw	31
  2323  001662  6E4D               	movwf	dtoa@i,c
  2324                           
  2325                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '
      +                          \0';
  2326  001664  0E00               	movlw	0
  2327  001666  0100               	movlb	0	; () banked
  2328  001668  6FE3               	movwf	(_dbuf+31)& (0+255),b
  2329                           
  2330                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2331  00166A  D07C               	goto	l2366
  2332  00166C                     l2356:
  2333                           
  2334                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 300:         --i;
  2335  00166C  064D               	decf	dtoa@i,f,c
  2336  00166E  A0D8               	btfss	status,0,c
  2337  001670  064E               	decf	dtoa@i+1,f,c
  2338                           
  2339                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 301:         dbuf[i]
      +                           = '0' + abs(n % 10);
  2340  001672  0EC4               	movlw	low _dbuf
  2341  001674  244D               	addwf	dtoa@i,w,c
  2342  001676  6ED9               	movwf	fsr2l,c
  2343  001678  0E00               	movlw	high _dbuf
  2344  00167A  204E               	addwfc	dtoa@i+1,w,c
  2345  00167C  6EDA               	movwf	fsr2h,c
  2346  00167E  C045  F00C         	movff	dtoa@n,___aomod@dividend
  2347  001682  C046  F00D         	movff	dtoa@n+1,___aomod@dividend+1
  2348  001686  C047  F00E         	movff	dtoa@n+2,___aomod@dividend+2
  2349  00168A  C048  F00F         	movff	dtoa@n+3,___aomod@dividend+3
  2350  00168E  C049  F010         	movff	dtoa@n+4,___aomod@dividend+4
  2351  001692  C04A  F011         	movff	dtoa@n+5,___aomod@dividend+5
  2352  001696  C04B  F012         	movff	dtoa@n+6,___aomod@dividend+6
  2353  00169A  C04C  F013         	movff	dtoa@n+7,___aomod@dividend+7
  2354  00169E  0E0A               	movlw	10
  2355  0016A0  6E14               	movwf	___aomod@divisor,c
  2356  0016A2  0E00               	movlw	0
  2357  0016A4  6E15               	movwf	___aomod@divisor+1,c
  2358  0016A6  0E00               	movlw	0
  2359  0016A8  6E16               	movwf	___aomod@divisor+2,c
  2360  0016AA  0E00               	movlw	0
  2361  0016AC  6E17               	movwf	___aomod@divisor+3,c
  2362  0016AE  0E00               	movlw	0
  2363  0016B0  6E18               	movwf	___aomod@divisor+4,c
  2364  0016B2  0E00               	movlw	0
  2365  0016B4  6E19               	movwf	___aomod@divisor+5,c
  2366  0016B6  0E00               	movlw	0
  2367  0016B8  6E1A               	movwf	___aomod@divisor+6,c
  2368  0016BA  0E00               	movlw	0
  2369  0016BC  6E1B               	movwf	___aomod@divisor+7,c
  2370  0016BE  EC9C  F00D         	call	___aomod	;wreg free
  2371  0016C2  C00C  F035         	movff	?___aomod,??_dtoa
  2372  0016C6  C00D  F036         	movff	?___aomod+1,??_dtoa+1
  2373  0016CA  C00E  F037         	movff	?___aomod+2,??_dtoa+2
  2374  0016CE  C00F  F038         	movff	?___aomod+3,??_dtoa+3
  2375  0016D2  C010  F039         	movff	?___aomod+4,??_dtoa+4
  2376  0016D6  C011  F03A         	movff	?___aomod+5,??_dtoa+5
  2377  0016DA  C012  F03B         	movff	?___aomod+6,??_dtoa+6
  2378  0016DE  C013  F03C         	movff	?___aomod+7,??_dtoa+7
  2379  0016E2  C035  F01E         	movff	??_dtoa,abs@a
  2380  0016E6  C037  F01F         	movff	??_dtoa+2,abs@a+1
  2381  0016EA  EC24  F010         	call	_abs	;wreg free
  2382  0016EE  501E               	movf	?_abs,w,c
  2383  0016F0  0F30               	addlw	48
  2384  0016F2  6EDF               	movwf	indf2,c
  2385                           
  2386                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 302:         --p;
  2387  0016F4  063F               	decf	dtoa@p,f,c
  2388  0016F6  A0D8               	btfss	status,0,c
  2389  0016F8  0640               	decf	dtoa@p+1,f,c
  2390                           
  2391                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 303:         --w;
  2392  0016FA  0641               	decf	dtoa@w,f,c
  2393  0016FC  A0D8               	btfss	status,0,c
  2394  0016FE  0642               	decf	dtoa@w+1,f,c
  2395                           
  2396                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 304:         n = n /
      +                           10;
  2397  001700  C045  F00C         	movff	dtoa@n,___aodiv@dividend
  2398  001704  C046  F00D         	movff	dtoa@n+1,___aodiv@dividend+1
  2399  001708  C047  F00E         	movff	dtoa@n+2,___aodiv@dividend+2
  2400  00170C  C048  F00F         	movff	dtoa@n+3,___aodiv@dividend+3
  2401  001710  C049  F010         	movff	dtoa@n+4,___aodiv@dividend+4
  2402  001714  C04A  F011         	movff	dtoa@n+5,___aodiv@dividend+5
  2403  001718  C04B  F012         	movff	dtoa@n+6,___aodiv@dividend+6
  2404  00171C  C04C  F013         	movff	dtoa@n+7,___aodiv@dividend+7
  2405  001720  0E0A               	movlw	10
  2406  001722  6E14               	movwf	___aodiv@divisor,c
  2407  001724  0E00               	movlw	0
  2408  001726  6E15               	movwf	___aodiv@divisor+1,c
  2409  001728  0E00               	movlw	0
  2410  00172A  6E16               	movwf	___aodiv@divisor+2,c
  2411  00172C  0E00               	movlw	0
  2412  00172E  6E17               	movwf	___aodiv@divisor+3,c
  2413  001730  0E00               	movlw	0
  2414  001732  6E18               	movwf	___aodiv@divisor+4,c
  2415  001734  0E00               	movlw	0
  2416  001736  6E19               	movwf	___aodiv@divisor+5,c
  2417  001738  0E00               	movlw	0
  2418  00173A  6E1A               	movwf	___aodiv@divisor+6,c
  2419  00173C  0E00               	movlw	0
  2420  00173E  6E1B               	movwf	___aodiv@divisor+7,c
  2421  001740  ECF8  F00C         	call	___aodiv	;wreg free
  2422  001744  C00C  F045         	movff	?___aodiv,dtoa@n
  2423  001748  C00D  F046         	movff	?___aodiv+1,dtoa@n+1
  2424  00174C  C00E  F047         	movff	?___aodiv+2,dtoa@n+2
  2425  001750  C00F  F048         	movff	?___aodiv+3,dtoa@n+3
  2426  001754  C010  F049         	movff	?___aodiv+4,dtoa@n+4
  2427  001758  C011  F04A         	movff	?___aodiv+5,dtoa@n+5
  2428  00175C  C012  F04B         	movff	?___aodiv+6,dtoa@n+6
  2429  001760  C013  F04C         	movff	?___aodiv+7,dtoa@n+7
  2430  001764                     l2366:
  2431                           
  2432                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2433  001764  BE4E               	btfsc	dtoa@i+1,7,c
  2434  001766  D01F               	goto	u1960
  2435  001768  504E               	movf	dtoa@i+1,w,c
  2436  00176A  E103               	bnz	u1920
  2437  00176C  044D               	decf	dtoa@i,w,c
  2438  00176E  A0D8               	btfss	status,0,c
  2439  001770  D01A               	goto	u1960
  2440  001772                     u1920:
  2441  001772  5045               	movf	dtoa@n,w,c
  2442  001774  1046               	iorwf	dtoa@n+1,w,c
  2443  001776  1047               	iorwf	dtoa@n+2,w,c
  2444  001778  1048               	iorwf	dtoa@n+3,w,c
  2445  00177A  1049               	iorwf	dtoa@n+4,w,c
  2446  00177C  104A               	iorwf	dtoa@n+5,w,c
  2447  00177E  104B               	iorwf	dtoa@n+6,w,c
  2448  001780  104C               	iorwf	dtoa@n+7,w,c
  2449  001782  A4D8               	btfss	status,2,c
  2450  001784  D773               	goto	l2356
  2451  001786  BE40               	btfsc	dtoa@p+1,7,c
  2452  001788  D005               	goto	u1940
  2453  00178A  5040               	movf	dtoa@p+1,w,c
  2454  00178C  E102               	bnz	u1941
  2455  00178E  043F               	decf	dtoa@p,w,c
  2456  001790  B0D8               	btfsc	status,0,c
  2457  001792                     u1941:
  2458  001792  D76C               	goto	l2356
  2459  001794                     u1940:
  2460  001794  BE42               	btfsc	dtoa@w+1,7,c
  2461  001796  D007               	goto	u1960
  2462  001798  5042               	movf	dtoa@w+1,w,c
  2463  00179A  E103               	bnz	u1950
  2464  00179C  0441               	decf	dtoa@w,w,c
  2465  00179E  A0D8               	btfss	status,0,c
  2466  0017A0  D002               	goto	u1960
  2467  0017A2                     u1950:
  2468  0017A2  B272               	btfsc	_flags,1,c
  2469  0017A4  D763               	goto	l2356
  2470  0017A6                     u1960:
  2471                           
  2472                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 308:     if (s || (f
      +                          lags & (1 << 2))) {
  2473  0017A6  5043               	movf	dtoa@s,w,c
  2474  0017A8  1044               	iorwf	dtoa@s+1,w,c
  2475  0017AA  A4D8               	btfss	status,2,c
  2476  0017AC  D002               	goto	u1980
  2477  0017AE  A472               	btfss	_flags,2,c
  2478  0017B0  D017               	goto	l2390
  2479  0017B2                     u1980:
  2480                           
  2481                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 309:         --i;
  2482  0017B2  064D               	decf	dtoa@i,f,c
  2483  0017B4  A0D8               	btfss	status,0,c
  2484  0017B6  064E               	decf	dtoa@i+1,f,c
  2485                           
  2486                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 310:         dbuf[i]
      +                           = s ? '-' : '+';
  2487  0017B8  5043               	movf	dtoa@s,w,c
  2488  0017BA  1044               	iorwf	dtoa@s+1,w,c
  2489  0017BC  A4D8               	btfss	status,2,c
  2490  0017BE  D004               	goto	l2386
  2491  0017C0  0E00               	movlw	0
  2492  0017C2  6E3E               	movwf	_dtoa$320+1,c
  2493  0017C4  0E2B               	movlw	43
  2494  0017C6  D003               	goto	L1
  2495  0017C8                     l2386:
  2496  0017C8  0E00               	movlw	0
  2497  0017CA  6E3E               	movwf	_dtoa$320+1,c
  2498  0017CC  0E2D               	movlw	45
  2499  0017CE                     L1:
  2500  0017CE  6E3D               	movwf	_dtoa$320,c
  2501  0017D0  0EC4               	movlw	low _dbuf
  2502  0017D2  244D               	addwf	dtoa@i,w,c
  2503  0017D4  6ED9               	movwf	fsr2l,c
  2504  0017D6  0E00               	movlw	high _dbuf
  2505  0017D8  204E               	addwfc	dtoa@i+1,w,c
  2506  0017DA  6EDA               	movwf	fsr2h,c
  2507  0017DC  C03D  FFDF         	movff	_dtoa$320,indf2
  2508  0017E0                     l2390:
  2509                           
  2510                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 314:     return pad(
      +                          fp, &dbuf[i], w);
  2511  0017E0  C02B  F020         	movff	dtoa@fp,pad@fp
  2512  0017E4  C02C  F021         	movff	dtoa@fp+1,pad@fp+1
  2513  0017E8  0EC4               	movlw	low _dbuf
  2514  0017EA  244D               	addwf	dtoa@i,w,c
  2515  0017EC  6E22               	movwf	pad@buf,c
  2516  0017EE  0E00               	movlw	high _dbuf
  2517  0017F0  204E               	addwfc	dtoa@i+1,w,c
  2518  0017F2  6E23               	movwf	pad@buf+1,c
  2519  0017F4  C041  F024         	movff	dtoa@w,pad@p
  2520  0017F8  C042  F025         	movff	dtoa@w+1,pad@p+1
  2521  0017FC  EC84  F00E         	call	_pad	;wreg free
  2522  001800  C020  F02B         	movff	?_pad,?_dtoa
  2523  001804  C021  F02C         	movff	?_pad+1,?_dtoa+1
  2524  001808  0012               	return		;funcret
  2525  00180A                     __end_of_dtoa:
  2526                           	opt callstack 0
  2527                           
  2528 ;; *************** function _abs *****************
  2529 ;; Defined at:
  2530 ;;		line 1 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/abs.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  a               2   29[COMRAM] int 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;		None
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  2   29[COMRAM] int 
  2537 ;; Registers used:
  2538 ;;		wreg, status,2, status,0
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2544 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2546 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2547 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2548 ;;Total ram usage:        4 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; Hardware stack levels required when called:    1
  2551 ;; This function calls:
  2552 ;;		Nothing
  2553 ;; This function is called by:
  2554 ;;		_dtoa
  2555 ;; This function uses a non-reentrant model
  2556 ;;
  2557                           
  2558                           	psect	text5
  2559  002048                     __ptext5:
  2560                           	opt callstack 0
  2561  002048                     _abs:
  2562                           	opt callstack 25
  2563                           
  2564                           ;incstack = 0
  2565  002048  BE1F               	btfsc	abs@a+1,7,c
  2566  00204A  D005               	goto	u1700
  2567  00204C  501F               	movf	abs@a+1,w,c
  2568  00204E  E110               	bnz	l890
  2569  002050  041E               	decf	abs@a,w,c
  2570  002052  B0D8               	btfsc	status,0,c
  2571  002054  D00D               	goto	l890
  2572  002056                     u1700:
  2573  002056  C01E  F020         	movff	abs@a,??_abs
  2574  00205A  C01F  F021         	movff	abs@a+1,??_abs+1
  2575  00205E  1E20               	comf	??_abs,f,c
  2576  002060  1E21               	comf	??_abs+1,f,c
  2577  002062  4A20               	infsnz	??_abs,f,c
  2578  002064  2A21               	incf	??_abs+1,f,c
  2579  002066  C020  F01E         	movff	??_abs,?_abs
  2580  00206A  C021  F01F         	movff	??_abs+1,?_abs+1
  2581  00206E  0012               	return	
  2582  002070                     l890:
  2583  002070  C01E  F01E         	movff	abs@a,?_abs
  2584  002074  C01F  F01F         	movff	abs@a+1,?_abs+1
  2585  002078  0012               	return		;funcret
  2586  00207A                     __end_of_abs:
  2587                           	opt callstack 0
  2588                           
  2589 ;; *************** function ___aomod *****************
  2590 ;; Defined at:
  2591 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aomod.c"
  2592 ;; Parameters:    Size  Location     Type
  2593 ;;  dividend        8   11[COMRAM] long long 
  2594 ;;  divisor         8   19[COMRAM] long long 
  2595 ;; Auto vars:     Size  Location     Type
  2596 ;;  sign            1   28[COMRAM] unsigned char 
  2597 ;;  counter         1   27[COMRAM] unsigned char 
  2598 ;; Return value:  Size  Location     Type
  2599 ;;                  8   11[COMRAM] long long 
  2600 ;; Registers used:
  2601 ;;		wreg, status,2, status,0
  2602 ;; Tracked objects:
  2603 ;;		On entry : 0/0
  2604 ;;		On exit  : 0/0
  2605 ;;		Unchanged: 0/0
  2606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2607 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2610 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2611 ;;Total ram usage:       18 bytes
  2612 ;; Hardware stack levels used:    1
  2613 ;; Hardware stack levels required when called:    1
  2614 ;; This function calls:
  2615 ;;		Nothing
  2616 ;; This function is called by:
  2617 ;;		_dtoa
  2618 ;; This function uses a non-reentrant model
  2619 ;;
  2620                           
  2621                           	psect	text6
  2622  001B38                     __ptext6:
  2623                           	opt callstack 0
  2624  001B38                     ___aomod:
  2625                           	opt callstack 25
  2626                           
  2627                           ;incstack = 0
  2628  001B38  0E00               	movlw	0
  2629  001B3A  6E1D               	movwf	___aomod@sign,c
  2630  001B3C  AE13               	btfss	___aomod@dividend+7,7,c
  2631  001B3E  D012               	goto	l2290
  2632  001B40  1E13               	comf	___aomod@dividend+7,f,c
  2633  001B42  1E12               	comf	___aomod@dividend+6,f,c
  2634  001B44  1E11               	comf	___aomod@dividend+5,f,c
  2635  001B46  1E10               	comf	___aomod@dividend+4,f,c
  2636  001B48  1E0F               	comf	___aomod@dividend+3,f,c
  2637  001B4A  1E0E               	comf	___aomod@dividend+2,f,c
  2638  001B4C  1E0D               	comf	___aomod@dividend+1,f,c
  2639  001B4E  6C0C               	negf	___aomod@dividend,c
  2640  001B50  0E00               	movlw	0
  2641  001B52  220D               	addwfc	___aomod@dividend+1,f,c
  2642  001B54  220E               	addwfc	___aomod@dividend+2,f,c
  2643  001B56  220F               	addwfc	___aomod@dividend+3,f,c
  2644  001B58  2210               	addwfc	___aomod@dividend+4,f,c
  2645  001B5A  2211               	addwfc	___aomod@dividend+5,f,c
  2646  001B5C  2212               	addwfc	___aomod@dividend+6,f,c
  2647  001B5E  2213               	addwfc	___aomod@dividend+7,f,c
  2648  001B60  0E01               	movlw	1
  2649  001B62  6E1D               	movwf	___aomod@sign,c
  2650  001B64                     l2290:
  2651  001B64  AE1B               	btfss	___aomod@divisor+7,7,c
  2652  001B66  D010               	goto	l2294
  2653  001B68  1E1B               	comf	___aomod@divisor+7,f,c
  2654  001B6A  1E1A               	comf	___aomod@divisor+6,f,c
  2655  001B6C  1E19               	comf	___aomod@divisor+5,f,c
  2656  001B6E  1E18               	comf	___aomod@divisor+4,f,c
  2657  001B70  1E17               	comf	___aomod@divisor+3,f,c
  2658  001B72  1E16               	comf	___aomod@divisor+2,f,c
  2659  001B74  1E15               	comf	___aomod@divisor+1,f,c
  2660  001B76  6C14               	negf	___aomod@divisor,c
  2661  001B78  0E00               	movlw	0
  2662  001B7A  2215               	addwfc	___aomod@divisor+1,f,c
  2663  001B7C  2216               	addwfc	___aomod@divisor+2,f,c
  2664  001B7E  2217               	addwfc	___aomod@divisor+3,f,c
  2665  001B80  2218               	addwfc	___aomod@divisor+4,f,c
  2666  001B82  2219               	addwfc	___aomod@divisor+5,f,c
  2667  001B84  221A               	addwfc	___aomod@divisor+6,f,c
  2668  001B86  221B               	addwfc	___aomod@divisor+7,f,c
  2669  001B88                     l2294:
  2670  001B88  5014               	movf	___aomod@divisor,w,c
  2671  001B8A  1015               	iorwf	___aomod@divisor+1,w,c
  2672  001B8C  1016               	iorwf	___aomod@divisor+2,w,c
  2673  001B8E  1017               	iorwf	___aomod@divisor+3,w,c
  2674  001B90  1018               	iorwf	___aomod@divisor+4,w,c
  2675  001B92  1019               	iorwf	___aomod@divisor+5,w,c
  2676  001B94  101A               	iorwf	___aomod@divisor+6,w,c
  2677  001B96  101B               	iorwf	___aomod@divisor+7,w,c
  2678  001B98  B4D8               	btfsc	status,2,c
  2679  001B9A  D03C               	goto	l2310
  2680  001B9C  0E01               	movlw	1
  2681  001B9E  6E1C               	movwf	___aomod@counter,c
  2682  001BA0  D00A               	goto	l2300
  2683  001BA2                     l2298:
  2684  001BA2  90D8               	bcf	status,0,c
  2685  001BA4  3614               	rlcf	___aomod@divisor,f,c
  2686  001BA6  3615               	rlcf	___aomod@divisor+1,f,c
  2687  001BA8  3616               	rlcf	___aomod@divisor+2,f,c
  2688  001BAA  3617               	rlcf	___aomod@divisor+3,f,c
  2689  001BAC  3618               	rlcf	___aomod@divisor+4,f,c
  2690  001BAE  3619               	rlcf	___aomod@divisor+5,f,c
  2691  001BB0  361A               	rlcf	___aomod@divisor+6,f,c
  2692  001BB2  361B               	rlcf	___aomod@divisor+7,f,c
  2693  001BB4  2A1C               	incf	___aomod@counter,f,c
  2694  001BB6                     l2300:
  2695  001BB6  AE1B               	btfss	___aomod@divisor+7,7,c
  2696  001BB8  D7F4               	goto	l2298
  2697  001BBA                     u1810:
  2698  001BBA  5014               	movf	___aomod@divisor,w,c
  2699  001BBC  5C0C               	subwf	___aomod@dividend,w,c
  2700  001BBE  5015               	movf	___aomod@divisor+1,w,c
  2701  001BC0  580D               	subwfb	___aomod@dividend+1,w,c
  2702  001BC2  5016               	movf	___aomod@divisor+2,w,c
  2703  001BC4  580E               	subwfb	___aomod@dividend+2,w,c
  2704  001BC6  5017               	movf	___aomod@divisor+3,w,c
  2705  001BC8  580F               	subwfb	___aomod@dividend+3,w,c
  2706  001BCA  5018               	movf	___aomod@divisor+4,w,c
  2707  001BCC  5810               	subwfb	___aomod@dividend+4,w,c
  2708  001BCE  5019               	movf	___aomod@divisor+5,w,c
  2709  001BD0  5811               	subwfb	___aomod@dividend+5,w,c
  2710  001BD2  501A               	movf	___aomod@divisor+6,w,c
  2711  001BD4  5812               	subwfb	___aomod@dividend+6,w,c
  2712  001BD6  501B               	movf	___aomod@divisor+7,w,c
  2713  001BD8  5813               	subwfb	___aomod@dividend+7,w,c
  2714  001BDA  A0D8               	btfss	status,0,c
  2715  001BDC  D010               	goto	l2306
  2716  001BDE  5014               	movf	___aomod@divisor,w,c
  2717  001BE0  5E0C               	subwf	___aomod@dividend,f,c
  2718  001BE2  5015               	movf	___aomod@divisor+1,w,c
  2719  001BE4  5A0D               	subwfb	___aomod@dividend+1,f,c
  2720  001BE6  5016               	movf	___aomod@divisor+2,w,c
  2721  001BE8  5A0E               	subwfb	___aomod@dividend+2,f,c
  2722  001BEA  5017               	movf	___aomod@divisor+3,w,c
  2723  001BEC  5A0F               	subwfb	___aomod@dividend+3,f,c
  2724  001BEE  5018               	movf	___aomod@divisor+4,w,c
  2725  001BF0  5A10               	subwfb	___aomod@dividend+4,f,c
  2726  001BF2  5019               	movf	___aomod@divisor+5,w,c
  2727  001BF4  5A11               	subwfb	___aomod@dividend+5,f,c
  2728  001BF6  501A               	movf	___aomod@divisor+6,w,c
  2729  001BF8  5A12               	subwfb	___aomod@dividend+6,f,c
  2730  001BFA  501B               	movf	___aomod@divisor+7,w,c
  2731  001BFC  5A13               	subwfb	___aomod@dividend+7,f,c
  2732  001BFE                     l2306:
  2733  001BFE  90D8               	bcf	status,0,c
  2734  001C00  321B               	rrcf	___aomod@divisor+7,f,c
  2735  001C02  321A               	rrcf	___aomod@divisor+6,f,c
  2736  001C04  3219               	rrcf	___aomod@divisor+5,f,c
  2737  001C06  3218               	rrcf	___aomod@divisor+4,f,c
  2738  001C08  3217               	rrcf	___aomod@divisor+3,f,c
  2739  001C0A  3216               	rrcf	___aomod@divisor+2,f,c
  2740  001C0C  3215               	rrcf	___aomod@divisor+1,f,c
  2741  001C0E  3214               	rrcf	___aomod@divisor,f,c
  2742  001C10  2E1C               	decfsz	___aomod@counter,f,c
  2743  001C12  D7D3               	goto	u1810
  2744  001C14                     l2310:
  2745  001C14  501D               	movf	___aomod@sign,w,c
  2746  001C16  B4D8               	btfsc	status,2,c
  2747  001C18  D010               	goto	l2314
  2748  001C1A  1E13               	comf	___aomod@dividend+7,f,c
  2749  001C1C  1E12               	comf	___aomod@dividend+6,f,c
  2750  001C1E  1E11               	comf	___aomod@dividend+5,f,c
  2751  001C20  1E10               	comf	___aomod@dividend+4,f,c
  2752  001C22  1E0F               	comf	___aomod@dividend+3,f,c
  2753  001C24  1E0E               	comf	___aomod@dividend+2,f,c
  2754  001C26  1E0D               	comf	___aomod@dividend+1,f,c
  2755  001C28  6C0C               	negf	___aomod@dividend,c
  2756  001C2A  0E00               	movlw	0
  2757  001C2C  220D               	addwfc	___aomod@dividend+1,f,c
  2758  001C2E  220E               	addwfc	___aomod@dividend+2,f,c
  2759  001C30  220F               	addwfc	___aomod@dividend+3,f,c
  2760  001C32  2210               	addwfc	___aomod@dividend+4,f,c
  2761  001C34  2211               	addwfc	___aomod@dividend+5,f,c
  2762  001C36  2212               	addwfc	___aomod@dividend+6,f,c
  2763  001C38  2213               	addwfc	___aomod@dividend+7,f,c
  2764  001C3A                     l2314:
  2765  001C3A  C00C  F00C         	movff	___aomod@dividend,?___aomod
  2766  001C3E  C00D  F00D         	movff	___aomod@dividend+1,?___aomod+1
  2767  001C42  C00E  F00E         	movff	___aomod@dividend+2,?___aomod+2
  2768  001C46  C00F  F00F         	movff	___aomod@dividend+3,?___aomod+3
  2769  001C4A  C010  F010         	movff	___aomod@dividend+4,?___aomod+4
  2770  001C4E  C011  F011         	movff	___aomod@dividend+5,?___aomod+5
  2771  001C52  C012  F012         	movff	___aomod@dividend+6,?___aomod+6
  2772  001C56  C013  F013         	movff	___aomod@dividend+7,?___aomod+7
  2773  001C5A  0012               	return		;funcret
  2774  001C5C                     __end_of___aomod:
  2775                           	opt callstack 0
  2776                           
  2777 ;; *************** function ___aodiv *****************
  2778 ;; Defined at:
  2779 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aodiv.c"
  2780 ;; Parameters:    Size  Location     Type
  2781 ;;  dividend        8   11[COMRAM] long long 
  2782 ;;  divisor         8   19[COMRAM] long long 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;  quotient        8   29[COMRAM] long long 
  2785 ;;  sign            1   28[COMRAM] unsigned char 
  2786 ;;  counter         1   27[COMRAM] unsigned char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;                  8   11[COMRAM] long long 
  2789 ;; Registers used:
  2790 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2791 ;; Tracked objects:
  2792 ;;		On entry : 0/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2796 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2799 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2800 ;;Total ram usage:       26 bytes
  2801 ;; Hardware stack levels used:    1
  2802 ;; Hardware stack levels required when called:    1
  2803 ;; This function calls:
  2804 ;;		Nothing
  2805 ;; This function is called by:
  2806 ;;		_dtoa
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           	psect	text7
  2811  0019F0                     __ptext7:
  2812                           	opt callstack 0
  2813  0019F0                     ___aodiv:
  2814                           	opt callstack 25
  2815                           
  2816                           ;incstack = 0
  2817  0019F0  0E00               	movlw	0
  2818  0019F2  6E1D               	movwf	___aodiv@sign,c
  2819  0019F4  AE1B               	btfss	___aodiv@divisor+7,7,c
  2820  0019F6  D012               	goto	l2246
  2821  0019F8  1E1B               	comf	___aodiv@divisor+7,f,c
  2822  0019FA  1E1A               	comf	___aodiv@divisor+6,f,c
  2823  0019FC  1E19               	comf	___aodiv@divisor+5,f,c
  2824  0019FE  1E18               	comf	___aodiv@divisor+4,f,c
  2825  001A00  1E17               	comf	___aodiv@divisor+3,f,c
  2826  001A02  1E16               	comf	___aodiv@divisor+2,f,c
  2827  001A04  1E15               	comf	___aodiv@divisor+1,f,c
  2828  001A06  6C14               	negf	___aodiv@divisor,c
  2829  001A08  0E00               	movlw	0
  2830  001A0A  2215               	addwfc	___aodiv@divisor+1,f,c
  2831  001A0C  2216               	addwfc	___aodiv@divisor+2,f,c
  2832  001A0E  2217               	addwfc	___aodiv@divisor+3,f,c
  2833  001A10  2218               	addwfc	___aodiv@divisor+4,f,c
  2834  001A12  2219               	addwfc	___aodiv@divisor+5,f,c
  2835  001A14  221A               	addwfc	___aodiv@divisor+6,f,c
  2836  001A16  221B               	addwfc	___aodiv@divisor+7,f,c
  2837  001A18  0E01               	movlw	1
  2838  001A1A  6E1D               	movwf	___aodiv@sign,c
  2839  001A1C                     l2246:
  2840  001A1C  AE13               	btfss	___aodiv@dividend+7,7,c
  2841  001A1E  D012               	goto	l2252
  2842  001A20  1E13               	comf	___aodiv@dividend+7,f,c
  2843  001A22  1E12               	comf	___aodiv@dividend+6,f,c
  2844  001A24  1E11               	comf	___aodiv@dividend+5,f,c
  2845  001A26  1E10               	comf	___aodiv@dividend+4,f,c
  2846  001A28  1E0F               	comf	___aodiv@dividend+3,f,c
  2847  001A2A  1E0E               	comf	___aodiv@dividend+2,f,c
  2848  001A2C  1E0D               	comf	___aodiv@dividend+1,f,c
  2849  001A2E  6C0C               	negf	___aodiv@dividend,c
  2850  001A30  0E00               	movlw	0
  2851  001A32  220D               	addwfc	___aodiv@dividend+1,f,c
  2852  001A34  220E               	addwfc	___aodiv@dividend+2,f,c
  2853  001A36  220F               	addwfc	___aodiv@dividend+3,f,c
  2854  001A38  2210               	addwfc	___aodiv@dividend+4,f,c
  2855  001A3A  2211               	addwfc	___aodiv@dividend+5,f,c
  2856  001A3C  2212               	addwfc	___aodiv@dividend+6,f,c
  2857  001A3E  2213               	addwfc	___aodiv@dividend+7,f,c
  2858  001A40  0E01               	movlw	1
  2859  001A42  1A1D               	xorwf	___aodiv@sign,f,c
  2860  001A44                     l2252:
  2861  001A44  EE20  F01E         	lfsr	2,___aodiv@quotient
  2862  001A48  0E07               	movlw	7
  2863  001A4A                     u1731:
  2864  001A4A  6ADE               	clrf	postinc2,c
  2865  001A4C  06E8               	decf	wreg,f,c
  2866  001A4E  E2FD               	bc	u1731
  2867  001A50  5014               	movf	___aodiv@divisor,w,c
  2868  001A52  1015               	iorwf	___aodiv@divisor+1,w,c
  2869  001A54  1016               	iorwf	___aodiv@divisor+2,w,c
  2870  001A56  1017               	iorwf	___aodiv@divisor+3,w,c
  2871  001A58  1018               	iorwf	___aodiv@divisor+4,w,c
  2872  001A5A  1019               	iorwf	___aodiv@divisor+5,w,c
  2873  001A5C  101A               	iorwf	___aodiv@divisor+6,w,c
  2874  001A5E  101B               	iorwf	___aodiv@divisor+7,w,c
  2875  001A60  B4D8               	btfsc	status,2,c
  2876  001A62  D046               	goto	l2274
  2877  001A64  0E01               	movlw	1
  2878  001A66  6E1C               	movwf	___aodiv@counter,c
  2879  001A68  D00A               	goto	l2260
  2880  001A6A                     l2258:
  2881  001A6A  90D8               	bcf	status,0,c
  2882  001A6C  3614               	rlcf	___aodiv@divisor,f,c
  2883  001A6E  3615               	rlcf	___aodiv@divisor+1,f,c
  2884  001A70  3616               	rlcf	___aodiv@divisor+2,f,c
  2885  001A72  3617               	rlcf	___aodiv@divisor+3,f,c
  2886  001A74  3618               	rlcf	___aodiv@divisor+4,f,c
  2887  001A76  3619               	rlcf	___aodiv@divisor+5,f,c
  2888  001A78  361A               	rlcf	___aodiv@divisor+6,f,c
  2889  001A7A  361B               	rlcf	___aodiv@divisor+7,f,c
  2890  001A7C  2A1C               	incf	___aodiv@counter,f,c
  2891  001A7E                     l2260:
  2892  001A7E  AE1B               	btfss	___aodiv@divisor+7,7,c
  2893  001A80  D7F4               	goto	l2258
  2894  001A82                     u1750:
  2895  001A82  90D8               	bcf	status,0,c
  2896  001A84  361E               	rlcf	___aodiv@quotient,f,c
  2897  001A86  361F               	rlcf	___aodiv@quotient+1,f,c
  2898  001A88  3620               	rlcf	___aodiv@quotient+2,f,c
  2899  001A8A  3621               	rlcf	___aodiv@quotient+3,f,c
  2900  001A8C  3622               	rlcf	___aodiv@quotient+4,f,c
  2901  001A8E  3623               	rlcf	___aodiv@quotient+5,f,c
  2902  001A90  3624               	rlcf	___aodiv@quotient+6,f,c
  2903  001A92  3625               	rlcf	___aodiv@quotient+7,f,c
  2904  001A94  5014               	movf	___aodiv@divisor,w,c
  2905  001A96  5C0C               	subwf	___aodiv@dividend,w,c
  2906  001A98  5015               	movf	___aodiv@divisor+1,w,c
  2907  001A9A  580D               	subwfb	___aodiv@dividend+1,w,c
  2908  001A9C  5016               	movf	___aodiv@divisor+2,w,c
  2909  001A9E  580E               	subwfb	___aodiv@dividend+2,w,c
  2910  001AA0  5017               	movf	___aodiv@divisor+3,w,c
  2911  001AA2  580F               	subwfb	___aodiv@dividend+3,w,c
  2912  001AA4  5018               	movf	___aodiv@divisor+4,w,c
  2913  001AA6  5810               	subwfb	___aodiv@dividend+4,w,c
  2914  001AA8  5019               	movf	___aodiv@divisor+5,w,c
  2915  001AAA  5811               	subwfb	___aodiv@dividend+5,w,c
  2916  001AAC  501A               	movf	___aodiv@divisor+6,w,c
  2917  001AAE  5812               	subwfb	___aodiv@dividend+6,w,c
  2918  001AB0  501B               	movf	___aodiv@divisor+7,w,c
  2919  001AB2  5813               	subwfb	___aodiv@dividend+7,w,c
  2920  001AB4  A0D8               	btfss	status,0,c
  2921  001AB6  D011               	goto	l2270
  2922  001AB8  5014               	movf	___aodiv@divisor,w,c
  2923  001ABA  5E0C               	subwf	___aodiv@dividend,f,c
  2924  001ABC  5015               	movf	___aodiv@divisor+1,w,c
  2925  001ABE  5A0D               	subwfb	___aodiv@dividend+1,f,c
  2926  001AC0  5016               	movf	___aodiv@divisor+2,w,c
  2927  001AC2  5A0E               	subwfb	___aodiv@dividend+2,f,c
  2928  001AC4  5017               	movf	___aodiv@divisor+3,w,c
  2929  001AC6  5A0F               	subwfb	___aodiv@dividend+3,f,c
  2930  001AC8  5018               	movf	___aodiv@divisor+4,w,c
  2931  001ACA  5A10               	subwfb	___aodiv@dividend+4,f,c
  2932  001ACC  5019               	movf	___aodiv@divisor+5,w,c
  2933  001ACE  5A11               	subwfb	___aodiv@dividend+5,f,c
  2934  001AD0  501A               	movf	___aodiv@divisor+6,w,c
  2935  001AD2  5A12               	subwfb	___aodiv@dividend+6,f,c
  2936  001AD4  501B               	movf	___aodiv@divisor+7,w,c
  2937  001AD6  5A13               	subwfb	___aodiv@dividend+7,f,c
  2938  001AD8  801E               	bsf	___aodiv@quotient,0,c
  2939  001ADA                     l2270:
  2940  001ADA  90D8               	bcf	status,0,c
  2941  001ADC  321B               	rrcf	___aodiv@divisor+7,f,c
  2942  001ADE  321A               	rrcf	___aodiv@divisor+6,f,c
  2943  001AE0  3219               	rrcf	___aodiv@divisor+5,f,c
  2944  001AE2  3218               	rrcf	___aodiv@divisor+4,f,c
  2945  001AE4  3217               	rrcf	___aodiv@divisor+3,f,c
  2946  001AE6  3216               	rrcf	___aodiv@divisor+2,f,c
  2947  001AE8  3215               	rrcf	___aodiv@divisor+1,f,c
  2948  001AEA  3214               	rrcf	___aodiv@divisor,f,c
  2949  001AEC  2E1C               	decfsz	___aodiv@counter,f,c
  2950  001AEE  D7C9               	goto	u1750
  2951  001AF0                     l2274:
  2952  001AF0  501D               	movf	___aodiv@sign,w,c
  2953  001AF2  B4D8               	btfsc	status,2,c
  2954  001AF4  D010               	goto	l2278
  2955  001AF6  1E25               	comf	___aodiv@quotient+7,f,c
  2956  001AF8  1E24               	comf	___aodiv@quotient+6,f,c
  2957  001AFA  1E23               	comf	___aodiv@quotient+5,f,c
  2958  001AFC  1E22               	comf	___aodiv@quotient+4,f,c
  2959  001AFE  1E21               	comf	___aodiv@quotient+3,f,c
  2960  001B00  1E20               	comf	___aodiv@quotient+2,f,c
  2961  001B02  1E1F               	comf	___aodiv@quotient+1,f,c
  2962  001B04  6C1E               	negf	___aodiv@quotient,c
  2963  001B06  0E00               	movlw	0
  2964  001B08  221F               	addwfc	___aodiv@quotient+1,f,c
  2965  001B0A  2220               	addwfc	___aodiv@quotient+2,f,c
  2966  001B0C  2221               	addwfc	___aodiv@quotient+3,f,c
  2967  001B0E  2222               	addwfc	___aodiv@quotient+4,f,c
  2968  001B10  2223               	addwfc	___aodiv@quotient+5,f,c
  2969  001B12  2224               	addwfc	___aodiv@quotient+6,f,c
  2970  001B14  2225               	addwfc	___aodiv@quotient+7,f,c
  2971  001B16                     l2278:
  2972  001B16  C01E  F00C         	movff	___aodiv@quotient,?___aodiv
  2973  001B1A  C01F  F00D         	movff	___aodiv@quotient+1,?___aodiv+1
  2974  001B1E  C020  F00E         	movff	___aodiv@quotient+2,?___aodiv+2
  2975  001B22  C021  F00F         	movff	___aodiv@quotient+3,?___aodiv+3
  2976  001B26  C022  F010         	movff	___aodiv@quotient+4,?___aodiv+4
  2977  001B2A  C023  F011         	movff	___aodiv@quotient+5,?___aodiv+5
  2978  001B2E  C024  F012         	movff	___aodiv@quotient+6,?___aodiv+6
  2979  001B32  C025  F013         	movff	___aodiv@quotient+7,?___aodiv+7
  2980  001B36  0012               	return		;funcret
  2981  001B38                     __end_of___aodiv:
  2982                           	opt callstack 0
  2983                           
  2984 ;; *************** function _ctoa *****************
  2985 ;; Defined at:
  2986 ;;		line 259 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  2989 ;;		 -> NULL(0), 
  2990 ;;  c               1   44[COMRAM] unsigned char 
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;  w               2   45[COMRAM] int 
  2993 ;;  l               2    0        int 
  2994 ;; Return value:  Size  Location     Type
  2995 ;;                  2   42[COMRAM] int 
  2996 ;; Registers used:
  2997 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2998 ;; Tracked objects:
  2999 ;;		On entry : 0/0
  3000 ;;		On exit  : 0/0
  3001 ;;		Unchanged: 0/0
  3002 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3003 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3004 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3006 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3007 ;;Total ram usage:        5 bytes
  3008 ;; Hardware stack levels used:    1
  3009 ;; Hardware stack levels required when called:    8
  3010 ;; This function calls:
  3011 ;;		_pad
  3012 ;; This function is called by:
  3013 ;;		_vfpfcnvrt
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           	psect	text8
  3018  001F36                     __ptext8:
  3019                           	opt callstack 0
  3020  001F36                     _ctoa:
  3021                           	opt callstack 19
  3022                           
  3023                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 259: static int ctoa
      +                          (FILE *fp, char c);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 26
      +                          0: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 261:     int l, 
      +                          w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 264:     w = width
      +                           ? width - 1 : width;
  3024                           
  3025                           ;incstack = 0
  3026  001F36  506E               	movf	_width,w,c
  3027  001F38  106F               	iorwf	_width+1,w,c
  3028  001F3A  A4D8               	btfss	status,2,c
  3029  001F3C  D005               	goto	l2322
  3030  001F3E  C06E  F02E         	movff	_width,ctoa@w
  3031  001F42  C06F  F02F         	movff	_width+1,ctoa@w+1
  3032  001F46  D006               	goto	l2324
  3033  001F48                     l2322:
  3034  001F48  0EFF               	movlw	255
  3035  001F4A  246E               	addwf	_width,w,c
  3036  001F4C  6E2E               	movwf	ctoa@w,c
  3037  001F4E  0EFF               	movlw	255
  3038  001F50  206F               	addwfc	_width+1,w,c
  3039  001F52  6E2F               	movwf	ctoa@w+1,c
  3040  001F54                     l2324:
  3041                           
  3042                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 267:     dbuf[0] = c
      +                          ;
  3043  001F54  C02D  F0C4         	movff	ctoa@c,_dbuf
  3044                           
  3045                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 268:     dbuf[1] = '
      +                          \0';
  3046  001F58  0E00               	movlw	0
  3047  001F5A  0100               	movlb	0	; () banked
  3048  001F5C  6FC5               	movwf	(_dbuf+1)& (0+255),b
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 269:     return pad(
      +                          fp, &dbuf[0], w);
  3052  001F5E  C02B  F020         	movff	ctoa@fp,pad@fp
  3053  001F62  C02C  F021         	movff	ctoa@fp+1,pad@fp+1
  3054  001F66  0EC4               	movlw	low _dbuf
  3055  001F68  6E22               	movwf	pad@buf,c
  3056  001F6A  0E00               	movlw	high _dbuf
  3057  001F6C  6E23               	movwf	pad@buf+1,c
  3058  001F6E  C02E  F024         	movff	ctoa@w,pad@p
  3059  001F72  C02F  F025         	movff	ctoa@w+1,pad@p+1
  3060  001F76  EC84  F00E         	call	_pad	;wreg free
  3061  001F7A  C020  F02B         	movff	?_pad,?_ctoa
  3062  001F7E  C021  F02C         	movff	?_pad+1,?_ctoa+1
  3063  001F82  0012               	return		;funcret
  3064  001F84                     __end_of_ctoa:
  3065                           	opt callstack 0
  3066                           
  3067 ;; *************** function _pad *****************
  3068 ;; Defined at:
  3069 ;;		line 72 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  3072 ;;		 -> NULL(0), 
  3073 ;;  buf             2   33[COMRAM] PTR unsigned char 
  3074 ;;		 -> dbuf(32), 
  3075 ;;  p               2   35[COMRAM] int 
  3076 ;; Auto vars:     Size  Location     Type
  3077 ;;  w               2   40[COMRAM] int 
  3078 ;;  i               2   38[COMRAM] int 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  2   31[COMRAM] int 
  3081 ;; Registers used:
  3082 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3088 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3089 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3090 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3091 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3092 ;;Total ram usage:       11 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; Hardware stack levels required when called:    7
  3095 ;; This function calls:
  3096 ;;		_fputc
  3097 ;;		_fputs
  3098 ;;		_strlen
  3099 ;; This function is called by:
  3100 ;;		_ctoa
  3101 ;;		_dtoa
  3102 ;; This function uses a non-reentrant model
  3103 ;;
  3104                           
  3105                           	psect	text9
  3106  001D08                     __ptext9:
  3107                           	opt callstack 0
  3108  001D08                     _pad:
  3109                           	opt callstack 19
  3110                           
  3111                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  3112                           
  3113                           ;incstack = 0
  3114  001D08  A072               	btfss	_flags,0,c
  3115  001D0A  D00A               	goto	l2216
  3116                           
  3117                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  3118  001D0C  C022  F019         	movff	pad@buf,fputs@s
  3119  001D10  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3120  001D14  C020  F01B         	movff	pad@fp,fputs@fp
  3121  001D18  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3122  001D1C  EC08  F010         	call	_fputs	;wreg free
  3123  001D20                     l2216:
  3124                           
  3125                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  3126  001D20  BE25               	btfsc	pad@p+1,7,c
  3127  001D22  D005               	goto	l2220
  3128  001D24  C024  F029         	movff	pad@p,pad@w
  3129  001D28  C025  F02A         	movff	pad@p+1,pad@w+1
  3130  001D2C  D004               	goto	l159
  3131  001D2E                     l2220:
  3132  001D2E  0E00               	movlw	0
  3133  001D30  6E2A               	movwf	pad@w+1,c
  3134  001D32  0E00               	movlw	0
  3135  001D34  6E29               	movwf	pad@w,c
  3136  001D36                     l159:
  3137                           
  3138                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  3139  001D36  0E00               	movlw	0
  3140  001D38  6E28               	movwf	pad@i+1,c
  3141  001D3A  0E00               	movlw	0
  3142  001D3C  6E27               	movwf	pad@i,c
  3143                           
  3144                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3145  001D3E  D00C               	goto	l2226
  3146  001D40                     l2222:
  3147                           
  3148                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  3149  001D40  0E00               	movlw	0
  3150  001D42  6E11               	movwf	fputc@c+1,c
  3151  001D44  0E20               	movlw	32
  3152  001D46  6E10               	movwf	fputc@c,c
  3153  001D48  C020  F012         	movff	pad@fp,fputc@fp
  3154  001D4C  C021  F013         	movff	pad@fp+1,fputc@fp+1
  3155  001D50  EC07  F00F         	call	_fputc	;wreg free
  3156                           
  3157                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 86:         ++i;
  3158  001D54  4A27               	infsnz	pad@i,f,c
  3159  001D56  2A28               	incf	pad@i+1,f,c
  3160  001D58                     l2226:
  3161                           
  3162                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3163  001D58  5029               	movf	pad@w,w,c
  3164  001D5A  5C27               	subwf	pad@i,w,c
  3165  001D5C  5028               	movf	pad@i+1,w,c
  3166  001D5E  0A80               	xorlw	128
  3167  001D60  6E26               	movwf	??_pad& (0+255),c
  3168  001D62  502A               	movf	pad@w+1,w,c
  3169  001D64  0A80               	xorlw	128
  3170  001D66  5826               	subwfb	??_pad& (0+255),w,c
  3171  001D68  A0D8               	btfss	status,0,c
  3172  001D6A  D7EA               	goto	l2222
  3173                           
  3174                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  3175  001D6C  B072               	btfsc	_flags,0,c
  3176  001D6E  D00A               	goto	l2230
  3177                           
  3178                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  3179  001D70  C022  F019         	movff	pad@buf,fputs@s
  3180  001D74  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3181  001D78  C020  F01B         	movff	pad@fp,fputs@fp
  3182  001D7C  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3183  001D80  EC08  F010         	call	_fputs	;wreg free
  3184  001D84                     l2230:
  3185                           
  3186                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 94:     return strle
      +                          n(buf) + w;
  3187  001D84  C022  F00C         	movff	pad@buf,strlen@s
  3188  001D88  C023  F00D         	movff	pad@buf+1,strlen@s+1
  3189  001D8C  EC3D  F010         	call	_strlen	;wreg free
  3190  001D90  5029               	movf	pad@w,w,c
  3191  001D92  240C               	addwf	?_strlen,w,c
  3192  001D94  6E20               	movwf	?_pad,c
  3193  001D96  502A               	movf	pad@w+1,w,c
  3194  001D98  200D               	addwfc	?_strlen+1,w,c
  3195  001D9A  6E21               	movwf	?_pad+1,c
  3196  001D9C  0012               	return		;funcret
  3197  001D9E                     __end_of_pad:
  3198                           	opt callstack 0
  3199                           
  3200 ;; *************** function _strlen *****************
  3201 ;; Defined at:
  3202 ;;		line 12 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/strlen.c"
  3203 ;; Parameters:    Size  Location     Type
  3204 ;;  s               2   11[COMRAM] PTR const unsigned char 
  3205 ;;		 -> dbuf(32), 
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  a               2   13[COMRAM] PTR const unsigned char 
  3208 ;;		 -> dbuf(32), 
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  2   11[COMRAM] unsigned int 
  3211 ;; Registers used:
  3212 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3218 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;Total ram usage:        4 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:    1
  3225 ;; This function calls:
  3226 ;;		Nothing
  3227 ;; This function is called by:
  3228 ;;		_pad
  3229 ;; This function uses a non-reentrant model
  3230 ;;
  3231                           
  3232                           	psect	text10
  3233  00207A                     __ptext10:
  3234                           	opt callstack 0
  3235  00207A                     _strlen:
  3236                           	opt callstack 24
  3237                           
  3238                           ;incstack = 0
  3239  00207A  C00C  F00E         	movff	strlen@s,strlen@a
  3240  00207E  C00D  F00F         	movff	strlen@s+1,strlen@a+1
  3241  002082  D002               	goto	l2206
  3242  002084                     l2204:
  3243  002084  4A0C               	infsnz	strlen@s,f,c
  3244  002086  2A0D               	incf	strlen@s+1,f,c
  3245  002088                     l2206:
  3246  002088  C00C  FFD9         	movff	strlen@s,fsr2l
  3247  00208C  C00D  FFDA         	movff	strlen@s+1,fsr2h
  3248  002090  50DF               	movf	indf2,w,c
  3249  002092  A4D8               	btfss	status,2,c
  3250  002094  D7F7               	goto	l2204
  3251  002096  500E               	movf	strlen@a,w,c
  3252  002098  5C0C               	subwf	strlen@s,w,c
  3253  00209A  6E0C               	movwf	?_strlen,c
  3254  00209C  500F               	movf	strlen@a+1,w,c
  3255  00209E  580D               	subwfb	strlen@s+1,w,c
  3256  0020A0  6E0D               	movwf	?_strlen+1,c
  3257  0020A2  0012               	return		;funcret
  3258  0020A4                     __end_of_strlen:
  3259                           	opt callstack 0
  3260                           
  3261 ;; *************** function _fputs *****************
  3262 ;; Defined at:
  3263 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputs.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  s               2   24[COMRAM] PTR const unsigned char 
  3266 ;;		 -> dbuf(32), 
  3267 ;;  fp              2   26[COMRAM] PTR struct _IO_FILE
  3268 ;;		 -> NULL(0), 
  3269 ;; Auto vars:     Size  Location     Type
  3270 ;;  i               2   29[COMRAM] int 
  3271 ;;  c               1   28[COMRAM] unsigned char 
  3272 ;; Return value:  Size  Location     Type
  3273 ;;                  2   24[COMRAM] int 
  3274 ;; Registers used:
  3275 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3276 ;; Tracked objects:
  3277 ;;		On entry : 0/0
  3278 ;;		On exit  : 0/0
  3279 ;;		Unchanged: 0/0
  3280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3281 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3282 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3284 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;Total ram usage:        7 bytes
  3286 ;; Hardware stack levels used:    1
  3287 ;; Hardware stack levels required when called:    6
  3288 ;; This function calls:
  3289 ;;		_fputc
  3290 ;; This function is called by:
  3291 ;;		_pad
  3292 ;; This function uses a non-reentrant model
  3293 ;;
  3294                           
  3295                           	psect	text11
  3296  002010                     __ptext11:
  3297                           	opt callstack 0
  3298  002010                     _fputs:
  3299                           	opt callstack 19
  3300                           
  3301                           ;incstack = 0
  3302  002010  0E00               	movlw	0
  3303  002012  6E1F               	movwf	fputs@i+1,c
  3304  002014  0E00               	movlw	0
  3305  002016  6E1E               	movwf	fputs@i,c
  3306  002018  D00B               	goto	l2200
  3307  00201A                     l2196:
  3308  00201A  C01D  F010         	movff	fputs@c,fputc@c
  3309  00201E  6A11               	clrf	fputc@c+1,c
  3310  002020  C01B  F012         	movff	fputs@fp,fputc@fp
  3311  002024  C01C  F013         	movff	fputs@fp+1,fputc@fp+1
  3312  002028  EC07  F00F         	call	_fputc	;wreg free
  3313  00202C  4A1E               	infsnz	fputs@i,f,c
  3314  00202E  2A1F               	incf	fputs@i+1,f,c
  3315  002030                     l2200:
  3316  002030  501E               	movf	fputs@i,w,c
  3317  002032  2419               	addwf	fputs@s,w,c
  3318  002034  6ED9               	movwf	fsr2l,c
  3319  002036  501F               	movf	fputs@i+1,w,c
  3320  002038  201A               	addwfc	fputs@s+1,w,c
  3321  00203A  6EDA               	movwf	fsr2h,c
  3322  00203C  50DF               	movf	indf2,w,c
  3323  00203E  6E1D               	movwf	fputs@c,c
  3324  002040  501D               	movf	fputs@c,w,c
  3325  002042  B4D8               	btfsc	status,2,c
  3326  002044  0012               	return	
  3327  002046  D7E9               	goto	l2196
  3328  002048                     __end_of_fputs:
  3329                           	opt callstack 0
  3330                           
  3331 ;; *************** function _fputc *****************
  3332 ;; Defined at:
  3333 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputc.c"
  3334 ;; Parameters:    Size  Location     Type
  3335 ;;  c               2   15[COMRAM] int 
  3336 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  3337 ;;		 -> NULL(0), 
  3338 ;; Auto vars:     Size  Location     Type
  3339 ;;		None
  3340 ;; Return value:  Size  Location     Type
  3341 ;;                  2   15[COMRAM] int 
  3342 ;; Registers used:
  3343 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3344 ;; Tracked objects:
  3345 ;;		On entry : 0/0
  3346 ;;		On exit  : 0/0
  3347 ;;		Unchanged: 0/0
  3348 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3349 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3351 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3352 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3353 ;;Total ram usage:        9 bytes
  3354 ;; Hardware stack levels used:    1
  3355 ;; Hardware stack levels required when called:    5
  3356 ;; This function calls:
  3357 ;;		_putch
  3358 ;; This function is called by:
  3359 ;;		_pad
  3360 ;;		_vfpfcnvrt
  3361 ;;		_fputs
  3362 ;; This function uses a non-reentrant model
  3363 ;;
  3364                           
  3365                           	psect	text12
  3366  001E0E                     __ptext12:
  3367                           	opt callstack 0
  3368  001E0E                     _fputc:
  3369                           	opt callstack 22
  3370                           
  3371                           ;incstack = 0
  3372  001E0E  5012               	movf	fputc@fp,w,c
  3373  001E10  1013               	iorwf	fputc@fp+1,w,c
  3374  001E12  B4D8               	btfsc	status,2,c
  3375  001E14  D004               	goto	u1610
  3376  001E16  5012               	movf	fputc@fp,w,c
  3377  001E18  1013               	iorwf	fputc@fp+1,w,c
  3378  001E1A  A4D8               	btfss	status,2,c
  3379  001E1C  D004               	goto	l2186
  3380  001E1E                     u1610:
  3381  001E1E  5010               	movf	fputc@c,w,c
  3382  001E20  EC8F  F010         	call	_putch
  3383  001E24  0012               	return	
  3384  001E26                     l2186:
  3385  001E26  EE20 F004          	lfsr	2,4
  3386  001E2A  5012               	movf	fputc@fp,w,c
  3387  001E2C  26D9               	addwf	fsr2l,f,c
  3388  001E2E  5013               	movf	fputc@fp+1,w,c
  3389  001E30  22DA               	addwfc	fsr2h,f,c
  3390  001E32  50DE               	movf	postinc2,w,c
  3391  001E34  10DE               	iorwf	postinc2,w,c
  3392  001E36  B4D8               	btfsc	status,2,c
  3393  001E38  D016               	goto	u1630
  3394  001E3A  EE20 F004          	lfsr	2,4
  3395  001E3E  5012               	movf	fputc@fp,w,c
  3396  001E40  26D9               	addwf	fsr2l,f,c
  3397  001E42  5013               	movf	fputc@fp+1,w,c
  3398  001E44  22DA               	addwfc	fsr2h,f,c
  3399  001E46  EE10 F002          	lfsr	1,2
  3400  001E4A  5012               	movf	fputc@fp,w,c
  3401  001E4C  26E1               	addwf	fsr1l,f,c
  3402  001E4E  5013               	movf	fputc@fp+1,w,c
  3403  001E50  22E2               	addwfc	fsr1h,f,c
  3404  001E52  50DE               	movf	postinc2,w,c
  3405  001E54  5CE6               	subwf	postinc1,w,c
  3406  001E56  50E6               	movf	postinc1,w,c
  3407  001E58  0A80               	xorlw	128
  3408  001E5A  6E18               	movwf	(??_fputc+4)& (0+255),c
  3409  001E5C  50DE               	movf	postinc2,w,c
  3410  001E5E  0A80               	xorlw	128
  3411  001E60  5818               	subwfb	(??_fputc+4)& (0+255),w,c
  3412  001E62  B0D8               	btfsc	status,0,c
  3413  001E64  0012               	return	
  3414  001E66                     u1630:
  3415  001E66  EE20 F002          	lfsr	2,2
  3416  001E6A  5012               	movf	fputc@fp,w,c
  3417  001E6C  26D9               	addwf	fsr2l,f,c
  3418  001E6E  5013               	movf	fputc@fp+1,w,c
  3419  001E70  22DA               	addwfc	fsr2h,f,c
  3420  001E72  2ADE               	incf	postinc2,f,c
  3421  001E74  0E00               	movlw	0
  3422  001E76  22DD               	addwfc	postdec2,f,c
  3423  001E78  0012               	return		;funcret
  3424  001E7A                     __end_of_fputc:
  3425                           	opt callstack 0
  3426                           
  3427 ;; *************** function _putch *****************
  3428 ;; Defined at:
  3429 ;;		line 102 in file "lcd.c"
  3430 ;; Parameters:    Size  Location     Type
  3431 ;;  data            1    wreg     unsigned char 
  3432 ;; Auto vars:     Size  Location     Type
  3433 ;;  data            1   14[COMRAM] unsigned char 
  3434 ;; Return value:  Size  Location     Type
  3435 ;;                  1    wreg      void 
  3436 ;; Registers used:
  3437 ;;		wreg, status,2, status,0, cstack
  3438 ;; Tracked objects:
  3439 ;;		On entry : 0/0
  3440 ;;		On exit  : 0/0
  3441 ;;		Unchanged: 0/0
  3442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3444 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3446 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3447 ;;Total ram usage:        1 bytes
  3448 ;; Hardware stack levels used:    1
  3449 ;; Hardware stack levels required when called:    4
  3450 ;; This function calls:
  3451 ;;		_send_byte
  3452 ;; This function is called by:
  3453 ;;		_fputc
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text13
  3458  00211E                     __ptext13:
  3459                           	opt callstack 0
  3460  00211E                     _putch:
  3461                           	opt callstack 22
  3462                           
  3463                           ;incstack = 0
  3464                           ;putch@data stored from wreg
  3465  00211E  6E0F               	movwf	putch@data,c
  3466                           
  3467                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  3468  002120  848C               	bsf	3980,2,c	;volatile
  3469                           
  3470                           ;lcd.c: 104:     send_byte((unsigned char)data);
  3471  002122  500F               	movf	putch@data,w,c
  3472  002124  EC86  F010         	call	_send_byte
  3473  002128  0012               	return		;funcret
  3474  00212A                     __end_of_putch:
  3475                           	opt callstack 0
  3476                           
  3477 ;; *************** function _initLCD *****************
  3478 ;; Defined at:
  3479 ;;		line 69 in file "lcd.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;		None
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;		None
  3484 ;; Return value:  Size  Location     Type
  3485 ;;                  1    wreg      void 
  3486 ;; Registers used:
  3487 ;;		wreg, status,2, status,0, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3495 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;Total ram usage:        1 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    5
  3500 ;; This function calls:
  3501 ;;		_lcdInst
  3502 ;;		_send_byte
  3503 ;;		_send_nibble
  3504 ;; This function is called by:
  3505 ;;		_main
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           	psect	text14
  3510  001E7A                     __ptext14:
  3511                           	opt callstack 0
  3512  001E7A                     _initLCD:
  3513                           	opt callstack 25
  3514                           
  3515                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3516                           
  3517                           ;incstack = 0
  3518  001E7A  0E31               	movlw	49
  3519  001E7C  6E10               	movwf	??_initLCD& (0+255),c
  3520  001E7E  0EB2               	movlw	178
  3521  001E80                     u2397:
  3522  001E80  2EE8               	decfsz	wreg,f,c
  3523  001E82  D7FE               	bra	u2397
  3524  001E84  2E10               	decfsz	??_initLCD& (0+255),f,c
  3525  001E86  D7FC               	bra	u2397
  3526  001E88  D000               	nop2	
  3527                           
  3528                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  3529  001E8A  948C               	bcf	3980,2,c	;volatile
  3530                           
  3531                           ;lcd.c: 74:     send_nibble(0b0011);
  3532  001E8C  0E03               	movlw	3
  3533  001E8E  EC7B  F010         	call	_send_nibble
  3534                           
  3535                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3536  001E92  0E11               	movlw	17
  3537  001E94  6E10               	movwf	??_initLCD& (0+255),c
  3538  001E96  0E3A               	movlw	58
  3539  001E98                     u2407:
  3540  001E98  2EE8               	decfsz	wreg,f,c
  3541  001E9A  D7FE               	bra	u2407
  3542  001E9C  2E10               	decfsz	??_initLCD& (0+255),f,c
  3543  001E9E  D7FC               	bra	u2407
  3544  001EA0  D000               	nop2	
  3545                           
  3546                           ;lcd.c: 76:     send_nibble(0b0011);
  3547  001EA2  0E03               	movlw	3
  3548  001EA4  EC7B  F010         	call	_send_nibble
  3549                           
  3550                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  3551  001EA8  0E7D               	movlw	125
  3552  001EAA                     u2417:
  3553  001EAA  2EE8               	decfsz	wreg,f,c
  3554  001EAC  D7FE               	bra	u2417
  3555                           
  3556                           ;lcd.c: 78:     send_byte(0b00110010);
  3557  001EAE  0E32               	movlw	50
  3558  001EB0  EC86  F010         	call	_send_byte
  3559                           
  3560                           ;lcd.c: 80:     send_byte(0b00101000);
  3561  001EB4  0E28               	movlw	40
  3562  001EB6  EC86  F010         	call	_send_byte
  3563                           
  3564                           ;lcd.c: 81:     send_byte(0b00001000);
  3565  001EBA  0E08               	movlw	8
  3566  001EBC  EC86  F010         	call	_send_byte
  3567                           
  3568                           ;lcd.c: 82:     send_byte(0b00000001);
  3569  001EC0  0E01               	movlw	1
  3570  001EC2  EC86  F010         	call	_send_byte
  3571                           
  3572                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3573  001EC6  0E11               	movlw	17
  3574  001EC8  6E10               	movwf	??_initLCD& (0+255),c
  3575  001ECA  0E3A               	movlw	58
  3576  001ECC                     u2427:
  3577  001ECC  2EE8               	decfsz	wreg,f,c
  3578  001ECE  D7FE               	bra	u2427
  3579  001ED0  2E10               	decfsz	??_initLCD& (0+255),f,c
  3580  001ED2  D7FC               	bra	u2427
  3581  001ED4  D000               	nop2	
  3582                           
  3583                           ;lcd.c: 84:     send_byte(0b00000110);
  3584  001ED6  0E06               	movlw	6
  3585  001ED8  EC86  F010         	call	_send_byte
  3586                           
  3587                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  3588  001EDC  0E0F               	movlw	15
  3589  001EDE  EC95  F010         	call	_lcdInst
  3590  001EE2  0012               	return		;funcret
  3591  001EE4                     __end_of_initLCD:
  3592                           	opt callstack 0
  3593                           
  3594 ;; *************** function _lcdInst *****************
  3595 ;; Defined at:
  3596 ;;		line 64 in file "lcd.c"
  3597 ;; Parameters:    Size  Location     Type
  3598 ;;  data            1    wreg     unsigned char 
  3599 ;; Auto vars:     Size  Location     Type
  3600 ;;  data            1   14[COMRAM] unsigned char 
  3601 ;; Return value:  Size  Location     Type
  3602 ;;                  1    wreg      void 
  3603 ;; Registers used:
  3604 ;;		wreg, status,2, status,0, cstack
  3605 ;; Tracked objects:
  3606 ;;		On entry : 0/0
  3607 ;;		On exit  : 0/0
  3608 ;;		Unchanged: 0/0
  3609 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3611 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3612 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3613 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3614 ;;Total ram usage:        1 bytes
  3615 ;; Hardware stack levels used:    1
  3616 ;; Hardware stack levels required when called:    4
  3617 ;; This function calls:
  3618 ;;		_send_byte
  3619 ;; This function is called by:
  3620 ;;		_initLCD
  3621 ;;		_main
  3622 ;;		_lcd_shift_cursor
  3623 ;;		_lcd_shift_display
  3624 ;; This function uses a non-reentrant model
  3625 ;;
  3626                           
  3627                           	psect	text15
  3628  00212A                     __ptext15:
  3629                           	opt callstack 0
  3630  00212A                     _lcdInst:
  3631                           	opt callstack 26
  3632                           
  3633                           ;incstack = 0
  3634                           ;lcdInst@data stored from wreg
  3635  00212A  6E0F               	movwf	lcdInst@data,c
  3636                           
  3637                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  3638  00212C  948C               	bcf	3980,2,c	;volatile
  3639                           
  3640                           ;lcd.c: 66:     send_byte(data);
  3641  00212E  500F               	movf	lcdInst@data,w,c
  3642  002130  EC86  F010         	call	_send_byte
  3643  002134  0012               	return		;funcret
  3644  002136                     __end_of_lcdInst:
  3645                           	opt callstack 0
  3646                           
  3647 ;; *************** function _send_byte *****************
  3648 ;; Defined at:
  3649 ;;		line 55 in file "lcd.c"
  3650 ;; Parameters:    Size  Location     Type
  3651 ;;  data            1    wreg     unsigned char 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  data            1   13[COMRAM] unsigned char 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      void 
  3656 ;; Registers used:
  3657 ;;		wreg, status,2, status,0, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3664 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3666 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3667 ;;Total ram usage:        1 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    3
  3670 ;; This function calls:
  3671 ;;		_send_nibble
  3672 ;; This function is called by:
  3673 ;;		_lcdInst
  3674 ;;		_initLCD
  3675 ;;		_putch
  3676 ;; This function uses a non-reentrant model
  3677 ;;
  3678                           
  3679                           	psect	text16
  3680  00210C                     __ptext16:
  3681                           	opt callstack 0
  3682  00210C                     _send_byte:
  3683                           	opt callstack 22
  3684                           
  3685                           ;incstack = 0
  3686                           ;send_byte@data stored from wreg
  3687  00210C  6E0E               	movwf	send_byte@data,c
  3688                           
  3689                           ;lcd.c: 57:     send_nibble(data >> 4);
  3690  00210E  380E               	swapf	send_byte@data,w,c
  3691  002110  0B0F               	andlw	15
  3692  002112  EC7B  F010         	call	_send_nibble
  3693                           
  3694                           ;lcd.c: 60:     send_nibble(data);
  3695  002116  500E               	movf	send_byte@data,w,c
  3696  002118  EC7B  F010         	call	_send_nibble
  3697  00211C  0012               	return		;funcret
  3698  00211E                     __end_of_send_byte:
  3699                           	opt callstack 0
  3700                           
  3701 ;; *************** function _send_nibble *****************
  3702 ;; Defined at:
  3703 ;;		line 44 in file "lcd.c"
  3704 ;; Parameters:    Size  Location     Type
  3705 ;;  data            1    wreg     unsigned char 
  3706 ;; Auto vars:     Size  Location     Type
  3707 ;;  data            1   12[COMRAM] unsigned char 
  3708 ;; Return value:  Size  Location     Type
  3709 ;;                  1    wreg      void 
  3710 ;; Registers used:
  3711 ;;		wreg, status,2, status,0, cstack
  3712 ;; Tracked objects:
  3713 ;;		On entry : 0/0
  3714 ;;		On exit  : 0/0
  3715 ;;		Unchanged: 0/0
  3716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3718 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3720 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3721 ;;Total ram usage:        1 bytes
  3722 ;; Hardware stack levels used:    1
  3723 ;; Hardware stack levels required when called:    2
  3724 ;; This function calls:
  3725 ;;		_pulse_e
  3726 ;; This function is called by:
  3727 ;;		_send_byte
  3728 ;;		_initLCD
  3729 ;; This function uses a non-reentrant model
  3730 ;;
  3731                           
  3732                           	psect	text17
  3733  0020F6                     __ptext17:
  3734                           	opt callstack 0
  3735  0020F6                     _send_nibble:
  3736                           	opt callstack 22
  3737                           
  3738                           ;incstack = 0
  3739                           ;send_nibble@data stored from wreg
  3740  0020F6  6E0D               	movwf	send_nibble@data,c
  3741                           
  3742                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  3743  0020F8  508C               	movf	3980,w,c	;volatile
  3744  0020FA  0B0F               	andlw	15
  3745  0020FC  6E8C               	movwf	3980,c	;volatile
  3746                           
  3747                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  3748  0020FE  380D               	swapf	send_nibble@data,w,c
  3749  002100  0BF0               	andlw	240
  3750  002102  108C               	iorwf	3980,w,c	;volatile
  3751  002104  6E8C               	movwf	3980,c	;volatile
  3752                           
  3753                           ;lcd.c: 48:     pulse_e();
  3754  002106  EC52  F010         	call	_pulse_e	;wreg free
  3755  00210A  0012               	return		;funcret
  3756  00210C                     __end_of_send_nibble:
  3757                           	opt callstack 0
  3758                           
  3759 ;; *************** function _pulse_e *****************
  3760 ;; Defined at:
  3761 ;;		line 28 in file "lcd.c"
  3762 ;; Parameters:    Size  Location     Type
  3763 ;;		None
  3764 ;; Auto vars:     Size  Location     Type
  3765 ;;  interruptSta    1   11[COMRAM] unsigned char 
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  1    wreg      void 
  3768 ;; Registers used:
  3769 ;;		wreg
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;Total ram usage:        1 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    1
  3782 ;; This function calls:
  3783 ;;		Nothing
  3784 ;; This function is called by:
  3785 ;;		_send_nibble
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           	psect	text18
  3790  0020A4                     __ptext18:
  3791                           	opt callstack 0
  3792  0020A4                     _pulse_e:
  3793                           	opt callstack 22
  3794                           
  3795                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  3796                           
  3797                           ;incstack = 0
  3798  0020A4  0E00               	movlw	0
  3799  0020A6  BEF2               	btfsc	4082,7,c	;volatile
  3800  0020A8  0E01               	movlw	1
  3801  0020AA  6E0C               	movwf	pulse_e@interruptState,c
  3802                           
  3803                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  3804  0020AC  9EF2               	bcf	4082,7,c	;volatile
  3805                           
  3806                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  3807  0020AE  868C               	bsf	3980,3,c	;volatile
  3808                           
  3809                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  3810  0020B0  0E14               	movlw	20
  3811  0020B2                     u2437:
  3812  0020B2  2EE8               	decfsz	wreg,f,c
  3813  0020B4  D7FE               	bra	u2437
  3814  0020B6  D000               	nop2	
  3815                           
  3816                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  3817  0020B8  968C               	bcf	3980,3,c	;volatile
  3818                           
  3819                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  3820  0020BA  0E53               	movlw	83
  3821  0020BC                     u2447:
  3822  0020BC  2EE8               	decfsz	wreg,f,c
  3823  0020BE  D7FE               	bra	u2447
  3824  0020C0  F000               	nop	
  3825                           
  3826                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  3827  0020C2  B00C               	btfsc	pulse_e@interruptState,0,c
  3828  0020C4  D002               	bra	u1595
  3829  0020C6  9EF2               	bcf	4082,7,c	;volatile
  3830  0020C8  D001               	bra	u1596
  3831  0020CA                     u1595:
  3832  0020CA  8EF2               	bsf	4082,7,c	;volatile
  3833  0020CC                     u1596:
  3834  0020CC  0012               	return		;funcret
  3835  0020CE                     __end_of_pulse_e:
  3836                           	opt callstack 0
  3837                           
  3838 ;; *************** function ___awmod *****************
  3839 ;; Defined at:
  3840 ;;		line 7 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/awmod.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  dividend        2   11[COMRAM] int 
  3843 ;;  divisor         2   13[COMRAM] int 
  3844 ;; Auto vars:     Size  Location     Type
  3845 ;;  sign            1   16[COMRAM] unsigned char 
  3846 ;;  counter         1   15[COMRAM] unsigned char 
  3847 ;; Return value:  Size  Location     Type
  3848 ;;                  2   11[COMRAM] int 
  3849 ;; Registers used:
  3850 ;;		wreg, status,2, status,0
  3851 ;; Tracked objects:
  3852 ;;		On entry : 0/0
  3853 ;;		On exit  : 0/0
  3854 ;;		Unchanged: 0/0
  3855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3856 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3857 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3859 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3860 ;;Total ram usage:        6 bytes
  3861 ;; Hardware stack levels used:    1
  3862 ;; Hardware stack levels required when called:    1
  3863 ;; This function calls:
  3864 ;;		Nothing
  3865 ;; This function is called by:
  3866 ;;		_main
  3867 ;; This function uses a non-reentrant model
  3868 ;;
  3869                           
  3870                           	psect	text19
  3871  001D9E                     __ptext19:
  3872                           	opt callstack 0
  3873  001D9E                     ___awmod:
  3874                           	opt callstack 29
  3875                           
  3876                           ;incstack = 0
  3877  001D9E  0E00               	movlw	0
  3878  001DA0  6E11               	movwf	___awmod@sign,c
  3879  001DA2  AE0D               	btfss	___awmod@dividend+1,7,c
  3880  001DA4  D006               	goto	l1874
  3881  001DA6  6C0C               	negf	___awmod@dividend,c
  3882  001DA8  1E0D               	comf	___awmod@dividend+1,f,c
  3883  001DAA  B0D8               	btfsc	status,0,c
  3884  001DAC  2A0D               	incf	___awmod@dividend+1,f,c
  3885  001DAE  0E01               	movlw	1
  3886  001DB0  6E11               	movwf	___awmod@sign,c
  3887  001DB2                     l1874:
  3888  001DB2  AE0F               	btfss	___awmod@divisor+1,7,c
  3889  001DB4  D004               	goto	l1878
  3890  001DB6  6C0E               	negf	___awmod@divisor,c
  3891  001DB8  1E0F               	comf	___awmod@divisor+1,f,c
  3892  001DBA  B0D8               	btfsc	status,0,c
  3893  001DBC  2A0F               	incf	___awmod@divisor+1,f,c
  3894  001DBE                     l1878:
  3895  001DBE  500E               	movf	___awmod@divisor,w,c
  3896  001DC0  100F               	iorwf	___awmod@divisor+1,w,c
  3897  001DC2  B4D8               	btfsc	status,2,c
  3898  001DC4  D018               	goto	l1894
  3899  001DC6  0E01               	movlw	1
  3900  001DC8  6E10               	movwf	___awmod@counter,c
  3901  001DCA  D004               	goto	l1884
  3902  001DCC                     l1882:
  3903  001DCC  90D8               	bcf	status,0,c
  3904  001DCE  360E               	rlcf	___awmod@divisor,f,c
  3905  001DD0  360F               	rlcf	___awmod@divisor+1,f,c
  3906  001DD2  2A10               	incf	___awmod@counter,f,c
  3907  001DD4                     l1884:
  3908  001DD4  AE0F               	btfss	___awmod@divisor+1,7,c
  3909  001DD6  D7FA               	goto	l1882
  3910  001DD8                     u1300:
  3911  001DD8  500E               	movf	___awmod@divisor,w,c
  3912  001DDA  5C0C               	subwf	___awmod@dividend,w,c
  3913  001DDC  500F               	movf	___awmod@divisor+1,w,c
  3914  001DDE  580D               	subwfb	___awmod@dividend+1,w,c
  3915  001DE0  A0D8               	btfss	status,0,c
  3916  001DE2  D004               	goto	l1890
  3917  001DE4  500E               	movf	___awmod@divisor,w,c
  3918  001DE6  5E0C               	subwf	___awmod@dividend,f,c
  3919  001DE8  500F               	movf	___awmod@divisor+1,w,c
  3920  001DEA  5A0D               	subwfb	___awmod@dividend+1,f,c
  3921  001DEC                     l1890:
  3922  001DEC  90D8               	bcf	status,0,c
  3923  001DEE  320F               	rrcf	___awmod@divisor+1,f,c
  3924  001DF0  320E               	rrcf	___awmod@divisor,f,c
  3925  001DF2  2E10               	decfsz	___awmod@counter,f,c
  3926  001DF4  D7F1               	goto	u1300
  3927  001DF6                     l1894:
  3928  001DF6  5011               	movf	___awmod@sign,w,c
  3929  001DF8  B4D8               	btfsc	status,2,c
  3930  001DFA  D004               	goto	l1898
  3931  001DFC  6C0C               	negf	___awmod@dividend,c
  3932  001DFE  1E0D               	comf	___awmod@dividend+1,f,c
  3933  001E00  B0D8               	btfsc	status,0,c
  3934  001E02  2A0D               	incf	___awmod@dividend+1,f,c
  3935  001E04                     l1898:
  3936  001E04  C00C  F00C         	movff	___awmod@dividend,?___awmod
  3937  001E08  C00D  F00D         	movff	___awmod@dividend+1,?___awmod+1
  3938  001E0C  0012               	return		;funcret
  3939  001E0E                     __end_of___awmod:
  3940                           	opt callstack 0
  3941                           
  3942 ;; *************** function _interruptHandler *****************
  3943 ;; Defined at:
  3944 ;;		line 202 in file "main.c"
  3945 ;; Parameters:    Size  Location     Type
  3946 ;;		None
  3947 ;; Auto vars:     Size  Location     Type
  3948 ;;  i               2    8[COMRAM] int 
  3949 ;;  keypress        1   10[COMRAM] unsigned char 
  3950 ;; Return value:  Size  Location     Type
  3951 ;;                  1    wreg      void 
  3952 ;; Registers used:
  3953 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3954 ;; Tracked objects:
  3955 ;;		On entry : 0/0
  3956 ;;		On exit  : 0/0
  3957 ;;		Unchanged: 0/0
  3958 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3959 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3961 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3962 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3963 ;;Total ram usage:       11 bytes
  3964 ;; Hardware stack levels used:    1
  3965 ;; This function calls:
  3966 ;;		Nothing
  3967 ;; This function is called by:
  3968 ;;		Interrupt level 2
  3969 ;; This function uses a non-reentrant model
  3970 ;;
  3971                           
  3972                           	psect	intcode
  3973  000008                     __pintcode:
  3974                           	opt callstack 0
  3975  000008                     _interruptHandler:
  3976                           	opt callstack 19
  3977                           
  3978                           ;incstack = 0
  3979  000008  8274               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3980  00000A  ED2E  F00E         	call	int_func,f	;refresh shadow registers
  3981                           
  3982                           	psect	intcode_body
  3983  001C5C                     __pintcode_body:
  3984                           	opt callstack 19
  3985  001C5C                     int_func:
  3986                           	opt callstack 19
  3987  001C5C  0006               	pop		; remove dummy address from shadow register refresh
  3988  001C5E  CFF6 F005          	movff	tblptrl,??_interruptHandler+4
  3989  001C62  CFF7 F006          	movff	tblptrh,??_interruptHandler+5
  3990  001C66  CFF8 F007          	movff	tblptru,??_interruptHandler+6
  3991  001C6A  CFF5 F008          	movff	tablat,??_interruptHandler+7
  3992                           
  3993                           ;main.c: 204:     if(INT1IF){
  3994  001C6E  A0F0               	btfss	4080,0,c	;volatile
  3995  001C70  D041               	goto	i2u158_40
  3996                           
  3997                           ;main.c: 208:         INT1IF = 0;
  3998  001C72  90F0               	bcf	4080,0,c	;volatile
  3999                           
  4000                           ;main.c: 210:         unsigned char keypress = (PORTB & 0xF0) >> 4;
  4001  001C74  3881               	swapf	3969,w,c	;volatile
  4002  001C76  0B0F               	andlw	15
  4003  001C78  0B0F               	andlw	15
  4004  001C7A  6E0B               	movwf	interruptHandler@keypress,c
  4005                           
  4006                           ;main.c: 212:         if (keys[keypress] == '*') {
  4007  001C7C  0E01               	movlw	low _keys
  4008  001C7E  240B               	addwf	interruptHandler@keypress,w,c
  4009  001C80  6EF6               	movwf	tblptrl,c
  4010  001C82  6AF7               	clrf	tblptrh,c
  4011  001C84  0E10               	movlw	high _keys
  4012  001C86  22F7               	addwfc	tblptrh,f,c
  4013  001C88                     	if	0	;There are less than 3 active tblptr bytes
  4014  001C88                     	endif
  4015  001C88  0008               	tblrd		*
  4016  001C8A  50F5               	movf	tablat,w,c
  4017  001C8C  0A2A               	xorlw	42
  4018  001C8E  A4D8               	btfss	status,2,c
  4019  001C90  D004               	goto	i2l2148
  4020                           
  4021                           ;main.c: 214:             exit_key = 1;
  4022  001C92  0E01               	movlw	1
  4023  001C94  0100               	movlb	0	; () banked
  4024  001C96  6FC2               	movwf	_exit_key& (0+255),b	;volatile
  4025  001C98  D02D               	goto	i2u158_40
  4026  001C9A                     i2l2148:
  4027                           
  4028                           ;main.c: 218:         for ( int i = 0; i < Canister; i++ ) {
  4029  001C9A  0E00               	movlw	0
  4030  001C9C  6E0A               	movwf	interruptHandler@i+1,c
  4031  001C9E  0E00               	movlw	0
  4032  001CA0  6E09               	movwf	interruptHandler@i,c
  4033  001CA2  D01D               	goto	i2l2158
  4034  001CA4                     i2l2150:
  4035                           
  4036                           ; BSR set to: 0
  4037                           ;main.c: 220:             if ((char)i + '0' == keys[keypress]) {
  4038  001CA4  0E01               	movlw	low _keys
  4039  001CA6  240B               	addwf	interruptHandler@keypress,w,c
  4040  001CA8  6EF6               	movwf	tblptrl,c
  4041  001CAA  6AF7               	clrf	tblptrh,c
  4042  001CAC  0E10               	movlw	high _keys
  4043  001CAE  22F7               	addwfc	tblptrh,f,c
  4044  001CB0                     	if	0	;There are less than 3 active tblptr bytes
  4045  001CB0                     	endif
  4046  001CB0  0008               	tblrd		*
  4047  001CB2  50F5               	movf	tablat,w,c
  4048  001CB4  6E01               	movwf	??_interruptHandler& (0+255),c
  4049  001CB6  6A02               	clrf	(??_interruptHandler+1)& (0+255),c
  4050  001CB8  5009               	movf	interruptHandler@i,w,c
  4051  001CBA  6E03               	movwf	(??_interruptHandler+2)& (0+255),c
  4052  001CBC  6A04               	clrf	(??_interruptHandler+3)& (0+255),c
  4053  001CBE  0E30               	movlw	48
  4054  001CC0  2603               	addwf	??_interruptHandler+2,f,c
  4055  001CC2  0E00               	movlw	0
  4056  001CC4  2204               	addwfc	??_interruptHandler+3,f,c
  4057  001CC6  5001               	movf	??_interruptHandler,w,c
  4058  001CC8  1803               	xorwf	??_interruptHandler+2,w,c
  4059  001CCA  E107               	bnz	i2l2156
  4060  001CCC  5002               	movf	??_interruptHandler+1,w,c
  4061  001CCE  1804               	xorwf	??_interruptHandler+3,w,c
  4062  001CD0  A4D8               	btfss	status,2,c
  4063  001CD2  D003               	goto	i2l2156
  4064                           
  4065                           ; BSR set to: 0
  4066                           ;main.c: 221:                 key_was_pressed = 1;
  4067  001CD4  0E01               	movlw	1
  4068  001CD6  6FC3               	movwf	_key_was_pressed& (0+255),b	;volatile
  4069  001CD8  D00D               	goto	i2u158_40
  4070  001CDA                     i2l2156:
  4071                           
  4072                           ; BSR set to: 0
  4073                           ;main.c: 225:         }
  4074  001CDA  4A09               	infsnz	interruptHandler@i,f,c
  4075  001CDC  2A0A               	incf	interruptHandler@i+1,f,c
  4076  001CDE                     i2l2158:
  4077  001CDE  0100               	movlb	0	; () banked
  4078  001CE0  51BE               	movf	_Canister& (0+255),w,b
  4079  001CE2  5C09               	subwf	interruptHandler@i,w,c
  4080  001CE4  500A               	movf	interruptHandler@i+1,w,c
  4081  001CE6  0A80               	xorlw	128
  4082  001CE8  6E01               	movwf	??_interruptHandler& (0+255),c
  4083  001CEA  51BF               	movf	(_Canister+1)& (0+255),w,b
  4084  001CEC  0A80               	xorlw	128
  4085  001CEE  5801               	subwfb	??_interruptHandler& (0+255),w,c
  4086  001CF0  A0D8               	btfss	status,0,c
  4087  001CF2  D7D8               	goto	i2l2150
  4088  001CF4                     i2u158_40:
  4089  001CF4  C008  FFF5         	movff	??_interruptHandler+7,tablat
  4090  001CF8  C007  FFF8         	movff	??_interruptHandler+6,tblptru
  4091  001CFC  C006  FFF7         	movff	??_interruptHandler+5,tblptrh
  4092  001D00  C005  FFF6         	movff	??_interruptHandler+4,tblptrl
  4093  001D04  9274               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4094  001D06  0011               	retfie		f
  4095  001D08                     __end_of_interruptHandler:
  4096                           	opt callstack 0
  4097                           
  4098                           	psect	rparam
  4099  0000                     
  4100                           	psect	temp
  4101  000074                     btemp:
  4102                           	opt callstack 0
  4103  000074                     	ds	1
  4104  0000                     int$flags	set	btemp
  4105  0000                     wtemp8	set	btemp+1
  4106  0000                     ttemp5	set	btemp+1
  4107  0000                     ttemp6	set	btemp+4
  4108  0000                     ttemp7	set	btemp+8
  4109                           tosu	equ	0xFFF
  4110                           tosh	equ	0xFFE
  4111                           tosl	equ	0xFFD
  4112                           stkptr	equ	0xFFC
  4113                           pclatu	equ	0xFFB
  4114                           pclath	equ	0xFFA
  4115                           pcl	equ	0xFF9
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           prodh	equ	0xFF4
  4121                           prodl	equ	0xFF3
  4122                           indf0	equ	0xFEF
  4123                           postinc0	equ	0xFEE
  4124                           postdec0	equ	0xFED
  4125                           preinc0	equ	0xFEC
  4126                           plusw0	equ	0xFEB
  4127                           fsr0h	equ	0xFEA
  4128                           fsr0l	equ	0xFE9
  4129                           wreg	equ	0xFE8
  4130                           indf1	equ	0xFE7
  4131                           postinc1	equ	0xFE6
  4132                           postdec1	equ	0xFE5
  4133                           preinc1	equ	0xFE4
  4134                           plusw1	equ	0xFE3
  4135                           fsr1h	equ	0xFE2
  4136                           fsr1l	equ	0xFE1
  4137                           bsr	equ	0xFE0
  4138                           indf2	equ	0xFDF
  4139                           postinc2	equ	0xFDE
  4140                           postdec2	equ	0xFDD
  4141                           preinc2	equ	0xFDC
  4142                           plusw2	equ	0xFDB
  4143                           fsr2h	equ	0xFDA
  4144                           fsr2l	equ	0xFD9
  4145                           status	equ	0xFD8


Data Sizes:
    Strings     223
    Constant    23
    Data        66
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    107     115
    BANK0           128     21     121
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[10]), STR_21(CODE[14]), STR_20(CODE[11]), STR_19(CODE[12]), 
		 -> STR_18(CODE[10]), STR_17(CODE[15]), STR_16(CODE[14]), STR_15(CODE[12]), 
		 -> STR_14(CODE[10]), STR_13(CODE[15]), STR_12(CODE[12]), STR_11(CODE[15]), 
		 -> STR_10(CODE[12]), STR_9(CODE[16]), STR_8(CODE[9]), STR_7(CODE[9]), 
		 -> STR_6(CODE[11]), STR_5(CODE[13]), STR_4(CODE[15]), STR_3(CODE[11]), 
		 -> STR_2(CODE[15]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S781_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[10]), STR_21(CODE[14]), STR_20(CODE[11]), STR_19(CODE[12]), 
		 -> STR_18(CODE[10]), STR_17(CODE[15]), STR_16(CODE[14]), STR_15(CODE[12]), 
		 -> STR_14(CODE[10]), STR_13(CODE[15]), STR_12(CODE[12]), STR_11(CODE[15]), 
		 -> STR_10(CODE[12]), STR_9(CODE[16]), STR_8(CODE[9]), STR_7(CODE[9]), 
		 -> STR_6(CODE[11]), STR_5(CODE[13]), STR_4(CODE[15]), STR_3(CODE[11]), 
		 -> STR_2(CODE[15]), STR_1(CODE[17]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 17
		 -> STR_22(CODE[10]), STR_21(CODE[14]), STR_20(CODE[11]), STR_19(CODE[12]), 
		 -> STR_18(CODE[10]), STR_17(CODE[15]), STR_16(CODE[14]), STR_15(CODE[12]), 
		 -> STR_14(CODE[10]), STR_13(CODE[15]), STR_12(CODE[12]), STR_11(CODE[15]), 
		 -> STR_10(CODE[12]), STR_9(CODE[16]), STR_8(CODE[9]), STR_7(CODE[9]), 
		 -> STR_6(CODE[11]), STR_5(CODE[13]), STR_4(CODE[15]), STR_3(CODE[11]), 
		 -> STR_2(CODE[15]), STR_1(CODE[17]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                17    17      0   16532
                                              4 BANK0     17    17      0
                            ___awmod
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4   14726
                                            103 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   12659
                                             95 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6   12177
                                             78 COMRAM    17    11      6
                               _ctoa
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    6083
                                             42 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             29 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                             11 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                             11 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     4      3    4096
                                             42 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3817
                                             31 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1602
                                             24 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1102
                                             15 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     350
                                             15 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _send_byte                                            1     1      0     127
                                             13 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (7) _send_nibble                                          1     1      0      65
                                             12 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (8) _pulse_e                                              1     1      0      34
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     448
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _interruptHandler                                   11    11      0      91
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     15      79       5       94.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6B      73       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      EC      34        0.0%
DATA                 0      0      EC       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Feb  1 17:54:13 2019

              __CFG_CPD$ON 000000                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l159 1D36                        l177 163A  
                      l179 1642                        l890 2070               __CFG_CPB$OFF 000000  
                      _abs 2048                        _pad 1D08               ___awmod@sign 0011  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     ?_abs 001E                       l2200 2030                       l2204 2084  
                     l2220 1D2E                       l2300 1BB6                       l2206 2088  
                     l2230 1D84                       l2222 1D40                       l2310 1C14  
                     l2216 1D20                       l2226 1D58                       l2322 1F48  
                     l2314 1C3A                       l2306 1BFE                       l2410 18AC  
                     l2324 1F54                       l2260 1A7E                       l2252 1A44  
                     l2420 195E                       l2270 1ADA                       l2246 1A1C  
                     l2430 19A4                       l2352 165C                       l2186 1E26  
                     l2258 1A6A                       l2274 1AF0                       l2290 1B64  
                     l2338 161E                       l2426 199A                       l2196 201A  
                     l2356 166C                       l2436 19BC                       l2452 1EF6  
                     l2604 1300                       l2278 1B16                       l2294 1B88  
                     l2390 17E0                       l2366 1764                       l2454 1F1A  
                     l2702 1586                       l2712 15B0                       l2616 1346  
                     l2528 1164                       l2298 1BA2                       l2386 17C8  
                     l2546 11C4                       l2652 1454                       l2660 147C  
                     l2636 13DA                       l2564 1222                       l2654 1460  
                     l2584 128E                       l1890 1DEC                       l1882 1DCC  
                     l1874 1DB2                       l1884 1DD4                       l2676 14F8  
                     l2684 1520                       l1894 1DF6                       l1878 1DBE  
                     l2694 1560                       l2678 1504                       ?_pad 0020  
                     l1898 1E04                       l2698 1576                       STR_1 1018  
                     STR_2 1048                       STR_3 10C5                       STR_4 1066  
                     STR_5 10A0                       STR_6 10D0                       STR_7 10E5  
                     STR_8 10EE                       STR_9 1029                       u1300 1DD8  
                     u2030 18E0                       _LATD 000F8C                       u1610 1E1E  
                     u2307 1184                       u1700 2056                       u2317 11E2  
                     u1630 1E66                       u2407 1E98                       u2327 1242  
                     u2417 1EAA                       u2337 12AE                       u1810 1BBA  
                     u2427 1ECC                       u1731 1A4A                       u2347 1364  
                     u2437 20B2                       u2357 13F8                       u1750 1A82  
                     u1910 1656                       u2447 20BC                       u2367 149C  
                     u2287 113E                       u1920 1772                       u2377 156C  
                     u2297 115A                       u1850 15F0                       u1595 20CA  
                     u2387 15BC                       u1596 20CC                       u1940 1794  
                     u1860 15F2                       u2397 1E80                       u1941 1792  
                     u1950 17A2                       u1960 17A6                       u1890 1630  
                     u1980 17B2                       abs@a 001E                       _dbuf 00C4  
                     _ctoa 1F36                       _main 10F8                       _dtoa 15C8  
 __end_of_interruptHandler 1D08                       _keys 1001                       _prec 0070  
                     _time 00C0                       _nout 006C                       pad@i 0027  
                     pad@p 0024                       fsr1h 000FE2                       fsr2h 000FDA  
                     indf2 000FDF                       fsr1l 000FE1                       pad@w 0029  
                     fsr2l 000FD9                       btemp 0074                       start 000E  
            __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000               ___param_bank 000000  
                    ??_abs 0020                      ??_pad 0026            __end_of___aodiv 1B38  
                    ?_ctoa 002B                      ?_main 0001                      ?_dtoa 002B  
          __end_of___aomod 1C5C                      STR_10 10B9                      STR_11 1039  
                    STR_20 1087                      STR_12 10AD                      STR_21 1084  
                    STR_13 1057                      STR_22 10DB                      STR_14 10DB  
                    STR_15 10AD                      STR_16 1092                      STR_17 1075  
                    STR_18 10DB                      STR_19 10AD            __end_of___awmod 1E0E  
             vfpfcnvrt@fmt 0051                      _PORTB 000F81                      _TRISD 000F95  
            __CFG_PWRT$OFF 000000               main@miniTick 00EC              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 2136             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000               main@keypress 00F2  
           __CFG_EBTR3$OFF 000000                      _State 00A8              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000                      _balls 00BC  
          __end_of_initLCD 1EE4             __CFG_EBTRB$OFF 000000                      _flags 0072  
            _BallDispensed 0080                      _fputc 1E0E                      _fputs 2010  
                    pad@fp 0020                      _width 006E                      ctoa@c 002D  
                    _putch 211E                      ctoa@w 002E                      dtoa@d 002D  
                    dtoa@i 004D                      dtoa@n 0045                      dtoa@p 003F  
                    dtoa@s 0043                      dtoa@w 0041                      tablat 000FF5  
          send_nibble@data 000D            __end_of_pulse_e 20CE                      ttemp5 0075  
                    ttemp6 0078                      ttemp7 007C                      status 000FD8  
                    wtemp8 0075             __CFG_PBADEN$ON 000000         main@number_pressed 00EE  
          __initialization 1F84               __end_of_ctoa 1F84               __end_of_main 15C8  
             __end_of_dtoa 180A               __end_of_keys 1012                     ??_ctoa 002E  
                   ??_main 00E8                     ??_dtoa 0035              __activetblptr 000001  
                   _ADCON1 000FC1               ?_send_nibble 0001                     ?_fputc 0010  
                   ?_fputs 0019                     ?_putch 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     i2l2150 1CA4                     i2l2156 1CDA  
                   i2l2148 1C9A                     i2l2158 1CDE              main@miniClear 00F0  
            main@miniState 00F3             __CFG_XINST$OFF 000000               vfprintf@cfmt 0066  
                ??___aodiv 001C                  ??___aomod 001C             __CFG_STVREN$ON 000000  
                ??___awmod 0010                     clear_0 1FAA                     clear_1 1FB6  
          ___awmod@divisor 000E            ___awmod@counter 0010                  ??_lcdInst 000F  
                   _printf 20CE                     pad@buf 0022                     ctoa@fp 002B  
                   dtoa@fp 002B                     _strlen 207A                  ??_initLCD 0010  
                   fputc@c 0010                     fputs@c 001D                     fputs@i 001E  
                   fputs@s 0019               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8           __end_of_vfprintf 1F36  
                ??_pulse_e 000C      pulse_e@interruptState 000C                 __accesstop 0080  
  __end_of__initialization 1FBC              ___rparam_used 000001             __pcstackCOMRAM 0001  
             __pidataBANK0 1FCE              __end_of_fputc 1E7A              __end_of_fputs 2048  
            __end_of_putch 212A            _key_was_pressed 00C3                    ??_fputc 0014  
                  ??_fputs 001D                    ??_putch 000F                 __pbssBANK0 00C2  
        ?_interruptHandler 0001         ??_interruptHandler 0001         __size_of_send_byte 0012  
                  ?_printf 0068                    ?_strlen 000C         __size_of_vfpfcnvrt 01E6  
     __size_of_send_nibble 0016           _DistanceCanister 0094                    __Hparam 0000  
                  __Lparam 0000                    ___aodiv 19F0                    ___aomod 1B38  
                  ___awmod 1D9E                  ?_vfprintf 0060               __psmallconst 1000  
 interruptHandler@keypress 000B                    __pcinit 1F84                    __ramtop 1000  
                  _lcdInst 212A                    __ptext0 10F8                    __ptext1 20CE  
                  __ptext2 1EE4                    __ptext3 180A                    __ptext4 15C8  
                  __ptext5 2048                    __ptext6 1B38                    __ptext7 19F0  
                  __ptext8 1F36                    __ptext9 1D08            __size_of_printf 0028  
          __size_of_strlen 002A                    _initLCD 1E7A               __size_of_abs 0032  
             __size_of_pad 0096           ___awmod@dividend 000C                    _pulse_e 20A4  
           __pintcode_body 1C5C       end_of_initialization 1FBC      __end_of_LCD_SIZE_HORZ 1018  
        __end_of_send_byte 211E      __end_of_LCD_SIZE_VERT 1017                    fputc@fp 0012  
                  int_func 1C5C                    fputs@fp 001B          __end_of_vfpfcnvrt 19F0  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                 ??_vfprintf 0066  
                  strlen@a 000E                    strlen@s 000C              send_byte@data 000E  
              vfpfcnvrt@ap 0053                vfpfcnvrt@fp 004F                vfpfcnvrt@ll 0057  
           __end_of_printf 20F6             __end_of_strlen 20A4        start_initialization 1F84  
              __end_of_abs 207A                __end_of_pad 1D9E          interruptHandler@i 0009  
              vfprintf@fmt 0062                __pdataBANK0 0080           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 006C  __size_of_interruptHandler 1D00                   ??_strlen 000E  
              __pbssCOMRAM 006C              __pcstackBANK0 00E4           ___aodiv@dividend 000C  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008                   ?___aodiv 000C  
                 ?___aomod 000C           ___aodiv@quotient 001E                   ?___awmod 000C  
                 ?_lcdInst 0001          __size_of_vfprintf 0052                   ?_initLCD 0001  
              __smallconst 1000              ??_send_nibble 000D                   ?_pulse_e 0001  
           __size_of_fputc 006C             __size_of_fputs 0038             __size_of_putch 000C  
                 _LATDbits 000F8C                  _send_byte 210C             _LCD_LINE1_ADDR 1015  
           _LCD_LINE2_ADDR 1014             _LCD_LINE3_ADDR 1013             _LCD_LINE4_ADDR 1012  
                 i2u158_40 1CF4           __CFG_WDTPS$32768 000000                  _vfpfcnvrt 180A  
                main@clear 00F5                   _Canister 00BE                  main@state 00F7  
               vfpfcnvrt@c 005F                  copy_data0 1F98     __end_of_LCD_LINE1_ADDR 1016  
   __end_of_LCD_LINE2_ADDR 1015     __end_of_LCD_LINE3_ADDR 1014     __end_of_LCD_LINE4_ADDR 1013  
      __end_of_send_nibble 210C                 ?_send_byte 0001                   __Hrparam 0000  
               vfprintf@ap 0064                   __Lrparam 0000                 vfprintf@fp 0060  
             __Lsmallconst 1000         __CFG_BOREN$SBORDIS 000000           __size_of___aodiv 0148  
         __size_of___aomod 0124           __size_of___awmod 0070                 ?_vfpfcnvrt 004F  
          ___aodiv@divisor 0014           _interruptHandler 0008            ___aodiv@counter 001C  
         __size_of_lcdInst 000C           __size_of_initLCD 006A                   _dtoa$320 003D  
                 __ptext10 207A                   __ptext11 2010                   __ptext12 1E0E  
                 __ptext13 211E                   __ptext14 1E7A                   __ptext15 212A  
                 __ptext16 210C                   __ptext17 20F6                   __ptext18 20A4  
                 __ptext19 1D9E           __size_of_pulse_e 002A              __size_of_ctoa 004E  
            __size_of_main 04D0              __size_of_dtoa 0242                   _exit_key 00C2  
                 int$flags 0074                   _vfprintf 1EE4                  printf@fmt 0068  
                 main@tick 00EA           ___aomod@dividend 000C                  putch@data 000F  
               _INTCONbits 000FF2                _send_nibble 20F6                   intlevel2 0000  
            _LCD_SIZE_HORZ 1017              _LCD_SIZE_VERT 1016                ??_send_byte 000E  
                 printf@ap 00E6            ___aomod@divisor 0014                ??_vfpfcnvrt 0055  
              lcdInst@data 000F            ___aomod@counter 001C               ___aodiv@sign 001D  
             ___aomod@sign 001D  
