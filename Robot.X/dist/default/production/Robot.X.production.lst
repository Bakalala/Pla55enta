

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Feb  1 17:11:42 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataBANK0
    75  001FF0                     __pidataBANK0:
    76                           	opt callstack 0
    77                           
    78                           ;initializer for _BallDispensed
    79  001FF0  FFFF               	dw	65535
    80  001FF2  FFFF               	dw	65535
    81  001FF4  FFFF               	dw	65535
    82  001FF6  FFFF               	dw	65535
    83  001FF8  FFFF               	dw	65535
    84  001FFA  FFFF               	dw	65535
    85  001FFC  FFFF               	dw	65535
    86  001FFE  FFFF               	dw	65535
    87  002000  FFFF               	dw	65535
    88  002002  FFFF               	dw	65535
    89                           
    90                           ;initializer for _DistanceCanister
    91  002004  FFFF               	dw	65535
    92  002006  FFFF               	dw	65535
    93  002008  FFFF               	dw	65535
    94  00200A  FFFF               	dw	65535
    95  00200C  FFFF               	dw	65535
    96  00200E  FFFF               	dw	65535
    97  002010  FFFF               	dw	65535
    98  002012  FFFF               	dw	65535
    99  002014  FFFF               	dw	65535
   100  002016  FFFF               	dw	65535
   101                           
   102                           ;initializer for _State
   103  002018  FFFF               	dw	65535
   104  00201A  FFFF               	dw	65535
   105  00201C  FFFF               	dw	65535
   106  00201E  FFFF               	dw	65535
   107  002020  FFFF               	dw	65535
   108  002022  FFFF               	dw	65535
   109  002024  FFFF               	dw	65535
   110  002026  FFFF               	dw	65535
   111  002028  FFFF               	dw	65535
   112  00202A  FFFF               	dw	65535
   113                           
   114                           ;initializer for _balls
   115  00202C  0005               	dw	5
   116                           
   117                           ;initializer for _Canister
   118  00202E  0007               	dw	7
   119                           
   120                           ;initializer for _time
   121  002030  001E               	dw	30
   122                           
   123                           	psect	smallconst
   124  001000                     __psmallconst:
   125                           	opt callstack 0
   126  001000  00                 	db	0
   127  001001                     _keys:
   128                           	opt callstack 0
   129  001001  31                 	db	49
   130  001002  32                 	db	50
   131  001003  33                 	db	51
   132  001004  41                 	db	65
   133  001005  34                 	db	52
   134  001006  35                 	db	53
   135  001007  36                 	db	54
   136  001008  42                 	db	66
   137  001009  37                 	db	55
   138  00100A  38                 	db	56
   139  00100B  39                 	db	57
   140  00100C  43                 	db	67
   141  00100D  2A                 	db	42
   142  00100E  30                 	db	48
   143  00100F  23                 	db	35
   144  001010  44                 	db	68
   145  001011  00                 	db	0
   146  001012                     __end_of_keys:
   147                           	opt callstack 0
   148  001012  50                 	db	80
   149  001013                     __end_of_LCD_LINE4_ADDR:
   150                           	opt callstack 0
   151  001013  10                 	db	16
   152  001014                     __end_of_LCD_LINE3_ADDR:
   153                           	opt callstack 0
   154  001014  40                 	db	64
   155  001015                     __end_of_LCD_LINE2_ADDR:
   156                           	opt callstack 0
   157  001015  00                 	db	0
   158  001016                     __end_of_LCD_LINE1_ADDR:
   159                           	opt callstack 0
   160  001016                     _LCD_SIZE_VERT:
   161                           	opt callstack 0
   162  001016  04                 	db	4
   163  001017                     __end_of_LCD_SIZE_VERT:
   164                           	opt callstack 0
   165  001017                     _LCD_SIZE_HORZ:
   166                           	opt callstack 0
   167  001017  10                 	db	16
   168  001018                     __end_of_LCD_SIZE_HORZ:
   169                           	opt callstack 0
   170  0000                     _PORTB	set	3969
   171  0000                     _ADCON1	set	4033
   172  0000                     _TRISD	set	3989
   173  0000                     _LATD	set	3980
   174  0000                     _LATDbits	set	3980
   175  0000                     _INTCONbits	set	4082
   176  0000                     _INT1IF	set	32640
   177  0000                     _INT1IE	set	32643
   178  001018                     STR_1:
   179  001018  49                 	db	73	;'I'
   180  001019  74                 	db	116	;'t'
   181  00101A  27                 	db	39
   182  00101B  73                 	db	115	;'s'
   183  00101C  20                 	db	32
   184  00101D  79                 	db	121	;'y'
   185  00101E  61                 	db	97	;'a'
   186  00101F  20                 	db	32
   187  001020  62                 	db	98	;'b'
   188  001021  6F                 	db	111	;'o'
   189  001022  79                 	db	121	;'y'
   190  001023  20                 	db	32
   191  001024  41                 	db	65	;'A'
   192  001025  6C                 	db	108	;'l'
   193  001026  69                 	db	105	;'i'
   194  001027  21                 	db	33
   195  001028  00                 	db	0
   196  001029                     STR_9:
   197  001029  49                 	db	73	;'I'
   198  00102A  6E                 	db	110	;'n'
   199  00102B  64                 	db	100	;'d'
   200  00102C  69                 	db	105	;'i'
   201  00102D  76                 	db	118	;'v'
   202  00102E  69                 	db	105	;'i'
   203  00102F  64                 	db	100	;'d'
   204  001030  75                 	db	117	;'u'
   205  001031  61                 	db	97	;'a'
   206  001032  6C                 	db	108	;'l'
   207  001033  20                 	db	32
   208  001034  49                 	db	73	;'I'
   209  001035  6E                 	db	110	;'n'
   210  001036  66                 	db	102	;'f'
   211  001037  6F                 	db	111	;'o'
   212  001038  00                 	db	0
   213  001039                     STR_11:
   214  001039  50                 	db	80	;'P'
   215  00103A  72                 	db	114	;'r'
   216  00103B  65                 	db	101	;'e'
   217  00103C  73                 	db	115	;'s'
   218  00103D  73                 	db	115	;'s'
   219  00103E  20                 	db	32
   220  00103F  30                 	db	48	;'0'
   221  001040  20                 	db	32
   222  001041  74                 	db	116	;'t'
   223  001042  6F                 	db	111	;'o'
   224  001043  20                 	db	32
   225  001044  25                 	db	37
   226  001045  64                 	db	100	;'d'
   227  001046  20                 	db	32
   228  001047  00                 	db	0
   229  001048                     STR_2:
   230  001048  4F                 	db	79	;'O'
   231  001049  70                 	db	112	;'p'
   232  00104A  65                 	db	101	;'e'
   233  00104B  72                 	db	114	;'r'
   234  00104C  61                 	db	97	;'a'
   235  00104D  74                 	db	116	;'t'
   236  00104E  69                 	db	105	;'i'
   237  00104F  6F                 	db	111	;'o'
   238  001050  6E                 	db	110	;'n'
   239  001051  20                 	db	32
   240  001052  54                 	db	84	;'T'
   241  001053  69                 	db	105	;'i'
   242  001054  6D                 	db	109	;'m'
   243  001055  65                 	db	101	;'e'
   244  001056  00                 	db	0
   245  001057                     STR_13:
   246  001057  44                 	db	68	;'D'
   247  001058  69                 	db	105	;'i'
   248  001059  73                 	db	115	;'s'
   249  00105A  74                 	db	116	;'t'
   250  00105B  61                 	db	97	;'a'
   251  00105C  6E                 	db	110	;'n'
   252  00105D  63                 	db	99	;'c'
   253  00105E  65                 	db	101	;'e'
   254  00105F  20                 	db	32
   255  001060  25                 	db	37
   256  001061  64                 	db	100	;'d'
   257  001062  20                 	db	32
   258  001063  63                 	db	99	;'c'
   259  001064  6D                 	db	109	;'m'
   260  001065  00                 	db	0
   261  001066                     STR_4:
   262  001066  23                 	db	35
   263  001067  20                 	db	32
   264  001068  6F                 	db	111	;'o'
   265  001069  66                 	db	102	;'f'
   266  00106A  20                 	db	32
   267  00106B  43                 	db	67	;'C'
   268  00106C  61                 	db	97	;'a'
   269  00106D  6E                 	db	110	;'n'
   270  00106E  69                 	db	105	;'i'
   271  00106F  73                 	db	115	;'s'
   272  001070  74                 	db	116	;'t'
   273  001071  65                 	db	101	;'e'
   274  001072  72                 	db	114	;'r'
   275  001073  73                 	db	115	;'s'
   276  001074  00                 	db	0
   277  001075                     STR_16:
   278  001075  43                 	db	67	;'C'
   279  001076  61                 	db	97	;'a'
   280  001077  6E                 	db	110	;'n'
   281  001078  69                 	db	105	;'i'
   282  001079  73                 	db	115	;'s'
   283  00107A  74                 	db	116	;'t'
   284  00107B  65                 	db	101	;'e'
   285  00107C  72                 	db	114	;'r'
   286  00107D  20                 	db	32
   287  00107E  45                 	db	69	;'E'
   288  00107F  6D                 	db	109	;'m'
   289  001080  70                 	db	112	;'p'
   290  001081  74                 	db	116	;'t'
   291  001082  79                 	db	121	;'y'
   292  001083  00                 	db	0
   293  001084                     STR_19:
   294  001084  4E                 	db	78	;'N'
   295  001085  6F                 	db	111	;'o'
   296  001086  20                 	db	32
   297  001087  42                 	db	66	;'B'
   298  001088  61                 	db	97	;'a'
   299  001089  6C                 	db	108	;'l'
   300  00108A  6C                 	db	108	;'l'
   301  00108B  20                 	db	32
   302  00108C  41                 	db	65	;'A'
   303  00108D  64                 	db	100	;'d'
   304  00108E  64                 	db	100	;'d'
   305  00108F  65                 	db	101	;'e'
   306  001090  64                 	db	100	;'d'
   307  001091  00                 	db	0
   308  001092                     STR_15:
   309  001092  43                 	db	67	;'C'
   310  001093  61                 	db	97	;'a'
   311  001094  6E                 	db	110	;'n'
   312  001095  69                 	db	105	;'i'
   313  001096  73                 	db	115	;'s'
   314  001097  74                 	db	116	;'t'
   315  001098  65                 	db	101	;'e'
   316  001099  72                 	db	114	;'r'
   317  00109A  20                 	db	32
   318  00109B  46                 	db	70	;'F'
   319  00109C  75                 	db	117	;'u'
   320  00109D  6C                 	db	108	;'l'
   321  00109E  6C                 	db	108	;'l'
   322  00109F  00                 	db	0
   323  0010A0                     STR_5:
   324  0010A0  25                 	db	37
   325  0010A1  64                 	db	100	;'d'
   326  0010A2  20                 	db	32
   327  0010A3  43                 	db	67	;'C'
   328  0010A4  61                 	db	97	;'a'
   329  0010A5  6E                 	db	110	;'n'
   330  0010A6  69                 	db	105	;'i'
   331  0010A7  73                 	db	115	;'s'
   332  0010A8  74                 	db	116	;'t'
   333  0010A9  65                 	db	101	;'e'
   334  0010AA  72                 	db	114	;'r'
   335  0010AB  73                 	db	115	;'s'
   336  0010AC  00                 	db	0
   337  0010AD                     STR_12:
   338  0010AD  43                 	db	67	;'C'
   339  0010AE  61                 	db	97	;'a'
   340  0010AF  6E                 	db	110	;'n'
   341  0010B0  73                 	db	115	;'s'
   342  0010B1  69                 	db	105	;'i'
   343  0010B2  74                 	db	116	;'t'
   344  0010B3  65                 	db	101	;'e'
   345  0010B4  72                 	db	114	;'r'
   346  0010B5  20                 	db	32
   347  0010B6  25                 	db	37
   348  0010B7  63                 	db	99	;'c'
   349  0010B8  00                 	db	0
   350  0010B9                     STR_10:
   351  0010B9  6F                 	db	111	;'o'
   352  0010BA  66                 	db	102	;'f'
   353  0010BB  20                 	db	32
   354  0010BC  43                 	db	67	;'C'
   355  0010BD  61                 	db	97	;'a'
   356  0010BE  6E                 	db	110	;'n'
   357  0010BF  69                 	db	105	;'i'
   358  0010C0  73                 	db	115	;'s'
   359  0010C1  74                 	db	116	;'t'
   360  0010C2  65                 	db	101	;'e'
   361  0010C3  72                 	db	114	;'r'
   362  0010C4  00                 	db	0
   363  0010C5                     STR_3:
   364  0010C5  25                 	db	37
   365  0010C6  64                 	db	100	;'d'
   366  0010C7  20                 	db	32
   367  0010C8  73                 	db	115	;'s'
   368  0010C9  65                 	db	101	;'e'
   369  0010CA  63                 	db	99	;'c'
   370  0010CB  6F                 	db	111	;'o'
   371  0010CC  6E                 	db	110	;'n'
   372  0010CD  64                 	db	100	;'d'
   373  0010CE  73                 	db	115	;'s'
   374  0010CF  00                 	db	0
   375  0010D0                     STR_6:
   376  0010D0  23                 	db	35
   377  0010D1  20                 	db	32
   378  0010D2  6F                 	db	111	;'o'
   379  0010D3  66                 	db	102	;'f'
   380  0010D4  20                 	db	32
   381  0010D5  42                 	db	66	;'B'
   382  0010D6  61                 	db	97	;'a'
   383  0010D7  6C                 	db	108	;'l'
   384  0010D8  6C                 	db	108	;'l'
   385  0010D9  73                 	db	115	;'s'
   386  0010DA  00                 	db	0
   387  0010DB                     STR_7:
   388  0010DB  73                 	db	115	;'s'
   389  0010DC  75                 	db	117	;'u'
   390  0010DD  70                 	db	112	;'p'
   391  0010DE  70                 	db	112	;'p'
   392  0010DF  6C                 	db	108	;'l'
   393  0010E0  69                 	db	105	;'i'
   394  0010E1  65                 	db	101	;'e'
   395  0010E2  64                 	db	100	;'d'
   396  0010E3  00                 	db	0
   397  0010E4                     STR_8:
   398  0010E4  25                 	db	37
   399  0010E5  64                 	db	100	;'d'
   400  0010E6  20                 	db	32
   401  0010E7  62                 	db	98	;'b'
   402  0010E8  61                 	db	97	;'a'
   403  0010E9  6C                 	db	108	;'l'
   404  0010EA  6C                 	db	108	;'l'
   405  0010EB  73                 	db	115	;'s'
   406  0010EC  00                 	db	0
   407  0000                     
   408                           ; #config settings
   409  0010ED  00                 	db	0	; dummy byte at the end
   410  0000                     
   411                           	psect	cinit
   412  001FA6                     __pcinit:
   413                           	opt callstack 0
   414  001FA6                     start_initialization:
   415                           	opt callstack 0
   416  001FA6                     __initialization:
   417                           	opt callstack 0
   418                           
   419                           ; Initialize objects allocated to BANK0 (66 bytes)
   420                           ; load TBLPTR registers with __pidataBANK0
   421  001FA6  0EF0               	movlw	low __pidataBANK0
   422  001FA8  6EF6               	movwf	tblptrl,c
   423  001FAA  0E1F               	movlw	high __pidataBANK0
   424  001FAC  6EF7               	movwf	tblptrh,c
   425  001FAE  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   426  001FB0  6EF8               	movwf	tblptru,c
   427  001FB2  EE00  F080         	lfsr	0,__pdataBANK0
   428  001FB6  EE10 F042          	lfsr	1,66
   429  001FBA                     copy_data0:
   430  001FBA  0009               	tblrd		*+
   431  001FBC  CFF5 FFEE          	movff	tablat,postinc0
   432  001FC0  50E5               	movf	postdec1,w,c
   433  001FC2  50E1               	movf	fsr1l,w,c
   434  001FC4  E1FA               	bnz	copy_data0
   435                           
   436                           ; Clear objects allocated to BANK0 (34 bytes)
   437  001FC6  EE00  F0C2         	lfsr	0,__pbssBANK0
   438  001FCA  0E22               	movlw	34
   439  001FCC                     clear_0:
   440  001FCC  6AEE               	clrf	postinc0,c
   441  001FCE  06E8               	decf	wreg,f,c
   442  001FD0  E1FD               	bnz	clear_0
   443                           
   444                           ; Clear objects allocated to COMRAM (8 bytes)
   445  001FD2  EE00  F06C         	lfsr	0,__pbssCOMRAM
   446  001FD6  0E08               	movlw	8
   447  001FD8                     clear_1:
   448  001FD8  6AEE               	clrf	postinc0,c
   449  001FDA  06E8               	decf	wreg,f,c
   450  001FDC  E1FD               	bnz	clear_1
   451  001FDE                     end_of_initialization:
   452                           	opt callstack 0
   453  001FDE                     __end_of__initialization:
   454                           	opt callstack 0
   455  001FDE  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   456  001FE0  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   457  001FE2  0E00               	movlw	low (__Lsmallconst shr (0+16))
   458  001FE4  6EF8               	movwf	tblptru,c
   459  001FE6  0E10               	movlw	high __Lsmallconst
   460  001FE8  6EF7               	movwf	tblptrh,c
   461  001FEA  0100               	movlb	0
   462  001FEC  EF77  F008         	goto	_main	;jump to C main() function
   463                           
   464                           	psect	bssCOMRAM
   465  00006C                     __pbssCOMRAM:
   466                           	opt callstack 0
   467  00006C                     _nout:
   468                           	opt callstack 0
   469  00006C                     	ds	2
   470  00006E                     _width:
   471                           	opt callstack 0
   472  00006E                     	ds	2
   473  000070                     _prec:
   474                           	opt callstack 0
   475  000070                     	ds	2
   476  000072                     _flags:
   477                           	opt callstack 0
   478  000072                     	ds	2
   479                           
   480                           	psect	bssBANK0
   481  0000C2                     __pbssBANK0:
   482                           	opt callstack 0
   483  0000C2                     _exit_key:
   484                           	opt callstack 0
   485  0000C2                     	ds	1
   486  0000C3                     _key_was_pressed:
   487                           	opt callstack 0
   488  0000C3                     	ds	1
   489  0000C4                     _dbuf:
   490                           	opt callstack 0
   491  0000C4                     	ds	32
   492                           
   493                           	psect	dataBANK0
   494  000080                     __pdataBANK0:
   495                           	opt callstack 0
   496  000080                     _BallDispensed:
   497                           	opt callstack 0
   498  000080                     	ds	20
   499  000094                     _DistanceCanister:
   500                           	opt callstack 0
   501  000094                     	ds	20
   502  0000A8                     _State:
   503                           	opt callstack 0
   504  0000A8                     	ds	20
   505  0000BC                     _balls:
   506                           	opt callstack 0
   507  0000BC                     	ds	2
   508  0000BE                     _Canister:
   509                           	opt callstack 0
   510  0000BE                     	ds	2
   511  0000C0                     _time:
   512                           	opt callstack 0
   513  0000C0                     	ds	2
   514                           
   515                           	psect	cstackBANK0
   516  0000E4                     __pcstackBANK0:
   517                           	opt callstack 0
   518  0000E4                     	ds	2
   519  0000E6                     printf@ap:
   520                           	opt callstack 0
   521                           
   522                           ; 2 bytes @ 0x2
   523  0000E6                     	ds	2
   524  0000E8                     ??_main:
   525                           
   526                           ; 1 bytes @ 0x4
   527  0000E8                     	ds	8
   528  0000F0                     main@tick:
   529                           	opt callstack 0
   530                           
   531                           ; 2 bytes @ 0xC
   532  0000F0                     	ds	2
   533  0000F2                     main@miniTick:
   534                           	opt callstack 0
   535                           
   536                           ; 2 bytes @ 0xE
   537  0000F2                     	ds	2
   538  0000F4                     main@miniClear:
   539                           	opt callstack 0
   540                           
   541                           ; 2 bytes @ 0x10
   542  0000F4                     	ds	2
   543  0000F6                     main@miniState:
   544                           	opt callstack 0
   545                           
   546                           ; 2 bytes @ 0x12
   547  0000F6                     	ds	2
   548  0000F8                     main@clear:
   549                           	opt callstack 0
   550                           
   551                           ; 2 bytes @ 0x14
   552  0000F8                     	ds	2
   553  0000FA                     main@state:
   554                           	opt callstack 0
   555                           
   556                           ; 2 bytes @ 0x16
   557  0000FA                     	ds	2
   558  0000FC                     main@keypress:
   559                           	opt callstack 0
   560                           
   561                           ; 1 bytes @ 0x18
   562  0000FC                     	ds	1
   563                           
   564                           	psect	cstackCOMRAM
   565  000001                     __pcstackCOMRAM:
   566                           	opt callstack 0
   567  000001                     ??_interruptHandler:
   568                           
   569                           ; 1 bytes @ 0x0
   570  000001                     	ds	8
   571  000009                     interruptHandler@i:
   572                           	opt callstack 0
   573                           
   574                           ; 2 bytes @ 0x8
   575  000009                     	ds	2
   576  00000B                     interruptHandler@keypress:
   577                           	opt callstack 0
   578                           
   579                           ; 1 bytes @ 0xA
   580  00000B                     	ds	1
   581  00000C                     ?_strlen:
   582                           	opt callstack 0
   583  00000C                     ?___awmod:
   584                           	opt callstack 0
   585  00000C                     ?___aodiv:
   586                           	opt callstack 0
   587  00000C                     ?___aomod:
   588                           	opt callstack 0
   589  00000C                     pulse_e@interruptState:
   590                           	opt callstack 0
   591  00000C                     ___awmod@dividend:
   592                           	opt callstack 0
   593  00000C                     strlen@s:
   594                           	opt callstack 0
   595  00000C                     ___aodiv@dividend:
   596                           	opt callstack 0
   597  00000C                     ___aomod@dividend:
   598                           	opt callstack 0
   599                           
   600                           ; 8 bytes @ 0xB
   601  00000C                     	ds	1
   602  00000D                     send_nibble@data:
   603                           	opt callstack 0
   604                           
   605                           ; 1 bytes @ 0xC
   606  00000D                     	ds	1
   607  00000E                     send_byte@data:
   608                           	opt callstack 0
   609  00000E                     ___awmod@divisor:
   610                           	opt callstack 0
   611  00000E                     strlen@a:
   612                           	opt callstack 0
   613                           
   614                           ; 2 bytes @ 0xD
   615  00000E                     	ds	1
   616  00000F                     lcdInst@data:
   617                           	opt callstack 0
   618  00000F                     putch@data:
   619                           	opt callstack 0
   620                           
   621                           ; 1 bytes @ 0xE
   622  00000F                     	ds	1
   623  000010                     ??_initLCD:
   624  000010                     ___awmod@counter:
   625                           	opt callstack 0
   626  000010                     fputc@c:
   627                           	opt callstack 0
   628                           
   629                           ; 2 bytes @ 0xF
   630  000010                     	ds	1
   631  000011                     ___awmod@sign:
   632                           	opt callstack 0
   633                           
   634                           ; 1 bytes @ 0x10
   635  000011                     	ds	1
   636  000012                     fputc@fp:
   637                           	opt callstack 0
   638                           
   639                           ; 2 bytes @ 0x11
   640  000012                     	ds	2
   641  000014                     ??_fputc:
   642  000014                     ___aodiv@divisor:
   643                           	opt callstack 0
   644  000014                     ___aomod@divisor:
   645                           	opt callstack 0
   646                           
   647                           ; 8 bytes @ 0x13
   648  000014                     	ds	5
   649  000019                     fputs@s:
   650                           	opt callstack 0
   651                           
   652                           ; 2 bytes @ 0x18
   653  000019                     	ds	2
   654  00001B                     fputs@fp:
   655                           	opt callstack 0
   656                           
   657                           ; 2 bytes @ 0x1A
   658  00001B                     	ds	1
   659  00001C                     ___aodiv@counter:
   660                           	opt callstack 0
   661  00001C                     ___aomod@counter:
   662                           	opt callstack 0
   663                           
   664                           ; 1 bytes @ 0x1B
   665  00001C                     	ds	1
   666  00001D                     ___aodiv@sign:
   667                           	opt callstack 0
   668  00001D                     ___aomod@sign:
   669                           	opt callstack 0
   670  00001D                     fputs@c:
   671                           	opt callstack 0
   672                           
   673                           ; 1 bytes @ 0x1C
   674  00001D                     	ds	1
   675  00001E                     ?_abs:
   676                           	opt callstack 0
   677  00001E                     abs@a:
   678                           	opt callstack 0
   679  00001E                     fputs@i:
   680                           	opt callstack 0
   681  00001E                     ___aodiv@quotient:
   682                           	opt callstack 0
   683                           
   684                           ; 8 bytes @ 0x1D
   685  00001E                     	ds	2
   686  000020                     ??_abs:
   687  000020                     ?_pad:
   688                           	opt callstack 0
   689  000020                     pad@fp:
   690                           	opt callstack 0
   691                           
   692                           ; 2 bytes @ 0x1F
   693  000020                     	ds	2
   694  000022                     pad@buf:
   695                           	opt callstack 0
   696                           
   697                           ; 2 bytes @ 0x21
   698  000022                     	ds	2
   699  000024                     pad@p:
   700                           	opt callstack 0
   701                           
   702                           ; 2 bytes @ 0x23
   703  000024                     	ds	2
   704  000026                     ??_pad:
   705                           
   706                           ; 1 bytes @ 0x25
   707  000026                     	ds	1
   708  000027                     pad@i:
   709                           	opt callstack 0
   710                           
   711                           ; 2 bytes @ 0x26
   712  000027                     	ds	2
   713  000029                     pad@w:
   714                           	opt callstack 0
   715                           
   716                           ; 2 bytes @ 0x28
   717  000029                     	ds	2
   718  00002B                     ?_ctoa:
   719                           	opt callstack 0
   720  00002B                     ?_dtoa:
   721                           	opt callstack 0
   722  00002B                     ctoa@fp:
   723                           	opt callstack 0
   724  00002B                     dtoa@fp:
   725                           	opt callstack 0
   726                           
   727                           ; 2 bytes @ 0x2A
   728  00002B                     	ds	2
   729  00002D                     ctoa@c:
   730                           	opt callstack 0
   731  00002D                     dtoa@d:
   732                           	opt callstack 0
   733                           
   734                           ; 8 bytes @ 0x2C
   735  00002D                     	ds	1
   736  00002E                     ctoa@w:
   737                           	opt callstack 0
   738                           
   739                           ; 2 bytes @ 0x2D
   740  00002E                     	ds	7
   741  000035                     ??_dtoa:
   742                           
   743                           ; 1 bytes @ 0x34
   744  000035                     	ds	8
   745  00003D                     _dtoa$316:
   746                           	opt callstack 0
   747                           
   748                           ; 2 bytes @ 0x3C
   749  00003D                     	ds	2
   750  00003F                     dtoa@p:
   751                           	opt callstack 0
   752                           
   753                           ; 2 bytes @ 0x3E
   754  00003F                     	ds	2
   755  000041                     dtoa@w:
   756                           	opt callstack 0
   757                           
   758                           ; 2 bytes @ 0x40
   759  000041                     	ds	2
   760  000043                     dtoa@s:
   761                           	opt callstack 0
   762                           
   763                           ; 2 bytes @ 0x42
   764  000043                     	ds	2
   765  000045                     dtoa@n:
   766                           	opt callstack 0
   767                           
   768                           ; 8 bytes @ 0x44
   769  000045                     	ds	8
   770  00004D                     dtoa@i:
   771                           	opt callstack 0
   772                           
   773                           ; 2 bytes @ 0x4C
   774  00004D                     	ds	2
   775  00004F                     ?_vfpfcnvrt:
   776                           	opt callstack 0
   777  00004F                     vfpfcnvrt@fp:
   778                           	opt callstack 0
   779                           
   780                           ; 2 bytes @ 0x4E
   781  00004F                     	ds	2
   782  000051                     vfpfcnvrt@fmt:
   783                           	opt callstack 0
   784                           
   785                           ; 2 bytes @ 0x50
   786  000051                     	ds	2
   787  000053                     vfpfcnvrt@ap:
   788                           	opt callstack 0
   789                           
   790                           ; 2 bytes @ 0x52
   791  000053                     	ds	2
   792  000055                     ??_vfpfcnvrt:
   793                           
   794                           ; 1 bytes @ 0x54
   795  000055                     	ds	2
   796  000057                     vfpfcnvrt@ll:
   797                           	opt callstack 0
   798                           
   799                           ; 8 bytes @ 0x56
   800  000057                     	ds	8
   801  00005F                     vfpfcnvrt@c:
   802                           	opt callstack 0
   803                           
   804                           ; 1 bytes @ 0x5E
   805  00005F                     	ds	1
   806  000060                     ?_vfprintf:
   807                           	opt callstack 0
   808  000060                     vfprintf@fp:
   809                           	opt callstack 0
   810                           
   811                           ; 2 bytes @ 0x5F
   812  000060                     	ds	2
   813  000062                     vfprintf@fmt:
   814                           	opt callstack 0
   815                           
   816                           ; 2 bytes @ 0x61
   817  000062                     	ds	2
   818  000064                     vfprintf@ap:
   819                           	opt callstack 0
   820                           
   821                           ; 2 bytes @ 0x63
   822  000064                     	ds	2
   823  000066                     vfprintf@cfmt:
   824                           	opt callstack 0
   825                           
   826                           ; 2 bytes @ 0x65
   827  000066                     	ds	2
   828  000068                     ?_printf:
   829                           	opt callstack 0
   830  000068                     printf@fmt:
   831                           	opt callstack 0
   832                           
   833                           ; 2 bytes @ 0x67
   834  000068                     	ds	4
   835  00006C                     
   836                           ; 1 bytes @ 0x6B
   837 ;;
   838 ;;Main: autosize = 0, tempsize = 8, incstack = 0, save=0
   839 ;;
   840 ;; *************** function _main *****************
   841 ;; Defined at:
   842 ;;		line 36 in file "main.c"
   843 ;; Parameters:    Size  Location     Type
   844 ;;		None
   845 ;; Auto vars:     Size  Location     Type
   846 ;;  miniState       2   18[BANK0 ] int 
   847 ;;  miniClear       2   16[BANK0 ] int 
   848 ;;  miniTick        2   14[BANK0 ] int 
   849 ;;  keypress        1   24[BANK0 ] unsigned char 
   850 ;;  state           2   22[BANK0 ] int 
   851 ;;  clear           2   20[BANK0 ] int 
   852 ;;  tick            2   12[BANK0 ] int 
   853 ;; Return value:  Size  Location     Type
   854 ;;                  1    wreg      void 
   855 ;; Registers used:
   856 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   857 ;; Tracked objects:
   858 ;;		On entry : 0/0
   859 ;;		On exit  : 0/0
   860 ;;		Unchanged: 0/0
   861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   863 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   864 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   865 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   866 ;;Total ram usage:       21 bytes
   867 ;; Hardware stack levels required when called:   12
   868 ;; This function calls:
   869 ;;		___awmod
   870 ;;		_initLCD
   871 ;;		_lcdInst
   872 ;;		_printf
   873 ;; This function is called by:
   874 ;;		Startup code after reset
   875 ;; This function uses a non-reentrant model
   876 ;;
   877                           
   878                           	psect	text0
   879  0010EE                     __ptext0:
   880                           	opt callstack 0
   881  0010EE                     _main:
   882                           	opt callstack 19
   883                           
   884                           ;main.c: 40:     LATD = 0x00;
   885                           
   886                           ;incstack = 0
   887  0010EE  0E00               	movlw	0
   888  0010F0  6E8C               	movwf	3980,c	;volatile
   889                           
   890                           ;main.c: 41:     TRISD = 0x00;
   891  0010F2  0E00               	movlw	0
   892  0010F4  6E95               	movwf	3989,c	;volatile
   893                           
   894                           ;main.c: 44:     ADCON1 = 0b00001111;
   895  0010F6  0E0F               	movlw	15
   896  0010F8  6EC1               	movwf	4033,c	;volatile
   897                           
   898                           ;main.c: 47:     INT1IE = 1;
   899  0010FA  86F0               	bsf	4080,3,c	;volatile
   900                           
   901                           ;main.c: 50:     initLCD();
   902  0010FC  EC4E  F00F         	call	_initLCD	;wreg free
   903                           
   904                           ;main.c: 53:     (INTCONbits.GIE = 1);
   905  001100  8EF2               	bsf	4082,7,c	;volatile
   906                           
   907                           ;main.c: 56:     int state = 0;
   908  001102  0E00               	movlw	0
   909  001104  0100               	movlb	0	; () banked
   910  001106  6FFB               	movwf	(main@state+1)& (0+255),b
   911  001108  0E00               	movlw	0
   912  00110A  6FFA               	movwf	main@state& (0+255),b
   913                           
   914                           ; BSR set to: 0
   915                           ;main.c: 57:     int tick = 0;
   916  00110C  0E00               	movlw	0
   917  00110E  6FF1               	movwf	(main@tick+1)& (0+255),b
   918  001110  0E00               	movlw	0
   919  001112  6FF0               	movwf	main@tick& (0+255),b
   920                           
   921                           ; BSR set to: 0
   922                           ;main.c: 58:     int clear = 1;
   923  001114  0E00               	movlw	0
   924  001116  6FF9               	movwf	(main@clear+1)& (0+255),b
   925  001118  0E01               	movlw	1
   926  00111A  6FF8               	movwf	main@clear& (0+255),b
   927                           
   928                           ; BSR set to: 0
   929                           ;main.c: 62:     printf("It's ya boy Ali!");
   930  00111C  0E18               	movlw	low STR_1
   931  00111E  6E68               	movwf	printf@fmt,c
   932  001120  0E10               	movlw	high STR_1
   933  001122  6E69               	movwf	printf@fmt+1,c
   934  001124  EC78  F010         	call	_printf	;wreg free
   935                           
   936                           ;main.c: 63:     _delay((unsigned long)((2000)*(10000000/4000.0)));
   937  001128  0E1A               	movlw	26
   938  00112A  0100               	movlb	0	; () banked
   939  00112C  6FE9               	movwf	(??_main+1)& (0+255),b
   940  00112E  0E5E               	movlw	94
   941  001130  6FE8               	movwf	??_main& (0+255),b
   942  001132  0E6E               	movlw	110
   943  001134                     u2407:
   944  001134  2EE8               	decfsz	wreg,f,c
   945  001136  D7FE               	bra	u2407
   946  001138  2FE8               	decfsz	??_main& (0+255),f,b
   947  00113A  D7FC               	bra	u2407
   948  00113C  2FE9               	decfsz	(??_main+1)& (0+255),f,b
   949  00113E  D7FA               	bra	u2407
   950  001140  F000               	nop	
   951                           
   952                           ;main.c: 64:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   953  001142  0E01               	movlw	1
   954  001144  ECA6  F010         	call	_lcdInst
   955  001148  0E11               	movlw	17
   956  00114A  0100               	movlb	0	; () banked
   957  00114C  6FE8               	movwf	??_main& (0+255),b
   958  00114E  0E3A               	movlw	58
   959  001150                     u2417:
   960  001150  2EE8               	decfsz	wreg,f,c
   961  001152  D7FE               	bra	u2417
   962  001154  2FE8               	decfsz	??_main& (0+255),f,b
   963  001156  D7FC               	bra	u2417
   964  001158  F000               	nop	
   965  00115A                     l2500:
   966                           
   967                           ;main.c: 71:         if (state == 0 & clear == 1) {
   968  00115A  0100               	movlb	0	; () banked
   969  00115C  51FA               	movf	main@state& (0+255),w,b
   970  00115E  11FB               	iorwf	(main@state+1)& (0+255),w,b
   971  001160  A4D8               	btfss	status,2,c
   972  001162  D02B               	goto	l2518
   973                           
   974                           ; BSR set to: 0
   975  001164  05F8               	decf	main@clear& (0+255),w,b
   976  001166  11F9               	iorwf	(main@clear+1)& (0+255),w,b
   977  001168  A4D8               	btfss	status,2,c
   978  00116A  D027               	goto	l2518
   979                           
   980                           ; BSR set to: 0
   981                           ;main.c: 72:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   982  00116C  0E01               	movlw	1
   983  00116E  ECA6  F010         	call	_lcdInst
   984  001172  0E11               	movlw	17
   985  001174  0100               	movlb	0	; () banked
   986  001176  6FE8               	movwf	??_main& (0+255),b
   987  001178  0E3A               	movlw	58
   988  00117A                     u2427:
   989  00117A  2EE8               	decfsz	wreg,f,c
   990  00117C  D7FE               	bra	u2427
   991  00117E  2FE8               	decfsz	??_main& (0+255),f,b
   992  001180  D7FC               	bra	u2427
   993  001182  F000               	nop	
   994                           
   995                           ;main.c: 73:         { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
   996  001184  0E0C               	movlw	12
   997  001186  ECA6  F010         	call	_lcdInst
   998                           
   999                           ;main.c: 74:         printf("Operation Time");
  1000  00118A  0E48               	movlw	low STR_2
  1001  00118C  6E68               	movwf	printf@fmt,c
  1002  00118E  0E10               	movlw	high STR_2
  1003  001190  6E69               	movwf	printf@fmt+1,c
  1004  001192  EC78  F010         	call	_printf	;wreg free
  1005  001196  0E90               	movlw	144
  1006  001198  ECA6  F010         	call	_lcdInst
  1007                           
  1008                           ;main.c: 76:         printf("%d seconds", time);
  1009  00119C  0EC5               	movlw	low STR_3
  1010  00119E  6E68               	movwf	printf@fmt,c
  1011  0011A0  0E10               	movlw	high STR_3
  1012  0011A2  6E69               	movwf	printf@fmt+1,c
  1013  0011A4  0E00               	movlw	0
  1014  0011A6  6E6B               	movwf	?_printf+3,c
  1015  0011A8  0E1E               	movlw	30
  1016  0011AA  6E6A               	movwf	?_printf+2,c
  1017  0011AC  EC78  F010         	call	_printf	;wreg free
  1018                           
  1019                           ;main.c: 77:         clear = 0;
  1020  0011B0  0E00               	movlw	0
  1021  0011B2  0100               	movlb	0	; () banked
  1022  0011B4  6FF9               	movwf	(main@clear+1)& (0+255),b
  1023  0011B6  0E00               	movlw	0
  1024  0011B8  6FF8               	movwf	main@clear& (0+255),b
  1025  0011BA                     l2518:
  1026                           
  1027                           ; BSR set to: 0
  1028                           ;main.c: 81:         if (state == 1 & clear == 1) {
  1029  0011BA  05FA               	decf	main@state& (0+255),w,b
  1030  0011BC  11FB               	iorwf	(main@state+1)& (0+255),w,b
  1031  0011BE  A4D8               	btfss	status,2,c
  1032  0011C0  D02B               	goto	l2536
  1033                           
  1034                           ; BSR set to: 0
  1035  0011C2  05F8               	decf	main@clear& (0+255),w,b
  1036  0011C4  11F9               	iorwf	(main@clear+1)& (0+255),w,b
  1037  0011C6  A4D8               	btfss	status,2,c
  1038  0011C8  D027               	goto	l2536
  1039                           
  1040                           ; BSR set to: 0
  1041                           ;main.c: 83:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)))
      +                          ;};
  1042  0011CA  0E01               	movlw	1
  1043  0011CC  ECA6  F010         	call	_lcdInst
  1044  0011D0  0E11               	movlw	17
  1045  0011D2  0100               	movlb	0	; () banked
  1046  0011D4  6FE8               	movwf	??_main& (0+255),b
  1047  0011D6  0E3A               	movlw	58
  1048  0011D8                     u2437:
  1049  0011D8  2EE8               	decfsz	wreg,f,c
  1050  0011DA  D7FE               	bra	u2437
  1051  0011DC  2FE8               	decfsz	??_main& (0+255),f,b
  1052  0011DE  D7FC               	bra	u2437
  1053  0011E0  F000               	nop	
  1054                           
  1055                           ;main.c: 84:             { lcdInst(0x80 | LCD_LINE1_ADDR);};
  1056  0011E2  0E80               	movlw	128
  1057  0011E4  ECA6  F010         	call	_lcdInst
  1058                           
  1059                           ;main.c: 85:             printf("# of Canisters");
  1060  0011E8  0E66               	movlw	low STR_4
  1061  0011EA  6E68               	movwf	printf@fmt,c
  1062  0011EC  0E10               	movlw	high STR_4
  1063  0011EE  6E69               	movwf	printf@fmt+1,c
  1064  0011F0  EC78  F010         	call	_printf	;wreg free
  1065  0011F4  0E90               	movlw	144
  1066  0011F6  ECA6  F010         	call	_lcdInst
  1067                           
  1068                           ;main.c: 87:             printf("%d Canisters", Canister);
  1069  0011FA  0EA0               	movlw	low STR_5
  1070  0011FC  6E68               	movwf	printf@fmt,c
  1071  0011FE  0E10               	movlw	high STR_5
  1072  001200  6E69               	movwf	printf@fmt+1,c
  1073  001202  C0BE  F06A         	movff	_Canister,?_printf+2
  1074  001206  C0BF  F06B         	movff	_Canister+1,?_printf+3
  1075  00120A  EC78  F010         	call	_printf	;wreg free
  1076                           
  1077                           ;main.c: 88:             clear = 0;
  1078  00120E  0E00               	movlw	0
  1079  001210  0100               	movlb	0	; () banked
  1080  001212  6FF9               	movwf	(main@clear+1)& (0+255),b
  1081  001214  0E00               	movlw	0
  1082  001216  6FF8               	movwf	main@clear& (0+255),b
  1083  001218                     l2536:
  1084                           
  1085                           ; BSR set to: 0
  1086                           ;main.c: 92:         if (state == 2 & clear == 1) {
  1087  001218  0E02               	movlw	2
  1088  00121A  19FA               	xorwf	main@state& (0+255),w,b
  1089  00121C  11FB               	iorwf	(main@state+1)& (0+255),w,b
  1090  00121E  A4D8               	btfss	status,2,c
  1091  001220  D031               	goto	l2556
  1092                           
  1093                           ; BSR set to: 0
  1094  001222  05F8               	decf	main@clear& (0+255),w,b
  1095  001224  11F9               	iorwf	(main@clear+1)& (0+255),w,b
  1096  001226  A4D8               	btfss	status,2,c
  1097  001228  D02D               	goto	l2556
  1098                           
  1099                           ; BSR set to: 0
  1100                           ;main.c: 94:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)))
      +                          ;};
  1101  00122A  0E01               	movlw	1
  1102  00122C  ECA6  F010         	call	_lcdInst
  1103  001230  0E11               	movlw	17
  1104  001232  0100               	movlb	0	; () banked
  1105  001234  6FE8               	movwf	??_main& (0+255),b
  1106  001236  0E3A               	movlw	58
  1107  001238                     u2447:
  1108  001238  2EE8               	decfsz	wreg,f,c
  1109  00123A  D7FE               	bra	u2447
  1110  00123C  2FE8               	decfsz	??_main& (0+255),f,b
  1111  00123E  D7FC               	bra	u2447
  1112  001240  F000               	nop	
  1113                           
  1114                           ;main.c: 95:             printf("# of Balls");
  1115  001242  0ED0               	movlw	low STR_6
  1116  001244  6E68               	movwf	printf@fmt,c
  1117  001246  0E10               	movlw	high STR_6
  1118  001248  6E69               	movwf	printf@fmt+1,c
  1119  00124A  EC78  F010         	call	_printf	;wreg free
  1120  00124E  0EC0               	movlw	192
  1121  001250  ECA6  F010         	call	_lcdInst
  1122                           
  1123                           ;main.c: 97:             printf("supplied");
  1124  001254  0EDB               	movlw	low STR_7
  1125  001256  6E68               	movwf	printf@fmt,c
  1126  001258  0E10               	movlw	high STR_7
  1127  00125A  6E69               	movwf	printf@fmt+1,c
  1128  00125C  EC78  F010         	call	_printf	;wreg free
  1129  001260  0ED0               	movlw	208
  1130  001262  ECA6  F010         	call	_lcdInst
  1131                           
  1132                           ;main.c: 99:             printf("%d balls", balls);
  1133  001266  0EE4               	movlw	low STR_8
  1134  001268  6E68               	movwf	printf@fmt,c
  1135  00126A  0E10               	movlw	high STR_8
  1136  00126C  6E69               	movwf	printf@fmt+1,c
  1137  00126E  0E00               	movlw	0
  1138  001270  6E6B               	movwf	?_printf+3,c
  1139  001272  0E05               	movlw	5
  1140  001274  6E6A               	movwf	?_printf+2,c
  1141  001276  EC78  F010         	call	_printf	;wreg free
  1142                           
  1143                           ;main.c: 100:             clear = 0;
  1144  00127A  0E00               	movlw	0
  1145  00127C  0100               	movlb	0	; () banked
  1146  00127E  6FF9               	movwf	(main@clear+1)& (0+255),b
  1147  001280  0E00               	movlw	0
  1148  001282  6FF8               	movwf	main@clear& (0+255),b
  1149  001284                     l2556:
  1150                           
  1151                           ; BSR set to: 0
  1152                           ;main.c: 104:         if (state == 3 & clear == 1) {
  1153  001284  0E03               	movlw	3
  1154  001286  19FA               	xorwf	main@state& (0+255),w,b
  1155  001288  11FB               	iorwf	(main@state+1)& (0+255),w,b
  1156  00128A  A4D8               	btfss	status,2,c
  1157  00128C  D034               	goto	l2576
  1158                           
  1159                           ; BSR set to: 0
  1160  00128E  05F8               	decf	main@clear& (0+255),w,b
  1161  001290  11F9               	iorwf	(main@clear+1)& (0+255),w,b
  1162  001292  A4D8               	btfss	status,2,c
  1163  001294  D030               	goto	l2576
  1164                           
  1165                           ; BSR set to: 0
  1166                           ;main.c: 106:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1167  001296  0E01               	movlw	1
  1168  001298  ECA6  F010         	call	_lcdInst
  1169  00129C  0E11               	movlw	17
  1170  00129E  0100               	movlb	0	; () banked
  1171  0012A0  6FE8               	movwf	??_main& (0+255),b
  1172  0012A2  0E3A               	movlw	58
  1173  0012A4                     u2457:
  1174  0012A4  2EE8               	decfsz	wreg,f,c
  1175  0012A6  D7FE               	bra	u2457
  1176  0012A8  2FE8               	decfsz	??_main& (0+255),f,b
  1177  0012AA  D7FC               	bra	u2457
  1178  0012AC  F000               	nop	
  1179                           
  1180                           ;main.c: 107:             printf("Individual Info");
  1181  0012AE  0E29               	movlw	low STR_9
  1182  0012B0  6E68               	movwf	printf@fmt,c
  1183  0012B2  0E10               	movlw	high STR_9
  1184  0012B4  6E69               	movwf	printf@fmt+1,c
  1185  0012B6  EC78  F010         	call	_printf	;wreg free
  1186  0012BA  0EC0               	movlw	192
  1187  0012BC  ECA6  F010         	call	_lcdInst
  1188                           
  1189                           ;main.c: 109:             printf("of Canister");
  1190  0012C0  0EB9               	movlw	low STR_10
  1191  0012C2  6E68               	movwf	printf@fmt,c
  1192  0012C4  0E10               	movlw	high STR_10
  1193  0012C6  6E69               	movwf	printf@fmt+1,c
  1194  0012C8  EC78  F010         	call	_printf	;wreg free
  1195  0012CC  0ED0               	movlw	208
  1196  0012CE  ECA6  F010         	call	_lcdInst
  1197                           
  1198                           ;main.c: 111:             printf("Press 0 to %d ", Canister-1);
  1199  0012D2  0E39               	movlw	low STR_11
  1200  0012D4  6E68               	movwf	printf@fmt,c
  1201  0012D6  0E10               	movlw	high STR_11
  1202  0012D8  6E69               	movwf	printf@fmt+1,c
  1203  0012DA  0EFF               	movlw	255
  1204  0012DC  0100               	movlb	0	; () banked
  1205  0012DE  25BE               	addwf	_Canister& (0+255),w,b
  1206  0012E0  6E6A               	movwf	?_printf+2,c
  1207  0012E2  0EFF               	movlw	255
  1208  0012E4  21BF               	addwfc	(_Canister+1)& (0+255),w,b
  1209  0012E6  6E6B               	movwf	?_printf+3,c
  1210  0012E8  EC78  F010         	call	_printf	;wreg free
  1211                           
  1212                           ;main.c: 112:             clear = 0;
  1213  0012EC  0E00               	movlw	0
  1214  0012EE  0100               	movlb	0	; () banked
  1215  0012F0  6FF9               	movwf	(main@clear+1)& (0+255),b
  1216  0012F2  0E00               	movlw	0
  1217  0012F4  6FF8               	movwf	main@clear& (0+255),b
  1218  0012F6                     l2576:
  1219                           
  1220                           ; BSR set to: 0
  1221                           ;main.c: 116:         if(key_was_pressed){
  1222  0012F6  51C3               	movf	_key_was_pressed& (0+255),w,b	;volatile
  1223  0012F8  B4D8               	btfsc	status,2,c
  1224  0012FA  D156               	goto	l2660
  1225                           
  1226                           ; BSR set to: 0
  1227                           ;main.c: 118:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  1228  0012FC  3881               	swapf	3969,w,c	;volatile
  1229  0012FE  0B0F               	andlw	15
  1230  001300  0B0F               	andlw	15
  1231  001302  6FFC               	movwf	main@keypress& (0+255),b
  1232                           
  1233                           ; BSR set to: 0
  1234                           ;main.c: 119:             int miniTick = 0;
  1235  001304  0E00               	movlw	0
  1236  001306  6FF3               	movwf	(main@miniTick+1)& (0+255),b
  1237  001308  0E00               	movlw	0
  1238  00130A  6FF2               	movwf	main@miniTick& (0+255),b
  1239                           
  1240                           ; BSR set to: 0
  1241                           ;main.c: 120:             int miniState = 0;
  1242  00130C  0E00               	movlw	0
  1243  00130E  6FF7               	movwf	(main@miniState+1)& (0+255),b
  1244  001310  0E00               	movlw	0
  1245  001312  6FF6               	movwf	main@miniState& (0+255),b
  1246                           
  1247                           ; BSR set to: 0
  1248                           ;main.c: 121:             int miniClear = 1;
  1249  001314  0E00               	movlw	0
  1250  001316  6FF5               	movwf	(main@miniClear+1)& (0+255),b
  1251  001318  0E01               	movlw	1
  1252  00131A  6FF4               	movwf	main@miniClear& (0+255),b
  1253                           
  1254                           ;main.c: 123:             while(!exit_key) {
  1255  00131C  D13D               	goto	l2656
  1256  00131E                     l2586:
  1257                           
  1258                           ; BSR set to: 0
  1259                           ;main.c: 125:                 if (miniState == 0 & miniClear == 1) {
  1260  00131E  51F6               	movf	main@miniState& (0+255),w,b
  1261  001320  11F7               	iorwf	(main@miniState+1)& (0+255),w,b
  1262  001322  A4D8               	btfss	status,2,c
  1263  001324  D047               	goto	l2602
  1264                           
  1265                           ; BSR set to: 0
  1266  001326  05F4               	decf	main@miniClear& (0+255),w,b
  1267  001328  11F5               	iorwf	(main@miniClear+1)& (0+255),w,b
  1268  00132A  A4D8               	btfss	status,2,c
  1269  00132C  D043               	goto	l2602
  1270                           
  1271                           ; BSR set to: 0
  1272                           ;main.c: 127:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1273  00132E  0E01               	movlw	1
  1274  001330  ECA6  F010         	call	_lcdInst
  1275  001334  0E11               	movlw	17
  1276  001336  0100               	movlb	0	; () banked
  1277  001338  6FE8               	movwf	??_main& (0+255),b
  1278  00133A  0E3A               	movlw	58
  1279  00133C                     u2467:
  1280  00133C  2EE8               	decfsz	wreg,f,c
  1281  00133E  D7FE               	bra	u2467
  1282  001340  2FE8               	decfsz	??_main& (0+255),f,b
  1283  001342  D7FC               	bra	u2467
  1284  001344  F000               	nop	
  1285                           
  1286                           ;main.c: 128:                     printf("Cansiter %c", keys[keypress]);
  1287  001346  0EAD               	movlw	low STR_12
  1288  001348  6E68               	movwf	printf@fmt,c
  1289  00134A  0E10               	movlw	high STR_12
  1290  00134C  6E69               	movwf	printf@fmt+1,c
  1291  00134E  0E01               	movlw	low _keys
  1292  001350  0100               	movlb	0	; () banked
  1293  001352  25FC               	addwf	main@keypress& (0+255),w,b
  1294  001354  6EF6               	movwf	tblptrl,c
  1295  001356  6AF7               	clrf	tblptrh,c
  1296  001358  0E10               	movlw	high _keys
  1297  00135A  22F7               	addwfc	tblptrh,f,c
  1298  00135C                     	if	0	;There are less than 3 active tblptr bytes
  1299  00135C                     	endif
  1300  00135C  0008               	tblrd		*
  1301  00135E  50F5               	movf	tablat,w,c
  1302  001360  6E6A               	movwf	?_printf+2,c
  1303  001362  6A6B               	clrf	?_printf+3,c
  1304  001364  EC78  F010         	call	_printf	;wreg free
  1305  001368  0E90               	movlw	144
  1306  00136A  ECA6  F010         	call	_lcdInst
  1307                           
  1308                           ;main.c: 130:                     printf("Distance %d cm", DistanceCanister[(int) (keys[
      +                          keypress] - '0')] );
  1309  00136E  0E57               	movlw	low STR_13
  1310  001370  6E68               	movwf	printf@fmt,c
  1311  001372  0E10               	movlw	high STR_13
  1312  001374  6E69               	movwf	printf@fmt+1,c
  1313  001376  0E01               	movlw	low _keys
  1314  001378  0100               	movlb	0	; () banked
  1315  00137A  25FC               	addwf	main@keypress& (0+255),w,b
  1316  00137C  6EF6               	movwf	tblptrl,c
  1317  00137E  6AF7               	clrf	tblptrh,c
  1318  001380  0E10               	movlw	high _keys
  1319  001382  22F7               	addwfc	tblptrh,f,c
  1320  001384                     	if	0	;There are less than 3 active tblptr bytes
  1321  001384                     	endif
  1322  001384  0008               	tblrd		*
  1323  001386  50F5               	movf	tablat,w,c
  1324  001388  6FE8               	movwf	??_main& (0+255),b
  1325  00138A  6BE9               	clrf	(??_main+1)& (0+255),b
  1326  00138C  90D8               	bcf	status,0,c
  1327  00138E  37E8               	rlcf	??_main& (0+255),f,b
  1328  001390  37E9               	rlcf	(??_main+1)& (0+255),f,b
  1329  001392  0E34               	movlw	low (_DistanceCanister+65440)
  1330  001394  25E8               	addwf	??_main& (0+255),w,b
  1331  001396  6ED9               	movwf	fsr2l,c
  1332  001398  0E00               	movlw	high (_DistanceCanister+65440)
  1333  00139A  21E9               	addwfc	(??_main+1)& (0+255),w,b
  1334  00139C  6EDA               	movwf	fsr2h,c
  1335  00139E  CFDE F06A          	movff	postinc2,?_printf+2
  1336  0013A2  CFDD F06B          	movff	postdec2,?_printf+3
  1337  0013A6  EC78  F010         	call	_printf	;wreg free
  1338                           
  1339                           ;main.c: 131:                     miniClear = 0;
  1340  0013AA  0E00               	movlw	0
  1341  0013AC  0100               	movlb	0	; () banked
  1342  0013AE  6FF5               	movwf	(main@miniClear+1)& (0+255),b
  1343  0013B0  0E00               	movlw	0
  1344  0013B2  6FF4               	movwf	main@miniClear& (0+255),b
  1345  0013B4                     l2602:
  1346                           
  1347                           ; BSR set to: 0
  1348                           ;main.c: 134:                 if (miniState == 1 & miniClear == 1) {
  1349  0013B4  05F6               	decf	main@miniState& (0+255),w,b
  1350  0013B6  11F7               	iorwf	(main@miniState+1)& (0+255),w,b
  1351  0013B8  A4D8               	btfss	status,2,c
  1352  0013BA  D05F               	goto	l2622
  1353                           
  1354                           ; BSR set to: 0
  1355  0013BC  05F4               	decf	main@miniClear& (0+255),w,b
  1356  0013BE  11F5               	iorwf	(main@miniClear+1)& (0+255),w,b
  1357  0013C0  A4D8               	btfss	status,2,c
  1358  0013C2  D05B               	goto	l2622
  1359                           
  1360                           ; BSR set to: 0
  1361                           ;main.c: 136:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1362  0013C4  0E01               	movlw	1
  1363  0013C6  ECA6  F010         	call	_lcdInst
  1364  0013CA  0E11               	movlw	17
  1365  0013CC  0100               	movlb	0	; () banked
  1366  0013CE  6FE8               	movwf	??_main& (0+255),b
  1367  0013D0  0E3A               	movlw	58
  1368  0013D2                     u2477:
  1369  0013D2  2EE8               	decfsz	wreg,f,c
  1370  0013D4  D7FE               	bra	u2477
  1371  0013D6  2FE8               	decfsz	??_main& (0+255),f,b
  1372  0013D8  D7FC               	bra	u2477
  1373  0013DA  F000               	nop	
  1374                           
  1375                           ;main.c: 137:                     printf("Cansiter %c", keys[keypress]);
  1376  0013DC  0EAD               	movlw	low STR_12
  1377  0013DE  6E68               	movwf	printf@fmt,c
  1378  0013E0  0E10               	movlw	high STR_12
  1379  0013E2  6E69               	movwf	printf@fmt+1,c
  1380  0013E4  0E01               	movlw	low _keys
  1381  0013E6  0100               	movlb	0	; () banked
  1382  0013E8  25FC               	addwf	main@keypress& (0+255),w,b
  1383  0013EA  6EF6               	movwf	tblptrl,c
  1384  0013EC  6AF7               	clrf	tblptrh,c
  1385  0013EE  0E10               	movlw	high _keys
  1386  0013F0  22F7               	addwfc	tblptrh,f,c
  1387  0013F2                     	if	0	;There are less than 3 active tblptr bytes
  1388  0013F2                     	endif
  1389  0013F2  0008               	tblrd		*
  1390  0013F4  50F5               	movf	tablat,w,c
  1391  0013F6  6E6A               	movwf	?_printf+2,c
  1392  0013F8  6A6B               	clrf	?_printf+3,c
  1393  0013FA  EC78  F010         	call	_printf	;wreg free
  1394  0013FE  0E90               	movlw	144
  1395  001400  ECA6  F010         	call	_lcdInst
  1396                           
  1397                           ;main.c: 139:                     if (State[(int) (keys[keypress] - '0') == 1])
  1398  001404  0ED0               	movlw	208
  1399  001406  0100               	movlb	0	; () banked
  1400  001408  6FE8               	movwf	??_main& (0+255),b
  1401  00140A  0EFF               	movlw	255
  1402  00140C  6FE9               	movwf	(??_main+1)& (0+255),b
  1403  00140E  0E01               	movlw	low _keys
  1404  001410  25FC               	addwf	main@keypress& (0+255),w,b
  1405  001412  6EF6               	movwf	tblptrl,c
  1406  001414  6AF7               	clrf	tblptrh,c
  1407  001416  0E10               	movlw	high _keys
  1408  001418  22F7               	addwfc	tblptrh,f,c
  1409  00141A                     	if	0	;There are less than 3 active tblptr bytes
  1410  00141A                     	endif
  1411  00141A  0008               	tblrd		*
  1412  00141C  50F5               	movf	tablat,w,c
  1413  00141E  6FEA               	movwf	(??_main+2)& (0+255),b
  1414  001420  6BEB               	clrf	(??_main+3)& (0+255),b
  1415  001422  51E8               	movf	??_main& (0+255),w,b
  1416  001424  27EA               	addwf	(??_main+2)& (0+255),f,b
  1417  001426  51E9               	movf	(??_main+1)& (0+255),w,b
  1418  001428  23EB               	addwfc	(??_main+3)& (0+255),f,b
  1419  00142A  05EA               	decf	(??_main+2)& (0+255),w,b
  1420  00142C  11EB               	iorwf	(??_main+3)& (0+255),w,b
  1421  00142E  A4D8               	btfss	status,2,c
  1422  001430  D002               	goto	u2290
  1423  001432  0E01               	movlw	1
  1424  001434  D001               	goto	u2300
  1425  001436                     u2290:
  1426  001436  0E00               	movlw	0
  1427  001438                     u2300:
  1428  001438  6FEC               	movwf	(??_main+4)& (0+255),b
  1429  00143A  6BED               	clrf	(??_main+5)& (0+255),b
  1430  00143C  90D8               	bcf	status,0,c
  1431  00143E  37EC               	rlcf	(??_main+4)& (0+255),f,b
  1432  001440  37ED               	rlcf	(??_main+5)& (0+255),f,b
  1433  001442  0EA8               	movlw	low _State
  1434  001444  25EC               	addwf	(??_main+4)& (0+255),w,b
  1435  001446  6ED9               	movwf	fsr2l,c
  1436  001448  0E00               	movlw	high _State
  1437  00144A  21ED               	addwfc	(??_main+5)& (0+255),w,b
  1438  00144C  6EDA               	movwf	fsr2h,c
  1439  00144E  50DE               	movf	postinc2,w,c
  1440  001450  10DE               	iorwf	postinc2,w,c
  1441  001452  B4D8               	btfsc	status,2,c
  1442  001454  D007               	goto	l2618
  1443                           
  1444                           ; BSR set to: 0
  1445                           ;main.c: 140:                         printf("Canister Full");
  1446  001456  0E92               	movlw	low STR_15
  1447  001458  6E68               	movwf	printf@fmt,c
  1448  00145A  0E10               	movlw	high STR_15
  1449  00145C  6E69               	movwf	printf@fmt+1,c
  1450  00145E  EC78  F010         	call	_printf	;wreg free
  1451  001462  D006               	goto	l2620
  1452  001464                     l2618:
  1453                           
  1454                           ; BSR set to: 0
  1455                           ;main.c: 142:                         printf("Canister Empty");
  1456  001464  0E75               	movlw	low STR_16
  1457  001466  6E68               	movwf	printf@fmt,c
  1458  001468  0E10               	movlw	high STR_16
  1459  00146A  6E69               	movwf	printf@fmt+1,c
  1460  00146C  EC78  F010         	call	_printf	;wreg free
  1461  001470                     l2620:
  1462                           
  1463                           ;main.c: 143:                     miniClear = 0;
  1464  001470  0E00               	movlw	0
  1465  001472  0100               	movlb	0	; () banked
  1466  001474  6FF5               	movwf	(main@miniClear+1)& (0+255),b
  1467  001476  0E00               	movlw	0
  1468  001478  6FF4               	movwf	main@miniClear& (0+255),b
  1469  00147A                     l2622:
  1470                           
  1471                           ; BSR set to: 0
  1472                           ;main.c: 146:                 if (miniState == 2 & miniClear == 1) {
  1473  00147A  0E02               	movlw	2
  1474  00147C  19F6               	xorwf	main@miniState& (0+255),w,b
  1475  00147E  11F7               	iorwf	(main@miniState+1)& (0+255),w,b
  1476  001480  A4D8               	btfss	status,2,c
  1477  001482  D05F               	goto	l2642
  1478                           
  1479                           ; BSR set to: 0
  1480  001484  05F4               	decf	main@miniClear& (0+255),w,b
  1481  001486  11F5               	iorwf	(main@miniClear+1)& (0+255),w,b
  1482  001488  A4D8               	btfss	status,2,c
  1483  00148A  D05B               	goto	l2642
  1484                           
  1485                           ; BSR set to: 0
  1486                           ;main.c: 148:                     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/
      +                          4000.0)));};
  1487  00148C  0E01               	movlw	1
  1488  00148E  ECA6  F010         	call	_lcdInst
  1489  001492  0E11               	movlw	17
  1490  001494  0100               	movlb	0	; () banked
  1491  001496  6FE8               	movwf	??_main& (0+255),b
  1492  001498  0E3A               	movlw	58
  1493  00149A                     u2487:
  1494  00149A  2EE8               	decfsz	wreg,f,c
  1495  00149C  D7FE               	bra	u2487
  1496  00149E  2FE8               	decfsz	??_main& (0+255),f,b
  1497  0014A0  D7FC               	bra	u2487
  1498  0014A2  F000               	nop	
  1499                           
  1500                           ;main.c: 149:                     printf("Cansiter %c", keys[keypress]);
  1501  0014A4  0EAD               	movlw	low STR_12
  1502  0014A6  6E68               	movwf	printf@fmt,c
  1503  0014A8  0E10               	movlw	high STR_12
  1504  0014AA  6E69               	movwf	printf@fmt+1,c
  1505  0014AC  0E01               	movlw	low _keys
  1506  0014AE  0100               	movlb	0	; () banked
  1507  0014B0  25FC               	addwf	main@keypress& (0+255),w,b
  1508  0014B2  6EF6               	movwf	tblptrl,c
  1509  0014B4  6AF7               	clrf	tblptrh,c
  1510  0014B6  0E10               	movlw	high _keys
  1511  0014B8  22F7               	addwfc	tblptrh,f,c
  1512  0014BA                     	if	0	;There are less than 3 active tblptr bytes
  1513  0014BA                     	endif
  1514  0014BA  0008               	tblrd		*
  1515  0014BC  50F5               	movf	tablat,w,c
  1516  0014BE  6E6A               	movwf	?_printf+2,c
  1517  0014C0  6A6B               	clrf	?_printf+3,c
  1518  0014C2  EC78  F010         	call	_printf	;wreg free
  1519  0014C6  0E90               	movlw	144
  1520  0014C8  ECA6  F010         	call	_lcdInst
  1521                           
  1522                           ;main.c: 151:                     if (BallDispensed[(int) (keys[keypress] - '0') == 1])
  1523  0014CC  0ED0               	movlw	208
  1524  0014CE  0100               	movlb	0	; () banked
  1525  0014D0  6FE8               	movwf	??_main& (0+255),b
  1526  0014D2  0EFF               	movlw	255
  1527  0014D4  6FE9               	movwf	(??_main+1)& (0+255),b
  1528  0014D6  0E01               	movlw	low _keys
  1529  0014D8  25FC               	addwf	main@keypress& (0+255),w,b
  1530  0014DA  6EF6               	movwf	tblptrl,c
  1531  0014DC  6AF7               	clrf	tblptrh,c
  1532  0014DE  0E10               	movlw	high _keys
  1533  0014E0  22F7               	addwfc	tblptrh,f,c
  1534  0014E2                     	if	0	;There are less than 3 active tblptr bytes
  1535  0014E2                     	endif
  1536  0014E2  0008               	tblrd		*
  1537  0014E4  50F5               	movf	tablat,w,c
  1538  0014E6  6FEA               	movwf	(??_main+2)& (0+255),b
  1539  0014E8  6BEB               	clrf	(??_main+3)& (0+255),b
  1540  0014EA  51E8               	movf	??_main& (0+255),w,b
  1541  0014EC  27EA               	addwf	(??_main+2)& (0+255),f,b
  1542  0014EE  51E9               	movf	(??_main+1)& (0+255),w,b
  1543  0014F0  23EB               	addwfc	(??_main+3)& (0+255),f,b
  1544  0014F2  05EA               	decf	(??_main+2)& (0+255),w,b
  1545  0014F4  11EB               	iorwf	(??_main+3)& (0+255),w,b
  1546  0014F6  A4D8               	btfss	status,2,c
  1547  0014F8  D002               	goto	u2340
  1548  0014FA  0E01               	movlw	1
  1549  0014FC  D001               	goto	u2350
  1550  0014FE                     u2340:
  1551  0014FE  0E00               	movlw	0
  1552  001500                     u2350:
  1553  001500  6FEC               	movwf	(??_main+4)& (0+255),b
  1554  001502  6BED               	clrf	(??_main+5)& (0+255),b
  1555  001504  90D8               	bcf	status,0,c
  1556  001506  37EC               	rlcf	(??_main+4)& (0+255),f,b
  1557  001508  37ED               	rlcf	(??_main+5)& (0+255),f,b
  1558  00150A  0E80               	movlw	low _BallDispensed
  1559  00150C  25EC               	addwf	(??_main+4)& (0+255),w,b
  1560  00150E  6ED9               	movwf	fsr2l,c
  1561  001510  0E00               	movlw	high _BallDispensed
  1562  001512  21ED               	addwfc	(??_main+5)& (0+255),w,b
  1563  001514  6EDA               	movwf	fsr2h,c
  1564  001516  50DE               	movf	postinc2,w,c
  1565  001518  10DE               	iorwf	postinc2,w,c
  1566  00151A  B4D8               	btfsc	status,2,c
  1567  00151C  D007               	goto	l2638
  1568                           
  1569                           ; BSR set to: 0
  1570                           ;main.c: 152:                         printf("Ball Added");
  1571  00151E  0E87               	movlw	low (STR_19+3)
  1572  001520  6E68               	movwf	printf@fmt,c
  1573  001522  0E10               	movlw	high (STR_19+3)
  1574  001524  6E69               	movwf	printf@fmt+1,c
  1575  001526  EC78  F010         	call	_printf	;wreg free
  1576  00152A  D006               	goto	l2640
  1577  00152C                     l2638:
  1578                           
  1579                           ; BSR set to: 0
  1580                           ;main.c: 154:                         printf("No Ball Added");
  1581  00152C  0E84               	movlw	low STR_19
  1582  00152E  6E68               	movwf	printf@fmt,c
  1583  001530  0E10               	movlw	high STR_19
  1584  001532  6E69               	movwf	printf@fmt+1,c
  1585  001534  EC78  F010         	call	_printf	;wreg free
  1586  001538                     l2640:
  1587                           
  1588                           ;main.c: 155:                     miniClear = 0;
  1589  001538  0E00               	movlw	0
  1590  00153A  0100               	movlb	0	; () banked
  1591  00153C  6FF5               	movwf	(main@miniClear+1)& (0+255),b
  1592  00153E  0E00               	movlw	0
  1593  001540  6FF4               	movwf	main@miniClear& (0+255),b
  1594  001542                     l2642:
  1595                           
  1596                           ; BSR set to: 0
  1597                           ;main.c: 158:                 if (miniTick == 2000) {
  1598  001542  0ED0               	movlw	208
  1599  001544  19F2               	xorwf	main@miniTick& (0+255),w,b
  1600  001546  E11D               	bnz	l2652
  1601  001548  0E07               	movlw	7
  1602  00154A  19F3               	xorwf	(main@miniTick+1)& (0+255),w,b
  1603  00154C  A4D8               	btfss	status,2,c
  1604  00154E  D019               	goto	l2652
  1605                           
  1606                           ; BSR set to: 0
  1607                           ;main.c: 159:                     miniClear = 1;
  1608  001550  0E00               	movlw	0
  1609  001552  6FF5               	movwf	(main@miniClear+1)& (0+255),b
  1610  001554  0E01               	movlw	1
  1611  001556  6FF4               	movwf	main@miniClear& (0+255),b
  1612                           
  1613                           ; BSR set to: 0
  1614                           ;main.c: 160:                     miniState++;
  1615  001558  4BF6               	infsnz	main@miniState& (0+255),f,b
  1616  00155A  2BF7               	incf	(main@miniState+1)& (0+255),f,b
  1617                           
  1618                           ; BSR set to: 0
  1619                           ;main.c: 161:                     miniState = miniState % 3;
  1620  00155C  C0F6  F00C         	movff	main@miniState,___awmod@dividend
  1621  001560  C0F7  F00D         	movff	main@miniState+1,___awmod@dividend+1
  1622  001564  0E00               	movlw	0
  1623  001566  6E0F               	movwf	___awmod@divisor+1,c
  1624  001568  0E03               	movlw	3
  1625  00156A  6E0E               	movwf	___awmod@divisor,c
  1626  00156C  ECE0  F00E         	call	___awmod	;wreg free
  1627  001570  C00C  F0F6         	movff	?___awmod,main@miniState
  1628  001574  C00D  F0F7         	movff	?___awmod+1,main@miniState+1
  1629                           
  1630                           ;main.c: 162:                     miniTick = 0;
  1631  001578  0E00               	movlw	0
  1632  00157A  0100               	movlb	0	; () banked
  1633  00157C  6FF3               	movwf	(main@miniTick+1)& (0+255),b
  1634  00157E  0E00               	movlw	0
  1635  001580  6FF2               	movwf	main@miniTick& (0+255),b
  1636  001582                     l2652:
  1637                           
  1638                           ; BSR set to: 0
  1639                           ;main.c: 165:                 miniTick++;
  1640  001582  4BF2               	infsnz	main@miniTick& (0+255),f,b
  1641  001584  2BF3               	incf	(main@miniTick+1)& (0+255),f,b
  1642                           
  1643                           ; BSR set to: 0
  1644                           ;main.c: 166:                 _delay((unsigned long)((1)*(10000000/4000.0)));
  1645  001586  0E04               	movlw	4
  1646  001588  0100               	movlb	0	; () banked
  1647  00158A  6FE8               	movwf	??_main& (0+255),b
  1648  00158C  0E3D               	movlw	61
  1649  00158E                     u2497:
  1650  00158E  2EE8               	decfsz	wreg,f,c
  1651  001590  D7FE               	bra	u2497
  1652  001592  2FE8               	decfsz	??_main& (0+255),f,b
  1653  001594  D7FC               	bra	u2497
  1654  001596  D000               	nop2	
  1655  001598                     l2656:
  1656                           
  1657                           ;main.c: 123:             while(!exit_key) {
  1658  001598  0100               	movlb	0	; () banked
  1659  00159A  51C2               	movf	_exit_key& (0+255),w,b	;volatile
  1660  00159C  B4D8               	btfsc	status,2,c
  1661  00159E  D6BF               	goto	l2586
  1662                           
  1663                           ; BSR set to: 0
  1664                           ;main.c: 171:             key_was_pressed = 0;
  1665  0015A0  0E00               	movlw	0
  1666  0015A2  6FC3               	movwf	_key_was_pressed& (0+255),b	;volatile
  1667                           
  1668                           ;main.c: 172:             exit_key = 0;
  1669  0015A4  0E00               	movlw	0
  1670  0015A6  6FC2               	movwf	_exit_key& (0+255),b	;volatile
  1671  0015A8                     l2660:
  1672                           
  1673                           ; BSR set to: 0
  1674                           ;main.c: 176:         if (tick == 2000) {
  1675  0015A8  0ED0               	movlw	208
  1676  0015AA  19F0               	xorwf	main@tick& (0+255),w,b
  1677  0015AC  E112               	bnz	l2670
  1678  0015AE  0E07               	movlw	7
  1679  0015B0  19F1               	xorwf	(main@tick+1)& (0+255),w,b
  1680  0015B2  A4D8               	btfss	status,2,c
  1681  0015B4  D00E               	goto	l2670
  1682                           
  1683                           ; BSR set to: 0
  1684                           ;main.c: 177:             clear = 1;
  1685  0015B6  0E00               	movlw	0
  1686  0015B8  6FF9               	movwf	(main@clear+1)& (0+255),b
  1687  0015BA  0E01               	movlw	1
  1688  0015BC  6FF8               	movwf	main@clear& (0+255),b
  1689                           
  1690                           ; BSR set to: 0
  1691                           ;main.c: 178:             state++;
  1692  0015BE  4BFA               	infsnz	main@state& (0+255),f,b
  1693  0015C0  2BFB               	incf	(main@state+1)& (0+255),f,b
  1694                           
  1695                           ; BSR set to: 0
  1696                           ;main.c: 179:             state = state % 4;
  1697  0015C2  0E03               	movlw	3
  1698  0015C4  15FA               	andwf	main@state& (0+255),w,b
  1699  0015C6  6FFA               	movwf	main@state& (0+255),b
  1700  0015C8  6BFB               	clrf	(main@state+1)& (0+255),b
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;main.c: 180:             tick = 0;
  1704  0015CA  0E00               	movlw	0
  1705  0015CC  6FF1               	movwf	(main@tick+1)& (0+255),b
  1706  0015CE  0E00               	movlw	0
  1707  0015D0  6FF0               	movwf	main@tick& (0+255),b
  1708  0015D2                     l2670:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;main.c: 183:         tick++;
  1712  0015D2  4BF0               	infsnz	main@tick& (0+255),f,b
  1713  0015D4  2BF1               	incf	(main@tick+1)& (0+255),f,b
  1714                           
  1715                           ; BSR set to: 0
  1716                           ;main.c: 184:         _delay((unsigned long)((1)*(10000000/4000.0)));
  1717  0015D6  0E04               	movlw	4
  1718  0015D8  0100               	movlb	0	; () banked
  1719  0015DA  6FE8               	movwf	??_main& (0+255),b
  1720  0015DC  0E3D               	movlw	61
  1721  0015DE                     u2507:
  1722  0015DE  2EE8               	decfsz	wreg,f,c
  1723  0015E0  D7FE               	bra	u2507
  1724  0015E2  2FE8               	decfsz	??_main& (0+255),f,b
  1725  0015E4  D7FC               	bra	u2507
  1726  0015E6  D000               	nop2	
  1727  0015E8  D5B8               	goto	l2500
  1728  0015EA                     __end_of_main:
  1729                           	opt callstack 0
  1730                           
  1731 ;; *************** function _printf *****************
  1732 ;; Defined at:
  1733 ;;		line 5 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/printf.c"
  1734 ;; Parameters:    Size  Location     Type
  1735 ;;  fmt             2  103[COMRAM] PTR const unsigned char 
  1736 ;;		 -> STR_19(14), STR_18(11), STR_17(12), STR_16(15), 
  1737 ;;		 -> STR_15(14), STR_14(12), STR_13(15), STR_12(12), 
  1738 ;;		 -> STR_11(15), STR_10(12), STR_9(16), STR_8(9), 
  1739 ;;		 -> STR_7(9), STR_6(11), STR_5(13), STR_4(15), 
  1740 ;;		 -> STR_3(11), STR_2(15), STR_1(17), 
  1741 ;; Auto vars:     Size  Location     Type
  1742 ;;  ap              2    2[BANK0 ] PTR void [1]
  1743 ;;		 -> ?_printf(2), 
  1744 ;;  ret             2    0        int 
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  2  103[COMRAM] int 
  1747 ;; Registers used:
  1748 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1754 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1755 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1756 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1757 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1758 ;;Total ram usage:        8 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:   11
  1761 ;; This function calls:
  1762 ;;		_vfprintf
  1763 ;; This function is called by:
  1764 ;;		_main
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767                           
  1768                           	psect	text1
  1769  0020F0                     __ptext1:
  1770                           	opt callstack 0
  1771  0020F0                     _printf:
  1772                           	opt callstack 19
  1773                           
  1774                           ;incstack = 0
  1775  0020F0  0E6A               	movlw	low (?_printf+2)
  1776  0020F2  0100               	movlb	0	; () banked
  1777  0020F4  6FE6               	movwf	printf@ap& (0+255),b
  1778  0020F6  0E00               	movlw	high (?_printf+2)
  1779  0020F8  6FE7               	movwf	(printf@ap+1)& (0+255),b
  1780                           
  1781                           ; BSR set to: 0
  1782  0020FA  0E00               	movlw	0
  1783  0020FC  6E60               	movwf	vfprintf@fp,c
  1784  0020FE  0E00               	movlw	0
  1785  002100  6E61               	movwf	vfprintf@fp+1,c
  1786  002102  C068  F062         	movff	printf@fmt,vfprintf@fmt
  1787  002106  C069  F063         	movff	printf@fmt+1,vfprintf@fmt+1
  1788  00210A  0EE6               	movlw	low printf@ap
  1789  00210C  6E64               	movwf	vfprintf@ap,c
  1790  00210E  0E00               	movlw	high printf@ap
  1791  002110  6E65               	movwf	vfprintf@ap+1,c
  1792  002112  EC83  F00F         	call	_vfprintf	;wreg free
  1793  002116  0012               	return		;funcret
  1794  002118                     __end_of_printf:
  1795                           	opt callstack 0
  1796                           
  1797 ;; *************** function _vfprintf *****************
  1798 ;; Defined at:
  1799 ;;		line 1368 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1800 ;; Parameters:    Size  Location     Type
  1801 ;;  fp              2   95[COMRAM] PTR struct _IO_FILE
  1802 ;;		 -> NULL(0), 
  1803 ;;  fmt             2   97[COMRAM] PTR const unsigned char 
  1804 ;;		 -> STR_19(14), STR_18(11), STR_17(12), STR_16(15), 
  1805 ;;		 -> STR_15(14), STR_14(12), STR_13(15), STR_12(12), 
  1806 ;;		 -> STR_11(15), STR_10(12), STR_9(16), STR_8(9), 
  1807 ;;		 -> STR_7(9), STR_6(11), STR_5(13), STR_4(15), 
  1808 ;;		 -> STR_3(11), STR_2(15), STR_1(17), 
  1809 ;;  ap              2   99[COMRAM] PTR PTR void 
  1810 ;;		 -> printf@ap(2), 
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;  cfmt            2  101[COMRAM] PTR unsigned char 
  1813 ;;		 -> STR_19(14), STR_18(11), STR_17(12), STR_16(15), 
  1814 ;;		 -> STR_15(14), STR_14(12), STR_13(15), STR_12(12), 
  1815 ;;		 -> STR_11(15), STR_10(12), STR_9(16), STR_8(9), 
  1816 ;;		 -> STR_7(9), STR_6(11), STR_5(13), STR_4(15), 
  1817 ;;		 -> STR_3(11), STR_2(15), STR_1(17), 
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  2   95[COMRAM] int 
  1820 ;; Registers used:
  1821 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1827 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1828 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1830 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1831 ;;Total ram usage:        8 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:   10
  1834 ;; This function calls:
  1835 ;;		_vfpfcnvrt
  1836 ;; This function is called by:
  1837 ;;		_printf
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text2
  1842  001F06                     __ptext2:
  1843                           	opt callstack 0
  1844  001F06                     _vfprintf:
  1845                           	opt callstack 19
  1846                           
  1847                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
  1848                           
  1849                           ;incstack = 0
  1850  001F06  C062  F066         	movff	vfprintf@fmt,vfprintf@cfmt
  1851  001F0A  C063  F067         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1852                           
  1853                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  1854  001F0E  0E00               	movlw	0
  1855  001F10  6E6D               	movwf	_nout+1,c
  1856  001F12  0E00               	movlw	0
  1857  001F14  6E6C               	movwf	_nout,c
  1858                           
  1859                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  1860  001F16  D012               	goto	l2426
  1861  001F18                     l2424:
  1862                           
  1863                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
  1864  001F18  C060  F04F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1865  001F1C  C061  F050         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1866  001F20  0E66               	movlw	low vfprintf@cfmt
  1867  001F22  6E51               	movwf	vfpfcnvrt@fmt,c
  1868  001F24  0E00               	movlw	high vfprintf@cfmt
  1869  001F26  6E52               	movwf	vfpfcnvrt@fmt+1,c
  1870  001F28  C064  F053         	movff	vfprintf@ap,vfpfcnvrt@ap
  1871  001F2C  C065  F054         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1872  001F30  EC16  F00C         	call	_vfpfcnvrt	;wreg free
  1873  001F34  504F               	movf	?_vfpfcnvrt,w,c
  1874  001F36  266C               	addwf	_nout,f,c
  1875  001F38  5050               	movf	?_vfpfcnvrt+1,w,c
  1876  001F3A  226D               	addwfc	_nout+1,f,c
  1877  001F3C                     l2426:
  1878                           
  1879                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  1880  001F3C  C066  FFF6         	movff	vfprintf@cfmt,tblptrl
  1881  001F40  C067  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1882  001F44                     	if	0	;tblptru may be non-zero
  1883  001F44                     	endif
  1884  001F44                     	if	0	;tblptru may be non-zero
  1885  001F44                     	endif
  1886  001F44  0008               	tblrd		*
  1887  001F46  50F5               	movf	tablat,w,c
  1888  001F48  0900               	iorlw	0
  1889  001F4A  A4D8               	btfss	status,2,c
  1890  001F4C  D7E5               	goto	l2424
  1891                           
  1892                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
  1893  001F4E  C06C  F060         	movff	_nout,?_vfprintf
  1894  001F52  C06D  F061         	movff	_nout+1,?_vfprintf+1
  1895  001F56  0012               	return		;funcret
  1896  001F58                     __end_of_vfprintf:
  1897                           	opt callstack 0
  1898                           
  1899 ;; *************** function _vfpfcnvrt *****************
  1900 ;; Defined at:
  1901 ;;		line 670 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1902 ;; Parameters:    Size  Location     Type
  1903 ;;  fp              2   78[COMRAM] PTR struct _IO_FILE
  1904 ;;		 -> NULL(0), 
  1905 ;;  fmt             2   80[COMRAM] PTR PTR unsigned char 
  1906 ;;		 -> vfprintf@cfmt(2), 
  1907 ;;  ap              2   82[COMRAM] PTR PTR void 
  1908 ;;		 -> printf@ap(2), 
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;  ll              8   86[COMRAM] long long 
  1911 ;;  llu             8    0        unsigned long long 
  1912 ;;  f               4    0        unsigned long long 
  1913 ;;  vp              3    0        PTR void 
  1914 ;;  ct              3    0        unsigned char [3]
  1915 ;;  cp              3    0        PTR unsigned char 
  1916 ;;  i               2    0        int 
  1917 ;;  done            2    0        int 
  1918 ;;  c               1   94[COMRAM] unsigned char 
  1919 ;; Return value:  Size  Location     Type
  1920 ;;                  2   78[COMRAM] int 
  1921 ;; Registers used:
  1922 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1923 ;; Tracked objects:
  1924 ;;		On entry : 0/0
  1925 ;;		On exit  : 0/0
  1926 ;;		Unchanged: 0/0
  1927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1928 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1930 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1931 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1932 ;;Total ram usage:       17 bytes
  1933 ;; Hardware stack levels used:    1
  1934 ;; Hardware stack levels required when called:    9
  1935 ;; This function calls:
  1936 ;;		_ctoa
  1937 ;;		_dtoa
  1938 ;;		_fputc
  1939 ;; This function is called by:
  1940 ;;		_vfprintf
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text3
  1945  00182C                     __ptext3:
  1946                           	opt callstack 0
  1947  00182C                     _vfpfcnvrt:
  1948                           	opt callstack 19
  1949                           
  1950                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.05/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.05/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
  1951                           
  1952                           ;incstack = 0
  1953  00182C  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1954  001830  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1955  001834  CFDE FFF6          	movff	postinc2,tblptrl
  1956  001838  CFDD FFF7          	movff	postdec2,tblptrh
  1957  00183C                     	if	0	;tblptru may be non-zero
  1958  00183C                     	endif
  1959  00183C                     	if	0	;tblptru may be non-zero
  1960  00183C                     	endif
  1961  00183C  0008               	tblrd		*
  1962  00183E  50F5               	movf	tablat,w,c
  1963  001840  0A25               	xorlw	37
  1964  001842  A4D8               	btfss	status,2,c
  1965  001844  D0CC               	goto	l2408
  1966                           
  1967                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  1968  001846  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1969  00184A  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1970  00184E  2ADE               	incf	postinc2,f,c
  1971  001850  0E00               	movlw	0
  1972  001852  22DD               	addwfc	postdec2,f,c
  1973                           
  1974                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
  1975  001854  0E00               	movlw	0
  1976  001856  6E6F               	movwf	_width+1,c
  1977  001858  0E00               	movlw	0
  1978  00185A  6E6E               	movwf	_width,c
  1979  00185C  C06E  F072         	movff	_width,_flags
  1980  001860  C06F  F073         	movff	_width+1,_flags+1
  1981                           
  1982                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
  1983  001864  6870               	setf	_prec,c
  1984  001866  6871               	setf	_prec+1,c
  1985                           
  1986                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 792:         if (*fm
      +                          t[0] == 'c') {
  1987  001868  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1988  00186C  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1989  001870  CFDE FFF6          	movff	postinc2,tblptrl
  1990  001874  CFDD FFF7          	movff	postdec2,tblptrh
  1991  001878                     	if	0	;tblptru may be non-zero
  1992  001878                     	endif
  1993  001878                     	if	0	;tblptru may be non-zero
  1994  001878                     	endif
  1995  001878  0008               	tblrd		*
  1996  00187A  50F5               	movf	tablat,w,c
  1997  00187C  0A63               	xorlw	99
  1998  00187E  A4D8               	btfss	status,2,c
  1999  001880  D026               	goto	l2382
  2000                           
  2001                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 793:             ++*
      +                          fmt;
  2002  001882  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2003  001886  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2004  00188A  2ADE               	incf	postinc2,f,c
  2005  00188C  0E00               	movlw	0
  2006  00188E  22DD               	addwfc	postdec2,f,c
  2007                           
  2008                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 794:             c =
      +                           (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  2009  001890  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2010  001894  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2011  001898  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2012  00189C  0E02               	movlw	2
  2013  00189E  26DE               	addwf	postinc2,f,c
  2014  0018A0  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2015  0018A4  0E00               	movlw	0
  2016  0018A6  22DD               	addwfc	postdec2,f,c
  2017  0018A8  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2018  0018AC  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2019  0018B0  50DF               	movf	indf2,w,c
  2020  0018B2  6E5F               	movwf	vfpfcnvrt@c,c
  2021                           
  2022                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 795:             ret
      +                          urn ctoa(fp, c);
  2023  0018B4  C04F  F02B         	movff	vfpfcnvrt@fp,ctoa@fp
  2024  0018B8  C050  F02C         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  2025  0018BC  C05F  F02D         	movff	vfpfcnvrt@c,ctoa@c
  2026  0018C0  ECAC  F00F         	call	_ctoa	;wreg free
  2027  0018C4  C02B  F04F         	movff	?_ctoa,?_vfpfcnvrt
  2028  0018C8  C02C  F050         	movff	?_ctoa+1,?_vfpfcnvrt+1
  2029  0018CC  0012               	return	
  2030  0018CE                     l2382:
  2031                           
  2032                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 825:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
  2033  0018CE  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2034  0018D2  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2035  0018D6  CFDE FFF6          	movff	postinc2,tblptrl
  2036  0018DA  CFDD FFF7          	movff	postdec2,tblptrh
  2037  0018DE                     	if	0	;tblptru may be non-zero
  2038  0018DE                     	endif
  2039  0018DE                     	if	0	;tblptru may be non-zero
  2040  0018DE                     	endif
  2041  0018DE  0008               	tblrd		*
  2042  0018E0  50F5               	movf	tablat,w,c
  2043  0018E2  0A64               	xorlw	100
  2044  0018E4  B4D8               	btfsc	status,2,c
  2045  0018E6  D00D               	goto	u2110
  2046  0018E8  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2047  0018EC  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2048  0018F0  CFDE FFF6          	movff	postinc2,tblptrl
  2049  0018F4  CFDD FFF7          	movff	postdec2,tblptrh
  2050  0018F8                     	if	0	;tblptru may be non-zero
  2051  0018F8                     	endif
  2052  0018F8                     	if	0	;tblptru may be non-zero
  2053  0018F8                     	endif
  2054  0018F8  0008               	tblrd		*
  2055  0018FA  50F5               	movf	tablat,w,c
  2056  0018FC  0A69               	xorlw	105
  2057  0018FE  A4D8               	btfss	status,2,c
  2058  001900  D03F               	goto	l2392
  2059  001902                     u2110:
  2060                           
  2061                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 827:             ++*
      +                          fmt;
  2062  001902  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2063  001906  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2064  00190A  2ADE               	incf	postinc2,f,c
  2065  00190C  0E00               	movlw	0
  2066  00190E  22DD               	addwfc	postdec2,f,c
  2067                           
  2068                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 828:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  2069  001910  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  2070  001914  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  2071  001918  CFDF F055          	movff	indf2,??_vfpfcnvrt
  2072  00191C  0E02               	movlw	2
  2073  00191E  26DE               	addwf	postinc2,f,c
  2074  001920  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  2075  001924  0E00               	movlw	0
  2076  001926  22DD               	addwfc	postdec2,f,c
  2077  001928  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  2078  00192C  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  2079  001930  CFDE F057          	movff	postinc2,vfpfcnvrt@ll
  2080  001934  CFDD F058          	movff	postdec2,vfpfcnvrt@ll+1
  2081  001938  0E00               	movlw	0
  2082  00193A  BE58               	btfsc	vfpfcnvrt@ll+1,7,c
  2083  00193C  0EFF               	movlw	-1
  2084  00193E  6E59               	movwf	vfpfcnvrt@ll+2,c
  2085  001940  6E5A               	movwf	vfpfcnvrt@ll+3,c
  2086  001942  6E5B               	movwf	vfpfcnvrt@ll+4,c
  2087  001944  6E5C               	movwf	vfpfcnvrt@ll+5,c
  2088  001946  6E5D               	movwf	vfpfcnvrt@ll+6,c
  2089  001948  6E5E               	movwf	vfpfcnvrt@ll+7,c
  2090                           
  2091                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 830:             ret
      +                          urn dtoa(fp, ll);
  2092  00194A  C04F  F02B         	movff	vfpfcnvrt@fp,dtoa@fp
  2093  00194E  C050  F02C         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  2094  001952  C057  F02D         	movff	vfpfcnvrt@ll,dtoa@d
  2095  001956  C058  F02E         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  2096  00195A  C059  F02F         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  2097  00195E  C05A  F030         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  2098  001962  C05B  F031         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  2099  001966  C05C  F032         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  2100  00196A  C05D  F033         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  2101  00196E  C05E  F034         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  2102  001972  ECF5  F00A         	call	_dtoa	;wreg free
  2103  001976  C02B  F04F         	movff	?_dtoa,?_vfpfcnvrt
  2104  00197A  C02C  F050         	movff	?_dtoa+1,?_vfpfcnvrt+1
  2105  00197E  0012               	return	
  2106  001980                     l2392:
  2107                           
  2108                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
  2109  001980  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2110  001984  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2111  001988  CFDE FFF6          	movff	postinc2,tblptrl
  2112  00198C  CFDD FFF7          	movff	postdec2,tblptrh
  2113  001990                     	if	0	;tblptru may be non-zero
  2114  001990                     	endif
  2115  001990                     	if	0	;tblptru may be non-zero
  2116  001990                     	endif
  2117  001990  0008               	tblrd		*
  2118  001992  50F5               	movf	tablat,w,c
  2119  001994  0A25               	xorlw	37
  2120  001996  A4D8               	btfss	status,2,c
  2121  001998  D016               	goto	l2402
  2122                           
  2123                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
  2124  00199A  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2125  00199E  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2126  0019A2  2ADE               	incf	postinc2,f,c
  2127  0019A4  0E00               	movlw	0
  2128  0019A6  22DD               	addwfc	postdec2,f,c
  2129                           
  2130                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
  2131  0019A8  0E00               	movlw	0
  2132  0019AA  6E11               	movwf	fputc@c+1,c
  2133  0019AC  0E25               	movlw	37
  2134  0019AE  6E10               	movwf	fputc@c,c
  2135  0019B0  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2136  0019B4  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2137  0019B8  EC18  F00F         	call	_fputc	;wreg free
  2138  0019BC                     l2398:
  2139                           
  2140                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
  2141  0019BC  0E00               	movlw	0
  2142  0019BE  6E50               	movwf	?_vfpfcnvrt+1,c
  2143  0019C0  0E01               	movlw	1
  2144  0019C2  6E4F               	movwf	?_vfpfcnvrt,c
  2145  0019C4  0012               	return	
  2146  0019C6                     l2402:
  2147                           
  2148                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  2149  0019C6  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2150  0019CA  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2151  0019CE  2ADE               	incf	postinc2,f,c
  2152  0019D0  0E00               	movlw	0
  2153  0019D2  22DD               	addwfc	postdec2,f,c
  2154                           
  2155                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  2156  0019D4  0E00               	movlw	0
  2157  0019D6  6E50               	movwf	?_vfpfcnvrt+1,c
  2158  0019D8  0E00               	movlw	0
  2159  0019DA  6E4F               	movwf	?_vfpfcnvrt,c
  2160  0019DC  0012               	return	
  2161  0019DE                     l2408:
  2162                           
  2163                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  2164  0019DE  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2165  0019E2  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2166  0019E6  CFDE FFF6          	movff	postinc2,tblptrl
  2167  0019EA  CFDD FFF7          	movff	postdec2,tblptrh
  2168  0019EE                     	if	0	;tblptru may be non-zero
  2169  0019EE                     	endif
  2170  0019EE                     	if	0	;tblptru may be non-zero
  2171  0019EE                     	endif
  2172  0019EE  0008               	tblrd		*
  2173  0019F0  50F5               	movf	tablat,w,c
  2174  0019F2  6E10               	movwf	fputc@c,c
  2175  0019F4  6A11               	clrf	fputc@c+1,c
  2176  0019F6  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  2177  0019FA  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  2178  0019FE  EC18  F00F         	call	_fputc	;wreg free
  2179                           
  2180                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  2181  001A02  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  2182  001A06  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  2183  001A0A  2ADE               	incf	postinc2,f,c
  2184  001A0C  0E00               	movlw	0
  2185  001A0E  22DD               	addwfc	postdec2,f,c
  2186  001A10  D7D5               	goto	l2398
  2187  001A12                     __end_of_vfpfcnvrt:
  2188                           	opt callstack 0
  2189                           
  2190 ;; *************** function _dtoa *****************
  2191 ;; Defined at:
  2192 ;;		line 274 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2193 ;; Parameters:    Size  Location     Type
  2194 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  2195 ;;		 -> NULL(0), 
  2196 ;;  d               8   44[COMRAM] long long 
  2197 ;; Auto vars:     Size  Location     Type
  2198 ;;  n               8   68[COMRAM] long long 
  2199 ;;  i               2   76[COMRAM] int 
  2200 ;;  s               2   66[COMRAM] int 
  2201 ;;  w               2   64[COMRAM] int 
  2202 ;;  p               2   62[COMRAM] int 
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  2   42[COMRAM] int 
  2205 ;; Registers used:
  2206 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2212 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;Total ram usage:       36 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    8
  2219 ;; This function calls:
  2220 ;;		___aodiv
  2221 ;;		___aomod
  2222 ;;		_abs
  2223 ;;		_pad
  2224 ;; This function is called by:
  2225 ;;		_vfpfcnvrt
  2226 ;; This function uses a non-reentrant model
  2227 ;;
  2228                           
  2229                           	psect	text4
  2230  0015EA                     __ptext4:
  2231                           	opt callstack 0
  2232  0015EA                     _dtoa:
  2233                           	opt callstack 19
  2234                           
  2235                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 274: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.
      +                          c: 275: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 276:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 277:   
      +                            long long n;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 280:  
      +                             n = d;
  2236                           
  2237                           ;incstack = 0
  2238  0015EA  C02D  F045         	movff	dtoa@d,dtoa@n
  2239  0015EE  C02E  F046         	movff	dtoa@d+1,dtoa@n+1
  2240  0015F2  C02F  F047         	movff	dtoa@d+2,dtoa@n+2
  2241  0015F6  C030  F048         	movff	dtoa@d+3,dtoa@n+3
  2242  0015FA  C031  F049         	movff	dtoa@d+4,dtoa@n+4
  2243  0015FE  C032  F04A         	movff	dtoa@d+5,dtoa@n+5
  2244  001602  C033  F04B         	movff	dtoa@d+6,dtoa@n+6
  2245  001606  C034  F04C         	movff	dtoa@d+7,dtoa@n+7
  2246                           
  2247                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ?
      +                           1 : 0;
  2248  00160A  AE4C               	btfss	dtoa@n+7,7,c
  2249  00160C  D002               	goto	u1930
  2250  00160E  0E01               	movlw	1
  2251  001610  D001               	goto	u1940
  2252  001612                     u1930:
  2253  001612  0E00               	movlw	0
  2254  001614                     u1940:
  2255  001614  6E43               	movwf	dtoa@s,c
  2256  001616  6A44               	clrf	dtoa@s+1,c
  2257                           
  2258                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  2259  001618  5043               	movf	dtoa@s,w,c
  2260  00161A  1044               	iorwf	dtoa@s+1,w,c
  2261  00161C  B4D8               	btfsc	status,2,c
  2262  00161E  D010               	goto	l2310
  2263                           
  2264                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  2265  001620  1E4C               	comf	dtoa@n+7,f,c
  2266  001622  1E4B               	comf	dtoa@n+6,f,c
  2267  001624  1E4A               	comf	dtoa@n+5,f,c
  2268  001626  1E49               	comf	dtoa@n+4,f,c
  2269  001628  1E48               	comf	dtoa@n+3,f,c
  2270  00162A  1E47               	comf	dtoa@n+2,f,c
  2271  00162C  1E46               	comf	dtoa@n+1,f,c
  2272  00162E  6C45               	negf	dtoa@n,c
  2273  001630  0E00               	movlw	0
  2274  001632  2246               	addwfc	dtoa@n+1,f,c
  2275  001634  2247               	addwfc	dtoa@n+2,f,c
  2276  001636  2248               	addwfc	dtoa@n+3,f,c
  2277  001638  2249               	addwfc	dtoa@n+4,f,c
  2278  00163A  224A               	addwfc	dtoa@n+5,f,c
  2279  00163C  224B               	addwfc	dtoa@n+6,f,c
  2280  00163E  224C               	addwfc	dtoa@n+7,f,c
  2281  001640                     l2310:
  2282                           
  2283                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 287:     if (!(prec 
      +                          < 0)) {
  2284  001640  AE71               	btfss	_prec+1,7,c
  2285                           
  2286                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 288:         flags &
      +                          = ~(1 << 1);
  2287  001642  9272               	bcf	_flags,1,c
  2288                           
  2289                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 290:     p = (0 < pr
      +                          ec) ? prec : 1;
  2290  001644  BE71               	btfsc	_prec+1,7,c
  2291  001646  D005               	goto	u1970
  2292  001648  5071               	movf	_prec+1,w,c
  2293  00164A  E108               	bnz	l177
  2294  00164C  0470               	decf	_prec,w,c
  2295  00164E  B0D8               	btfsc	status,0,c
  2296  001650  D005               	goto	l177
  2297  001652                     u1970:
  2298  001652  0E00               	movlw	0
  2299  001654  6E40               	movwf	dtoa@p+1,c
  2300  001656  0E01               	movlw	1
  2301  001658  6E3F               	movwf	dtoa@p,c
  2302  00165A  D004               	goto	l179
  2303  00165C                     l177:
  2304  00165C  C070  F03F         	movff	_prec,dtoa@p
  2305  001660  C071  F040         	movff	_prec+1,dtoa@p+1
  2306  001664                     l179:
  2307                           
  2308                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 291:     w = width;
  2309  001664  C06E  F041         	movff	_width,dtoa@w
  2310  001668  C06F  F042         	movff	_width+1,dtoa@w+1
  2311                           
  2312                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 292:     if (s || (f
      +                          lags & (1 << 2))) {
  2313  00166C  5043               	movf	dtoa@s,w,c
  2314  00166E  1044               	iorwf	dtoa@s+1,w,c
  2315  001670  A4D8               	btfss	status,2,c
  2316  001672  D002               	goto	u1990
  2317  001674  A472               	btfss	_flags,2,c
  2318  001676  D003               	goto	l2324
  2319  001678                     u1990:
  2320                           
  2321                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 293:         --w;
  2322  001678  0641               	decf	dtoa@w,f,c
  2323  00167A  A0D8               	btfss	status,0,c
  2324  00167C  0642               	decf	dtoa@w+1,f,c
  2325  00167E                     l2324:
  2326                           
  2327                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(
      +                          dbuf) - 1;
  2328  00167E  0E00               	movlw	0
  2329  001680  6E4E               	movwf	dtoa@i+1,c
  2330  001682  0E1F               	movlw	31
  2331  001684  6E4D               	movwf	dtoa@i,c
  2332                           
  2333                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '
      +                          \0';
  2334  001686  0E00               	movlw	0
  2335  001688  0100               	movlb	0	; () banked
  2336  00168A  6FE3               	movwf	(_dbuf+31)& (0+255),b
  2337                           
  2338                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2339  00168C  D07C               	goto	l2338
  2340  00168E                     l2328:
  2341                           
  2342                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 300:         --i;
  2343  00168E  064D               	decf	dtoa@i,f,c
  2344  001690  A0D8               	btfss	status,0,c
  2345  001692  064E               	decf	dtoa@i+1,f,c
  2346                           
  2347                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 301:         dbuf[i]
      +                           = '0' + abs(n % 10);
  2348  001694  0EC4               	movlw	low _dbuf
  2349  001696  244D               	addwf	dtoa@i,w,c
  2350  001698  6ED9               	movwf	fsr2l,c
  2351  00169A  0E00               	movlw	high _dbuf
  2352  00169C  204E               	addwfc	dtoa@i+1,w,c
  2353  00169E  6EDA               	movwf	fsr2h,c
  2354  0016A0  C045  F00C         	movff	dtoa@n,___aomod@dividend
  2355  0016A4  C046  F00D         	movff	dtoa@n+1,___aomod@dividend+1
  2356  0016A8  C047  F00E         	movff	dtoa@n+2,___aomod@dividend+2
  2357  0016AC  C048  F00F         	movff	dtoa@n+3,___aomod@dividend+3
  2358  0016B0  C049  F010         	movff	dtoa@n+4,___aomod@dividend+4
  2359  0016B4  C04A  F011         	movff	dtoa@n+5,___aomod@dividend+5
  2360  0016B8  C04B  F012         	movff	dtoa@n+6,___aomod@dividend+6
  2361  0016BC  C04C  F013         	movff	dtoa@n+7,___aomod@dividend+7
  2362  0016C0  0E0A               	movlw	10
  2363  0016C2  6E14               	movwf	___aomod@divisor,c
  2364  0016C4  0E00               	movlw	0
  2365  0016C6  6E15               	movwf	___aomod@divisor+1,c
  2366  0016C8  0E00               	movlw	0
  2367  0016CA  6E16               	movwf	___aomod@divisor+2,c
  2368  0016CC  0E00               	movlw	0
  2369  0016CE  6E17               	movwf	___aomod@divisor+3,c
  2370  0016D0  0E00               	movlw	0
  2371  0016D2  6E18               	movwf	___aomod@divisor+4,c
  2372  0016D4  0E00               	movlw	0
  2373  0016D6  6E19               	movwf	___aomod@divisor+5,c
  2374  0016D8  0E00               	movlw	0
  2375  0016DA  6E1A               	movwf	___aomod@divisor+6,c
  2376  0016DC  0E00               	movlw	0
  2377  0016DE  6E1B               	movwf	___aomod@divisor+7,c
  2378  0016E0  ECAD  F00D         	call	___aomod	;wreg free
  2379  0016E4  C00C  F035         	movff	?___aomod,??_dtoa
  2380  0016E8  C00D  F036         	movff	?___aomod+1,??_dtoa+1
  2381  0016EC  C00E  F037         	movff	?___aomod+2,??_dtoa+2
  2382  0016F0  C00F  F038         	movff	?___aomod+3,??_dtoa+3
  2383  0016F4  C010  F039         	movff	?___aomod+4,??_dtoa+4
  2384  0016F8  C011  F03A         	movff	?___aomod+5,??_dtoa+5
  2385  0016FC  C012  F03B         	movff	?___aomod+6,??_dtoa+6
  2386  001700  C013  F03C         	movff	?___aomod+7,??_dtoa+7
  2387  001704  C035  F01E         	movff	??_dtoa,abs@a
  2388  001708  C037  F01F         	movff	??_dtoa+2,abs@a+1
  2389  00170C  EC35  F010         	call	_abs	;wreg free
  2390  001710  501E               	movf	?_abs,w,c
  2391  001712  0F30               	addlw	48
  2392  001714  6EDF               	movwf	indf2,c
  2393                           
  2394                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 302:         --p;
  2395  001716  063F               	decf	dtoa@p,f,c
  2396  001718  A0D8               	btfss	status,0,c
  2397  00171A  0640               	decf	dtoa@p+1,f,c
  2398                           
  2399                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 303:         --w;
  2400  00171C  0641               	decf	dtoa@w,f,c
  2401  00171E  A0D8               	btfss	status,0,c
  2402  001720  0642               	decf	dtoa@w+1,f,c
  2403                           
  2404                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 304:         n = n /
      +                           10;
  2405  001722  C045  F00C         	movff	dtoa@n,___aodiv@dividend
  2406  001726  C046  F00D         	movff	dtoa@n+1,___aodiv@dividend+1
  2407  00172A  C047  F00E         	movff	dtoa@n+2,___aodiv@dividend+2
  2408  00172E  C048  F00F         	movff	dtoa@n+3,___aodiv@dividend+3
  2409  001732  C049  F010         	movff	dtoa@n+4,___aodiv@dividend+4
  2410  001736  C04A  F011         	movff	dtoa@n+5,___aodiv@dividend+5
  2411  00173A  C04B  F012         	movff	dtoa@n+6,___aodiv@dividend+6
  2412  00173E  C04C  F013         	movff	dtoa@n+7,___aodiv@dividend+7
  2413  001742  0E0A               	movlw	10
  2414  001744  6E14               	movwf	___aodiv@divisor,c
  2415  001746  0E00               	movlw	0
  2416  001748  6E15               	movwf	___aodiv@divisor+1,c
  2417  00174A  0E00               	movlw	0
  2418  00174C  6E16               	movwf	___aodiv@divisor+2,c
  2419  00174E  0E00               	movlw	0
  2420  001750  6E17               	movwf	___aodiv@divisor+3,c
  2421  001752  0E00               	movlw	0
  2422  001754  6E18               	movwf	___aodiv@divisor+4,c
  2423  001756  0E00               	movlw	0
  2424  001758  6E19               	movwf	___aodiv@divisor+5,c
  2425  00175A  0E00               	movlw	0
  2426  00175C  6E1A               	movwf	___aodiv@divisor+6,c
  2427  00175E  0E00               	movlw	0
  2428  001760  6E1B               	movwf	___aodiv@divisor+7,c
  2429  001762  EC09  F00D         	call	___aodiv	;wreg free
  2430  001766  C00C  F045         	movff	?___aodiv,dtoa@n
  2431  00176A  C00D  F046         	movff	?___aodiv+1,dtoa@n+1
  2432  00176E  C00E  F047         	movff	?___aodiv+2,dtoa@n+2
  2433  001772  C00F  F048         	movff	?___aodiv+3,dtoa@n+3
  2434  001776  C010  F049         	movff	?___aodiv+4,dtoa@n+4
  2435  00177A  C011  F04A         	movff	?___aodiv+5,dtoa@n+5
  2436  00177E  C012  F04B         	movff	?___aodiv+6,dtoa@n+6
  2437  001782  C013  F04C         	movff	?___aodiv+7,dtoa@n+7
  2438  001786                     l2338:
  2439                           
  2440                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2441  001786  BE4E               	btfsc	dtoa@i+1,7,c
  2442  001788  D01F               	goto	u2040
  2443  00178A  504E               	movf	dtoa@i+1,w,c
  2444  00178C  E103               	bnz	u2000
  2445  00178E  044D               	decf	dtoa@i,w,c
  2446  001790  A0D8               	btfss	status,0,c
  2447  001792  D01A               	goto	u2040
  2448  001794                     u2000:
  2449  001794  5045               	movf	dtoa@n,w,c
  2450  001796  1046               	iorwf	dtoa@n+1,w,c
  2451  001798  1047               	iorwf	dtoa@n+2,w,c
  2452  00179A  1048               	iorwf	dtoa@n+3,w,c
  2453  00179C  1049               	iorwf	dtoa@n+4,w,c
  2454  00179E  104A               	iorwf	dtoa@n+5,w,c
  2455  0017A0  104B               	iorwf	dtoa@n+6,w,c
  2456  0017A2  104C               	iorwf	dtoa@n+7,w,c
  2457  0017A4  A4D8               	btfss	status,2,c
  2458  0017A6  D773               	goto	l2328
  2459  0017A8  BE40               	btfsc	dtoa@p+1,7,c
  2460  0017AA  D005               	goto	u2020
  2461  0017AC  5040               	movf	dtoa@p+1,w,c
  2462  0017AE  E102               	bnz	u2021
  2463  0017B0  043F               	decf	dtoa@p,w,c
  2464  0017B2  B0D8               	btfsc	status,0,c
  2465  0017B4                     u2021:
  2466  0017B4  D76C               	goto	l2328
  2467  0017B6                     u2020:
  2468  0017B6  BE42               	btfsc	dtoa@w+1,7,c
  2469  0017B8  D007               	goto	u2040
  2470  0017BA  5042               	movf	dtoa@w+1,w,c
  2471  0017BC  E103               	bnz	u2030
  2472  0017BE  0441               	decf	dtoa@w,w,c
  2473  0017C0  A0D8               	btfss	status,0,c
  2474  0017C2  D002               	goto	u2040
  2475  0017C4                     u2030:
  2476  0017C4  B272               	btfsc	_flags,1,c
  2477  0017C6  D763               	goto	l2328
  2478  0017C8                     u2040:
  2479                           
  2480                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 308:     if (s || (f
      +                          lags & (1 << 2))) {
  2481  0017C8  5043               	movf	dtoa@s,w,c
  2482  0017CA  1044               	iorwf	dtoa@s+1,w,c
  2483  0017CC  A4D8               	btfss	status,2,c
  2484  0017CE  D002               	goto	u2060
  2485  0017D0  A472               	btfss	_flags,2,c
  2486  0017D2  D017               	goto	l2362
  2487  0017D4                     u2060:
  2488                           
  2489                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 309:         --i;
  2490  0017D4  064D               	decf	dtoa@i,f,c
  2491  0017D6  A0D8               	btfss	status,0,c
  2492  0017D8  064E               	decf	dtoa@i+1,f,c
  2493                           
  2494                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 310:         dbuf[i]
      +                           = s ? '-' : '+';
  2495  0017DA  5043               	movf	dtoa@s,w,c
  2496  0017DC  1044               	iorwf	dtoa@s+1,w,c
  2497  0017DE  A4D8               	btfss	status,2,c
  2498  0017E0  D004               	goto	l2358
  2499  0017E2  0E00               	movlw	0
  2500  0017E4  6E3E               	movwf	_dtoa$316+1,c
  2501  0017E6  0E2B               	movlw	43
  2502  0017E8  D003               	goto	L1
  2503  0017EA                     l2358:
  2504  0017EA  0E00               	movlw	0
  2505  0017EC  6E3E               	movwf	_dtoa$316+1,c
  2506  0017EE  0E2D               	movlw	45
  2507  0017F0                     L1:
  2508  0017F0  6E3D               	movwf	_dtoa$316,c
  2509  0017F2  0EC4               	movlw	low _dbuf
  2510  0017F4  244D               	addwf	dtoa@i,w,c
  2511  0017F6  6ED9               	movwf	fsr2l,c
  2512  0017F8  0E00               	movlw	high _dbuf
  2513  0017FA  204E               	addwfc	dtoa@i+1,w,c
  2514  0017FC  6EDA               	movwf	fsr2h,c
  2515  0017FE  C03D  FFDF         	movff	_dtoa$316,indf2
  2516  001802                     l2362:
  2517                           
  2518                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 314:     return pad(
      +                          fp, &dbuf[i], w);
  2519  001802  C02B  F020         	movff	dtoa@fp,pad@fp
  2520  001806  C02C  F021         	movff	dtoa@fp+1,pad@fp+1
  2521  00180A  0EC4               	movlw	low _dbuf
  2522  00180C  244D               	addwf	dtoa@i,w,c
  2523  00180E  6E22               	movwf	pad@buf,c
  2524  001810  0E00               	movlw	high _dbuf
  2525  001812  204E               	addwfc	dtoa@i+1,w,c
  2526  001814  6E23               	movwf	pad@buf+1,c
  2527  001816  C041  F024         	movff	dtoa@w,pad@p
  2528  00181A  C042  F025         	movff	dtoa@w+1,pad@p+1
  2529  00181E  EC95  F00E         	call	_pad	;wreg free
  2530  001822  C020  F02B         	movff	?_pad,?_dtoa
  2531  001826  C021  F02C         	movff	?_pad+1,?_dtoa+1
  2532  00182A  0012               	return		;funcret
  2533  00182C                     __end_of_dtoa:
  2534                           	opt callstack 0
  2535                           
  2536 ;; *************** function _abs *****************
  2537 ;; Defined at:
  2538 ;;		line 1 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/abs.c"
  2539 ;; Parameters:    Size  Location     Type
  2540 ;;  a               2   29[COMRAM] int 
  2541 ;; Auto vars:     Size  Location     Type
  2542 ;;		None
  2543 ;; Return value:  Size  Location     Type
  2544 ;;                  2   29[COMRAM] int 
  2545 ;; Registers used:
  2546 ;;		wreg, status,2, status,0
  2547 ;; Tracked objects:
  2548 ;;		On entry : 0/0
  2549 ;;		On exit  : 0/0
  2550 ;;		Unchanged: 0/0
  2551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2552 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2553 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2554 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2555 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;Total ram usage:        4 bytes
  2557 ;; Hardware stack levels used:    1
  2558 ;; Hardware stack levels required when called:    1
  2559 ;; This function calls:
  2560 ;;		Nothing
  2561 ;; This function is called by:
  2562 ;;		_dtoa
  2563 ;; This function uses a non-reentrant model
  2564 ;;
  2565                           
  2566                           	psect	text5
  2567  00206A                     __ptext5:
  2568                           	opt callstack 0
  2569  00206A                     _abs:
  2570                           	opt callstack 25
  2571                           
  2572                           ;incstack = 0
  2573  00206A  BE1F               	btfsc	abs@a+1,7,c
  2574  00206C  D005               	goto	u1780
  2575  00206E  501F               	movf	abs@a+1,w,c
  2576  002070  E110               	bnz	l890
  2577  002072  041E               	decf	abs@a,w,c
  2578  002074  B0D8               	btfsc	status,0,c
  2579  002076  D00D               	goto	l890
  2580  002078                     u1780:
  2581  002078  C01E  F020         	movff	abs@a,??_abs
  2582  00207C  C01F  F021         	movff	abs@a+1,??_abs+1
  2583  002080  1E20               	comf	??_abs,f,c
  2584  002082  1E21               	comf	??_abs+1,f,c
  2585  002084  4A20               	infsnz	??_abs,f,c
  2586  002086  2A21               	incf	??_abs+1,f,c
  2587  002088  C020  F01E         	movff	??_abs,?_abs
  2588  00208C  C021  F01F         	movff	??_abs+1,?_abs+1
  2589  002090  0012               	return	
  2590  002092                     l890:
  2591  002092  C01E  F01E         	movff	abs@a,?_abs
  2592  002096  C01F  F01F         	movff	abs@a+1,?_abs+1
  2593  00209A  0012               	return		;funcret
  2594  00209C                     __end_of_abs:
  2595                           	opt callstack 0
  2596                           
  2597 ;; *************** function ___aomod *****************
  2598 ;; Defined at:
  2599 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aomod.c"
  2600 ;; Parameters:    Size  Location     Type
  2601 ;;  dividend        8   11[COMRAM] long long 
  2602 ;;  divisor         8   19[COMRAM] long long 
  2603 ;; Auto vars:     Size  Location     Type
  2604 ;;  sign            1   28[COMRAM] unsigned char 
  2605 ;;  counter         1   27[COMRAM] unsigned char 
  2606 ;; Return value:  Size  Location     Type
  2607 ;;                  8   11[COMRAM] long long 
  2608 ;; Registers used:
  2609 ;;		wreg, status,2, status,0
  2610 ;; Tracked objects:
  2611 ;;		On entry : 0/0
  2612 ;;		On exit  : 0/0
  2613 ;;		Unchanged: 0/0
  2614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2615 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2616 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2618 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2619 ;;Total ram usage:       18 bytes
  2620 ;; Hardware stack levels used:    1
  2621 ;; Hardware stack levels required when called:    1
  2622 ;; This function calls:
  2623 ;;		Nothing
  2624 ;; This function is called by:
  2625 ;;		_dtoa
  2626 ;; This function uses a non-reentrant model
  2627 ;;
  2628                           
  2629                           	psect	text6
  2630  001B5A                     __ptext6:
  2631                           	opt callstack 0
  2632  001B5A                     ___aomod:
  2633                           	opt callstack 25
  2634                           
  2635                           ;incstack = 0
  2636  001B5A  0E00               	movlw	0
  2637  001B5C  6E1D               	movwf	___aomod@sign,c
  2638  001B5E  AE13               	btfss	___aomod@dividend+7,7,c
  2639  001B60  D012               	goto	l2262
  2640  001B62  1E13               	comf	___aomod@dividend+7,f,c
  2641  001B64  1E12               	comf	___aomod@dividend+6,f,c
  2642  001B66  1E11               	comf	___aomod@dividend+5,f,c
  2643  001B68  1E10               	comf	___aomod@dividend+4,f,c
  2644  001B6A  1E0F               	comf	___aomod@dividend+3,f,c
  2645  001B6C  1E0E               	comf	___aomod@dividend+2,f,c
  2646  001B6E  1E0D               	comf	___aomod@dividend+1,f,c
  2647  001B70  6C0C               	negf	___aomod@dividend,c
  2648  001B72  0E00               	movlw	0
  2649  001B74  220D               	addwfc	___aomod@dividend+1,f,c
  2650  001B76  220E               	addwfc	___aomod@dividend+2,f,c
  2651  001B78  220F               	addwfc	___aomod@dividend+3,f,c
  2652  001B7A  2210               	addwfc	___aomod@dividend+4,f,c
  2653  001B7C  2211               	addwfc	___aomod@dividend+5,f,c
  2654  001B7E  2212               	addwfc	___aomod@dividend+6,f,c
  2655  001B80  2213               	addwfc	___aomod@dividend+7,f,c
  2656  001B82  0E01               	movlw	1
  2657  001B84  6E1D               	movwf	___aomod@sign,c
  2658  001B86                     l2262:
  2659  001B86  AE1B               	btfss	___aomod@divisor+7,7,c
  2660  001B88  D010               	goto	l2266
  2661  001B8A  1E1B               	comf	___aomod@divisor+7,f,c
  2662  001B8C  1E1A               	comf	___aomod@divisor+6,f,c
  2663  001B8E  1E19               	comf	___aomod@divisor+5,f,c
  2664  001B90  1E18               	comf	___aomod@divisor+4,f,c
  2665  001B92  1E17               	comf	___aomod@divisor+3,f,c
  2666  001B94  1E16               	comf	___aomod@divisor+2,f,c
  2667  001B96  1E15               	comf	___aomod@divisor+1,f,c
  2668  001B98  6C14               	negf	___aomod@divisor,c
  2669  001B9A  0E00               	movlw	0
  2670  001B9C  2215               	addwfc	___aomod@divisor+1,f,c
  2671  001B9E  2216               	addwfc	___aomod@divisor+2,f,c
  2672  001BA0  2217               	addwfc	___aomod@divisor+3,f,c
  2673  001BA2  2218               	addwfc	___aomod@divisor+4,f,c
  2674  001BA4  2219               	addwfc	___aomod@divisor+5,f,c
  2675  001BA6  221A               	addwfc	___aomod@divisor+6,f,c
  2676  001BA8  221B               	addwfc	___aomod@divisor+7,f,c
  2677  001BAA                     l2266:
  2678  001BAA  5014               	movf	___aomod@divisor,w,c
  2679  001BAC  1015               	iorwf	___aomod@divisor+1,w,c
  2680  001BAE  1016               	iorwf	___aomod@divisor+2,w,c
  2681  001BB0  1017               	iorwf	___aomod@divisor+3,w,c
  2682  001BB2  1018               	iorwf	___aomod@divisor+4,w,c
  2683  001BB4  1019               	iorwf	___aomod@divisor+5,w,c
  2684  001BB6  101A               	iorwf	___aomod@divisor+6,w,c
  2685  001BB8  101B               	iorwf	___aomod@divisor+7,w,c
  2686  001BBA  B4D8               	btfsc	status,2,c
  2687  001BBC  D03C               	goto	l2282
  2688  001BBE  0E01               	movlw	1
  2689  001BC0  6E1C               	movwf	___aomod@counter,c
  2690  001BC2  D00A               	goto	l2272
  2691  001BC4                     l2270:
  2692  001BC4  90D8               	bcf	status,0,c
  2693  001BC6  3614               	rlcf	___aomod@divisor,f,c
  2694  001BC8  3615               	rlcf	___aomod@divisor+1,f,c
  2695  001BCA  3616               	rlcf	___aomod@divisor+2,f,c
  2696  001BCC  3617               	rlcf	___aomod@divisor+3,f,c
  2697  001BCE  3618               	rlcf	___aomod@divisor+4,f,c
  2698  001BD0  3619               	rlcf	___aomod@divisor+5,f,c
  2699  001BD2  361A               	rlcf	___aomod@divisor+6,f,c
  2700  001BD4  361B               	rlcf	___aomod@divisor+7,f,c
  2701  001BD6  2A1C               	incf	___aomod@counter,f,c
  2702  001BD8                     l2272:
  2703  001BD8  AE1B               	btfss	___aomod@divisor+7,7,c
  2704  001BDA  D7F4               	goto	l2270
  2705  001BDC                     u1890:
  2706  001BDC  5014               	movf	___aomod@divisor,w,c
  2707  001BDE  5C0C               	subwf	___aomod@dividend,w,c
  2708  001BE0  5015               	movf	___aomod@divisor+1,w,c
  2709  001BE2  580D               	subwfb	___aomod@dividend+1,w,c
  2710  001BE4  5016               	movf	___aomod@divisor+2,w,c
  2711  001BE6  580E               	subwfb	___aomod@dividend+2,w,c
  2712  001BE8  5017               	movf	___aomod@divisor+3,w,c
  2713  001BEA  580F               	subwfb	___aomod@dividend+3,w,c
  2714  001BEC  5018               	movf	___aomod@divisor+4,w,c
  2715  001BEE  5810               	subwfb	___aomod@dividend+4,w,c
  2716  001BF0  5019               	movf	___aomod@divisor+5,w,c
  2717  001BF2  5811               	subwfb	___aomod@dividend+5,w,c
  2718  001BF4  501A               	movf	___aomod@divisor+6,w,c
  2719  001BF6  5812               	subwfb	___aomod@dividend+6,w,c
  2720  001BF8  501B               	movf	___aomod@divisor+7,w,c
  2721  001BFA  5813               	subwfb	___aomod@dividend+7,w,c
  2722  001BFC  A0D8               	btfss	status,0,c
  2723  001BFE  D010               	goto	l2278
  2724  001C00  5014               	movf	___aomod@divisor,w,c
  2725  001C02  5E0C               	subwf	___aomod@dividend,f,c
  2726  001C04  5015               	movf	___aomod@divisor+1,w,c
  2727  001C06  5A0D               	subwfb	___aomod@dividend+1,f,c
  2728  001C08  5016               	movf	___aomod@divisor+2,w,c
  2729  001C0A  5A0E               	subwfb	___aomod@dividend+2,f,c
  2730  001C0C  5017               	movf	___aomod@divisor+3,w,c
  2731  001C0E  5A0F               	subwfb	___aomod@dividend+3,f,c
  2732  001C10  5018               	movf	___aomod@divisor+4,w,c
  2733  001C12  5A10               	subwfb	___aomod@dividend+4,f,c
  2734  001C14  5019               	movf	___aomod@divisor+5,w,c
  2735  001C16  5A11               	subwfb	___aomod@dividend+5,f,c
  2736  001C18  501A               	movf	___aomod@divisor+6,w,c
  2737  001C1A  5A12               	subwfb	___aomod@dividend+6,f,c
  2738  001C1C  501B               	movf	___aomod@divisor+7,w,c
  2739  001C1E  5A13               	subwfb	___aomod@dividend+7,f,c
  2740  001C20                     l2278:
  2741  001C20  90D8               	bcf	status,0,c
  2742  001C22  321B               	rrcf	___aomod@divisor+7,f,c
  2743  001C24  321A               	rrcf	___aomod@divisor+6,f,c
  2744  001C26  3219               	rrcf	___aomod@divisor+5,f,c
  2745  001C28  3218               	rrcf	___aomod@divisor+4,f,c
  2746  001C2A  3217               	rrcf	___aomod@divisor+3,f,c
  2747  001C2C  3216               	rrcf	___aomod@divisor+2,f,c
  2748  001C2E  3215               	rrcf	___aomod@divisor+1,f,c
  2749  001C30  3214               	rrcf	___aomod@divisor,f,c
  2750  001C32  2E1C               	decfsz	___aomod@counter,f,c
  2751  001C34  D7D3               	goto	u1890
  2752  001C36                     l2282:
  2753  001C36  501D               	movf	___aomod@sign,w,c
  2754  001C38  B4D8               	btfsc	status,2,c
  2755  001C3A  D010               	goto	l2286
  2756  001C3C  1E13               	comf	___aomod@dividend+7,f,c
  2757  001C3E  1E12               	comf	___aomod@dividend+6,f,c
  2758  001C40  1E11               	comf	___aomod@dividend+5,f,c
  2759  001C42  1E10               	comf	___aomod@dividend+4,f,c
  2760  001C44  1E0F               	comf	___aomod@dividend+3,f,c
  2761  001C46  1E0E               	comf	___aomod@dividend+2,f,c
  2762  001C48  1E0D               	comf	___aomod@dividend+1,f,c
  2763  001C4A  6C0C               	negf	___aomod@dividend,c
  2764  001C4C  0E00               	movlw	0
  2765  001C4E  220D               	addwfc	___aomod@dividend+1,f,c
  2766  001C50  220E               	addwfc	___aomod@dividend+2,f,c
  2767  001C52  220F               	addwfc	___aomod@dividend+3,f,c
  2768  001C54  2210               	addwfc	___aomod@dividend+4,f,c
  2769  001C56  2211               	addwfc	___aomod@dividend+5,f,c
  2770  001C58  2212               	addwfc	___aomod@dividend+6,f,c
  2771  001C5A  2213               	addwfc	___aomod@dividend+7,f,c
  2772  001C5C                     l2286:
  2773  001C5C  C00C  F00C         	movff	___aomod@dividend,?___aomod
  2774  001C60  C00D  F00D         	movff	___aomod@dividend+1,?___aomod+1
  2775  001C64  C00E  F00E         	movff	___aomod@dividend+2,?___aomod+2
  2776  001C68  C00F  F00F         	movff	___aomod@dividend+3,?___aomod+3
  2777  001C6C  C010  F010         	movff	___aomod@dividend+4,?___aomod+4
  2778  001C70  C011  F011         	movff	___aomod@dividend+5,?___aomod+5
  2779  001C74  C012  F012         	movff	___aomod@dividend+6,?___aomod+6
  2780  001C78  C013  F013         	movff	___aomod@dividend+7,?___aomod+7
  2781  001C7C  0012               	return		;funcret
  2782  001C7E                     __end_of___aomod:
  2783                           	opt callstack 0
  2784                           
  2785 ;; *************** function ___aodiv *****************
  2786 ;; Defined at:
  2787 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aodiv.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;  dividend        8   11[COMRAM] long long 
  2790 ;;  divisor         8   19[COMRAM] long long 
  2791 ;; Auto vars:     Size  Location     Type
  2792 ;;  quotient        8   29[COMRAM] long long 
  2793 ;;  sign            1   28[COMRAM] unsigned char 
  2794 ;;  counter         1   27[COMRAM] unsigned char 
  2795 ;; Return value:  Size  Location     Type
  2796 ;;                  8   11[COMRAM] long long 
  2797 ;; Registers used:
  2798 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2799 ;; Tracked objects:
  2800 ;;		On entry : 0/0
  2801 ;;		On exit  : 0/0
  2802 ;;		Unchanged: 0/0
  2803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2804 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2805 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2807 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2808 ;;Total ram usage:       26 bytes
  2809 ;; Hardware stack levels used:    1
  2810 ;; Hardware stack levels required when called:    1
  2811 ;; This function calls:
  2812 ;;		Nothing
  2813 ;; This function is called by:
  2814 ;;		_dtoa
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           	psect	text7
  2819  001A12                     __ptext7:
  2820                           	opt callstack 0
  2821  001A12                     ___aodiv:
  2822                           	opt callstack 25
  2823                           
  2824                           ;incstack = 0
  2825  001A12  0E00               	movlw	0
  2826  001A14  6E1D               	movwf	___aodiv@sign,c
  2827  001A16  AE1B               	btfss	___aodiv@divisor+7,7,c
  2828  001A18  D012               	goto	l2218
  2829  001A1A  1E1B               	comf	___aodiv@divisor+7,f,c
  2830  001A1C  1E1A               	comf	___aodiv@divisor+6,f,c
  2831  001A1E  1E19               	comf	___aodiv@divisor+5,f,c
  2832  001A20  1E18               	comf	___aodiv@divisor+4,f,c
  2833  001A22  1E17               	comf	___aodiv@divisor+3,f,c
  2834  001A24  1E16               	comf	___aodiv@divisor+2,f,c
  2835  001A26  1E15               	comf	___aodiv@divisor+1,f,c
  2836  001A28  6C14               	negf	___aodiv@divisor,c
  2837  001A2A  0E00               	movlw	0
  2838  001A2C  2215               	addwfc	___aodiv@divisor+1,f,c
  2839  001A2E  2216               	addwfc	___aodiv@divisor+2,f,c
  2840  001A30  2217               	addwfc	___aodiv@divisor+3,f,c
  2841  001A32  2218               	addwfc	___aodiv@divisor+4,f,c
  2842  001A34  2219               	addwfc	___aodiv@divisor+5,f,c
  2843  001A36  221A               	addwfc	___aodiv@divisor+6,f,c
  2844  001A38  221B               	addwfc	___aodiv@divisor+7,f,c
  2845  001A3A  0E01               	movlw	1
  2846  001A3C  6E1D               	movwf	___aodiv@sign,c
  2847  001A3E                     l2218:
  2848  001A3E  AE13               	btfss	___aodiv@dividend+7,7,c
  2849  001A40  D012               	goto	l2224
  2850  001A42  1E13               	comf	___aodiv@dividend+7,f,c
  2851  001A44  1E12               	comf	___aodiv@dividend+6,f,c
  2852  001A46  1E11               	comf	___aodiv@dividend+5,f,c
  2853  001A48  1E10               	comf	___aodiv@dividend+4,f,c
  2854  001A4A  1E0F               	comf	___aodiv@dividend+3,f,c
  2855  001A4C  1E0E               	comf	___aodiv@dividend+2,f,c
  2856  001A4E  1E0D               	comf	___aodiv@dividend+1,f,c
  2857  001A50  6C0C               	negf	___aodiv@dividend,c
  2858  001A52  0E00               	movlw	0
  2859  001A54  220D               	addwfc	___aodiv@dividend+1,f,c
  2860  001A56  220E               	addwfc	___aodiv@dividend+2,f,c
  2861  001A58  220F               	addwfc	___aodiv@dividend+3,f,c
  2862  001A5A  2210               	addwfc	___aodiv@dividend+4,f,c
  2863  001A5C  2211               	addwfc	___aodiv@dividend+5,f,c
  2864  001A5E  2212               	addwfc	___aodiv@dividend+6,f,c
  2865  001A60  2213               	addwfc	___aodiv@dividend+7,f,c
  2866  001A62  0E01               	movlw	1
  2867  001A64  1A1D               	xorwf	___aodiv@sign,f,c
  2868  001A66                     l2224:
  2869  001A66  EE20  F01E         	lfsr	2,___aodiv@quotient
  2870  001A6A  0E07               	movlw	7
  2871  001A6C                     u1811:
  2872  001A6C  6ADE               	clrf	postinc2,c
  2873  001A6E  06E8               	decf	wreg,f,c
  2874  001A70  E2FD               	bc	u1811
  2875  001A72  5014               	movf	___aodiv@divisor,w,c
  2876  001A74  1015               	iorwf	___aodiv@divisor+1,w,c
  2877  001A76  1016               	iorwf	___aodiv@divisor+2,w,c
  2878  001A78  1017               	iorwf	___aodiv@divisor+3,w,c
  2879  001A7A  1018               	iorwf	___aodiv@divisor+4,w,c
  2880  001A7C  1019               	iorwf	___aodiv@divisor+5,w,c
  2881  001A7E  101A               	iorwf	___aodiv@divisor+6,w,c
  2882  001A80  101B               	iorwf	___aodiv@divisor+7,w,c
  2883  001A82  B4D8               	btfsc	status,2,c
  2884  001A84  D046               	goto	l2246
  2885  001A86  0E01               	movlw	1
  2886  001A88  6E1C               	movwf	___aodiv@counter,c
  2887  001A8A  D00A               	goto	l2232
  2888  001A8C                     l2230:
  2889  001A8C  90D8               	bcf	status,0,c
  2890  001A8E  3614               	rlcf	___aodiv@divisor,f,c
  2891  001A90  3615               	rlcf	___aodiv@divisor+1,f,c
  2892  001A92  3616               	rlcf	___aodiv@divisor+2,f,c
  2893  001A94  3617               	rlcf	___aodiv@divisor+3,f,c
  2894  001A96  3618               	rlcf	___aodiv@divisor+4,f,c
  2895  001A98  3619               	rlcf	___aodiv@divisor+5,f,c
  2896  001A9A  361A               	rlcf	___aodiv@divisor+6,f,c
  2897  001A9C  361B               	rlcf	___aodiv@divisor+7,f,c
  2898  001A9E  2A1C               	incf	___aodiv@counter,f,c
  2899  001AA0                     l2232:
  2900  001AA0  AE1B               	btfss	___aodiv@divisor+7,7,c
  2901  001AA2  D7F4               	goto	l2230
  2902  001AA4                     u1830:
  2903  001AA4  90D8               	bcf	status,0,c
  2904  001AA6  361E               	rlcf	___aodiv@quotient,f,c
  2905  001AA8  361F               	rlcf	___aodiv@quotient+1,f,c
  2906  001AAA  3620               	rlcf	___aodiv@quotient+2,f,c
  2907  001AAC  3621               	rlcf	___aodiv@quotient+3,f,c
  2908  001AAE  3622               	rlcf	___aodiv@quotient+4,f,c
  2909  001AB0  3623               	rlcf	___aodiv@quotient+5,f,c
  2910  001AB2  3624               	rlcf	___aodiv@quotient+6,f,c
  2911  001AB4  3625               	rlcf	___aodiv@quotient+7,f,c
  2912  001AB6  5014               	movf	___aodiv@divisor,w,c
  2913  001AB8  5C0C               	subwf	___aodiv@dividend,w,c
  2914  001ABA  5015               	movf	___aodiv@divisor+1,w,c
  2915  001ABC  580D               	subwfb	___aodiv@dividend+1,w,c
  2916  001ABE  5016               	movf	___aodiv@divisor+2,w,c
  2917  001AC0  580E               	subwfb	___aodiv@dividend+2,w,c
  2918  001AC2  5017               	movf	___aodiv@divisor+3,w,c
  2919  001AC4  580F               	subwfb	___aodiv@dividend+3,w,c
  2920  001AC6  5018               	movf	___aodiv@divisor+4,w,c
  2921  001AC8  5810               	subwfb	___aodiv@dividend+4,w,c
  2922  001ACA  5019               	movf	___aodiv@divisor+5,w,c
  2923  001ACC  5811               	subwfb	___aodiv@dividend+5,w,c
  2924  001ACE  501A               	movf	___aodiv@divisor+6,w,c
  2925  001AD0  5812               	subwfb	___aodiv@dividend+6,w,c
  2926  001AD2  501B               	movf	___aodiv@divisor+7,w,c
  2927  001AD4  5813               	subwfb	___aodiv@dividend+7,w,c
  2928  001AD6  A0D8               	btfss	status,0,c
  2929  001AD8  D011               	goto	l2242
  2930  001ADA  5014               	movf	___aodiv@divisor,w,c
  2931  001ADC  5E0C               	subwf	___aodiv@dividend,f,c
  2932  001ADE  5015               	movf	___aodiv@divisor+1,w,c
  2933  001AE0  5A0D               	subwfb	___aodiv@dividend+1,f,c
  2934  001AE2  5016               	movf	___aodiv@divisor+2,w,c
  2935  001AE4  5A0E               	subwfb	___aodiv@dividend+2,f,c
  2936  001AE6  5017               	movf	___aodiv@divisor+3,w,c
  2937  001AE8  5A0F               	subwfb	___aodiv@dividend+3,f,c
  2938  001AEA  5018               	movf	___aodiv@divisor+4,w,c
  2939  001AEC  5A10               	subwfb	___aodiv@dividend+4,f,c
  2940  001AEE  5019               	movf	___aodiv@divisor+5,w,c
  2941  001AF0  5A11               	subwfb	___aodiv@dividend+5,f,c
  2942  001AF2  501A               	movf	___aodiv@divisor+6,w,c
  2943  001AF4  5A12               	subwfb	___aodiv@dividend+6,f,c
  2944  001AF6  501B               	movf	___aodiv@divisor+7,w,c
  2945  001AF8  5A13               	subwfb	___aodiv@dividend+7,f,c
  2946  001AFA  801E               	bsf	___aodiv@quotient,0,c
  2947  001AFC                     l2242:
  2948  001AFC  90D8               	bcf	status,0,c
  2949  001AFE  321B               	rrcf	___aodiv@divisor+7,f,c
  2950  001B00  321A               	rrcf	___aodiv@divisor+6,f,c
  2951  001B02  3219               	rrcf	___aodiv@divisor+5,f,c
  2952  001B04  3218               	rrcf	___aodiv@divisor+4,f,c
  2953  001B06  3217               	rrcf	___aodiv@divisor+3,f,c
  2954  001B08  3216               	rrcf	___aodiv@divisor+2,f,c
  2955  001B0A  3215               	rrcf	___aodiv@divisor+1,f,c
  2956  001B0C  3214               	rrcf	___aodiv@divisor,f,c
  2957  001B0E  2E1C               	decfsz	___aodiv@counter,f,c
  2958  001B10  D7C9               	goto	u1830
  2959  001B12                     l2246:
  2960  001B12  501D               	movf	___aodiv@sign,w,c
  2961  001B14  B4D8               	btfsc	status,2,c
  2962  001B16  D010               	goto	l2250
  2963  001B18  1E25               	comf	___aodiv@quotient+7,f,c
  2964  001B1A  1E24               	comf	___aodiv@quotient+6,f,c
  2965  001B1C  1E23               	comf	___aodiv@quotient+5,f,c
  2966  001B1E  1E22               	comf	___aodiv@quotient+4,f,c
  2967  001B20  1E21               	comf	___aodiv@quotient+3,f,c
  2968  001B22  1E20               	comf	___aodiv@quotient+2,f,c
  2969  001B24  1E1F               	comf	___aodiv@quotient+1,f,c
  2970  001B26  6C1E               	negf	___aodiv@quotient,c
  2971  001B28  0E00               	movlw	0
  2972  001B2A  221F               	addwfc	___aodiv@quotient+1,f,c
  2973  001B2C  2220               	addwfc	___aodiv@quotient+2,f,c
  2974  001B2E  2221               	addwfc	___aodiv@quotient+3,f,c
  2975  001B30  2222               	addwfc	___aodiv@quotient+4,f,c
  2976  001B32  2223               	addwfc	___aodiv@quotient+5,f,c
  2977  001B34  2224               	addwfc	___aodiv@quotient+6,f,c
  2978  001B36  2225               	addwfc	___aodiv@quotient+7,f,c
  2979  001B38                     l2250:
  2980  001B38  C01E  F00C         	movff	___aodiv@quotient,?___aodiv
  2981  001B3C  C01F  F00D         	movff	___aodiv@quotient+1,?___aodiv+1
  2982  001B40  C020  F00E         	movff	___aodiv@quotient+2,?___aodiv+2
  2983  001B44  C021  F00F         	movff	___aodiv@quotient+3,?___aodiv+3
  2984  001B48  C022  F010         	movff	___aodiv@quotient+4,?___aodiv+4
  2985  001B4C  C023  F011         	movff	___aodiv@quotient+5,?___aodiv+5
  2986  001B50  C024  F012         	movff	___aodiv@quotient+6,?___aodiv+6
  2987  001B54  C025  F013         	movff	___aodiv@quotient+7,?___aodiv+7
  2988  001B58  0012               	return		;funcret
  2989  001B5A                     __end_of___aodiv:
  2990                           	opt callstack 0
  2991                           
  2992 ;; *************** function _ctoa *****************
  2993 ;; Defined at:
  2994 ;;		line 259 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2995 ;; Parameters:    Size  Location     Type
  2996 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  2997 ;;		 -> NULL(0), 
  2998 ;;  c               1   44[COMRAM] unsigned char 
  2999 ;; Auto vars:     Size  Location     Type
  3000 ;;  w               2   45[COMRAM] int 
  3001 ;;  l               2    0        int 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  2   42[COMRAM] int 
  3004 ;; Registers used:
  3005 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3011 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3012 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3014 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;Total ram usage:        5 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; Hardware stack levels required when called:    8
  3018 ;; This function calls:
  3019 ;;		_pad
  3020 ;; This function is called by:
  3021 ;;		_vfpfcnvrt
  3022 ;; This function uses a non-reentrant model
  3023 ;;
  3024                           
  3025                           	psect	text8
  3026  001F58                     __ptext8:
  3027                           	opt callstack 0
  3028  001F58                     _ctoa:
  3029                           	opt callstack 19
  3030                           
  3031                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 259: static int ctoa
      +                          (FILE *fp, char c);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 26
      +                          0: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 261:     int l, 
      +                          w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 264:     w = width
      +                           ? width - 1 : width;
  3032                           
  3033                           ;incstack = 0
  3034  001F58  506E               	movf	_width,w,c
  3035  001F5A  106F               	iorwf	_width+1,w,c
  3036  001F5C  A4D8               	btfss	status,2,c
  3037  001F5E  D005               	goto	l2294
  3038  001F60  C06E  F02E         	movff	_width,ctoa@w
  3039  001F64  C06F  F02F         	movff	_width+1,ctoa@w+1
  3040  001F68  D006               	goto	l2296
  3041  001F6A                     l2294:
  3042  001F6A  0EFF               	movlw	255
  3043  001F6C  246E               	addwf	_width,w,c
  3044  001F6E  6E2E               	movwf	ctoa@w,c
  3045  001F70  0EFF               	movlw	255
  3046  001F72  206F               	addwfc	_width+1,w,c
  3047  001F74  6E2F               	movwf	ctoa@w+1,c
  3048  001F76                     l2296:
  3049                           
  3050                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 267:     dbuf[0] = c
      +                          ;
  3051  001F76  C02D  F0C4         	movff	ctoa@c,_dbuf
  3052                           
  3053                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 268:     dbuf[1] = '
      +                          \0';
  3054  001F7A  0E00               	movlw	0
  3055  001F7C  0100               	movlb	0	; () banked
  3056  001F7E  6FC5               	movwf	(_dbuf+1)& (0+255),b
  3057                           
  3058                           ; BSR set to: 0
  3059                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 269:     return pad(
      +                          fp, &dbuf[0], w);
  3060  001F80  C02B  F020         	movff	ctoa@fp,pad@fp
  3061  001F84  C02C  F021         	movff	ctoa@fp+1,pad@fp+1
  3062  001F88  0EC4               	movlw	low _dbuf
  3063  001F8A  6E22               	movwf	pad@buf,c
  3064  001F8C  0E00               	movlw	high _dbuf
  3065  001F8E  6E23               	movwf	pad@buf+1,c
  3066  001F90  C02E  F024         	movff	ctoa@w,pad@p
  3067  001F94  C02F  F025         	movff	ctoa@w+1,pad@p+1
  3068  001F98  EC95  F00E         	call	_pad	;wreg free
  3069  001F9C  C020  F02B         	movff	?_pad,?_ctoa
  3070  001FA0  C021  F02C         	movff	?_pad+1,?_ctoa+1
  3071  001FA4  0012               	return		;funcret
  3072  001FA6                     __end_of_ctoa:
  3073                           	opt callstack 0
  3074                           
  3075 ;; *************** function _pad *****************
  3076 ;; Defined at:
  3077 ;;		line 72 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  3078 ;; Parameters:    Size  Location     Type
  3079 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  3080 ;;		 -> NULL(0), 
  3081 ;;  buf             2   33[COMRAM] PTR unsigned char 
  3082 ;;		 -> dbuf(32), 
  3083 ;;  p               2   35[COMRAM] int 
  3084 ;; Auto vars:     Size  Location     Type
  3085 ;;  w               2   40[COMRAM] int 
  3086 ;;  i               2   38[COMRAM] int 
  3087 ;; Return value:  Size  Location     Type
  3088 ;;                  2   31[COMRAM] int 
  3089 ;; Registers used:
  3090 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3091 ;; Tracked objects:
  3092 ;;		On entry : 0/0
  3093 ;;		On exit  : 0/0
  3094 ;;		Unchanged: 0/0
  3095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3096 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3097 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3098 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3099 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3100 ;;Total ram usage:       11 bytes
  3101 ;; Hardware stack levels used:    1
  3102 ;; Hardware stack levels required when called:    7
  3103 ;; This function calls:
  3104 ;;		_fputc
  3105 ;;		_fputs
  3106 ;;		_strlen
  3107 ;; This function is called by:
  3108 ;;		_ctoa
  3109 ;;		_dtoa
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text9
  3114  001D2A                     __ptext9:
  3115                           	opt callstack 0
  3116  001D2A                     _pad:
  3117                           	opt callstack 19
  3118                           
  3119                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  3120                           
  3121                           ;incstack = 0
  3122  001D2A  A072               	btfss	_flags,0,c
  3123  001D2C  D00A               	goto	l2188
  3124                           
  3125                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  3126  001D2E  C022  F019         	movff	pad@buf,fputs@s
  3127  001D32  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3128  001D36  C020  F01B         	movff	pad@fp,fputs@fp
  3129  001D3A  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3130  001D3E  EC19  F010         	call	_fputs	;wreg free
  3131  001D42                     l2188:
  3132                           
  3133                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  3134  001D42  BE25               	btfsc	pad@p+1,7,c
  3135  001D44  D005               	goto	l2192
  3136  001D46  C024  F029         	movff	pad@p,pad@w
  3137  001D4A  C025  F02A         	movff	pad@p+1,pad@w+1
  3138  001D4E  D004               	goto	l159
  3139  001D50                     l2192:
  3140  001D50  0E00               	movlw	0
  3141  001D52  6E2A               	movwf	pad@w+1,c
  3142  001D54  0E00               	movlw	0
  3143  001D56  6E29               	movwf	pad@w,c
  3144  001D58                     l159:
  3145                           
  3146                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  3147  001D58  0E00               	movlw	0
  3148  001D5A  6E28               	movwf	pad@i+1,c
  3149  001D5C  0E00               	movlw	0
  3150  001D5E  6E27               	movwf	pad@i,c
  3151                           
  3152                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3153  001D60  D00C               	goto	l2198
  3154  001D62                     l2194:
  3155                           
  3156                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  3157  001D62  0E00               	movlw	0
  3158  001D64  6E11               	movwf	fputc@c+1,c
  3159  001D66  0E20               	movlw	32
  3160  001D68  6E10               	movwf	fputc@c,c
  3161  001D6A  C020  F012         	movff	pad@fp,fputc@fp
  3162  001D6E  C021  F013         	movff	pad@fp+1,fputc@fp+1
  3163  001D72  EC18  F00F         	call	_fputc	;wreg free
  3164                           
  3165                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 86:         ++i;
  3166  001D76  4A27               	infsnz	pad@i,f,c
  3167  001D78  2A28               	incf	pad@i+1,f,c
  3168  001D7A                     l2198:
  3169                           
  3170                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  3171  001D7A  5029               	movf	pad@w,w,c
  3172  001D7C  5C27               	subwf	pad@i,w,c
  3173  001D7E  5028               	movf	pad@i+1,w,c
  3174  001D80  0A80               	xorlw	128
  3175  001D82  6E26               	movwf	??_pad& (0+255),c
  3176  001D84  502A               	movf	pad@w+1,w,c
  3177  001D86  0A80               	xorlw	128
  3178  001D88  5826               	subwfb	??_pad& (0+255),w,c
  3179  001D8A  A0D8               	btfss	status,0,c
  3180  001D8C  D7EA               	goto	l2194
  3181                           
  3182                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  3183  001D8E  B072               	btfsc	_flags,0,c
  3184  001D90  D00A               	goto	l2202
  3185                           
  3186                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  3187  001D92  C022  F019         	movff	pad@buf,fputs@s
  3188  001D96  C023  F01A         	movff	pad@buf+1,fputs@s+1
  3189  001D9A  C020  F01B         	movff	pad@fp,fputs@fp
  3190  001D9E  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  3191  001DA2  EC19  F010         	call	_fputs	;wreg free
  3192  001DA6                     l2202:
  3193                           
  3194                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 94:     return strle
      +                          n(buf) + w;
  3195  001DA6  C022  F00C         	movff	pad@buf,strlen@s
  3196  001DAA  C023  F00D         	movff	pad@buf+1,strlen@s+1
  3197  001DAE  EC4E  F010         	call	_strlen	;wreg free
  3198  001DB2  5029               	movf	pad@w,w,c
  3199  001DB4  240C               	addwf	?_strlen,w,c
  3200  001DB6  6E20               	movwf	?_pad,c
  3201  001DB8  502A               	movf	pad@w+1,w,c
  3202  001DBA  200D               	addwfc	?_strlen+1,w,c
  3203  001DBC  6E21               	movwf	?_pad+1,c
  3204  001DBE  0012               	return		;funcret
  3205  001DC0                     __end_of_pad:
  3206                           	opt callstack 0
  3207                           
  3208 ;; *************** function _strlen *****************
  3209 ;; Defined at:
  3210 ;;		line 12 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/strlen.c"
  3211 ;; Parameters:    Size  Location     Type
  3212 ;;  s               2   11[COMRAM] PTR const unsigned char 
  3213 ;;		 -> dbuf(32), 
  3214 ;; Auto vars:     Size  Location     Type
  3215 ;;  a               2   13[COMRAM] PTR const unsigned char 
  3216 ;;		 -> dbuf(32), 
  3217 ;; Return value:  Size  Location     Type
  3218 ;;                  2   11[COMRAM] unsigned int 
  3219 ;; Registers used:
  3220 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3221 ;; Tracked objects:
  3222 ;;		On entry : 0/0
  3223 ;;		On exit  : 0/0
  3224 ;;		Unchanged: 0/0
  3225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3226 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3227 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3229 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;Total ram usage:        4 bytes
  3231 ;; Hardware stack levels used:    1
  3232 ;; Hardware stack levels required when called:    1
  3233 ;; This function calls:
  3234 ;;		Nothing
  3235 ;; This function is called by:
  3236 ;;		_pad
  3237 ;; This function uses a non-reentrant model
  3238 ;;
  3239                           
  3240                           	psect	text10
  3241  00209C                     __ptext10:
  3242                           	opt callstack 0
  3243  00209C                     _strlen:
  3244                           	opt callstack 24
  3245                           
  3246                           ;incstack = 0
  3247  00209C  C00C  F00E         	movff	strlen@s,strlen@a
  3248  0020A0  C00D  F00F         	movff	strlen@s+1,strlen@a+1
  3249  0020A4  D002               	goto	l2178
  3250  0020A6                     l2176:
  3251  0020A6  4A0C               	infsnz	strlen@s,f,c
  3252  0020A8  2A0D               	incf	strlen@s+1,f,c
  3253  0020AA                     l2178:
  3254  0020AA  C00C  FFD9         	movff	strlen@s,fsr2l
  3255  0020AE  C00D  FFDA         	movff	strlen@s+1,fsr2h
  3256  0020B2  50DF               	movf	indf2,w,c
  3257  0020B4  A4D8               	btfss	status,2,c
  3258  0020B6  D7F7               	goto	l2176
  3259  0020B8  500E               	movf	strlen@a,w,c
  3260  0020BA  5C0C               	subwf	strlen@s,w,c
  3261  0020BC  6E0C               	movwf	?_strlen,c
  3262  0020BE  500F               	movf	strlen@a+1,w,c
  3263  0020C0  580D               	subwfb	strlen@s+1,w,c
  3264  0020C2  6E0D               	movwf	?_strlen+1,c
  3265  0020C4  0012               	return		;funcret
  3266  0020C6                     __end_of_strlen:
  3267                           	opt callstack 0
  3268                           
  3269 ;; *************** function _fputs *****************
  3270 ;; Defined at:
  3271 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputs.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;  s               2   24[COMRAM] PTR const unsigned char 
  3274 ;;		 -> dbuf(32), 
  3275 ;;  fp              2   26[COMRAM] PTR struct _IO_FILE
  3276 ;;		 -> NULL(0), 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;  i               2   29[COMRAM] int 
  3279 ;;  c               1   28[COMRAM] unsigned char 
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  2   24[COMRAM] int 
  3282 ;; Registers used:
  3283 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3289 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;Total ram usage:        7 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    6
  3296 ;; This function calls:
  3297 ;;		_fputc
  3298 ;; This function is called by:
  3299 ;;		_pad
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text11
  3304  002032                     __ptext11:
  3305                           	opt callstack 0
  3306  002032                     _fputs:
  3307                           	opt callstack 19
  3308                           
  3309                           ;incstack = 0
  3310  002032  0E00               	movlw	0
  3311  002034  6E1F               	movwf	fputs@i+1,c
  3312  002036  0E00               	movlw	0
  3313  002038  6E1E               	movwf	fputs@i,c
  3314  00203A  D00B               	goto	l2172
  3315  00203C                     l2168:
  3316  00203C  C01D  F010         	movff	fputs@c,fputc@c
  3317  002040  6A11               	clrf	fputc@c+1,c
  3318  002042  C01B  F012         	movff	fputs@fp,fputc@fp
  3319  002046  C01C  F013         	movff	fputs@fp+1,fputc@fp+1
  3320  00204A  EC18  F00F         	call	_fputc	;wreg free
  3321  00204E  4A1E               	infsnz	fputs@i,f,c
  3322  002050  2A1F               	incf	fputs@i+1,f,c
  3323  002052                     l2172:
  3324  002052  501E               	movf	fputs@i,w,c
  3325  002054  2419               	addwf	fputs@s,w,c
  3326  002056  6ED9               	movwf	fsr2l,c
  3327  002058  501F               	movf	fputs@i+1,w,c
  3328  00205A  201A               	addwfc	fputs@s+1,w,c
  3329  00205C  6EDA               	movwf	fsr2h,c
  3330  00205E  50DF               	movf	indf2,w,c
  3331  002060  6E1D               	movwf	fputs@c,c
  3332  002062  501D               	movf	fputs@c,w,c
  3333  002064  B4D8               	btfsc	status,2,c
  3334  002066  0012               	return	
  3335  002068  D7E9               	goto	l2168
  3336  00206A                     __end_of_fputs:
  3337                           	opt callstack 0
  3338                           
  3339 ;; *************** function _fputc *****************
  3340 ;; Defined at:
  3341 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputc.c"
  3342 ;; Parameters:    Size  Location     Type
  3343 ;;  c               2   15[COMRAM] int 
  3344 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  3345 ;;		 -> NULL(0), 
  3346 ;; Auto vars:     Size  Location     Type
  3347 ;;		None
  3348 ;; Return value:  Size  Location     Type
  3349 ;;                  2   15[COMRAM] int 
  3350 ;; Registers used:
  3351 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3352 ;; Tracked objects:
  3353 ;;		On entry : 0/0
  3354 ;;		On exit  : 0/0
  3355 ;;		Unchanged: 0/0
  3356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3357 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3359 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3360 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3361 ;;Total ram usage:        9 bytes
  3362 ;; Hardware stack levels used:    1
  3363 ;; Hardware stack levels required when called:    5
  3364 ;; This function calls:
  3365 ;;		_putch
  3366 ;; This function is called by:
  3367 ;;		_pad
  3368 ;;		_vfpfcnvrt
  3369 ;;		_fputs
  3370 ;; This function uses a non-reentrant model
  3371 ;;
  3372                           
  3373                           	psect	text12
  3374  001E30                     __ptext12:
  3375                           	opt callstack 0
  3376  001E30                     _fputc:
  3377                           	opt callstack 22
  3378                           
  3379                           ;incstack = 0
  3380  001E30  5012               	movf	fputc@fp,w,c
  3381  001E32  1013               	iorwf	fputc@fp+1,w,c
  3382  001E34  B4D8               	btfsc	status,2,c
  3383  001E36  D004               	goto	u1690
  3384  001E38  5012               	movf	fputc@fp,w,c
  3385  001E3A  1013               	iorwf	fputc@fp+1,w,c
  3386  001E3C  A4D8               	btfss	status,2,c
  3387  001E3E  D004               	goto	l2158
  3388  001E40                     u1690:
  3389  001E40  5010               	movf	fputc@c,w,c
  3390  001E42  ECA0  F010         	call	_putch
  3391  001E46  0012               	return	
  3392  001E48                     l2158:
  3393  001E48  EE20 F004          	lfsr	2,4
  3394  001E4C  5012               	movf	fputc@fp,w,c
  3395  001E4E  26D9               	addwf	fsr2l,f,c
  3396  001E50  5013               	movf	fputc@fp+1,w,c
  3397  001E52  22DA               	addwfc	fsr2h,f,c
  3398  001E54  50DE               	movf	postinc2,w,c
  3399  001E56  10DE               	iorwf	postinc2,w,c
  3400  001E58  B4D8               	btfsc	status,2,c
  3401  001E5A  D016               	goto	u1710
  3402  001E5C  EE20 F004          	lfsr	2,4
  3403  001E60  5012               	movf	fputc@fp,w,c
  3404  001E62  26D9               	addwf	fsr2l,f,c
  3405  001E64  5013               	movf	fputc@fp+1,w,c
  3406  001E66  22DA               	addwfc	fsr2h,f,c
  3407  001E68  EE10 F002          	lfsr	1,2
  3408  001E6C  5012               	movf	fputc@fp,w,c
  3409  001E6E  26E1               	addwf	fsr1l,f,c
  3410  001E70  5013               	movf	fputc@fp+1,w,c
  3411  001E72  22E2               	addwfc	fsr1h,f,c
  3412  001E74  50DE               	movf	postinc2,w,c
  3413  001E76  5CE6               	subwf	postinc1,w,c
  3414  001E78  50E6               	movf	postinc1,w,c
  3415  001E7A  0A80               	xorlw	128
  3416  001E7C  6E18               	movwf	(??_fputc+4)& (0+255),c
  3417  001E7E  50DE               	movf	postinc2,w,c
  3418  001E80  0A80               	xorlw	128
  3419  001E82  5818               	subwfb	(??_fputc+4)& (0+255),w,c
  3420  001E84  B0D8               	btfsc	status,0,c
  3421  001E86  0012               	return	
  3422  001E88                     u1710:
  3423  001E88  EE20 F002          	lfsr	2,2
  3424  001E8C  5012               	movf	fputc@fp,w,c
  3425  001E8E  26D9               	addwf	fsr2l,f,c
  3426  001E90  5013               	movf	fputc@fp+1,w,c
  3427  001E92  22DA               	addwfc	fsr2h,f,c
  3428  001E94  2ADE               	incf	postinc2,f,c
  3429  001E96  0E00               	movlw	0
  3430  001E98  22DD               	addwfc	postdec2,f,c
  3431  001E9A  0012               	return		;funcret
  3432  001E9C                     __end_of_fputc:
  3433                           	opt callstack 0
  3434                           
  3435 ;; *************** function _putch *****************
  3436 ;; Defined at:
  3437 ;;		line 102 in file "lcd.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;  data            1    wreg     unsigned char 
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;  data            1   14[COMRAM] unsigned char 
  3442 ;; Return value:  Size  Location     Type
  3443 ;;                  1    wreg      void 
  3444 ;; Registers used:
  3445 ;;		wreg, status,2, status,0, cstack
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3452 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3454 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3455 ;;Total ram usage:        1 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:    4
  3458 ;; This function calls:
  3459 ;;		_send_byte
  3460 ;; This function is called by:
  3461 ;;		_fputc
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           	psect	text13
  3466  002140                     __ptext13:
  3467                           	opt callstack 0
  3468  002140                     _putch:
  3469                           	opt callstack 22
  3470                           
  3471                           ;incstack = 0
  3472                           ;putch@data stored from wreg
  3473  002140  6E0F               	movwf	putch@data,c
  3474                           
  3475                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  3476  002142  848C               	bsf	3980,2,c	;volatile
  3477                           
  3478                           ;lcd.c: 104:     send_byte((unsigned char)data);
  3479  002144  500F               	movf	putch@data,w,c
  3480  002146  EC97  F010         	call	_send_byte
  3481  00214A  0012               	return		;funcret
  3482  00214C                     __end_of_putch:
  3483                           	opt callstack 0
  3484                           
  3485 ;; *************** function _initLCD *****************
  3486 ;; Defined at:
  3487 ;;		line 69 in file "lcd.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;		None
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;		None
  3492 ;; Return value:  Size  Location     Type
  3493 ;;                  1    wreg      void 
  3494 ;; Registers used:
  3495 ;;		wreg, status,2, status,0, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3503 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3504 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3505 ;;Total ram usage:        1 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    5
  3508 ;; This function calls:
  3509 ;;		_lcdInst
  3510 ;;		_send_byte
  3511 ;;		_send_nibble
  3512 ;; This function is called by:
  3513 ;;		_main
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           	psect	text14
  3518  001E9C                     __ptext14:
  3519                           	opt callstack 0
  3520  001E9C                     _initLCD:
  3521                           	opt callstack 25
  3522                           
  3523                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3524                           
  3525                           ;incstack = 0
  3526  001E9C  0E31               	movlw	49
  3527  001E9E  6E10               	movwf	??_initLCD& (0+255),c
  3528  001EA0  0EB2               	movlw	178
  3529  001EA2                     u2517:
  3530  001EA2  2EE8               	decfsz	wreg,f,c
  3531  001EA4  D7FE               	bra	u2517
  3532  001EA6  2E10               	decfsz	??_initLCD& (0+255),f,c
  3533  001EA8  D7FC               	bra	u2517
  3534  001EAA  D000               	nop2	
  3535                           
  3536                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  3537  001EAC  948C               	bcf	3980,2,c	;volatile
  3538                           
  3539                           ;lcd.c: 74:     send_nibble(0b0011);
  3540  001EAE  0E03               	movlw	3
  3541  001EB0  EC8C  F010         	call	_send_nibble
  3542                           
  3543                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3544  001EB4  0E11               	movlw	17
  3545  001EB6  6E10               	movwf	??_initLCD& (0+255),c
  3546  001EB8  0E3A               	movlw	58
  3547  001EBA                     u2527:
  3548  001EBA  2EE8               	decfsz	wreg,f,c
  3549  001EBC  D7FE               	bra	u2527
  3550  001EBE  2E10               	decfsz	??_initLCD& (0+255),f,c
  3551  001EC0  D7FC               	bra	u2527
  3552  001EC2  D000               	nop2	
  3553                           
  3554                           ;lcd.c: 76:     send_nibble(0b0011);
  3555  001EC4  0E03               	movlw	3
  3556  001EC6  EC8C  F010         	call	_send_nibble
  3557                           
  3558                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  3559  001ECA  0E7D               	movlw	125
  3560  001ECC                     u2537:
  3561  001ECC  2EE8               	decfsz	wreg,f,c
  3562  001ECE  D7FE               	bra	u2537
  3563                           
  3564                           ;lcd.c: 78:     send_byte(0b00110010);
  3565  001ED0  0E32               	movlw	50
  3566  001ED2  EC97  F010         	call	_send_byte
  3567                           
  3568                           ;lcd.c: 80:     send_byte(0b00101000);
  3569  001ED6  0E28               	movlw	40
  3570  001ED8  EC97  F010         	call	_send_byte
  3571                           
  3572                           ;lcd.c: 81:     send_byte(0b00001000);
  3573  001EDC  0E08               	movlw	8
  3574  001EDE  EC97  F010         	call	_send_byte
  3575                           
  3576                           ;lcd.c: 82:     send_byte(0b00000001);
  3577  001EE2  0E01               	movlw	1
  3578  001EE4  EC97  F010         	call	_send_byte
  3579                           
  3580                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3581  001EE8  0E11               	movlw	17
  3582  001EEA  6E10               	movwf	??_initLCD& (0+255),c
  3583  001EEC  0E3A               	movlw	58
  3584  001EEE                     u2547:
  3585  001EEE  2EE8               	decfsz	wreg,f,c
  3586  001EF0  D7FE               	bra	u2547
  3587  001EF2  2E10               	decfsz	??_initLCD& (0+255),f,c
  3588  001EF4  D7FC               	bra	u2547
  3589  001EF6  D000               	nop2	
  3590                           
  3591                           ;lcd.c: 84:     send_byte(0b00000110);
  3592  001EF8  0E06               	movlw	6
  3593  001EFA  EC97  F010         	call	_send_byte
  3594                           
  3595                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  3596  001EFE  0E0F               	movlw	15
  3597  001F00  ECA6  F010         	call	_lcdInst
  3598  001F04  0012               	return		;funcret
  3599  001F06                     __end_of_initLCD:
  3600                           	opt callstack 0
  3601                           
  3602 ;; *************** function _lcdInst *****************
  3603 ;; Defined at:
  3604 ;;		line 64 in file "lcd.c"
  3605 ;; Parameters:    Size  Location     Type
  3606 ;;  data            1    wreg     unsigned char 
  3607 ;; Auto vars:     Size  Location     Type
  3608 ;;  data            1   14[COMRAM] unsigned char 
  3609 ;; Return value:  Size  Location     Type
  3610 ;;                  1    wreg      void 
  3611 ;; Registers used:
  3612 ;;		wreg, status,2, status,0, cstack
  3613 ;; Tracked objects:
  3614 ;;		On entry : 0/0
  3615 ;;		On exit  : 0/0
  3616 ;;		Unchanged: 0/0
  3617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3619 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3621 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3622 ;;Total ram usage:        1 bytes
  3623 ;; Hardware stack levels used:    1
  3624 ;; Hardware stack levels required when called:    4
  3625 ;; This function calls:
  3626 ;;		_send_byte
  3627 ;; This function is called by:
  3628 ;;		_initLCD
  3629 ;;		_main
  3630 ;;		_lcd_shift_cursor
  3631 ;;		_lcd_shift_display
  3632 ;; This function uses a non-reentrant model
  3633 ;;
  3634                           
  3635                           	psect	text15
  3636  00214C                     __ptext15:
  3637                           	opt callstack 0
  3638  00214C                     _lcdInst:
  3639                           	opt callstack 26
  3640                           
  3641                           ;incstack = 0
  3642                           ;lcdInst@data stored from wreg
  3643  00214C  6E0F               	movwf	lcdInst@data,c
  3644                           
  3645                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  3646  00214E  948C               	bcf	3980,2,c	;volatile
  3647                           
  3648                           ;lcd.c: 66:     send_byte(data);
  3649  002150  500F               	movf	lcdInst@data,w,c
  3650  002152  EC97  F010         	call	_send_byte
  3651  002156  0012               	return		;funcret
  3652  002158                     __end_of_lcdInst:
  3653                           	opt callstack 0
  3654                           
  3655 ;; *************** function _send_byte *****************
  3656 ;; Defined at:
  3657 ;;		line 55 in file "lcd.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;  data            1    wreg     unsigned char 
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;  data            1   13[COMRAM] unsigned char 
  3662 ;; Return value:  Size  Location     Type
  3663 ;;                  1    wreg      void 
  3664 ;; Registers used:
  3665 ;;		wreg, status,2, status,0, cstack
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3674 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3675 ;;Total ram usage:        1 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    3
  3678 ;; This function calls:
  3679 ;;		_send_nibble
  3680 ;; This function is called by:
  3681 ;;		_lcdInst
  3682 ;;		_initLCD
  3683 ;;		_putch
  3684 ;; This function uses a non-reentrant model
  3685 ;;
  3686                           
  3687                           	psect	text16
  3688  00212E                     __ptext16:
  3689                           	opt callstack 0
  3690  00212E                     _send_byte:
  3691                           	opt callstack 22
  3692                           
  3693                           ;incstack = 0
  3694                           ;send_byte@data stored from wreg
  3695  00212E  6E0E               	movwf	send_byte@data,c
  3696                           
  3697                           ;lcd.c: 57:     send_nibble(data >> 4);
  3698  002130  380E               	swapf	send_byte@data,w,c
  3699  002132  0B0F               	andlw	15
  3700  002134  EC8C  F010         	call	_send_nibble
  3701                           
  3702                           ;lcd.c: 60:     send_nibble(data);
  3703  002138  500E               	movf	send_byte@data,w,c
  3704  00213A  EC8C  F010         	call	_send_nibble
  3705  00213E  0012               	return		;funcret
  3706  002140                     __end_of_send_byte:
  3707                           	opt callstack 0
  3708                           
  3709 ;; *************** function _send_nibble *****************
  3710 ;; Defined at:
  3711 ;;		line 44 in file "lcd.c"
  3712 ;; Parameters:    Size  Location     Type
  3713 ;;  data            1    wreg     unsigned char 
  3714 ;; Auto vars:     Size  Location     Type
  3715 ;;  data            1   12[COMRAM] unsigned char 
  3716 ;; Return value:  Size  Location     Type
  3717 ;;                  1    wreg      void 
  3718 ;; Registers used:
  3719 ;;		wreg, status,2, status,0, cstack
  3720 ;; Tracked objects:
  3721 ;;		On entry : 0/0
  3722 ;;		On exit  : 0/0
  3723 ;;		Unchanged: 0/0
  3724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3725 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3728 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3729 ;;Total ram usage:        1 bytes
  3730 ;; Hardware stack levels used:    1
  3731 ;; Hardware stack levels required when called:    2
  3732 ;; This function calls:
  3733 ;;		_pulse_e
  3734 ;; This function is called by:
  3735 ;;		_send_byte
  3736 ;;		_initLCD
  3737 ;; This function uses a non-reentrant model
  3738 ;;
  3739                           
  3740                           	psect	text17
  3741  002118                     __ptext17:
  3742                           	opt callstack 0
  3743  002118                     _send_nibble:
  3744                           	opt callstack 22
  3745                           
  3746                           ;incstack = 0
  3747                           ;send_nibble@data stored from wreg
  3748  002118  6E0D               	movwf	send_nibble@data,c
  3749                           
  3750                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  3751  00211A  508C               	movf	3980,w,c	;volatile
  3752  00211C  0B0F               	andlw	15
  3753  00211E  6E8C               	movwf	3980,c	;volatile
  3754                           
  3755                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  3756  002120  380D               	swapf	send_nibble@data,w,c
  3757  002122  0BF0               	andlw	240
  3758  002124  108C               	iorwf	3980,w,c	;volatile
  3759  002126  6E8C               	movwf	3980,c	;volatile
  3760                           
  3761                           ;lcd.c: 48:     pulse_e();
  3762  002128  EC63  F010         	call	_pulse_e	;wreg free
  3763  00212C  0012               	return		;funcret
  3764  00212E                     __end_of_send_nibble:
  3765                           	opt callstack 0
  3766                           
  3767 ;; *************** function _pulse_e *****************
  3768 ;; Defined at:
  3769 ;;		line 28 in file "lcd.c"
  3770 ;; Parameters:    Size  Location     Type
  3771 ;;		None
  3772 ;; Auto vars:     Size  Location     Type
  3773 ;;  interruptSta    1   11[COMRAM] unsigned char 
  3774 ;; Return value:  Size  Location     Type
  3775 ;;                  1    wreg      void 
  3776 ;; Registers used:
  3777 ;;		wreg
  3778 ;; Tracked objects:
  3779 ;;		On entry : 0/0
  3780 ;;		On exit  : 0/0
  3781 ;;		Unchanged: 0/0
  3782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3786 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3787 ;;Total ram usage:        1 bytes
  3788 ;; Hardware stack levels used:    1
  3789 ;; Hardware stack levels required when called:    1
  3790 ;; This function calls:
  3791 ;;		Nothing
  3792 ;; This function is called by:
  3793 ;;		_send_nibble
  3794 ;; This function uses a non-reentrant model
  3795 ;;
  3796                           
  3797                           	psect	text18
  3798  0020C6                     __ptext18:
  3799                           	opt callstack 0
  3800  0020C6                     _pulse_e:
  3801                           	opt callstack 22
  3802                           
  3803                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  3804                           
  3805                           ;incstack = 0
  3806  0020C6  0E00               	movlw	0
  3807  0020C8  BEF2               	btfsc	4082,7,c	;volatile
  3808  0020CA  0E01               	movlw	1
  3809  0020CC  6E0C               	movwf	pulse_e@interruptState,c
  3810                           
  3811                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  3812  0020CE  9EF2               	bcf	4082,7,c	;volatile
  3813                           
  3814                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  3815  0020D0  868C               	bsf	3980,3,c	;volatile
  3816                           
  3817                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  3818  0020D2  0E14               	movlw	20
  3819  0020D4                     u2557:
  3820  0020D4  2EE8               	decfsz	wreg,f,c
  3821  0020D6  D7FE               	bra	u2557
  3822  0020D8  D000               	nop2	
  3823                           
  3824                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  3825  0020DA  968C               	bcf	3980,3,c	;volatile
  3826                           
  3827                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  3828  0020DC  0E53               	movlw	83
  3829  0020DE                     u2567:
  3830  0020DE  2EE8               	decfsz	wreg,f,c
  3831  0020E0  D7FE               	bra	u2567
  3832  0020E2  F000               	nop	
  3833                           
  3834                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  3835  0020E4  B00C               	btfsc	pulse_e@interruptState,0,c
  3836  0020E6  D002               	bra	u1675
  3837  0020E8  9EF2               	bcf	4082,7,c	;volatile
  3838  0020EA  D001               	bra	u1676
  3839  0020EC                     u1675:
  3840  0020EC  8EF2               	bsf	4082,7,c	;volatile
  3841  0020EE                     u1676:
  3842  0020EE  0012               	return		;funcret
  3843  0020F0                     __end_of_pulse_e:
  3844                           	opt callstack 0
  3845                           
  3846 ;; *************** function ___awmod *****************
  3847 ;; Defined at:
  3848 ;;		line 7 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/awmod.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  dividend        2   11[COMRAM] int 
  3851 ;;  divisor         2   13[COMRAM] int 
  3852 ;; Auto vars:     Size  Location     Type
  3853 ;;  sign            1   16[COMRAM] unsigned char 
  3854 ;;  counter         1   15[COMRAM] unsigned char 
  3855 ;; Return value:  Size  Location     Type
  3856 ;;                  2   11[COMRAM] int 
  3857 ;; Registers used:
  3858 ;;		wreg, status,2, status,0
  3859 ;; Tracked objects:
  3860 ;;		On entry : 0/0
  3861 ;;		On exit  : 0/0
  3862 ;;		Unchanged: 0/0
  3863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3864 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3867 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3868 ;;Total ram usage:        6 bytes
  3869 ;; Hardware stack levels used:    1
  3870 ;; Hardware stack levels required when called:    1
  3871 ;; This function calls:
  3872 ;;		Nothing
  3873 ;; This function is called by:
  3874 ;;		_main
  3875 ;; This function uses a non-reentrant model
  3876 ;;
  3877                           
  3878                           	psect	text19
  3879  001DC0                     __ptext19:
  3880                           	opt callstack 0
  3881  001DC0                     ___awmod:
  3882                           	opt callstack 29
  3883                           
  3884                           ;incstack = 0
  3885  001DC0  0E00               	movlw	0
  3886  001DC2  6E11               	movwf	___awmod@sign,c
  3887  001DC4  AE0D               	btfss	___awmod@dividend+1,7,c
  3888  001DC6  D006               	goto	l1860
  3889  001DC8  6C0C               	negf	___awmod@dividend,c
  3890  001DCA  1E0D               	comf	___awmod@dividend+1,f,c
  3891  001DCC  B0D8               	btfsc	status,0,c
  3892  001DCE  2A0D               	incf	___awmod@dividend+1,f,c
  3893  001DD0  0E01               	movlw	1
  3894  001DD2  6E11               	movwf	___awmod@sign,c
  3895  001DD4                     l1860:
  3896  001DD4  AE0F               	btfss	___awmod@divisor+1,7,c
  3897  001DD6  D004               	goto	l1864
  3898  001DD8  6C0E               	negf	___awmod@divisor,c
  3899  001DDA  1E0F               	comf	___awmod@divisor+1,f,c
  3900  001DDC  B0D8               	btfsc	status,0,c
  3901  001DDE  2A0F               	incf	___awmod@divisor+1,f,c
  3902  001DE0                     l1864:
  3903  001DE0  500E               	movf	___awmod@divisor,w,c
  3904  001DE2  100F               	iorwf	___awmod@divisor+1,w,c
  3905  001DE4  B4D8               	btfsc	status,2,c
  3906  001DE6  D018               	goto	l1880
  3907  001DE8  0E01               	movlw	1
  3908  001DEA  6E10               	movwf	___awmod@counter,c
  3909  001DEC  D004               	goto	l1870
  3910  001DEE                     l1868:
  3911  001DEE  90D8               	bcf	status,0,c
  3912  001DF0  360E               	rlcf	___awmod@divisor,f,c
  3913  001DF2  360F               	rlcf	___awmod@divisor+1,f,c
  3914  001DF4  2A10               	incf	___awmod@counter,f,c
  3915  001DF6                     l1870:
  3916  001DF6  AE0F               	btfss	___awmod@divisor+1,7,c
  3917  001DF8  D7FA               	goto	l1868
  3918  001DFA                     u1340:
  3919  001DFA  500E               	movf	___awmod@divisor,w,c
  3920  001DFC  5C0C               	subwf	___awmod@dividend,w,c
  3921  001DFE  500F               	movf	___awmod@divisor+1,w,c
  3922  001E00  580D               	subwfb	___awmod@dividend+1,w,c
  3923  001E02  A0D8               	btfss	status,0,c
  3924  001E04  D004               	goto	l1876
  3925  001E06  500E               	movf	___awmod@divisor,w,c
  3926  001E08  5E0C               	subwf	___awmod@dividend,f,c
  3927  001E0A  500F               	movf	___awmod@divisor+1,w,c
  3928  001E0C  5A0D               	subwfb	___awmod@dividend+1,f,c
  3929  001E0E                     l1876:
  3930  001E0E  90D8               	bcf	status,0,c
  3931  001E10  320F               	rrcf	___awmod@divisor+1,f,c
  3932  001E12  320E               	rrcf	___awmod@divisor,f,c
  3933  001E14  2E10               	decfsz	___awmod@counter,f,c
  3934  001E16  D7F1               	goto	u1340
  3935  001E18                     l1880:
  3936  001E18  5011               	movf	___awmod@sign,w,c
  3937  001E1A  B4D8               	btfsc	status,2,c
  3938  001E1C  D004               	goto	l1884
  3939  001E1E  6C0C               	negf	___awmod@dividend,c
  3940  001E20  1E0D               	comf	___awmod@dividend+1,f,c
  3941  001E22  B0D8               	btfsc	status,0,c
  3942  001E24  2A0D               	incf	___awmod@dividend+1,f,c
  3943  001E26                     l1884:
  3944  001E26  C00C  F00C         	movff	___awmod@dividend,?___awmod
  3945  001E2A  C00D  F00D         	movff	___awmod@dividend+1,?___awmod+1
  3946  001E2E  0012               	return		;funcret
  3947  001E30                     __end_of___awmod:
  3948                           	opt callstack 0
  3949                           
  3950 ;; *************** function _interruptHandler *****************
  3951 ;; Defined at:
  3952 ;;		line 192 in file "main.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;		None
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;  i               2    8[COMRAM] int 
  3957 ;;  keypress        1   10[COMRAM] unsigned char 
  3958 ;; Return value:  Size  Location     Type
  3959 ;;                  1    wreg      void 
  3960 ;; Registers used:
  3961 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3962 ;; Tracked objects:
  3963 ;;		On entry : 0/0
  3964 ;;		On exit  : 0/0
  3965 ;;		Unchanged: 0/0
  3966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3967 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3971 ;;Total ram usage:       11 bytes
  3972 ;; Hardware stack levels used:    1
  3973 ;; This function calls:
  3974 ;;		Nothing
  3975 ;; This function is called by:
  3976 ;;		Interrupt level 2
  3977 ;; This function uses a non-reentrant model
  3978 ;;
  3979                           
  3980                           	psect	intcode
  3981  000008                     __pintcode:
  3982                           	opt callstack 0
  3983  000008                     _interruptHandler:
  3984                           	opt callstack 19
  3985                           
  3986                           ;incstack = 0
  3987  000008  8274               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3988  00000A  ED3F  F00E         	call	int_func,f	;refresh shadow registers
  3989                           
  3990                           	psect	intcode_body
  3991  001C7E                     __pintcode_body:
  3992                           	opt callstack 19
  3993  001C7E                     int_func:
  3994                           	opt callstack 19
  3995  001C7E  0006               	pop		; remove dummy address from shadow register refresh
  3996  001C80  CFF6 F005          	movff	tblptrl,??_interruptHandler+4
  3997  001C84  CFF7 F006          	movff	tblptrh,??_interruptHandler+5
  3998  001C88  CFF8 F007          	movff	tblptru,??_interruptHandler+6
  3999  001C8C  CFF5 F008          	movff	tablat,??_interruptHandler+7
  4000                           
  4001                           ;main.c: 194:     if(INT1IF){
  4002  001C90  A0F0               	btfss	4080,0,c	;volatile
  4003  001C92  D041               	goto	i2u166_40
  4004                           
  4005                           ;main.c: 198:         INT1IF = 0;
  4006  001C94  90F0               	bcf	4080,0,c	;volatile
  4007                           
  4008                           ;main.c: 200:         unsigned char keypress = (PORTB & 0xF0) >> 4;
  4009  001C96  3881               	swapf	3969,w,c	;volatile
  4010  001C98  0B0F               	andlw	15
  4011  001C9A  0B0F               	andlw	15
  4012  001C9C  6E0B               	movwf	interruptHandler@keypress,c
  4013                           
  4014                           ;main.c: 202:         if (keys[keypress] == '*') {
  4015  001C9E  0E01               	movlw	low _keys
  4016  001CA0  240B               	addwf	interruptHandler@keypress,w,c
  4017  001CA2  6EF6               	movwf	tblptrl,c
  4018  001CA4  6AF7               	clrf	tblptrh,c
  4019  001CA6  0E10               	movlw	high _keys
  4020  001CA8  22F7               	addwfc	tblptrh,f,c
  4021  001CAA                     	if	0	;There are less than 3 active tblptr bytes
  4022  001CAA                     	endif
  4023  001CAA  0008               	tblrd		*
  4024  001CAC  50F5               	movf	tablat,w,c
  4025  001CAE  0A2A               	xorlw	42
  4026  001CB0  A4D8               	btfss	status,2,c
  4027  001CB2  D004               	goto	i2l2120
  4028                           
  4029                           ;main.c: 204:             exit_key = 1;
  4030  001CB4  0E01               	movlw	1
  4031  001CB6  0100               	movlb	0	; () banked
  4032  001CB8  6FC2               	movwf	_exit_key& (0+255),b	;volatile
  4033  001CBA  D02D               	goto	i2u166_40
  4034  001CBC                     i2l2120:
  4035                           
  4036                           ;main.c: 208:         for ( int i = 0; i < Canister; i++ ) {
  4037  001CBC  0E00               	movlw	0
  4038  001CBE  6E0A               	movwf	interruptHandler@i+1,c
  4039  001CC0  0E00               	movlw	0
  4040  001CC2  6E09               	movwf	interruptHandler@i,c
  4041  001CC4  D01D               	goto	i2l2130
  4042  001CC6                     i2l2122:
  4043                           
  4044                           ; BSR set to: 0
  4045                           ;main.c: 210:             if ((char)i + '0' == keys[keypress]) {
  4046  001CC6  0E01               	movlw	low _keys
  4047  001CC8  240B               	addwf	interruptHandler@keypress,w,c
  4048  001CCA  6EF6               	movwf	tblptrl,c
  4049  001CCC  6AF7               	clrf	tblptrh,c
  4050  001CCE  0E10               	movlw	high _keys
  4051  001CD0  22F7               	addwfc	tblptrh,f,c
  4052  001CD2                     	if	0	;There are less than 3 active tblptr bytes
  4053  001CD2                     	endif
  4054  001CD2  0008               	tblrd		*
  4055  001CD4  50F5               	movf	tablat,w,c
  4056  001CD6  6E01               	movwf	??_interruptHandler& (0+255),c
  4057  001CD8  6A02               	clrf	(??_interruptHandler+1)& (0+255),c
  4058  001CDA  5009               	movf	interruptHandler@i,w,c
  4059  001CDC  6E03               	movwf	(??_interruptHandler+2)& (0+255),c
  4060  001CDE  6A04               	clrf	(??_interruptHandler+3)& (0+255),c
  4061  001CE0  0E30               	movlw	48
  4062  001CE2  2603               	addwf	??_interruptHandler+2,f,c
  4063  001CE4  0E00               	movlw	0
  4064  001CE6  2204               	addwfc	??_interruptHandler+3,f,c
  4065  001CE8  5001               	movf	??_interruptHandler,w,c
  4066  001CEA  1803               	xorwf	??_interruptHandler+2,w,c
  4067  001CEC  E107               	bnz	i2l2128
  4068  001CEE  5002               	movf	??_interruptHandler+1,w,c
  4069  001CF0  1804               	xorwf	??_interruptHandler+3,w,c
  4070  001CF2  A4D8               	btfss	status,2,c
  4071  001CF4  D003               	goto	i2l2128
  4072                           
  4073                           ; BSR set to: 0
  4074                           ;main.c: 211:                 key_was_pressed = 1;
  4075  001CF6  0E01               	movlw	1
  4076  001CF8  6FC3               	movwf	_key_was_pressed& (0+255),b	;volatile
  4077  001CFA  D00D               	goto	i2u166_40
  4078  001CFC                     i2l2128:
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;main.c: 215:         }
  4082  001CFC  4A09               	infsnz	interruptHandler@i,f,c
  4083  001CFE  2A0A               	incf	interruptHandler@i+1,f,c
  4084  001D00                     i2l2130:
  4085  001D00  0100               	movlb	0	; () banked
  4086  001D02  51BE               	movf	_Canister& (0+255),w,b
  4087  001D04  5C09               	subwf	interruptHandler@i,w,c
  4088  001D06  500A               	movf	interruptHandler@i+1,w,c
  4089  001D08  0A80               	xorlw	128
  4090  001D0A  6E01               	movwf	??_interruptHandler& (0+255),c
  4091  001D0C  51BF               	movf	(_Canister+1)& (0+255),w,b
  4092  001D0E  0A80               	xorlw	128
  4093  001D10  5801               	subwfb	??_interruptHandler& (0+255),w,c
  4094  001D12  A0D8               	btfss	status,0,c
  4095  001D14  D7D8               	goto	i2l2122
  4096  001D16                     i2u166_40:
  4097  001D16  C008  FFF5         	movff	??_interruptHandler+7,tablat
  4098  001D1A  C007  FFF8         	movff	??_interruptHandler+6,tblptru
  4099  001D1E  C006  FFF7         	movff	??_interruptHandler+5,tblptrh
  4100  001D22  C005  FFF6         	movff	??_interruptHandler+4,tblptrl
  4101  001D26  9274               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4102  001D28  0011               	retfie		f
  4103  001D2A                     __end_of_interruptHandler:
  4104                           	opt callstack 0
  4105                           
  4106                           	psect	rparam
  4107  0000                     
  4108                           	psect	temp
  4109  000074                     btemp:
  4110                           	opt callstack 0
  4111  000074                     	ds	1
  4112  0000                     int$flags	set	btemp
  4113  0000                     wtemp8	set	btemp+1
  4114  0000                     ttemp5	set	btemp+1
  4115  0000                     ttemp6	set	btemp+4
  4116  0000                     ttemp7	set	btemp+8
  4117                           tosu	equ	0xFFF
  4118                           tosh	equ	0xFFE
  4119                           tosl	equ	0xFFD
  4120                           stkptr	equ	0xFFC
  4121                           pclatu	equ	0xFFB
  4122                           pclath	equ	0xFFA
  4123                           pcl	equ	0xFF9
  4124                           tblptru	equ	0xFF8
  4125                           tblptrh	equ	0xFF7
  4126                           tblptrl	equ	0xFF6
  4127                           tablat	equ	0xFF5
  4128                           prodh	equ	0xFF4
  4129                           prodl	equ	0xFF3
  4130                           indf0	equ	0xFEF
  4131                           postinc0	equ	0xFEE
  4132                           postdec0	equ	0xFED
  4133                           preinc0	equ	0xFEC
  4134                           plusw0	equ	0xFEB
  4135                           fsr0h	equ	0xFEA
  4136                           fsr0l	equ	0xFE9
  4137                           wreg	equ	0xFE8
  4138                           indf1	equ	0xFE7
  4139                           postinc1	equ	0xFE6
  4140                           postdec1	equ	0xFE5
  4141                           preinc1	equ	0xFE4
  4142                           plusw1	equ	0xFE3
  4143                           fsr1h	equ	0xFE2
  4144                           fsr1l	equ	0xFE1
  4145                           bsr	equ	0xFE0
  4146                           indf2	equ	0xFDF
  4147                           postinc2	equ	0xFDE
  4148                           postdec2	equ	0xFDD
  4149                           preinc2	equ	0xFDC
  4150                           plusw2	equ	0xFDB
  4151                           fsr2h	equ	0xFDA
  4152                           fsr2l	equ	0xFD9
  4153                           status	equ	0xFD8


Data Sizes:
    Strings     213
    Constant    23
    Data        66
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    107     115
    BANK0           128     25     125
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_19(CODE[14]), STR_18(CODE[11]), STR_17(CODE[12]), STR_16(CODE[15]), 
		 -> STR_15(CODE[14]), STR_14(CODE[12]), STR_13(CODE[15]), STR_12(CODE[12]), 
		 -> STR_11(CODE[15]), STR_10(CODE[12]), STR_9(CODE[16]), STR_8(CODE[9]), 
		 -> STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[13]), STR_4(CODE[15]), 
		 -> STR_3(CODE[11]), STR_2(CODE[15]), STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S777_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_19(CODE[14]), STR_18(CODE[11]), STR_17(CODE[12]), STR_16(CODE[15]), 
		 -> STR_15(CODE[14]), STR_14(CODE[12]), STR_13(CODE[15]), STR_12(CODE[12]), 
		 -> STR_11(CODE[15]), STR_10(CODE[12]), STR_9(CODE[16]), STR_8(CODE[9]), 
		 -> STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[13]), STR_4(CODE[15]), 
		 -> STR_3(CODE[11]), STR_2(CODE[15]), STR_1(CODE[17]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 17
		 -> STR_19(CODE[14]), STR_18(CODE[11]), STR_17(CODE[12]), STR_16(CODE[15]), 
		 -> STR_15(CODE[14]), STR_14(CODE[12]), STR_13(CODE[15]), STR_12(CODE[12]), 
		 -> STR_11(CODE[15]), STR_10(CODE[12]), STR_9(CODE[16]), STR_8(CODE[9]), 
		 -> STR_7(CODE[9]), STR_6(CODE[11]), STR_5(CODE[13]), STR_4(CODE[15]), 
		 -> STR_3(CODE[11]), STR_2(CODE[15]), STR_1(CODE[17]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                21    21      0   16228
                                              4 BANK0     21    21      0
                            ___awmod
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4   14456
                                            103 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   12659
                                             95 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6   12177
                                             78 COMRAM    17    11      6
                               _ctoa
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    6083
                                             42 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             29 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                             11 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                             11 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     4      3    4096
                                             42 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3817
                                             31 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1602
                                             24 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1102
                                             15 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     350
                                             15 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _send_byte                                            1     1      0     127
                                             13 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (7) _send_nibble                                          1     1      0      65
                                             12 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (8) _pulse_e                                              1     1      0      34
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              6     2      4     448
                                             11 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _interruptHandler                                   11    11      0      91
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     19      7D       5       97.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6B      73       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F0      34        0.0%
DATA                 0      0      F0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Feb  1 17:11:42 2019

              __CFG_CPD$ON 000000                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l159 1D58                        l177 165C  
                      l179 1664                        l890 2092               __CFG_CPB$OFF 000000  
                      _abs 206A                        _pad 1D2A               ___awmod@sign 0011  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     ?_abs 001E                       l2202 1DA6                       l2230 1A8C  
                     l2310 1640                       l2232 1AA0                       l2224 1A66  
                     l2250 1B38                       l2242 1AFC                       l2218 1A3E  
                     l2402 19C6                       l2172 2052                       l2324 167E  
                     l2500 115A                       l2158 1E48                       l2246 1B12  
                     l2270 1BC4                       l2262 1B86                       l2168 203C  
                     l2176 20A6                       l2192 1D50                       l2272 1BD8  
                     l2328 168E                       l2408 19DE                       l2424 1F18  
                     l2178 20AA                       l2194 1D62                       l2282 1C36  
                     l2266 1BAA                       l2362 1802                       l2338 1786  
                     l2426 1F3C                       l2602 13B4                       l2188 1D42  
                     l2620 1470                       l2198 1D7A                       l2294 1F6A  
                     l2286 1C5C                       l2278 1C20                       l2358 17EA  
                     l2382 18CE                       l2622 147A                       l2518 11BA  
                     l2296 1F76                       l2392 1980                       l2640 1538  
                     l2536 1218                       l2642 1542                       l2618 1464  
                     l1860 1DD4                       l2652 1582                       l2660 15A8  
                     l2556 1284                       l1870 1DF6                       l2398 19BC  
                     l2670 15D2                       l2638 152C                       l1880 1E18  
                     l1864 1DE0                       l2656 1598                       l2576 12F6  
                     l2586 131E                       l1884 1E26                       l1876 1E0E  
                     l1868 1DEE                       ?_pad 0020                       STR_1 1018  
                     STR_2 1048                       STR_3 10C5                       STR_4 1066  
                     STR_5 10A0                       STR_6 10D0                       STR_7 10DB  
                     STR_8 10E4                       STR_9 1029                       u2000 1794  
                     u2020 17B6                       u2021 17B4                       u2030 17C4  
                     u2110 1902                       u2040 17C8                       u1340 1DFA  
                     u2060 17D4                       u2300 1438                       _LATD 000F8C  
                     u2340 14FE                       u1710 1E88                       u2350 1500  
                     u2407 1134                       u2417 1150                       u2290 1436  
                     u1811 1A6C                       u2507 15DE                       u2427 117A  
                     u2517 1EA2                       u2437 11D8                       u1830 1AA4  
                     u2527 1EBA                       u2447 1238                       u2537 1ECC  
                     u2457 12A4                       u1690 1E40                       u1930 1612  
                     u1675 20EC                       u2547 1EEE                       u2467 133C  
                     u1676 20EE                       u1780 2078                       u1940 1614  
                     u2557 20D4                       u2477 13D2                       u2567 20DE  
                     u2487 149A                       u2497 158E                       u1890 1BDC  
                     u1970 1652                       u1990 1678                       abs@a 001E  
                     _dbuf 00C4                       _ctoa 1F58                       _main 10EE  
                     _dtoa 15EA   __end_of_interruptHandler 1D2A                       _keys 1001  
                     _prec 0070                       _time 00C0                       _nout 006C  
                     pad@i 0027                       pad@p 0024                       fsr1h 000FE2  
                     fsr2h 000FDA                       indf2 000FDF                       fsr1l 000FE1  
                     pad@w 0029                       fsr2l 000FD9                       btemp 0074  
                     start 000E              __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                      ??_abs 0020                      ??_pad 0026  
          __end_of___aodiv 1B5A                      ?_ctoa 002B                      ?_main 0001  
                    ?_dtoa 002B            __end_of___aomod 1C7E                      STR_10 10B9  
                    STR_11 1039                      STR_12 10AD                      STR_13 1057  
                    STR_14 10AD                      STR_15 1092                      STR_16 1075  
                    STR_17 10AD                      STR_18 1087                      STR_19 1084  
          __end_of___awmod 1E30               vfpfcnvrt@fmt 0051                      _PORTB 000F81  
                    _TRISD 000F95              __CFG_PWRT$OFF 000000               main@miniTick 00F2  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 2158             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
             main@keypress 00FC             __CFG_EBTR3$OFF 000000                      _State 00A8  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
                    _balls 00BC            __end_of_initLCD 1F06             __CFG_EBTRB$OFF 000000  
                    _flags 0072              _BallDispensed 0080                      _fputc 1E30  
                    _fputs 2032                      pad@fp 0020                      _width 006E  
                    ctoa@c 002D                      _putch 2140                      ctoa@w 002E  
                    dtoa@d 002D                      dtoa@i 004D                      dtoa@n 0045  
                    dtoa@p 003F                      dtoa@s 0043                      dtoa@w 0041  
                    tablat 000FF5            send_nibble@data 000D            __end_of_pulse_e 20F0  
                    ttemp5 0075                      ttemp6 0078                      ttemp7 007C  
                    status 000FD8                      wtemp8 0075             __CFG_PBADEN$ON 000000  
          __initialization 1FA6               __end_of_ctoa 1FA6               __end_of_main 15EA  
             __end_of_dtoa 182C               __end_of_keys 1012                     ??_ctoa 002E  
                   ??_main 00E8                     ??_dtoa 0035              __activetblptr 000001  
                   _ADCON1 000FC1               ?_send_nibble 0001                     ?_fputc 0010  
                   ?_fputs 0019                     ?_putch 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     i2l2120 1CBC                     i2l2122 1CC6  
                   i2l2130 1D00                     i2l2128 1CFC              main@miniClear 00F4  
            main@miniState 00F6             __CFG_XINST$OFF 000000               vfprintf@cfmt 0066  
                ??___aodiv 001C                  ??___aomod 001C             __CFG_STVREN$ON 000000  
                ??___awmod 0010                     clear_0 1FCC                     clear_1 1FD8  
          ___awmod@divisor 000E            ___awmod@counter 0010                  ??_lcdInst 000F  
                   _printf 20F0                     pad@buf 0022                     ctoa@fp 002B  
                   dtoa@fp 002B                     _strlen 209C                  ??_initLCD 0010  
                   fputc@c 0010                     fputs@c 001D                     fputs@i 001E  
                   fputs@s 0019               __mediumconst 0000                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8           __end_of_vfprintf 1F58  
                ??_pulse_e 000C      pulse_e@interruptState 000C                 __accesstop 0080  
  __end_of__initialization 1FDE              ___rparam_used 000001             __pcstackCOMRAM 0001  
             __pidataBANK0 1FF0              __end_of_fputc 1E9C              __end_of_fputs 206A  
            __end_of_putch 214C            _key_was_pressed 00C3                    ??_fputc 0014  
                  ??_fputs 001D                    ??_putch 000F                 __pbssBANK0 00C2  
        ?_interruptHandler 0001         ??_interruptHandler 0001         __size_of_send_byte 0012  
                  ?_printf 0068                    ?_strlen 000C         __size_of_vfpfcnvrt 01E6  
     __size_of_send_nibble 0016           _DistanceCanister 0094                    __Hparam 0000  
                  __Lparam 0000                    ___aodiv 1A12                    ___aomod 1B5A  
                  ___awmod 1DC0                  ?_vfprintf 0060               __psmallconst 1000  
 interruptHandler@keypress 000B                    __pcinit 1FA6                    __ramtop 1000  
                  _lcdInst 214C                    __ptext0 10EE                    __ptext1 20F0  
                  __ptext2 1F06                    __ptext3 182C                    __ptext4 15EA  
                  __ptext5 206A                    __ptext6 1B5A                    __ptext7 1A12  
                  __ptext8 1F58                    __ptext9 1D2A            __size_of_printf 0028  
          __size_of_strlen 002A                    _initLCD 1E9C               __size_of_abs 0032  
             __size_of_pad 0096           ___awmod@dividend 000C                    _pulse_e 20C6  
           __pintcode_body 1C7E       end_of_initialization 1FDE      __end_of_LCD_SIZE_HORZ 1018  
        __end_of_send_byte 2140      __end_of_LCD_SIZE_VERT 1017                    fputc@fp 0012  
                  int_func 1C7E                    fputs@fp 001B          __end_of_vfpfcnvrt 1A12  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                 ??_vfprintf 0066  
                  strlen@a 000E                    strlen@s 000C              send_byte@data 000E  
              vfpfcnvrt@ap 0053                vfpfcnvrt@fp 004F                vfpfcnvrt@ll 0057  
           __end_of_printf 2118             __end_of_strlen 20C6        start_initialization 1FA6  
              __end_of_abs 209C                __end_of_pad 1DC0          interruptHandler@i 0009  
              vfprintf@fmt 0062                __pdataBANK0 0080           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 006C  __size_of_interruptHandler 1D22                   ??_strlen 000E  
              __pbssCOMRAM 006C              __pcstackBANK0 00E4           ___aodiv@dividend 000C  
        __CFG_CCP2MX$PORTC 000000                  __pintcode 0008                   ?___aodiv 000C  
                 ?___aomod 000C           ___aodiv@quotient 001E                   ?___awmod 000C  
                 ?_lcdInst 0001          __size_of_vfprintf 0052                   ?_initLCD 0001  
              __smallconst 1000              ??_send_nibble 000D                   ?_pulse_e 0001  
           __size_of_fputc 006C             __size_of_fputs 0038             __size_of_putch 000C  
                 _LATDbits 000F8C                  _send_byte 212E             _LCD_LINE1_ADDR 1015  
           _LCD_LINE2_ADDR 1014             _LCD_LINE3_ADDR 1013             _LCD_LINE4_ADDR 1012  
                 i2u166_40 1D16           __CFG_WDTPS$32768 000000                  _vfpfcnvrt 182C  
                main@clear 00F8                   _Canister 00BE                  main@state 00FA  
               vfpfcnvrt@c 005F                  copy_data0 1FBA     __end_of_LCD_LINE1_ADDR 1016  
   __end_of_LCD_LINE2_ADDR 1015     __end_of_LCD_LINE3_ADDR 1014     __end_of_LCD_LINE4_ADDR 1013  
      __end_of_send_nibble 212E                 ?_send_byte 0001                   __Hrparam 0000  
               vfprintf@ap 0064                   __Lrparam 0000                 vfprintf@fp 0060  
             __Lsmallconst 1000         __CFG_BOREN$SBORDIS 000000           __size_of___aodiv 0148  
         __size_of___aomod 0124           __size_of___awmod 0070                 ?_vfpfcnvrt 004F  
          ___aodiv@divisor 0014           _interruptHandler 0008            ___aodiv@counter 001C  
         __size_of_lcdInst 000C           __size_of_initLCD 006A                   _dtoa$316 003D  
                 __ptext10 209C                   __ptext11 2032                   __ptext12 1E30  
                 __ptext13 2140                   __ptext14 1E9C                   __ptext15 214C  
                 __ptext16 212E                   __ptext17 2118                   __ptext18 20C6  
                 __ptext19 1DC0           __size_of_pulse_e 002A              __size_of_ctoa 004E  
            __size_of_main 04FC              __size_of_dtoa 0242                   _exit_key 00C2  
                 int$flags 0074                   _vfprintf 1F06                  printf@fmt 0068  
                 main@tick 00F0           ___aomod@dividend 000C                  putch@data 000F  
               _INTCONbits 000FF2                _send_nibble 2118                   intlevel2 0000  
            _LCD_SIZE_HORZ 1017              _LCD_SIZE_VERT 1016                ??_send_byte 000E  
                 printf@ap 00E6            ___aomod@divisor 0014                ??_vfpfcnvrt 0055  
              lcdInst@data 000F            ___aomod@counter 001C               ___aodiv@sign 001D  
             ___aomod@sign 001D  
