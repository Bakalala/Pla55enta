

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Feb  1 16:53:53 2019

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	flic
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	text0,global,reloc=2,class=CODE,delta=1
    15                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    16                           	psect	text2,global,reloc=2,class=CODE,delta=1
    17                           	psect	text3,global,reloc=2,class=CODE,delta=1
    18                           	psect	text4,global,reloc=2,class=CODE,delta=1
    19                           	psect	text5,global,reloc=2,class=CODE,delta=1,group=2
    20                           	psect	text6,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    22                           	psect	text8,global,reloc=2,class=CODE,delta=1
    23                           	psect	text9,global,reloc=2,class=CODE,delta=1
    24                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=2
    25                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=2
    26                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=2
    27                           	psect	text13,global,reloc=2,class=CODE,delta=1
    28                           	psect	text14,global,reloc=2,class=CODE,delta=1
    29                           	psect	text15,global,reloc=2,class=CODE,delta=1
    30                           	psect	text16,global,reloc=2,class=CODE,delta=1
    31                           	psect	text17,global,reloc=2,class=CODE,delta=1
    32                           	psect	text18,global,reloc=2,class=CODE,delta=1,inline
    33                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    38  0000                     
    39                           ; Version 2.05
    40                           ; Generated 20/12/2018 GMT
    41                           ; 
    42                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC18F4620 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     
    74                           	psect	idataBANK0
    75  001C5A                     __pidataBANK0:
    76                           	opt callstack 0
    77                           
    78                           ;initializer for _BallDispensed
    79  001C5A  FFFF               	dw	65535
    80  001C5C  FFFF               	dw	65535
    81  001C5E  FFFF               	dw	65535
    82  001C60  FFFF               	dw	65535
    83  001C62  FFFF               	dw	65535
    84  001C64  FFFF               	dw	65535
    85  001C66  FFFF               	dw	65535
    86  001C68  FFFF               	dw	65535
    87  001C6A  FFFF               	dw	65535
    88  001C6C  FFFF               	dw	65535
    89                           
    90                           ;initializer for _DistanceCanister
    91  001C6E  FFFF               	dw	65535
    92  001C70  FFFF               	dw	65535
    93  001C72  FFFF               	dw	65535
    94  001C74  FFFF               	dw	65535
    95  001C76  FFFF               	dw	65535
    96  001C78  FFFF               	dw	65535
    97  001C7A  FFFF               	dw	65535
    98  001C7C  FFFF               	dw	65535
    99  001C7E  FFFF               	dw	65535
   100  001C80  FFFF               	dw	65535
   101                           
   102                           ;initializer for _FinalState
   103  001C82  FFFF               	dw	65535
   104  001C84  FFFF               	dw	65535
   105  001C86  FFFF               	dw	65535
   106  001C88  FFFF               	dw	65535
   107  001C8A  FFFF               	dw	65535
   108  001C8C  FFFF               	dw	65535
   109  001C8E  FFFF               	dw	65535
   110  001C90  FFFF               	dw	65535
   111  001C92  FFFF               	dw	65535
   112  001C94  FFFF               	dw	65535
   113                           
   114                           ;initializer for _InitialState
   115  001C96  FFFF               	dw	65535
   116  001C98  FFFF               	dw	65535
   117  001C9A  FFFF               	dw	65535
   118  001C9C  FFFF               	dw	65535
   119  001C9E  FFFF               	dw	65535
   120  001CA0  FFFF               	dw	65535
   121  001CA2  FFFF               	dw	65535
   122  001CA4  FFFF               	dw	65535
   123  001CA6  FFFF               	dw	65535
   124  001CA8  FFFF               	dw	65535
   125                           
   126                           ;initializer for _balls
   127  001CAA  0005               	dw	5
   128                           
   129                           ;initializer for _Canister
   130  001CAC  0007               	dw	7
   131                           
   132                           ;initializer for _time
   133  001CAE  001E               	dw	30
   134                           
   135                           	psect	smallconst
   136  001000                     __psmallconst:
   137                           	opt callstack 0
   138  001000  00                 	db	0
   139  001001                     _keys:
   140                           	opt callstack 0
   141  001001  31                 	db	49
   142  001002  32                 	db	50
   143  001003  33                 	db	51
   144  001004  41                 	db	65
   145  001005  34                 	db	52
   146  001006  35                 	db	53
   147  001007  36                 	db	54
   148  001008  42                 	db	66
   149  001009  37                 	db	55
   150  00100A  38                 	db	56
   151  00100B  39                 	db	57
   152  00100C  43                 	db	67
   153  00100D  2A                 	db	42
   154  00100E  30                 	db	48
   155  00100F  23                 	db	35
   156  001010  44                 	db	68
   157  001011  00                 	db	0
   158  001012                     __end_of_keys:
   159                           	opt callstack 0
   160  001012  50                 	db	80
   161  001013                     __end_of_LCD_LINE4_ADDR:
   162                           	opt callstack 0
   163  001013  10                 	db	16
   164  001014                     __end_of_LCD_LINE3_ADDR:
   165                           	opt callstack 0
   166  001014  40                 	db	64
   167  001015                     __end_of_LCD_LINE2_ADDR:
   168                           	opt callstack 0
   169  001015  00                 	db	0
   170  001016                     __end_of_LCD_LINE1_ADDR:
   171                           	opt callstack 0
   172  001016                     _LCD_SIZE_VERT:
   173                           	opt callstack 0
   174  001016  04                 	db	4
   175  001017                     __end_of_LCD_SIZE_VERT:
   176                           	opt callstack 0
   177  001017                     _LCD_SIZE_HORZ:
   178                           	opt callstack 0
   179  001017  10                 	db	16
   180  001018                     __end_of_LCD_SIZE_HORZ:
   181                           	opt callstack 0
   182  0000                     _PORTB	set	3969
   183  0000                     _ADCON1	set	4033
   184  0000                     _TRISD	set	3989
   185  0000                     _LATD	set	3980
   186  0000                     _LATDbits	set	3980
   187  0000                     _INTCONbits	set	4082
   188  0000                     _INT1IF	set	32640
   189  0000                     _INT1IE	set	32643
   190  001018                     STR_1:
   191  001018  49                 	db	73	;'I'
   192  001019  74                 	db	116	;'t'
   193  00101A  27                 	db	39
   194  00101B  73                 	db	115	;'s'
   195  00101C  20                 	db	32
   196  00101D  79                 	db	121	;'y'
   197  00101E  61                 	db	97	;'a'
   198  00101F  20                 	db	32
   199  001020  62                 	db	98	;'b'
   200  001021  6F                 	db	111	;'o'
   201  001022  79                 	db	121	;'y'
   202  001023  20                 	db	32
   203  001024  41                 	db	65	;'A'
   204  001025  6C                 	db	108	;'l'
   205  001026  69                 	db	105	;'i'
   206  001027  21                 	db	33
   207  001028  00                 	db	0
   208  001029                     STR_9:
   209  001029  49                 	db	73	;'I'
   210  00102A  6E                 	db	110	;'n'
   211  00102B  64                 	db	100	;'d'
   212  00102C  69                 	db	105	;'i'
   213  00102D  76                 	db	118	;'v'
   214  00102E  69                 	db	105	;'i'
   215  00102F  64                 	db	100	;'d'
   216  001030  75                 	db	117	;'u'
   217  001031  61                 	db	97	;'a'
   218  001032  6C                 	db	108	;'l'
   219  001033  20                 	db	32
   220  001034  49                 	db	73	;'I'
   221  001035  6E                 	db	110	;'n'
   222  001036  66                 	db	102	;'f'
   223  001037  6F                 	db	111	;'o'
   224  001038  00                 	db	0
   225  001039                     STR_11:
   226  001039  50                 	db	80	;'P'
   227  00103A  72                 	db	114	;'r'
   228  00103B  65                 	db	101	;'e'
   229  00103C  73                 	db	115	;'s'
   230  00103D  73                 	db	115	;'s'
   231  00103E  20                 	db	32
   232  00103F  30                 	db	48	;'0'
   233  001040  20                 	db	32
   234  001041  74                 	db	116	;'t'
   235  001042  6F                 	db	111	;'o'
   236  001043  20                 	db	32
   237  001044  25                 	db	37
   238  001045  64                 	db	100	;'d'
   239  001046  20                 	db	32
   240  001047  00                 	db	0
   241  001048                     STR_2:
   242  001048  4F                 	db	79	;'O'
   243  001049  70                 	db	112	;'p'
   244  00104A  65                 	db	101	;'e'
   245  00104B  72                 	db	114	;'r'
   246  00104C  61                 	db	97	;'a'
   247  00104D  74                 	db	116	;'t'
   248  00104E  69                 	db	105	;'i'
   249  00104F  6F                 	db	111	;'o'
   250  001050  6E                 	db	110	;'n'
   251  001051  20                 	db	32
   252  001052  54                 	db	84	;'T'
   253  001053  69                 	db	105	;'i'
   254  001054  6D                 	db	109	;'m'
   255  001055  65                 	db	101	;'e'
   256  001056  00                 	db	0
   257  001057                     STR_13:
   258  001057  44                 	db	68	;'D'
   259  001058  69                 	db	105	;'i'
   260  001059  73                 	db	115	;'s'
   261  00105A  74                 	db	116	;'t'
   262  00105B  61                 	db	97	;'a'
   263  00105C  6E                 	db	110	;'n'
   264  00105D  63                 	db	99	;'c'
   265  00105E  65                 	db	101	;'e'
   266  00105F  20                 	db	32
   267  001060  25                 	db	37
   268  001061  64                 	db	100	;'d'
   269  001062  20                 	db	32
   270  001063  63                 	db	99	;'c'
   271  001064  6D                 	db	109	;'m'
   272  001065  00                 	db	0
   273  001066                     STR_4:
   274  001066  23                 	db	35
   275  001067  20                 	db	32
   276  001068  6F                 	db	111	;'o'
   277  001069  66                 	db	102	;'f'
   278  00106A  20                 	db	32
   279  00106B  43                 	db	67	;'C'
   280  00106C  61                 	db	97	;'a'
   281  00106D  6E                 	db	110	;'n'
   282  00106E  69                 	db	105	;'i'
   283  00106F  73                 	db	115	;'s'
   284  001070  74                 	db	116	;'t'
   285  001071  65                 	db	101	;'e'
   286  001072  72                 	db	114	;'r'
   287  001073  73                 	db	115	;'s'
   288  001074  00                 	db	0
   289  001075                     STR_5:
   290  001075  25                 	db	37
   291  001076  64                 	db	100	;'d'
   292  001077  20                 	db	32
   293  001078  43                 	db	67	;'C'
   294  001079  61                 	db	97	;'a'
   295  00107A  6E                 	db	110	;'n'
   296  00107B  69                 	db	105	;'i'
   297  00107C  73                 	db	115	;'s'
   298  00107D  74                 	db	116	;'t'
   299  00107E  65                 	db	101	;'e'
   300  00107F  72                 	db	114	;'r'
   301  001080  73                 	db	115	;'s'
   302  001081  00                 	db	0
   303  001082                     STR_12:
   304  001082  43                 	db	67	;'C'
   305  001083  61                 	db	97	;'a'
   306  001084  6E                 	db	110	;'n'
   307  001085  73                 	db	115	;'s'
   308  001086  69                 	db	105	;'i'
   309  001087  74                 	db	116	;'t'
   310  001088  65                 	db	101	;'e'
   311  001089  72                 	db	114	;'r'
   312  00108A  20                 	db	32
   313  00108B  25                 	db	37
   314  00108C  63                 	db	99	;'c'
   315  00108D  00                 	db	0
   316  00108E                     STR_10:
   317  00108E  6F                 	db	111	;'o'
   318  00108F  66                 	db	102	;'f'
   319  001090  20                 	db	32
   320  001091  43                 	db	67	;'C'
   321  001092  61                 	db	97	;'a'
   322  001093  6E                 	db	110	;'n'
   323  001094  69                 	db	105	;'i'
   324  001095  73                 	db	115	;'s'
   325  001096  74                 	db	116	;'t'
   326  001097  65                 	db	101	;'e'
   327  001098  72                 	db	114	;'r'
   328  001099  00                 	db	0
   329  00109A                     STR_3:
   330  00109A  25                 	db	37
   331  00109B  64                 	db	100	;'d'
   332  00109C  20                 	db	32
   333  00109D  73                 	db	115	;'s'
   334  00109E  65                 	db	101	;'e'
   335  00109F  63                 	db	99	;'c'
   336  0010A0  6F                 	db	111	;'o'
   337  0010A1  6E                 	db	110	;'n'
   338  0010A2  64                 	db	100	;'d'
   339  0010A3  73                 	db	115	;'s'
   340  0010A4  00                 	db	0
   341  0010A5                     STR_6:
   342  0010A5  23                 	db	35
   343  0010A6  20                 	db	32
   344  0010A7  6F                 	db	111	;'o'
   345  0010A8  66                 	db	102	;'f'
   346  0010A9  20                 	db	32
   347  0010AA  42                 	db	66	;'B'
   348  0010AB  61                 	db	97	;'a'
   349  0010AC  6C                 	db	108	;'l'
   350  0010AD  6C                 	db	108	;'l'
   351  0010AE  73                 	db	115	;'s'
   352  0010AF  00                 	db	0
   353  0010B0                     STR_7:
   354  0010B0  73                 	db	115	;'s'
   355  0010B1  75                 	db	117	;'u'
   356  0010B2  70                 	db	112	;'p'
   357  0010B3  70                 	db	112	;'p'
   358  0010B4  6C                 	db	108	;'l'
   359  0010B5  69                 	db	105	;'i'
   360  0010B6  65                 	db	101	;'e'
   361  0010B7  64                 	db	100	;'d'
   362  0010B8  00                 	db	0
   363  0010B9                     STR_8:
   364  0010B9  25                 	db	37
   365  0010BA  64                 	db	100	;'d'
   366  0010BB  20                 	db	32
   367  0010BC  62                 	db	98	;'b'
   368  0010BD  61                 	db	97	;'a'
   369  0010BE  6C                 	db	108	;'l'
   370  0010BF  6C                 	db	108	;'l'
   371  0010C0  73                 	db	115	;'s'
   372  0010C1  00                 	db	0
   373                           
   374                           ; #config settings
   375  0010C2  00                 	db	0	; dummy byte at the end
   376  0000                     
   377                           	psect	cinit
   378  001D50                     __pcinit:
   379                           	opt callstack 0
   380  001D50                     start_initialization:
   381                           	opt callstack 0
   382  001D50                     __initialization:
   383                           	opt callstack 0
   384                           
   385                           ; Initialize objects allocated to BANK0 (86 bytes)
   386                           ; load TBLPTR registers with __pidataBANK0
   387  001D50  0E5A               	movlw	low __pidataBANK0
   388  001D52  6EF6               	movwf	tblptrl,c
   389  001D54  0E1C               	movlw	high __pidataBANK0
   390  001D56  6EF7               	movwf	tblptrh,c
   391  001D58  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   392  001D5A  6EF8               	movwf	tblptru,c
   393  001D5C  EE00  F080         	lfsr	0,__pdataBANK0
   394  001D60  EE10 F056          	lfsr	1,86
   395  001D64                     copy_data0:
   396  001D64  0009               	tblrd		*+
   397  001D66  CFF5 FFEE          	movff	tablat,postinc0
   398  001D6A  50E5               	movf	postdec1,w,c
   399  001D6C  50E1               	movf	fsr1l,w,c
   400  001D6E  E1FA               	bnz	copy_data0
   401                           
   402                           ; Clear objects allocated to BANK0 (34 bytes)
   403  001D70  EE00  F0D6         	lfsr	0,__pbssBANK0
   404  001D74  0E22               	movlw	34
   405  001D76                     clear_0:
   406  001D76  6AEE               	clrf	postinc0,c
   407  001D78  06E8               	decf	wreg,f,c
   408  001D7A  E1FD               	bnz	clear_0
   409                           
   410                           ; Clear objects allocated to COMRAM (8 bytes)
   411  001D7C  EE00  F06C         	lfsr	0,__pbssCOMRAM
   412  001D80  0E08               	movlw	8
   413  001D82                     clear_1:
   414  001D82  6AEE               	clrf	postinc0,c
   415  001D84  06E8               	decf	wreg,f,c
   416  001D86  E1FD               	bnz	clear_1
   417  001D88                     end_of_initialization:
   418                           	opt callstack 0
   419  001D88                     __end_of__initialization:
   420                           	opt callstack 0
   421  001D88  9074               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   422  001D8A  9274               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   423  001D8C  0E00               	movlw	low (__Lsmallconst shr (0+16))
   424  001D8E  6EF8               	movwf	tblptru,c
   425  001D90  0E10               	movlw	high __Lsmallconst
   426  001D92  6EF7               	movwf	tblptrh,c
   427  001D94  0100               	movlb	0
   428  001D96  EF62  F008         	goto	_main	;jump to C main() function
   429                           
   430                           	psect	bssCOMRAM
   431  00006C                     __pbssCOMRAM:
   432                           	opt callstack 0
   433  00006C                     _nout:
   434                           	opt callstack 0
   435  00006C                     	ds	2
   436  00006E                     _width:
   437                           	opt callstack 0
   438  00006E                     	ds	2
   439  000070                     _prec:
   440                           	opt callstack 0
   441  000070                     	ds	2
   442  000072                     _flags:
   443                           	opt callstack 0
   444  000072                     	ds	2
   445                           
   446                           	psect	bssBANK0
   447  0000D6                     __pbssBANK0:
   448                           	opt callstack 0
   449  0000D6                     _exit_key:
   450                           	opt callstack 0
   451  0000D6                     	ds	1
   452  0000D7                     _key_was_pressed:
   453                           	opt callstack 0
   454  0000D7                     	ds	1
   455  0000D8                     _dbuf:
   456                           	opt callstack 0
   457  0000D8                     	ds	32
   458                           
   459                           	psect	dataBANK0
   460  000080                     __pdataBANK0:
   461                           	opt callstack 0
   462  000080                     _BallDispensed:
   463                           	opt callstack 0
   464  000080                     	ds	20
   465  000094                     _DistanceCanister:
   466                           	opt callstack 0
   467  000094                     	ds	20
   468  0000A8                     _FinalState:
   469                           	opt callstack 0
   470  0000A8                     	ds	20
   471  0000BC                     _InitialState:
   472                           	opt callstack 0
   473  0000BC                     	ds	20
   474  0000D0                     _balls:
   475                           	opt callstack 0
   476  0000D0                     	ds	2
   477  0000D2                     _Canister:
   478                           	opt callstack 0
   479  0000D2                     	ds	2
   480  0000D4                     _time:
   481                           	opt callstack 0
   482  0000D4                     	ds	2
   483                           
   484                           	psect	cstackBANK1
   485  000100                     __pcstackBANK1:
   486                           	opt callstack 0
   487  000100                     main@tick:
   488                           	opt callstack 0
   489                           
   490                           ; 2 bytes @ 0x0
   491  000100                     	ds	2
   492  000102                     main@keypress:
   493                           	opt callstack 0
   494                           
   495                           ; 1 bytes @ 0x2
   496  000102                     	ds	1
   497  000103                     main@clear:
   498                           	opt callstack 0
   499                           
   500                           ; 2 bytes @ 0x3
   501  000103                     	ds	2
   502  000105                     main@state:
   503                           	opt callstack 0
   504                           
   505                           ; 2 bytes @ 0x5
   506  000105                     	ds	2
   507                           
   508                           	psect	cstackBANK0
   509  0000F8                     __pcstackBANK0:
   510                           	opt callstack 0
   511  0000F8                     	ds	2
   512  0000FA                     printf@ap:
   513                           	opt callstack 0
   514                           
   515                           ; 2 bytes @ 0x2
   516  0000FA                     	ds	2
   517  0000FC                     ??_main:
   518                           
   519                           ; 1 bytes @ 0x4
   520  0000FC                     	ds	2
   521                           
   522                           	psect	cstackCOMRAM
   523  000001                     __pcstackCOMRAM:
   524                           	opt callstack 0
   525  000001                     ??_interruptHandler:
   526                           
   527                           ; 1 bytes @ 0x0
   528  000001                     	ds	8
   529  000009                     interruptHandler@i:
   530                           	opt callstack 0
   531                           
   532                           ; 2 bytes @ 0x8
   533  000009                     	ds	2
   534  00000B                     interruptHandler@keypress:
   535                           	opt callstack 0
   536                           
   537                           ; 1 bytes @ 0xA
   538  00000B                     	ds	1
   539  00000C                     ?_strlen:
   540                           	opt callstack 0
   541  00000C                     ?___aodiv:
   542                           	opt callstack 0
   543  00000C                     ?___aomod:
   544                           	opt callstack 0
   545  00000C                     pulse_e@interruptState:
   546                           	opt callstack 0
   547  00000C                     strlen@s:
   548                           	opt callstack 0
   549  00000C                     ___aodiv@dividend:
   550                           	opt callstack 0
   551  00000C                     ___aomod@dividend:
   552                           	opt callstack 0
   553                           
   554                           ; 8 bytes @ 0xB
   555  00000C                     	ds	1
   556  00000D                     send_nibble@data:
   557                           	opt callstack 0
   558                           
   559                           ; 1 bytes @ 0xC
   560  00000D                     	ds	1
   561  00000E                     send_byte@data:
   562                           	opt callstack 0
   563  00000E                     strlen@a:
   564                           	opt callstack 0
   565                           
   566                           ; 2 bytes @ 0xD
   567  00000E                     	ds	1
   568  00000F                     lcdInst@data:
   569                           	opt callstack 0
   570  00000F                     putch@data:
   571                           	opt callstack 0
   572                           
   573                           ; 1 bytes @ 0xE
   574  00000F                     	ds	1
   575  000010                     ??_initLCD:
   576  000010                     fputc@c:
   577                           	opt callstack 0
   578                           
   579                           ; 2 bytes @ 0xF
   580  000010                     	ds	2
   581  000012                     fputc@fp:
   582                           	opt callstack 0
   583                           
   584                           ; 2 bytes @ 0x11
   585  000012                     	ds	2
   586  000014                     ??_fputc:
   587  000014                     ___aodiv@divisor:
   588                           	opt callstack 0
   589  000014                     ___aomod@divisor:
   590                           	opt callstack 0
   591                           
   592                           ; 8 bytes @ 0x13
   593  000014                     	ds	5
   594  000019                     fputs@s:
   595                           	opt callstack 0
   596                           
   597                           ; 2 bytes @ 0x18
   598  000019                     	ds	2
   599  00001B                     fputs@fp:
   600                           	opt callstack 0
   601                           
   602                           ; 2 bytes @ 0x1A
   603  00001B                     	ds	1
   604  00001C                     ___aodiv@counter:
   605                           	opt callstack 0
   606  00001C                     ___aomod@counter:
   607                           	opt callstack 0
   608                           
   609                           ; 1 bytes @ 0x1B
   610  00001C                     	ds	1
   611  00001D                     ___aodiv@sign:
   612                           	opt callstack 0
   613  00001D                     ___aomod@sign:
   614                           	opt callstack 0
   615  00001D                     fputs@c:
   616                           	opt callstack 0
   617                           
   618                           ; 1 bytes @ 0x1C
   619  00001D                     	ds	1
   620  00001E                     ?_abs:
   621                           	opt callstack 0
   622  00001E                     abs@a:
   623                           	opt callstack 0
   624  00001E                     fputs@i:
   625                           	opt callstack 0
   626  00001E                     ___aodiv@quotient:
   627                           	opt callstack 0
   628                           
   629                           ; 8 bytes @ 0x1D
   630  00001E                     	ds	2
   631  000020                     ??_abs:
   632  000020                     ?_pad:
   633                           	opt callstack 0
   634  000020                     pad@fp:
   635                           	opt callstack 0
   636                           
   637                           ; 2 bytes @ 0x1F
   638  000020                     	ds	2
   639  000022                     pad@buf:
   640                           	opt callstack 0
   641                           
   642                           ; 2 bytes @ 0x21
   643  000022                     	ds	2
   644  000024                     pad@p:
   645                           	opt callstack 0
   646                           
   647                           ; 2 bytes @ 0x23
   648  000024                     	ds	2
   649  000026                     ??_pad:
   650                           
   651                           ; 1 bytes @ 0x25
   652  000026                     	ds	1
   653  000027                     pad@i:
   654                           	opt callstack 0
   655                           
   656                           ; 2 bytes @ 0x26
   657  000027                     	ds	2
   658  000029                     pad@w:
   659                           	opt callstack 0
   660                           
   661                           ; 2 bytes @ 0x28
   662  000029                     	ds	2
   663  00002B                     ?_ctoa:
   664                           	opt callstack 0
   665  00002B                     ?_dtoa:
   666                           	opt callstack 0
   667  00002B                     ctoa@fp:
   668                           	opt callstack 0
   669  00002B                     dtoa@fp:
   670                           	opt callstack 0
   671                           
   672                           ; 2 bytes @ 0x2A
   673  00002B                     	ds	2
   674  00002D                     ctoa@c:
   675                           	opt callstack 0
   676  00002D                     dtoa@d:
   677                           	opt callstack 0
   678                           
   679                           ; 8 bytes @ 0x2C
   680  00002D                     	ds	1
   681  00002E                     ctoa@w:
   682                           	opt callstack 0
   683                           
   684                           ; 2 bytes @ 0x2D
   685  00002E                     	ds	7
   686  000035                     ??_dtoa:
   687                           
   688                           ; 1 bytes @ 0x34
   689  000035                     	ds	8
   690  00003D                     _dtoa$308:
   691                           	opt callstack 0
   692                           
   693                           ; 2 bytes @ 0x3C
   694  00003D                     	ds	2
   695  00003F                     dtoa@p:
   696                           	opt callstack 0
   697                           
   698                           ; 2 bytes @ 0x3E
   699  00003F                     	ds	2
   700  000041                     dtoa@w:
   701                           	opt callstack 0
   702                           
   703                           ; 2 bytes @ 0x40
   704  000041                     	ds	2
   705  000043                     dtoa@s:
   706                           	opt callstack 0
   707                           
   708                           ; 2 bytes @ 0x42
   709  000043                     	ds	2
   710  000045                     dtoa@n:
   711                           	opt callstack 0
   712                           
   713                           ; 8 bytes @ 0x44
   714  000045                     	ds	8
   715  00004D                     dtoa@i:
   716                           	opt callstack 0
   717                           
   718                           ; 2 bytes @ 0x4C
   719  00004D                     	ds	2
   720  00004F                     ?_vfpfcnvrt:
   721                           	opt callstack 0
   722  00004F                     vfpfcnvrt@fp:
   723                           	opt callstack 0
   724                           
   725                           ; 2 bytes @ 0x4E
   726  00004F                     	ds	2
   727  000051                     vfpfcnvrt@fmt:
   728                           	opt callstack 0
   729                           
   730                           ; 2 bytes @ 0x50
   731  000051                     	ds	2
   732  000053                     vfpfcnvrt@ap:
   733                           	opt callstack 0
   734                           
   735                           ; 2 bytes @ 0x52
   736  000053                     	ds	2
   737  000055                     ??_vfpfcnvrt:
   738                           
   739                           ; 1 bytes @ 0x54
   740  000055                     	ds	2
   741  000057                     vfpfcnvrt@ll:
   742                           	opt callstack 0
   743                           
   744                           ; 8 bytes @ 0x56
   745  000057                     	ds	8
   746  00005F                     vfpfcnvrt@c:
   747                           	opt callstack 0
   748                           
   749                           ; 1 bytes @ 0x5E
   750  00005F                     	ds	1
   751  000060                     ?_vfprintf:
   752                           	opt callstack 0
   753  000060                     vfprintf@fp:
   754                           	opt callstack 0
   755                           
   756                           ; 2 bytes @ 0x5F
   757  000060                     	ds	2
   758  000062                     vfprintf@fmt:
   759                           	opt callstack 0
   760                           
   761                           ; 2 bytes @ 0x61
   762  000062                     	ds	2
   763  000064                     vfprintf@ap:
   764                           	opt callstack 0
   765                           
   766                           ; 2 bytes @ 0x63
   767  000064                     	ds	2
   768  000066                     vfprintf@cfmt:
   769                           	opt callstack 0
   770                           
   771                           ; 2 bytes @ 0x65
   772  000066                     	ds	2
   773  000068                     ?_printf:
   774                           	opt callstack 0
   775  000068                     printf@fmt:
   776                           	opt callstack 0
   777                           
   778                           ; 2 bytes @ 0x67
   779  000068                     	ds	4
   780  00006C                     
   781                           ; 1 bytes @ 0x6B
   782 ;;
   783 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   784 ;;
   785 ;; *************** function _main *****************
   786 ;; Defined at:
   787 ;;		line 37 in file "main.c"
   788 ;; Parameters:    Size  Location     Type
   789 ;;		None
   790 ;; Auto vars:     Size  Location     Type
   791 ;;  keypress        1    2[BANK1 ] unsigned char 
   792 ;;  state           2    5[BANK1 ] int 
   793 ;;  clear           2    3[BANK1 ] int 
   794 ;;  tick            2    0[BANK1 ] int 
   795 ;; Return value:  Size  Location     Type
   796 ;;                  1    wreg      void 
   797 ;; Registers used:
   798 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   799 ;; Tracked objects:
   800 ;;		On entry : 0/0
   801 ;;		On exit  : 0/0
   802 ;;		Unchanged: 0/0
   803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   805 ;;      Locals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   806 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   807 ;;      Totals:         0       2       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   808 ;;Total ram usage:        9 bytes
   809 ;; Hardware stack levels required when called:   12
   810 ;; This function calls:
   811 ;;		_initLCD
   812 ;;		_lcdInst
   813 ;;		_printf
   814 ;; This function is called by:
   815 ;;		Startup code after reset
   816 ;; This function uses a non-reentrant model
   817 ;;
   818                           
   819                           	psect	text0
   820  0010C4                     __ptext0:
   821                           	opt callstack 0
   822  0010C4                     _main:
   823                           	opt callstack 19
   824                           
   825                           ;main.c: 41:     LATD = 0x00;
   826                           
   827                           ;incstack = 0
   828  0010C4  0E00               	movlw	0
   829  0010C6  6E8C               	movwf	3980,c	;volatile
   830                           
   831                           ;main.c: 42:     TRISD = 0x00;
   832  0010C8  0E00               	movlw	0
   833  0010CA  6E95               	movwf	3989,c	;volatile
   834                           
   835                           ;main.c: 45:     ADCON1 = 0b00001111;
   836  0010CC  0E0F               	movlw	15
   837  0010CE  6EC1               	movwf	4033,c	;volatile
   838                           
   839                           ;main.c: 48:     INT1IE = 1;
   840  0010D0  86F0               	bsf	4080,3,c	;volatile
   841                           
   842                           ;main.c: 51:     initLCD();
   843  0010D2  ECF8  F00D         	call	_initLCD	;wreg free
   844                           
   845                           ;main.c: 54:     (INTCONbits.GIE = 1);
   846  0010D6  8EF2               	bsf	4082,7,c	;volatile
   847                           
   848                           ;main.c: 57:     int state = 0;
   849  0010D8  0E00               	movlw	0
   850  0010DA  0101               	movlb	1	; () banked
   851  0010DC  6F06               	movwf	(main@state+1)& (0+255),b
   852  0010DE  0E00               	movlw	0
   853  0010E0  6F05               	movwf	main@state& (0+255),b
   854                           
   855                           ; BSR set to: 1
   856                           ;main.c: 58:     int tick = 0;
   857  0010E2  0E00               	movlw	0
   858  0010E4  6F01               	movwf	(main@tick+1)& (0+255),b
   859  0010E6  0E00               	movlw	0
   860  0010E8  6F00               	movwf	main@tick& (0+255),b
   861                           
   862                           ; BSR set to: 1
   863                           ;main.c: 59:     int clear = 1;
   864  0010EA  0E00               	movlw	0
   865  0010EC  6F04               	movwf	(main@clear+1)& (0+255),b
   866  0010EE  0E01               	movlw	1
   867  0010F0  6F03               	movwf	main@clear& (0+255),b
   868                           
   869                           ; BSR set to: 1
   870                           ;main.c: 63:     printf("It's ya boy Ali!");
   871  0010F2  0E18               	movlw	low STR_1
   872  0010F4  6E68               	movwf	printf@fmt,c
   873  0010F6  0E10               	movlw	high STR_1
   874  0010F8  6E69               	movwf	printf@fmt+1,c
   875  0010FA  EC2C  F00F         	call	_printf	;wreg free
   876                           
   877                           ;main.c: 64:     _delay((unsigned long)((2000)*(10000000/4000.0)));
   878  0010FE  0E1A               	movlw	26
   879  001100  0100               	movlb	0	; () banked
   880  001102  6FFD               	movwf	(??_main+1)& (0+255),b
   881  001104  0E5E               	movlw	94
   882  001106  6FFC               	movwf	??_main& (0+255),b
   883  001108  0E6E               	movlw	110
   884  00110A                     u1897:
   885  00110A  2EE8               	decfsz	wreg,f,c
   886  00110C  D7FE               	bra	u1897
   887  00110E  2FFC               	decfsz	??_main& (0+255),f,b
   888  001110  D7FC               	bra	u1897
   889  001112  2FFD               	decfsz	(??_main+1)& (0+255),f,b
   890  001114  D7FA               	bra	u1897
   891  001116  F000               	nop	
   892                           
   893                           ;main.c: 65:     { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   894  001118  0E01               	movlw	1
   895  00111A  EC5A  F00F         	call	_lcdInst
   896  00111E  0E11               	movlw	17
   897  001120  0100               	movlb	0	; () banked
   898  001122  6FFC               	movwf	??_main& (0+255),b
   899  001124  0E3A               	movlw	58
   900  001126                     u1907:
   901  001126  2EE8               	decfsz	wreg,f,c
   902  001128  D7FE               	bra	u1907
   903  00112A  2FFC               	decfsz	??_main& (0+255),f,b
   904  00112C  D7FC               	bra	u1907
   905  00112E  F000               	nop	
   906  001130                     l2290:
   907                           
   908                           ;main.c: 72:         if (state == 0 & clear == 1) {
   909  001130  0101               	movlb	1	; () banked
   910  001132  5105               	movf	main@state& (0+255),w,b
   911  001134  1106               	iorwf	(main@state+1)& (0+255),w,b
   912  001136  A4D8               	btfss	status,2,c
   913  001138  D02B               	goto	l2308
   914                           
   915                           ; BSR set to: 1
   916  00113A  0503               	decf	main@clear& (0+255),w,b
   917  00113C  1104               	iorwf	(main@clear+1)& (0+255),w,b
   918  00113E  A4D8               	btfss	status,2,c
   919  001140  D027               	goto	l2308
   920                           
   921                           ; BSR set to: 1
   922                           ;main.c: 73:         { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)));};
   923  001142  0E01               	movlw	1
   924  001144  EC5A  F00F         	call	_lcdInst
   925  001148  0E11               	movlw	17
   926  00114A  0100               	movlb	0	; () banked
   927  00114C  6FFC               	movwf	??_main& (0+255),b
   928  00114E  0E3A               	movlw	58
   929  001150                     u1917:
   930  001150  2EE8               	decfsz	wreg,f,c
   931  001152  D7FE               	bra	u1917
   932  001154  2FFC               	decfsz	??_main& (0+255),f,b
   933  001156  D7FC               	bra	u1917
   934  001158  F000               	nop	
   935                           
   936                           ;main.c: 74:         { lcdInst( (unsigned char)(8 | (1 << 2) | (0 << 1) | 0) );};
   937  00115A  0E0C               	movlw	12
   938  00115C  EC5A  F00F         	call	_lcdInst
   939                           
   940                           ;main.c: 75:         printf("Operation Time");
   941  001160  0E48               	movlw	low STR_2
   942  001162  6E68               	movwf	printf@fmt,c
   943  001164  0E10               	movlw	high STR_2
   944  001166  6E69               	movwf	printf@fmt+1,c
   945  001168  EC2C  F00F         	call	_printf	;wreg free
   946  00116C  0E90               	movlw	144
   947  00116E  EC5A  F00F         	call	_lcdInst
   948                           
   949                           ;main.c: 77:         printf("%d seconds", time);
   950  001172  0E9A               	movlw	low STR_3
   951  001174  6E68               	movwf	printf@fmt,c
   952  001176  0E10               	movlw	high STR_3
   953  001178  6E69               	movwf	printf@fmt+1,c
   954  00117A  0E00               	movlw	0
   955  00117C  6E6B               	movwf	?_printf+3,c
   956  00117E  0E1E               	movlw	30
   957  001180  6E6A               	movwf	?_printf+2,c
   958  001182  EC2C  F00F         	call	_printf	;wreg free
   959                           
   960                           ;main.c: 78:         clear = 0;
   961  001186  0E00               	movlw	0
   962  001188  0101               	movlb	1	; () banked
   963  00118A  6F04               	movwf	(main@clear+1)& (0+255),b
   964  00118C  0E00               	movlw	0
   965  00118E  6F03               	movwf	main@clear& (0+255),b
   966  001190                     l2308:
   967                           
   968                           ; BSR set to: 1
   969                           ;main.c: 82:         if (state == 1 & clear == 1) {
   970  001190  0505               	decf	main@state& (0+255),w,b
   971  001192  1106               	iorwf	(main@state+1)& (0+255),w,b
   972  001194  A4D8               	btfss	status,2,c
   973  001196  D02B               	goto	l2326
   974                           
   975                           ; BSR set to: 1
   976  001198  0503               	decf	main@clear& (0+255),w,b
   977  00119A  1104               	iorwf	(main@clear+1)& (0+255),w,b
   978  00119C  A4D8               	btfss	status,2,c
   979  00119E  D027               	goto	l2326
   980                           
   981                           ; BSR set to: 1
   982                           ;main.c: 84:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)))
      +                          ;};
   983  0011A0  0E01               	movlw	1
   984  0011A2  EC5A  F00F         	call	_lcdInst
   985  0011A6  0E11               	movlw	17
   986  0011A8  0100               	movlb	0	; () banked
   987  0011AA  6FFC               	movwf	??_main& (0+255),b
   988  0011AC  0E3A               	movlw	58
   989  0011AE                     u1927:
   990  0011AE  2EE8               	decfsz	wreg,f,c
   991  0011B0  D7FE               	bra	u1927
   992  0011B2  2FFC               	decfsz	??_main& (0+255),f,b
   993  0011B4  D7FC               	bra	u1927
   994  0011B6  F000               	nop	
   995                           
   996                           ;main.c: 85:             { lcdInst(0x80 | LCD_LINE1_ADDR);};
   997  0011B8  0E80               	movlw	128
   998  0011BA  EC5A  F00F         	call	_lcdInst
   999                           
  1000                           ;main.c: 86:             printf("# of Canisters");
  1001  0011BE  0E66               	movlw	low STR_4
  1002  0011C0  6E68               	movwf	printf@fmt,c
  1003  0011C2  0E10               	movlw	high STR_4
  1004  0011C4  6E69               	movwf	printf@fmt+1,c
  1005  0011C6  EC2C  F00F         	call	_printf	;wreg free
  1006  0011CA  0E90               	movlw	144
  1007  0011CC  EC5A  F00F         	call	_lcdInst
  1008                           
  1009                           ;main.c: 88:             printf("%d Canisters", Canister);
  1010  0011D0  0E75               	movlw	low STR_5
  1011  0011D2  6E68               	movwf	printf@fmt,c
  1012  0011D4  0E10               	movlw	high STR_5
  1013  0011D6  6E69               	movwf	printf@fmt+1,c
  1014  0011D8  C0D2  F06A         	movff	_Canister,?_printf+2
  1015  0011DC  C0D3  F06B         	movff	_Canister+1,?_printf+3
  1016  0011E0  EC2C  F00F         	call	_printf	;wreg free
  1017                           
  1018                           ;main.c: 89:             clear = 0;
  1019  0011E4  0E00               	movlw	0
  1020  0011E6  0101               	movlb	1	; () banked
  1021  0011E8  6F04               	movwf	(main@clear+1)& (0+255),b
  1022  0011EA  0E00               	movlw	0
  1023  0011EC  6F03               	movwf	main@clear& (0+255),b
  1024  0011EE                     l2326:
  1025                           
  1026                           ; BSR set to: 1
  1027                           ;main.c: 93:         if (state == 2 & clear == 1) {
  1028  0011EE  0E02               	movlw	2
  1029  0011F0  1905               	xorwf	main@state& (0+255),w,b
  1030  0011F2  1106               	iorwf	(main@state+1)& (0+255),w,b
  1031  0011F4  A4D8               	btfss	status,2,c
  1032  0011F6  D031               	goto	l2346
  1033                           
  1034                           ; BSR set to: 1
  1035  0011F8  0503               	decf	main@clear& (0+255),w,b
  1036  0011FA  1104               	iorwf	(main@clear+1)& (0+255),w,b
  1037  0011FC  A4D8               	btfss	status,2,c
  1038  0011FE  D02D               	goto	l2346
  1039                           
  1040                           ; BSR set to: 1
  1041                           ;main.c: 95:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0)))
      +                          ;};
  1042  001200  0E01               	movlw	1
  1043  001202  EC5A  F00F         	call	_lcdInst
  1044  001206  0E11               	movlw	17
  1045  001208  0100               	movlb	0	; () banked
  1046  00120A  6FFC               	movwf	??_main& (0+255),b
  1047  00120C  0E3A               	movlw	58
  1048  00120E                     u1937:
  1049  00120E  2EE8               	decfsz	wreg,f,c
  1050  001210  D7FE               	bra	u1937
  1051  001212  2FFC               	decfsz	??_main& (0+255),f,b
  1052  001214  D7FC               	bra	u1937
  1053  001216  F000               	nop	
  1054                           
  1055                           ;main.c: 96:             printf("# of Balls");
  1056  001218  0EA5               	movlw	low STR_6
  1057  00121A  6E68               	movwf	printf@fmt,c
  1058  00121C  0E10               	movlw	high STR_6
  1059  00121E  6E69               	movwf	printf@fmt+1,c
  1060  001220  EC2C  F00F         	call	_printf	;wreg free
  1061  001224  0EC0               	movlw	192
  1062  001226  EC5A  F00F         	call	_lcdInst
  1063                           
  1064                           ;main.c: 98:             printf("supplied");
  1065  00122A  0EB0               	movlw	low STR_7
  1066  00122C  6E68               	movwf	printf@fmt,c
  1067  00122E  0E10               	movlw	high STR_7
  1068  001230  6E69               	movwf	printf@fmt+1,c
  1069  001232  EC2C  F00F         	call	_printf	;wreg free
  1070  001236  0ED0               	movlw	208
  1071  001238  EC5A  F00F         	call	_lcdInst
  1072                           
  1073                           ;main.c: 100:             printf("%d balls", balls);
  1074  00123C  0EB9               	movlw	low STR_8
  1075  00123E  6E68               	movwf	printf@fmt,c
  1076  001240  0E10               	movlw	high STR_8
  1077  001242  6E69               	movwf	printf@fmt+1,c
  1078  001244  0E00               	movlw	0
  1079  001246  6E6B               	movwf	?_printf+3,c
  1080  001248  0E05               	movlw	5
  1081  00124A  6E6A               	movwf	?_printf+2,c
  1082  00124C  EC2C  F00F         	call	_printf	;wreg free
  1083                           
  1084                           ;main.c: 101:             clear = 0;
  1085  001250  0E00               	movlw	0
  1086  001252  0101               	movlb	1	; () banked
  1087  001254  6F04               	movwf	(main@clear+1)& (0+255),b
  1088  001256  0E00               	movlw	0
  1089  001258  6F03               	movwf	main@clear& (0+255),b
  1090  00125A                     l2346:
  1091                           
  1092                           ; BSR set to: 1
  1093                           ;main.c: 105:         if (state == 3 & clear == 1) {
  1094  00125A  0E03               	movlw	3
  1095  00125C  1905               	xorwf	main@state& (0+255),w,b
  1096  00125E  1106               	iorwf	(main@state+1)& (0+255),w,b
  1097  001260  A4D8               	btfss	status,2,c
  1098  001262  D034               	goto	l2366
  1099                           
  1100                           ; BSR set to: 1
  1101  001264  0503               	decf	main@clear& (0+255),w,b
  1102  001266  1104               	iorwf	(main@clear+1)& (0+255),w,b
  1103  001268  A4D8               	btfss	status,2,c
  1104  00126A  D030               	goto	l2366
  1105                           
  1106                           ; BSR set to: 1
  1107                           ;main.c: 107:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1108  00126C  0E01               	movlw	1
  1109  00126E  EC5A  F00F         	call	_lcdInst
  1110  001272  0E11               	movlw	17
  1111  001274  0100               	movlb	0	; () banked
  1112  001276  6FFC               	movwf	??_main& (0+255),b
  1113  001278  0E3A               	movlw	58
  1114  00127A                     u1947:
  1115  00127A  2EE8               	decfsz	wreg,f,c
  1116  00127C  D7FE               	bra	u1947
  1117  00127E  2FFC               	decfsz	??_main& (0+255),f,b
  1118  001280  D7FC               	bra	u1947
  1119  001282  F000               	nop	
  1120                           
  1121                           ;main.c: 108:             printf("Individual Info");
  1122  001284  0E29               	movlw	low STR_9
  1123  001286  6E68               	movwf	printf@fmt,c
  1124  001288  0E10               	movlw	high STR_9
  1125  00128A  6E69               	movwf	printf@fmt+1,c
  1126  00128C  EC2C  F00F         	call	_printf	;wreg free
  1127  001290  0EC0               	movlw	192
  1128  001292  EC5A  F00F         	call	_lcdInst
  1129                           
  1130                           ;main.c: 110:             printf("of Canister");
  1131  001296  0E8E               	movlw	low STR_10
  1132  001298  6E68               	movwf	printf@fmt,c
  1133  00129A  0E10               	movlw	high STR_10
  1134  00129C  6E69               	movwf	printf@fmt+1,c
  1135  00129E  EC2C  F00F         	call	_printf	;wreg free
  1136  0012A2  0ED0               	movlw	208
  1137  0012A4  EC5A  F00F         	call	_lcdInst
  1138                           
  1139                           ;main.c: 112:             printf("Press 0 to %d ", Canister-1);
  1140  0012A8  0E39               	movlw	low STR_11
  1141  0012AA  6E68               	movwf	printf@fmt,c
  1142  0012AC  0E10               	movlw	high STR_11
  1143  0012AE  6E69               	movwf	printf@fmt+1,c
  1144  0012B0  0EFF               	movlw	255
  1145  0012B2  0100               	movlb	0	; () banked
  1146  0012B4  25D2               	addwf	_Canister& (0+255),w,b
  1147  0012B6  6E6A               	movwf	?_printf+2,c
  1148  0012B8  0EFF               	movlw	255
  1149  0012BA  21D3               	addwfc	(_Canister+1)& (0+255),w,b
  1150  0012BC  6E6B               	movwf	?_printf+3,c
  1151  0012BE  EC2C  F00F         	call	_printf	;wreg free
  1152                           
  1153                           ;main.c: 113:             clear = 0;
  1154  0012C2  0E00               	movlw	0
  1155  0012C4  0101               	movlb	1	; () banked
  1156  0012C6  6F04               	movwf	(main@clear+1)& (0+255),b
  1157  0012C8  0E00               	movlw	0
  1158  0012CA  6F03               	movwf	main@clear& (0+255),b
  1159  0012CC                     l2366:
  1160                           
  1161                           ; BSR set to: 1
  1162                           ;main.c: 117:         if(key_was_pressed){
  1163  0012CC  0100               	movlb	0	; () banked
  1164  0012CE  51D7               	movf	_key_was_pressed& (0+255),w,b	;volatile
  1165  0012D0  B4D8               	btfsc	status,2,c
  1166  0012D2  D04B               	goto	l2384
  1167                           
  1168                           ; BSR set to: 0
  1169                           ;main.c: 119:             { lcdInst(0x01); _delay((unsigned long)((5)*(10000000/4000.0))
      +                          );};
  1170  0012D4  0E01               	movlw	1
  1171  0012D6  EC5A  F00F         	call	_lcdInst
  1172  0012DA  0E11               	movlw	17
  1173  0012DC  0100               	movlb	0	; () banked
  1174  0012DE  6FFC               	movwf	??_main& (0+255),b
  1175  0012E0  0E3A               	movlw	58
  1176  0012E2                     u1957:
  1177  0012E2  2EE8               	decfsz	wreg,f,c
  1178  0012E4  D7FE               	bra	u1957
  1179  0012E6  2FFC               	decfsz	??_main& (0+255),f,b
  1180  0012E8  D7FC               	bra	u1957
  1181  0012EA  F000               	nop	
  1182                           
  1183                           ;main.c: 120:             unsigned char keypress = (PORTB & 0xF0) >> 4;
  1184  0012EC  3881               	swapf	3969,w,c	;volatile
  1185  0012EE  0B0F               	andlw	15
  1186  0012F0  0B0F               	andlw	15
  1187  0012F2  0101               	movlb	1	; () banked
  1188  0012F4  6F02               	movwf	main@keypress& (0+255),b
  1189                           
  1190                           ; BSR set to: 1
  1191                           ;main.c: 121:             printf("Cansiter %c", keys[keypress]);
  1192  0012F6  0E82               	movlw	low STR_12
  1193  0012F8  6E68               	movwf	printf@fmt,c
  1194  0012FA  0E10               	movlw	high STR_12
  1195  0012FC  6E69               	movwf	printf@fmt+1,c
  1196  0012FE  0E01               	movlw	low _keys
  1197  001300  2502               	addwf	main@keypress& (0+255),w,b
  1198  001302  6EF6               	movwf	tblptrl,c
  1199  001304  6AF7               	clrf	tblptrh,c
  1200  001306  0E10               	movlw	high _keys
  1201  001308  22F7               	addwfc	tblptrh,f,c
  1202  00130A                     	if	0	;There are less than 3 active tblptr bytes
  1203  00130A                     	endif
  1204  00130A  0008               	tblrd		*
  1205  00130C  50F5               	movf	tablat,w,c
  1206  00130E  6E6A               	movwf	?_printf+2,c
  1207  001310  6A6B               	clrf	?_printf+3,c
  1208  001312  EC2C  F00F         	call	_printf	;wreg free
  1209  001316  0E90               	movlw	144
  1210  001318  EC5A  F00F         	call	_lcdInst
  1211                           
  1212                           ;main.c: 123:             printf("Distance %d cm", DistanceCanister[(int) (keys[keypress
      +                          ] - '0')] );
  1213  00131C  0E57               	movlw	low STR_13
  1214  00131E  6E68               	movwf	printf@fmt,c
  1215  001320  0E10               	movlw	high STR_13
  1216  001322  6E69               	movwf	printf@fmt+1,c
  1217  001324  0E01               	movlw	low _keys
  1218  001326  0101               	movlb	1	; () banked
  1219  001328  2502               	addwf	main@keypress& (0+255),w,b
  1220  00132A  6EF6               	movwf	tblptrl,c
  1221  00132C  6AF7               	clrf	tblptrh,c
  1222  00132E  0E10               	movlw	high _keys
  1223  001330  22F7               	addwfc	tblptrh,f,c
  1224  001332                     	if	0	;There are less than 3 active tblptr bytes
  1225  001332                     	endif
  1226  001332  0008               	tblrd		*
  1227  001334  50F5               	movf	tablat,w,c
  1228  001336  0100               	movlb	0	; () banked
  1229  001338  6FFC               	movwf	??_main& (0+255),b
  1230  00133A  6BFD               	clrf	(??_main+1)& (0+255),b
  1231  00133C  90D8               	bcf	status,0,c
  1232  00133E  37FC               	rlcf	??_main& (0+255),f,b
  1233  001340  37FD               	rlcf	(??_main+1)& (0+255),f,b
  1234  001342  0E34               	movlw	low (_DistanceCanister+65440)
  1235  001344  25FC               	addwf	??_main& (0+255),w,b
  1236  001346  6ED9               	movwf	fsr2l,c
  1237  001348  0E00               	movlw	high (_DistanceCanister+65440)
  1238  00134A  21FD               	addwfc	(??_main+1)& (0+255),w,b
  1239  00134C  6EDA               	movwf	fsr2h,c
  1240  00134E  CFDE F06A          	movff	postinc2,?_printf+2
  1241  001352  CFDD F06B          	movff	postdec2,?_printf+3
  1242  001356  EC2C  F00F         	call	_printf	;wreg free
  1243  00135A                     l2380:
  1244  00135A  0100               	movlb	0	; () banked
  1245  00135C  51D6               	movf	_exit_key& (0+255),w,b	;volatile
  1246  00135E  B4D8               	btfsc	status,2,c
  1247  001360  D7FC               	goto	l2380
  1248                           
  1249                           ; BSR set to: 0
  1250                           ;main.c: 126:             key_was_pressed = 0;
  1251  001362  0E00               	movlw	0
  1252  001364  6FD7               	movwf	_key_was_pressed& (0+255),b	;volatile
  1253                           
  1254                           ;main.c: 127:             exit_key = 0;
  1255  001366  0E00               	movlw	0
  1256  001368  6FD6               	movwf	_exit_key& (0+255),b	;volatile
  1257  00136A                     l2384:
  1258                           
  1259                           ; BSR set to: 0
  1260                           ;main.c: 130:         if (tick == 2000) {
  1261  00136A  0ED0               	movlw	208
  1262  00136C  0101               	movlb	1	; () banked
  1263  00136E  1900               	xorwf	main@tick& (0+255),w,b
  1264  001370  E112               	bnz	l2394
  1265  001372  0E07               	movlw	7
  1266  001374  1901               	xorwf	(main@tick+1)& (0+255),w,b
  1267  001376  A4D8               	btfss	status,2,c
  1268  001378  D00E               	goto	l2394
  1269                           
  1270                           ; BSR set to: 1
  1271                           ;main.c: 131:             clear = 1;
  1272  00137A  0E00               	movlw	0
  1273  00137C  6F04               	movwf	(main@clear+1)& (0+255),b
  1274  00137E  0E01               	movlw	1
  1275  001380  6F03               	movwf	main@clear& (0+255),b
  1276                           
  1277                           ; BSR set to: 1
  1278                           ;main.c: 132:             state++;
  1279  001382  4B05               	infsnz	main@state& (0+255),f,b
  1280  001384  2B06               	incf	(main@state+1)& (0+255),f,b
  1281                           
  1282                           ; BSR set to: 1
  1283                           ;main.c: 133:             state = state % 4;
  1284  001386  0E03               	movlw	3
  1285  001388  1505               	andwf	main@state& (0+255),w,b
  1286  00138A  6F05               	movwf	main@state& (0+255),b
  1287  00138C  6B06               	clrf	(main@state+1)& (0+255),b
  1288                           
  1289                           ; BSR set to: 1
  1290                           ;main.c: 134:             tick = 0;
  1291  00138E  0E00               	movlw	0
  1292  001390  6F01               	movwf	(main@tick+1)& (0+255),b
  1293  001392  0E00               	movlw	0
  1294  001394  6F00               	movwf	main@tick& (0+255),b
  1295  001396                     l2394:
  1296                           
  1297                           ; BSR set to: 1
  1298                           ;main.c: 137:         tick++;
  1299  001396  4B00               	infsnz	main@tick& (0+255),f,b
  1300  001398  2B01               	incf	(main@tick+1)& (0+255),f,b
  1301                           
  1302                           ; BSR set to: 1
  1303                           ;main.c: 138:         _delay((unsigned long)((1)*(10000000/4000.0)));
  1304  00139A  0E04               	movlw	4
  1305  00139C  0100               	movlb	0	; () banked
  1306  00139E  6FFC               	movwf	??_main& (0+255),b
  1307  0013A0  0E3D               	movlw	61
  1308  0013A2                     u1967:
  1309  0013A2  2EE8               	decfsz	wreg,f,c
  1310  0013A4  D7FE               	bra	u1967
  1311  0013A6  2FFC               	decfsz	??_main& (0+255),f,b
  1312  0013A8  D7FC               	bra	u1967
  1313  0013AA  D000               	nop2	
  1314  0013AC  D6C1               	goto	l2290
  1315  0013AE                     __end_of_main:
  1316                           	opt callstack 0
  1317                           
  1318 ;; *************** function _printf *****************
  1319 ;; Defined at:
  1320 ;;		line 5 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/printf.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;  fmt             2  103[COMRAM] PTR const unsigned char 
  1323 ;;		 -> STR_13(15), STR_12(12), STR_11(15), STR_10(12), 
  1324 ;;		 -> STR_9(16), STR_8(9), STR_7(9), STR_6(11), 
  1325 ;;		 -> STR_5(13), STR_4(15), STR_3(11), STR_2(15), 
  1326 ;;		 -> STR_1(17), 
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  ap              2    2[BANK0 ] PTR void [1]
  1329 ;;		 -> ?_printf(2), 
  1330 ;;  ret             2    0        int 
  1331 ;; Return value:  Size  Location     Type
  1332 ;;                  2  103[COMRAM] int 
  1333 ;; Registers used:
  1334 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1335 ;; Tracked objects:
  1336 ;;		On entry : 0/0
  1337 ;;		On exit  : 0/0
  1338 ;;		Unchanged: 0/0
  1339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1340 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1341 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1343 ;;      Totals:         4       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1344 ;;Total ram usage:        8 bytes
  1345 ;; Hardware stack levels used:    1
  1346 ;; Hardware stack levels required when called:   11
  1347 ;; This function calls:
  1348 ;;		_vfprintf
  1349 ;; This function is called by:
  1350 ;;		_main
  1351 ;; This function uses a non-reentrant model
  1352 ;;
  1353                           
  1354                           	psect	text1
  1355  001E58                     __ptext1:
  1356                           	opt callstack 0
  1357  001E58                     _printf:
  1358                           	opt callstack 19
  1359                           
  1360                           ;incstack = 0
  1361  001E58  0E6A               	movlw	low (?_printf+2)
  1362  001E5A  0100               	movlb	0	; () banked
  1363  001E5C  6FFA               	movwf	printf@ap& (0+255),b
  1364  001E5E  0E00               	movlw	high (?_printf+2)
  1365  001E60  6FFB               	movwf	(printf@ap+1)& (0+255),b
  1366                           
  1367                           ; BSR set to: 0
  1368  001E62  0E00               	movlw	0
  1369  001E64  6E60               	movwf	vfprintf@fp,c
  1370  001E66  0E00               	movlw	0
  1371  001E68  6E61               	movwf	vfprintf@fp+1,c
  1372  001E6A  C068  F062         	movff	printf@fmt,vfprintf@fmt
  1373  001E6E  C069  F063         	movff	printf@fmt+1,vfprintf@fmt+1
  1374  001E72  0EFA               	movlw	low printf@ap
  1375  001E74  6E64               	movwf	vfprintf@ap,c
  1376  001E76  0E00               	movlw	high printf@ap
  1377  001E78  6E65               	movwf	vfprintf@ap+1,c
  1378  001E7A  EC58  F00E         	call	_vfprintf	;wreg free
  1379  001E7E  0012               	return		;funcret
  1380  001E80                     __end_of_printf:
  1381                           	opt callstack 0
  1382                           
  1383 ;; *************** function _vfprintf *****************
  1384 ;; Defined at:
  1385 ;;		line 1368 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1386 ;; Parameters:    Size  Location     Type
  1387 ;;  fp              2   95[COMRAM] PTR struct _IO_FILE
  1388 ;;		 -> NULL(0), 
  1389 ;;  fmt             2   97[COMRAM] PTR const unsigned char 
  1390 ;;		 -> STR_13(15), STR_12(12), STR_11(15), STR_10(12), 
  1391 ;;		 -> STR_9(16), STR_8(9), STR_7(9), STR_6(11), 
  1392 ;;		 -> STR_5(13), STR_4(15), STR_3(11), STR_2(15), 
  1393 ;;		 -> STR_1(17), 
  1394 ;;  ap              2   99[COMRAM] PTR PTR void 
  1395 ;;		 -> printf@ap(2), 
  1396 ;; Auto vars:     Size  Location     Type
  1397 ;;  cfmt            2  101[COMRAM] PTR unsigned char 
  1398 ;;		 -> STR_13(15), STR_12(12), STR_11(15), STR_10(12), 
  1399 ;;		 -> STR_9(16), STR_8(9), STR_7(9), STR_6(11), 
  1400 ;;		 -> STR_5(13), STR_4(15), STR_3(11), STR_2(15), 
  1401 ;;		 -> STR_1(17), 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  2   95[COMRAM] int 
  1404 ;; Registers used:
  1405 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1411 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1412 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1414 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1415 ;;Total ram usage:        8 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; Hardware stack levels required when called:   10
  1418 ;; This function calls:
  1419 ;;		_vfpfcnvrt
  1420 ;; This function is called by:
  1421 ;;		_printf
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424                           
  1425                           	psect	text2
  1426  001CB0                     __ptext2:
  1427                           	opt callstack 0
  1428  001CB0                     _vfprintf:
  1429                           	opt callstack 19
  1430                           
  1431                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1368: int vfprintf(F
      +                          ILE *fp, const char *fmt, va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 1369: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt
      +                          .c: 1371:     char *cfmt;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprn
      +                          t.c: 1373:     cfmt = (char *)fmt;
  1432                           
  1433                           ;incstack = 0
  1434  001CB0  C062  F066         	movff	vfprintf@fmt,vfprintf@cfmt
  1435  001CB4  C063  F067         	movff	vfprintf@fmt+1,vfprintf@cfmt+1
  1436                           
  1437                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1374:     nout = 0;
  1438  001CB8  0E00               	movlw	0
  1439  001CBA  6E6D               	movwf	_nout+1,c
  1440  001CBC  0E00               	movlw	0
  1441  001CBE  6E6C               	movwf	_nout,c
  1442                           
  1443                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  1444  001CC0  D012               	goto	l2216
  1445  001CC2                     l2214:
  1446                           
  1447                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1376:         nout +
      +                          = vfpfcnvrt(fp, &cfmt, ap);
  1448  001CC2  C060  F04F         	movff	vfprintf@fp,vfpfcnvrt@fp
  1449  001CC6  C061  F050         	movff	vfprintf@fp+1,vfpfcnvrt@fp+1
  1450  001CCA  0E66               	movlw	low vfprintf@cfmt
  1451  001CCC  6E51               	movwf	vfpfcnvrt@fmt,c
  1452  001CCE  0E00               	movlw	high vfprintf@cfmt
  1453  001CD0  6E52               	movwf	vfpfcnvrt@fmt+1,c
  1454  001CD2  C064  F053         	movff	vfprintf@ap,vfpfcnvrt@ap
  1455  001CD6  C065  F054         	movff	vfprintf@ap+1,vfpfcnvrt@ap+1
  1456  001CDA  ECF8  F00A         	call	_vfpfcnvrt	;wreg free
  1457  001CDE  504F               	movf	?_vfpfcnvrt,w,c
  1458  001CE0  266C               	addwf	_nout,f,c
  1459  001CE2  5050               	movf	?_vfpfcnvrt+1,w,c
  1460  001CE4  226D               	addwfc	_nout+1,f,c
  1461  001CE6                     l2216:
  1462                           
  1463                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1375:     while (*cf
      +                          mt) {
  1464  001CE6  C066  FFF6         	movff	vfprintf@cfmt,tblptrl
  1465  001CEA  C067  FFF7         	movff	vfprintf@cfmt+1,tblptrh
  1466  001CEE                     	if	0	;tblptru may be non-zero
  1467  001CEE                     	endif
  1468  001CEE                     	if	0	;tblptru may be non-zero
  1469  001CEE                     	endif
  1470  001CEE  0008               	tblrd		*
  1471  001CF0  50F5               	movf	tablat,w,c
  1472  001CF2  0900               	iorlw	0
  1473  001CF4  A4D8               	btfss	status,2,c
  1474  001CF6  D7E5               	goto	l2214
  1475                           
  1476                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1378:     return nou
      +                          t;
  1477  001CF8  C06C  F060         	movff	_nout,?_vfprintf
  1478  001CFC  C06D  F061         	movff	_nout+1,?_vfprintf+1
  1479  001D00  0012               	return		;funcret
  1480  001D02                     __end_of_vfprintf:
  1481                           	opt callstack 0
  1482                           
  1483 ;; *************** function _vfpfcnvrt *****************
  1484 ;; Defined at:
  1485 ;;		line 670 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1486 ;; Parameters:    Size  Location     Type
  1487 ;;  fp              2   78[COMRAM] PTR struct _IO_FILE
  1488 ;;		 -> NULL(0), 
  1489 ;;  fmt             2   80[COMRAM] PTR PTR unsigned char 
  1490 ;;		 -> vfprintf@cfmt(2), 
  1491 ;;  ap              2   82[COMRAM] PTR PTR void 
  1492 ;;		 -> printf@ap(2), 
  1493 ;; Auto vars:     Size  Location     Type
  1494 ;;  ll              8   86[COMRAM] long long 
  1495 ;;  llu             8    0        unsigned long long 
  1496 ;;  f               4    0        unsigned long long 
  1497 ;;  vp              3    0        PTR void 
  1498 ;;  ct              3    0        unsigned char [3]
  1499 ;;  cp              3    0        PTR unsigned char 
  1500 ;;  i               2    0        int 
  1501 ;;  done            2    0        int 
  1502 ;;  c               1   94[COMRAM] unsigned char 
  1503 ;; Return value:  Size  Location     Type
  1504 ;;                  2   78[COMRAM] int 
  1505 ;; Registers used:
  1506 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1507 ;; Tracked objects:
  1508 ;;		On entry : 0/0
  1509 ;;		On exit  : 0/0
  1510 ;;		Unchanged: 0/0
  1511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1512 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1513 ;;      Locals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1514 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1515 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1516 ;;Total ram usage:       17 bytes
  1517 ;; Hardware stack levels used:    1
  1518 ;; Hardware stack levels required when called:    9
  1519 ;; This function calls:
  1520 ;;		_ctoa
  1521 ;;		_dtoa
  1522 ;;		_fputc
  1523 ;; This function is called by:
  1524 ;;		_vfprintf
  1525 ;; This function uses a non-reentrant model
  1526 ;;
  1527                           
  1528                           	psect	text3
  1529  0015F0                     __ptext3:
  1530                           	opt callstack 0
  1531  0015F0                     _vfpfcnvrt:
  1532                           	opt callstack 19
  1533                           
  1534                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 670: static int vfpf
      +                          cnvrt(FILE *fp, char *fmt[], va_list ap);/Applications/microchip/xc8/v2.05/pic/sources/c
      +                          99/common/doprnt.c: 671: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 672:     char c, *cp, ct[3];;/Applications/microchip/xc8/v2.05/pic/sources/c99/com
      +                          mon/doprnt.c: 673:     int done, i;;/Applications/microchip/xc8/v2.05/pic/sources/c99/co
      +                          mmon/doprnt.c: 674:     long long ll;;/Applications/microchip/xc8/v2.05/pic/sources/c99/
      +                          common/doprnt.c: 675:     unsigned long long llu;
  1535                           
  1536                           ;incstack = 0
  1537  0015F0  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1538  0015F4  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1539  0015F8  CFDE FFF6          	movff	postinc2,tblptrl
  1540  0015FC  CFDD FFF7          	movff	postdec2,tblptrh
  1541  001600                     	if	0	;tblptru may be non-zero
  1542  001600                     	endif
  1543  001600                     	if	0	;tblptru may be non-zero
  1544  001600                     	endif
  1545  001600  0008               	tblrd		*
  1546  001602  50F5               	movf	tablat,w,c
  1547  001604  0A25               	xorlw	37
  1548  001606  A4D8               	btfss	status,2,c
  1549  001608  D0CC               	goto	l2198
  1550                           
  1551                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 681:         ++*fmt;
  1552  00160A  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1553  00160E  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1554  001612  2ADE               	incf	postinc2,f,c
  1555  001614  0E00               	movlw	0
  1556  001616  22DD               	addwfc	postdec2,f,c
  1557                           
  1558                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 683:         flags =
      +                           width = 0;
  1559  001618  0E00               	movlw	0
  1560  00161A  6E6F               	movwf	_width+1,c
  1561  00161C  0E00               	movlw	0
  1562  00161E  6E6E               	movwf	_width,c
  1563  001620  C06E  F072         	movff	_width,_flags
  1564  001624  C06F  F073         	movff	_width+1,_flags+1
  1565                           
  1566                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 684:         prec = 
      +                          -1;
  1567  001628  6870               	setf	_prec,c
  1568  00162A  6871               	setf	_prec+1,c
  1569                           
  1570                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 792:         if (*fm
      +                          t[0] == 'c') {
  1571  00162C  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1572  001630  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1573  001634  CFDE FFF6          	movff	postinc2,tblptrl
  1574  001638  CFDD FFF7          	movff	postdec2,tblptrh
  1575  00163C                     	if	0	;tblptru may be non-zero
  1576  00163C                     	endif
  1577  00163C                     	if	0	;tblptru may be non-zero
  1578  00163C                     	endif
  1579  00163C  0008               	tblrd		*
  1580  00163E  50F5               	movf	tablat,w,c
  1581  001640  0A63               	xorlw	99
  1582  001642  A4D8               	btfss	status,2,c
  1583  001644  D026               	goto	l2172
  1584                           
  1585                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 793:             ++*
      +                          fmt;
  1586  001646  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1587  00164A  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1588  00164E  2ADE               	incf	postinc2,f,c
  1589  001650  0E00               	movlw	0
  1590  001652  22DD               	addwfc	postdec2,f,c
  1591                           
  1592                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 794:             c =
      +                           (unsigned char)(*(int *)__va_arg(*(int **)ap, (int)0));
  1593  001654  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1594  001658  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1595  00165C  CFDF F055          	movff	indf2,??_vfpfcnvrt
  1596  001660  0E02               	movlw	2
  1597  001662  26DE               	addwf	postinc2,f,c
  1598  001664  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  1599  001668  0E00               	movlw	0
  1600  00166A  22DD               	addwfc	postdec2,f,c
  1601  00166C  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1602  001670  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1603  001674  50DF               	movf	indf2,w,c
  1604  001676  6E5F               	movwf	vfpfcnvrt@c,c
  1605                           
  1606                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 795:             ret
      +                          urn ctoa(fp, c);
  1607  001678  C04F  F02B         	movff	vfpfcnvrt@fp,ctoa@fp
  1608  00167C  C050  F02C         	movff	vfpfcnvrt@fp+1,ctoa@fp+1
  1609  001680  C05F  F02D         	movff	vfpfcnvrt@c,ctoa@c
  1610  001684  EC81  F00E         	call	_ctoa	;wreg free
  1611  001688  C02B  F04F         	movff	?_ctoa,?_vfpfcnvrt
  1612  00168C  C02C  F050         	movff	?_ctoa+1,?_vfpfcnvrt+1
  1613  001690  0012               	return	
  1614  001692                     l2172:
  1615                           
  1616                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 825:         if ((*f
      +                          mt[0] == 'd') || (*fmt[0] == 'i')) {
  1617  001692  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1618  001696  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1619  00169A  CFDE FFF6          	movff	postinc2,tblptrl
  1620  00169E  CFDD FFF7          	movff	postdec2,tblptrh
  1621  0016A2                     	if	0	;tblptru may be non-zero
  1622  0016A2                     	endif
  1623  0016A2                     	if	0	;tblptru may be non-zero
  1624  0016A2                     	endif
  1625  0016A2  0008               	tblrd		*
  1626  0016A4  50F5               	movf	tablat,w,c
  1627  0016A6  0A64               	xorlw	100
  1628  0016A8  B4D8               	btfsc	status,2,c
  1629  0016AA  D00D               	goto	u1730
  1630  0016AC  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1631  0016B0  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1632  0016B4  CFDE FFF6          	movff	postinc2,tblptrl
  1633  0016B8  CFDD FFF7          	movff	postdec2,tblptrh
  1634  0016BC                     	if	0	;tblptru may be non-zero
  1635  0016BC                     	endif
  1636  0016BC                     	if	0	;tblptru may be non-zero
  1637  0016BC                     	endif
  1638  0016BC  0008               	tblrd		*
  1639  0016BE  50F5               	movf	tablat,w,c
  1640  0016C0  0A69               	xorlw	105
  1641  0016C2  A4D8               	btfss	status,2,c
  1642  0016C4  D03F               	goto	l2182
  1643  0016C6                     u1730:
  1644                           
  1645                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 827:             ++*
      +                          fmt;
  1646  0016C6  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1647  0016CA  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1648  0016CE  2ADE               	incf	postinc2,f,c
  1649  0016D0  0E00               	movlw	0
  1650  0016D2  22DD               	addwfc	postdec2,f,c
  1651                           
  1652                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 828:             ll 
      +                          = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  1653  0016D4  C053  FFD9         	movff	vfpfcnvrt@ap,fsr2l
  1654  0016D8  C054  FFDA         	movff	vfpfcnvrt@ap+1,fsr2h
  1655  0016DC  CFDF F055          	movff	indf2,??_vfpfcnvrt
  1656  0016E0  0E02               	movlw	2
  1657  0016E2  26DE               	addwf	postinc2,f,c
  1658  0016E4  CFDF F056          	movff	indf2,??_vfpfcnvrt+1
  1659  0016E8  0E00               	movlw	0
  1660  0016EA  22DD               	addwfc	postdec2,f,c
  1661  0016EC  C055  FFD9         	movff	??_vfpfcnvrt,fsr2l
  1662  0016F0  C056  FFDA         	movff	??_vfpfcnvrt+1,fsr2h
  1663  0016F4  CFDE F057          	movff	postinc2,vfpfcnvrt@ll
  1664  0016F8  CFDD F058          	movff	postdec2,vfpfcnvrt@ll+1
  1665  0016FC  0E00               	movlw	0
  1666  0016FE  BE58               	btfsc	vfpfcnvrt@ll+1,7,c
  1667  001700  0EFF               	movlw	-1
  1668  001702  6E59               	movwf	vfpfcnvrt@ll+2,c
  1669  001704  6E5A               	movwf	vfpfcnvrt@ll+3,c
  1670  001706  6E5B               	movwf	vfpfcnvrt@ll+4,c
  1671  001708  6E5C               	movwf	vfpfcnvrt@ll+5,c
  1672  00170A  6E5D               	movwf	vfpfcnvrt@ll+6,c
  1673  00170C  6E5E               	movwf	vfpfcnvrt@ll+7,c
  1674                           
  1675                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 830:             ret
      +                          urn dtoa(fp, ll);
  1676  00170E  C04F  F02B         	movff	vfpfcnvrt@fp,dtoa@fp
  1677  001712  C050  F02C         	movff	vfpfcnvrt@fp+1,dtoa@fp+1
  1678  001716  C057  F02D         	movff	vfpfcnvrt@ll,dtoa@d
  1679  00171A  C058  F02E         	movff	vfpfcnvrt@ll+1,dtoa@d+1
  1680  00171E  C059  F02F         	movff	vfpfcnvrt@ll+2,dtoa@d+2
  1681  001722  C05A  F030         	movff	vfpfcnvrt@ll+3,dtoa@d+3
  1682  001726  C05B  F031         	movff	vfpfcnvrt@ll+4,dtoa@d+4
  1683  00172A  C05C  F032         	movff	vfpfcnvrt@ll+5,dtoa@d+5
  1684  00172E  C05D  F033         	movff	vfpfcnvrt@ll+6,dtoa@d+6
  1685  001732  C05E  F034         	movff	vfpfcnvrt@ll+7,dtoa@d+7
  1686  001736  ECD7  F009         	call	_dtoa	;wreg free
  1687  00173A  C02B  F04F         	movff	?_dtoa,?_vfpfcnvrt
  1688  00173E  C02C  F050         	movff	?_dtoa+1,?_vfpfcnvrt+1
  1689  001742  0012               	return	
  1690  001744                     l2182:
  1691                           
  1692                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1350:         if ((*
      +                          fmt)[0] == '%') {
  1693  001744  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1694  001748  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1695  00174C  CFDE FFF6          	movff	postinc2,tblptrl
  1696  001750  CFDD FFF7          	movff	postdec2,tblptrh
  1697  001754                     	if	0	;tblptru may be non-zero
  1698  001754                     	endif
  1699  001754                     	if	0	;tblptru may be non-zero
  1700  001754                     	endif
  1701  001754  0008               	tblrd		*
  1702  001756  50F5               	movf	tablat,w,c
  1703  001758  0A25               	xorlw	37
  1704  00175A  A4D8               	btfss	status,2,c
  1705  00175C  D016               	goto	l2192
  1706                           
  1707                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1351:             ++
      +                          *fmt;
  1708  00175E  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1709  001762  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1710  001766  2ADE               	incf	postinc2,f,c
  1711  001768  0E00               	movlw	0
  1712  00176A  22DD               	addwfc	postdec2,f,c
  1713                           
  1714                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1352:             fp
      +                          utc((int)'%', fp);
  1715  00176C  0E00               	movlw	0
  1716  00176E  6E11               	movwf	fputc@c+1,c
  1717  001770  0E25               	movlw	37
  1718  001772  6E10               	movwf	fputc@c,c
  1719  001774  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  1720  001778  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1721  00177C  ECC2  F00D         	call	_fputc	;wreg free
  1722  001780                     l2188:
  1723                           
  1724                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1353:             re
      +                          turn 1;
  1725  001780  0E00               	movlw	0
  1726  001782  6E50               	movwf	?_vfpfcnvrt+1,c
  1727  001784  0E01               	movlw	1
  1728  001786  6E4F               	movwf	?_vfpfcnvrt,c
  1729  001788  0012               	return	
  1730  00178A                     l2192:
  1731                           
  1732                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1357:         ++*fmt
      +                          ;
  1733  00178A  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1734  00178E  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1735  001792  2ADE               	incf	postinc2,f,c
  1736  001794  0E00               	movlw	0
  1737  001796  22DD               	addwfc	postdec2,f,c
  1738                           
  1739                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1358:         return
      +                           0;
  1740  001798  0E00               	movlw	0
  1741  00179A  6E50               	movwf	?_vfpfcnvrt+1,c
  1742  00179C  0E00               	movlw	0
  1743  00179E  6E4F               	movwf	?_vfpfcnvrt,c
  1744  0017A0  0012               	return	
  1745  0017A2                     l2198:
  1746                           
  1747                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1362:     fputc((int
      +                          )(*fmt)[0], fp);
  1748  0017A2  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1749  0017A6  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1750  0017AA  CFDE FFF6          	movff	postinc2,tblptrl
  1751  0017AE  CFDD FFF7          	movff	postdec2,tblptrh
  1752  0017B2                     	if	0	;tblptru may be non-zero
  1753  0017B2                     	endif
  1754  0017B2                     	if	0	;tblptru may be non-zero
  1755  0017B2                     	endif
  1756  0017B2  0008               	tblrd		*
  1757  0017B4  50F5               	movf	tablat,w,c
  1758  0017B6  6E10               	movwf	fputc@c,c
  1759  0017B8  6A11               	clrf	fputc@c+1,c
  1760  0017BA  C04F  F012         	movff	vfpfcnvrt@fp,fputc@fp
  1761  0017BE  C050  F013         	movff	vfpfcnvrt@fp+1,fputc@fp+1
  1762  0017C2  ECC2  F00D         	call	_fputc	;wreg free
  1763                           
  1764                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 1363:     ++*fmt;
  1765  0017C6  C051  FFD9         	movff	vfpfcnvrt@fmt,fsr2l
  1766  0017CA  C052  FFDA         	movff	vfpfcnvrt@fmt+1,fsr2h
  1767  0017CE  2ADE               	incf	postinc2,f,c
  1768  0017D0  0E00               	movlw	0
  1769  0017D2  22DD               	addwfc	postdec2,f,c
  1770  0017D4  D7D5               	goto	l2188
  1771  0017D6                     __end_of_vfpfcnvrt:
  1772                           	opt callstack 0
  1773                           
  1774 ;; *************** function _dtoa *****************
  1775 ;; Defined at:
  1776 ;;		line 274 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  1777 ;; Parameters:    Size  Location     Type
  1778 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  1779 ;;		 -> NULL(0), 
  1780 ;;  d               8   44[COMRAM] long long 
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  n               8   68[COMRAM] long long 
  1783 ;;  i               2   76[COMRAM] int 
  1784 ;;  s               2   66[COMRAM] int 
  1785 ;;  w               2   64[COMRAM] int 
  1786 ;;  p               2   62[COMRAM] int 
  1787 ;; Return value:  Size  Location     Type
  1788 ;;                  2   42[COMRAM] int 
  1789 ;; Registers used:
  1790 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  1791 ;; Tracked objects:
  1792 ;;		On entry : 0/0
  1793 ;;		On exit  : 0/0
  1794 ;;		Unchanged: 0/0
  1795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1796 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1797 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1798 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1799 ;;      Totals:        36       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1800 ;;Total ram usage:       36 bytes
  1801 ;; Hardware stack levels used:    1
  1802 ;; Hardware stack levels required when called:    8
  1803 ;; This function calls:
  1804 ;;		___aodiv
  1805 ;;		___aomod
  1806 ;;		_abs
  1807 ;;		_pad
  1808 ;; This function is called by:
  1809 ;;		_vfpfcnvrt
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           	psect	text4
  1814  0013AE                     __ptext4:
  1815                           	opt callstack 0
  1816  0013AE                     _dtoa:
  1817                           	opt callstack 19
  1818                           
  1819                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 274: static int dtoa
      +                          (FILE *fp, long long d);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.
      +                          c: 275: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 276:     in
      +                          t i, p, s, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 277:   
      +                            long long n;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 280:  
      +                             n = d;
  1820                           
  1821                           ;incstack = 0
  1822  0013AE  C02D  F045         	movff	dtoa@d,dtoa@n
  1823  0013B2  C02E  F046         	movff	dtoa@d+1,dtoa@n+1
  1824  0013B6  C02F  F047         	movff	dtoa@d+2,dtoa@n+2
  1825  0013BA  C030  F048         	movff	dtoa@d+3,dtoa@n+3
  1826  0013BE  C031  F049         	movff	dtoa@d+4,dtoa@n+4
  1827  0013C2  C032  F04A         	movff	dtoa@d+5,dtoa@n+5
  1828  0013C6  C033  F04B         	movff	dtoa@d+6,dtoa@n+6
  1829  0013CA  C034  F04C         	movff	dtoa@d+7,dtoa@n+7
  1830                           
  1831                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 281:     s = n < 0 ?
      +                           1 : 0;
  1832  0013CE  AE4C               	btfss	dtoa@n+7,7,c
  1833  0013D0  D002               	goto	u1550
  1834  0013D2  0E01               	movlw	1
  1835  0013D4  D001               	goto	u1560
  1836  0013D6                     u1550:
  1837  0013D6  0E00               	movlw	0
  1838  0013D8                     u1560:
  1839  0013D8  6E43               	movwf	dtoa@s,c
  1840  0013DA  6A44               	clrf	dtoa@s+1,c
  1841                           
  1842                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 282:     if (s) {
  1843  0013DC  5043               	movf	dtoa@s,w,c
  1844  0013DE  1044               	iorwf	dtoa@s+1,w,c
  1845  0013E0  B4D8               	btfsc	status,2,c
  1846  0013E2  D010               	goto	l2100
  1847                           
  1848                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 283:         n = -n;
  1849  0013E4  1E4C               	comf	dtoa@n+7,f,c
  1850  0013E6  1E4B               	comf	dtoa@n+6,f,c
  1851  0013E8  1E4A               	comf	dtoa@n+5,f,c
  1852  0013EA  1E49               	comf	dtoa@n+4,f,c
  1853  0013EC  1E48               	comf	dtoa@n+3,f,c
  1854  0013EE  1E47               	comf	dtoa@n+2,f,c
  1855  0013F0  1E46               	comf	dtoa@n+1,f,c
  1856  0013F2  6C45               	negf	dtoa@n,c
  1857  0013F4  0E00               	movlw	0
  1858  0013F6  2246               	addwfc	dtoa@n+1,f,c
  1859  0013F8  2247               	addwfc	dtoa@n+2,f,c
  1860  0013FA  2248               	addwfc	dtoa@n+3,f,c
  1861  0013FC  2249               	addwfc	dtoa@n+4,f,c
  1862  0013FE  224A               	addwfc	dtoa@n+5,f,c
  1863  001400  224B               	addwfc	dtoa@n+6,f,c
  1864  001402  224C               	addwfc	dtoa@n+7,f,c
  1865  001404                     l2100:
  1866                           
  1867                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 287:     if (!(prec 
      +                          < 0)) {
  1868  001404  AE71               	btfss	_prec+1,7,c
  1869                           
  1870                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 288:         flags &
      +                          = ~(1 << 1);
  1871  001406  9272               	bcf	_flags,1,c
  1872                           
  1873                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 290:     p = (0 < pr
      +                          ec) ? prec : 1;
  1874  001408  BE71               	btfsc	_prec+1,7,c
  1875  00140A  D005               	goto	u1590
  1876  00140C  5071               	movf	_prec+1,w,c
  1877  00140E  E108               	bnz	l171
  1878  001410  0470               	decf	_prec,w,c
  1879  001412  B0D8               	btfsc	status,0,c
  1880  001414  D005               	goto	l171
  1881  001416                     u1590:
  1882  001416  0E00               	movlw	0
  1883  001418  6E40               	movwf	dtoa@p+1,c
  1884  00141A  0E01               	movlw	1
  1885  00141C  6E3F               	movwf	dtoa@p,c
  1886  00141E  D004               	goto	l173
  1887  001420                     l171:
  1888  001420  C070  F03F         	movff	_prec,dtoa@p
  1889  001424  C071  F040         	movff	_prec+1,dtoa@p+1
  1890  001428                     l173:
  1891                           
  1892                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 291:     w = width;
  1893  001428  C06E  F041         	movff	_width,dtoa@w
  1894  00142C  C06F  F042         	movff	_width+1,dtoa@w+1
  1895                           
  1896                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 292:     if (s || (f
      +                          lags & (1 << 2))) {
  1897  001430  5043               	movf	dtoa@s,w,c
  1898  001432  1044               	iorwf	dtoa@s+1,w,c
  1899  001434  A4D8               	btfss	status,2,c
  1900  001436  D002               	goto	u1610
  1901  001438  A472               	btfss	_flags,2,c
  1902  00143A  D003               	goto	l2114
  1903  00143C                     u1610:
  1904                           
  1905                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 293:         --w;
  1906  00143C  0641               	decf	dtoa@w,f,c
  1907  00143E  A0D8               	btfss	status,0,c
  1908  001440  0642               	decf	dtoa@w+1,f,c
  1909  001442                     l2114:
  1910                           
  1911                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 297:     i = sizeof(
      +                          dbuf) - 1;
  1912  001442  0E00               	movlw	0
  1913  001444  6E4E               	movwf	dtoa@i+1,c
  1914  001446  0E1F               	movlw	31
  1915  001448  6E4D               	movwf	dtoa@i,c
  1916                           
  1917                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 298:     dbuf[i] = '
      +                          \0';
  1918  00144A  0E00               	movlw	0
  1919  00144C  0100               	movlb	0	; () banked
  1920  00144E  6FF7               	movwf	(_dbuf+31)& (0+255),b
  1921                           
  1922                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  1923  001450  D07C               	goto	l2128
  1924  001452                     l2118:
  1925                           
  1926                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 300:         --i;
  1927  001452  064D               	decf	dtoa@i,f,c
  1928  001454  A0D8               	btfss	status,0,c
  1929  001456  064E               	decf	dtoa@i+1,f,c
  1930                           
  1931                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 301:         dbuf[i]
      +                           = '0' + abs(n % 10);
  1932  001458  0ED8               	movlw	low _dbuf
  1933  00145A  244D               	addwf	dtoa@i,w,c
  1934  00145C  6ED9               	movwf	fsr2l,c
  1935  00145E  0E00               	movlw	high _dbuf
  1936  001460  204E               	addwfc	dtoa@i+1,w,c
  1937  001462  6EDA               	movwf	fsr2h,c
  1938  001464  C045  F00C         	movff	dtoa@n,___aomod@dividend
  1939  001468  C046  F00D         	movff	dtoa@n+1,___aomod@dividend+1
  1940  00146C  C047  F00E         	movff	dtoa@n+2,___aomod@dividend+2
  1941  001470  C048  F00F         	movff	dtoa@n+3,___aomod@dividend+3
  1942  001474  C049  F010         	movff	dtoa@n+4,___aomod@dividend+4
  1943  001478  C04A  F011         	movff	dtoa@n+5,___aomod@dividend+5
  1944  00147C  C04B  F012         	movff	dtoa@n+6,___aomod@dividend+6
  1945  001480  C04C  F013         	movff	dtoa@n+7,___aomod@dividend+7
  1946  001484  0E0A               	movlw	10
  1947  001486  6E14               	movwf	___aomod@divisor,c
  1948  001488  0E00               	movlw	0
  1949  00148A  6E15               	movwf	___aomod@divisor+1,c
  1950  00148C  0E00               	movlw	0
  1951  00148E  6E16               	movwf	___aomod@divisor+2,c
  1952  001490  0E00               	movlw	0
  1953  001492  6E17               	movwf	___aomod@divisor+3,c
  1954  001494  0E00               	movlw	0
  1955  001496  6E18               	movwf	___aomod@divisor+4,c
  1956  001498  0E00               	movlw	0
  1957  00149A  6E19               	movwf	___aomod@divisor+5,c
  1958  00149C  0E00               	movlw	0
  1959  00149E  6E1A               	movwf	___aomod@divisor+6,c
  1960  0014A0  0E00               	movlw	0
  1961  0014A2  6E1B               	movwf	___aomod@divisor+7,c
  1962  0014A4  EC8F  F00C         	call	___aomod	;wreg free
  1963  0014A8  C00C  F035         	movff	?___aomod,??_dtoa
  1964  0014AC  C00D  F036         	movff	?___aomod+1,??_dtoa+1
  1965  0014B0  C00E  F037         	movff	?___aomod+2,??_dtoa+2
  1966  0014B4  C00F  F038         	movff	?___aomod+3,??_dtoa+3
  1967  0014B8  C010  F039         	movff	?___aomod+4,??_dtoa+4
  1968  0014BC  C011  F03A         	movff	?___aomod+5,??_dtoa+5
  1969  0014C0  C012  F03B         	movff	?___aomod+6,??_dtoa+6
  1970  0014C4  C013  F03C         	movff	?___aomod+7,??_dtoa+7
  1971  0014C8  C035  F01E         	movff	??_dtoa,abs@a
  1972  0014CC  C037  F01F         	movff	??_dtoa+2,abs@a+1
  1973  0014D0  ECE9  F00E         	call	_abs	;wreg free
  1974  0014D4  501E               	movf	?_abs,w,c
  1975  0014D6  0F30               	addlw	48
  1976  0014D8  6EDF               	movwf	indf2,c
  1977                           
  1978                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 302:         --p;
  1979  0014DA  063F               	decf	dtoa@p,f,c
  1980  0014DC  A0D8               	btfss	status,0,c
  1981  0014DE  0640               	decf	dtoa@p+1,f,c
  1982                           
  1983                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 303:         --w;
  1984  0014E0  0641               	decf	dtoa@w,f,c
  1985  0014E2  A0D8               	btfss	status,0,c
  1986  0014E4  0642               	decf	dtoa@w+1,f,c
  1987                           
  1988                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 304:         n = n /
      +                           10;
  1989  0014E6  C045  F00C         	movff	dtoa@n,___aodiv@dividend
  1990  0014EA  C046  F00D         	movff	dtoa@n+1,___aodiv@dividend+1
  1991  0014EE  C047  F00E         	movff	dtoa@n+2,___aodiv@dividend+2
  1992  0014F2  C048  F00F         	movff	dtoa@n+3,___aodiv@dividend+3
  1993  0014F6  C049  F010         	movff	dtoa@n+4,___aodiv@dividend+4
  1994  0014FA  C04A  F011         	movff	dtoa@n+5,___aodiv@dividend+5
  1995  0014FE  C04B  F012         	movff	dtoa@n+6,___aodiv@dividend+6
  1996  001502  C04C  F013         	movff	dtoa@n+7,___aodiv@dividend+7
  1997  001506  0E0A               	movlw	10
  1998  001508  6E14               	movwf	___aodiv@divisor,c
  1999  00150A  0E00               	movlw	0
  2000  00150C  6E15               	movwf	___aodiv@divisor+1,c
  2001  00150E  0E00               	movlw	0
  2002  001510  6E16               	movwf	___aodiv@divisor+2,c
  2003  001512  0E00               	movlw	0
  2004  001514  6E17               	movwf	___aodiv@divisor+3,c
  2005  001516  0E00               	movlw	0
  2006  001518  6E18               	movwf	___aodiv@divisor+4,c
  2007  00151A  0E00               	movlw	0
  2008  00151C  6E19               	movwf	___aodiv@divisor+5,c
  2009  00151E  0E00               	movlw	0
  2010  001520  6E1A               	movwf	___aodiv@divisor+6,c
  2011  001522  0E00               	movlw	0
  2012  001524  6E1B               	movwf	___aodiv@divisor+7,c
  2013  001526  ECEB  F00B         	call	___aodiv	;wreg free
  2014  00152A  C00C  F045         	movff	?___aodiv,dtoa@n
  2015  00152E  C00D  F046         	movff	?___aodiv+1,dtoa@n+1
  2016  001532  C00E  F047         	movff	?___aodiv+2,dtoa@n+2
  2017  001536  C00F  F048         	movff	?___aodiv+3,dtoa@n+3
  2018  00153A  C010  F049         	movff	?___aodiv+4,dtoa@n+4
  2019  00153E  C011  F04A         	movff	?___aodiv+5,dtoa@n+5
  2020  001542  C012  F04B         	movff	?___aodiv+6,dtoa@n+6
  2021  001546  C013  F04C         	movff	?___aodiv+7,dtoa@n+7
  2022  00154A                     l2128:
  2023                           
  2024                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 299:     while (!(i 
      +                          < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
  2025  00154A  BE4E               	btfsc	dtoa@i+1,7,c
  2026  00154C  D01F               	goto	u1660
  2027  00154E  504E               	movf	dtoa@i+1,w,c
  2028  001550  E103               	bnz	u1620
  2029  001552  044D               	decf	dtoa@i,w,c
  2030  001554  A0D8               	btfss	status,0,c
  2031  001556  D01A               	goto	u1660
  2032  001558                     u1620:
  2033  001558  5045               	movf	dtoa@n,w,c
  2034  00155A  1046               	iorwf	dtoa@n+1,w,c
  2035  00155C  1047               	iorwf	dtoa@n+2,w,c
  2036  00155E  1048               	iorwf	dtoa@n+3,w,c
  2037  001560  1049               	iorwf	dtoa@n+4,w,c
  2038  001562  104A               	iorwf	dtoa@n+5,w,c
  2039  001564  104B               	iorwf	dtoa@n+6,w,c
  2040  001566  104C               	iorwf	dtoa@n+7,w,c
  2041  001568  A4D8               	btfss	status,2,c
  2042  00156A  D773               	goto	l2118
  2043  00156C  BE40               	btfsc	dtoa@p+1,7,c
  2044  00156E  D005               	goto	u1640
  2045  001570  5040               	movf	dtoa@p+1,w,c
  2046  001572  E102               	bnz	u1641
  2047  001574  043F               	decf	dtoa@p,w,c
  2048  001576  B0D8               	btfsc	status,0,c
  2049  001578                     u1641:
  2050  001578  D76C               	goto	l2118
  2051  00157A                     u1640:
  2052  00157A  BE42               	btfsc	dtoa@w+1,7,c
  2053  00157C  D007               	goto	u1660
  2054  00157E  5042               	movf	dtoa@w+1,w,c
  2055  001580  E103               	bnz	u1650
  2056  001582  0441               	decf	dtoa@w,w,c
  2057  001584  A0D8               	btfss	status,0,c
  2058  001586  D002               	goto	u1660
  2059  001588                     u1650:
  2060  001588  B272               	btfsc	_flags,1,c
  2061  00158A  D763               	goto	l2118
  2062  00158C                     u1660:
  2063                           
  2064                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 308:     if (s || (f
      +                          lags & (1 << 2))) {
  2065  00158C  5043               	movf	dtoa@s,w,c
  2066  00158E  1044               	iorwf	dtoa@s+1,w,c
  2067  001590  A4D8               	btfss	status,2,c
  2068  001592  D002               	goto	u1680
  2069  001594  A472               	btfss	_flags,2,c
  2070  001596  D017               	goto	l2152
  2071  001598                     u1680:
  2072                           
  2073                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 309:         --i;
  2074  001598  064D               	decf	dtoa@i,f,c
  2075  00159A  A0D8               	btfss	status,0,c
  2076  00159C  064E               	decf	dtoa@i+1,f,c
  2077                           
  2078                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 310:         dbuf[i]
      +                           = s ? '-' : '+';
  2079  00159E  5043               	movf	dtoa@s,w,c
  2080  0015A0  1044               	iorwf	dtoa@s+1,w,c
  2081  0015A2  A4D8               	btfss	status,2,c
  2082  0015A4  D004               	goto	l2148
  2083  0015A6  0E00               	movlw	0
  2084  0015A8  6E3E               	movwf	_dtoa$308+1,c
  2085  0015AA  0E2B               	movlw	43
  2086  0015AC  D003               	goto	L1
  2087  0015AE                     l2148:
  2088  0015AE  0E00               	movlw	0
  2089  0015B0  6E3E               	movwf	_dtoa$308+1,c
  2090  0015B2  0E2D               	movlw	45
  2091  0015B4                     L1:
  2092  0015B4  6E3D               	movwf	_dtoa$308,c
  2093  0015B6  0ED8               	movlw	low _dbuf
  2094  0015B8  244D               	addwf	dtoa@i,w,c
  2095  0015BA  6ED9               	movwf	fsr2l,c
  2096  0015BC  0E00               	movlw	high _dbuf
  2097  0015BE  204E               	addwfc	dtoa@i+1,w,c
  2098  0015C0  6EDA               	movwf	fsr2h,c
  2099  0015C2  C03D  FFDF         	movff	_dtoa$308,indf2
  2100  0015C6                     l2152:
  2101                           
  2102                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 314:     return pad(
      +                          fp, &dbuf[i], w);
  2103  0015C6  C02B  F020         	movff	dtoa@fp,pad@fp
  2104  0015CA  C02C  F021         	movff	dtoa@fp+1,pad@fp+1
  2105  0015CE  0ED8               	movlw	low _dbuf
  2106  0015D0  244D               	addwf	dtoa@i,w,c
  2107  0015D2  6E22               	movwf	pad@buf,c
  2108  0015D4  0E00               	movlw	high _dbuf
  2109  0015D6  204E               	addwfc	dtoa@i+1,w,c
  2110  0015D8  6E23               	movwf	pad@buf+1,c
  2111  0015DA  C041  F024         	movff	dtoa@w,pad@p
  2112  0015DE  C042  F025         	movff	dtoa@w+1,pad@p+1
  2113  0015E2  EC77  F00D         	call	_pad	;wreg free
  2114  0015E6  C020  F02B         	movff	?_pad,?_dtoa
  2115  0015EA  C021  F02C         	movff	?_pad+1,?_dtoa+1
  2116  0015EE  0012               	return		;funcret
  2117  0015F0                     __end_of_dtoa:
  2118                           	opt callstack 0
  2119                           
  2120 ;; *************** function _abs *****************
  2121 ;; Defined at:
  2122 ;;		line 1 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/abs.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  a               2   29[COMRAM] int 
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;		None
  2127 ;; Return value:  Size  Location     Type
  2128 ;;                  2   29[COMRAM] int 
  2129 ;; Registers used:
  2130 ;;		wreg, status,2, status,0
  2131 ;; Tracked objects:
  2132 ;;		On entry : 0/0
  2133 ;;		On exit  : 0/0
  2134 ;;		Unchanged: 0/0
  2135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2136 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2138 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2139 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2140 ;;Total ram usage:        4 bytes
  2141 ;; Hardware stack levels used:    1
  2142 ;; Hardware stack levels required when called:    1
  2143 ;; This function calls:
  2144 ;;		Nothing
  2145 ;; This function is called by:
  2146 ;;		_dtoa
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149                           
  2150                           	psect	text5
  2151  001DD2                     __ptext5:
  2152                           	opt callstack 0
  2153  001DD2                     _abs:
  2154                           	opt callstack 25
  2155                           
  2156                           ;incstack = 0
  2157  001DD2  BE1F               	btfsc	abs@a+1,7,c
  2158  001DD4  D005               	goto	u1400
  2159  001DD6  501F               	movf	abs@a+1,w,c
  2160  001DD8  E110               	bnz	l884
  2161  001DDA  041E               	decf	abs@a,w,c
  2162  001DDC  B0D8               	btfsc	status,0,c
  2163  001DDE  D00D               	goto	l884
  2164  001DE0                     u1400:
  2165  001DE0  C01E  F020         	movff	abs@a,??_abs
  2166  001DE4  C01F  F021         	movff	abs@a+1,??_abs+1
  2167  001DE8  1E20               	comf	??_abs,f,c
  2168  001DEA  1E21               	comf	??_abs+1,f,c
  2169  001DEC  4A20               	infsnz	??_abs,f,c
  2170  001DEE  2A21               	incf	??_abs+1,f,c
  2171  001DF0  C020  F01E         	movff	??_abs,?_abs
  2172  001DF4  C021  F01F         	movff	??_abs+1,?_abs+1
  2173  001DF8  0012               	return	
  2174  001DFA                     l884:
  2175  001DFA  C01E  F01E         	movff	abs@a,?_abs
  2176  001DFE  C01F  F01F         	movff	abs@a+1,?_abs+1
  2177  001E02  0012               	return		;funcret
  2178  001E04                     __end_of_abs:
  2179                           	opt callstack 0
  2180                           
  2181 ;; *************** function ___aomod *****************
  2182 ;; Defined at:
  2183 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aomod.c"
  2184 ;; Parameters:    Size  Location     Type
  2185 ;;  dividend        8   11[COMRAM] long long 
  2186 ;;  divisor         8   19[COMRAM] long long 
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;  sign            1   28[COMRAM] unsigned char 
  2189 ;;  counter         1   27[COMRAM] unsigned char 
  2190 ;; Return value:  Size  Location     Type
  2191 ;;                  8   11[COMRAM] long long 
  2192 ;; Registers used:
  2193 ;;		wreg, status,2, status,0
  2194 ;; Tracked objects:
  2195 ;;		On entry : 0/0
  2196 ;;		On exit  : 0/0
  2197 ;;		Unchanged: 0/0
  2198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2199 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2200 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2202 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2203 ;;Total ram usage:       18 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    1
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_dtoa
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212                           
  2213                           	psect	text6
  2214  00191E                     __ptext6:
  2215                           	opt callstack 0
  2216  00191E                     ___aomod:
  2217                           	opt callstack 25
  2218                           
  2219                           ;incstack = 0
  2220  00191E  0E00               	movlw	0
  2221  001920  6E1D               	movwf	___aomod@sign,c
  2222  001922  AE13               	btfss	___aomod@dividend+7,7,c
  2223  001924  D012               	goto	l2052
  2224  001926  1E13               	comf	___aomod@dividend+7,f,c
  2225  001928  1E12               	comf	___aomod@dividend+6,f,c
  2226  00192A  1E11               	comf	___aomod@dividend+5,f,c
  2227  00192C  1E10               	comf	___aomod@dividend+4,f,c
  2228  00192E  1E0F               	comf	___aomod@dividend+3,f,c
  2229  001930  1E0E               	comf	___aomod@dividend+2,f,c
  2230  001932  1E0D               	comf	___aomod@dividend+1,f,c
  2231  001934  6C0C               	negf	___aomod@dividend,c
  2232  001936  0E00               	movlw	0
  2233  001938  220D               	addwfc	___aomod@dividend+1,f,c
  2234  00193A  220E               	addwfc	___aomod@dividend+2,f,c
  2235  00193C  220F               	addwfc	___aomod@dividend+3,f,c
  2236  00193E  2210               	addwfc	___aomod@dividend+4,f,c
  2237  001940  2211               	addwfc	___aomod@dividend+5,f,c
  2238  001942  2212               	addwfc	___aomod@dividend+6,f,c
  2239  001944  2213               	addwfc	___aomod@dividend+7,f,c
  2240  001946  0E01               	movlw	1
  2241  001948  6E1D               	movwf	___aomod@sign,c
  2242  00194A                     l2052:
  2243  00194A  AE1B               	btfss	___aomod@divisor+7,7,c
  2244  00194C  D010               	goto	l2056
  2245  00194E  1E1B               	comf	___aomod@divisor+7,f,c
  2246  001950  1E1A               	comf	___aomod@divisor+6,f,c
  2247  001952  1E19               	comf	___aomod@divisor+5,f,c
  2248  001954  1E18               	comf	___aomod@divisor+4,f,c
  2249  001956  1E17               	comf	___aomod@divisor+3,f,c
  2250  001958  1E16               	comf	___aomod@divisor+2,f,c
  2251  00195A  1E15               	comf	___aomod@divisor+1,f,c
  2252  00195C  6C14               	negf	___aomod@divisor,c
  2253  00195E  0E00               	movlw	0
  2254  001960  2215               	addwfc	___aomod@divisor+1,f,c
  2255  001962  2216               	addwfc	___aomod@divisor+2,f,c
  2256  001964  2217               	addwfc	___aomod@divisor+3,f,c
  2257  001966  2218               	addwfc	___aomod@divisor+4,f,c
  2258  001968  2219               	addwfc	___aomod@divisor+5,f,c
  2259  00196A  221A               	addwfc	___aomod@divisor+6,f,c
  2260  00196C  221B               	addwfc	___aomod@divisor+7,f,c
  2261  00196E                     l2056:
  2262  00196E  5014               	movf	___aomod@divisor,w,c
  2263  001970  1015               	iorwf	___aomod@divisor+1,w,c
  2264  001972  1016               	iorwf	___aomod@divisor+2,w,c
  2265  001974  1017               	iorwf	___aomod@divisor+3,w,c
  2266  001976  1018               	iorwf	___aomod@divisor+4,w,c
  2267  001978  1019               	iorwf	___aomod@divisor+5,w,c
  2268  00197A  101A               	iorwf	___aomod@divisor+6,w,c
  2269  00197C  101B               	iorwf	___aomod@divisor+7,w,c
  2270  00197E  B4D8               	btfsc	status,2,c
  2271  001980  D03C               	goto	l2072
  2272  001982  0E01               	movlw	1
  2273  001984  6E1C               	movwf	___aomod@counter,c
  2274  001986  D00A               	goto	l2062
  2275  001988                     l2060:
  2276  001988  90D8               	bcf	status,0,c
  2277  00198A  3614               	rlcf	___aomod@divisor,f,c
  2278  00198C  3615               	rlcf	___aomod@divisor+1,f,c
  2279  00198E  3616               	rlcf	___aomod@divisor+2,f,c
  2280  001990  3617               	rlcf	___aomod@divisor+3,f,c
  2281  001992  3618               	rlcf	___aomod@divisor+4,f,c
  2282  001994  3619               	rlcf	___aomod@divisor+5,f,c
  2283  001996  361A               	rlcf	___aomod@divisor+6,f,c
  2284  001998  361B               	rlcf	___aomod@divisor+7,f,c
  2285  00199A  2A1C               	incf	___aomod@counter,f,c
  2286  00199C                     l2062:
  2287  00199C  AE1B               	btfss	___aomod@divisor+7,7,c
  2288  00199E  D7F4               	goto	l2060
  2289  0019A0                     u1510:
  2290  0019A0  5014               	movf	___aomod@divisor,w,c
  2291  0019A2  5C0C               	subwf	___aomod@dividend,w,c
  2292  0019A4  5015               	movf	___aomod@divisor+1,w,c
  2293  0019A6  580D               	subwfb	___aomod@dividend+1,w,c
  2294  0019A8  5016               	movf	___aomod@divisor+2,w,c
  2295  0019AA  580E               	subwfb	___aomod@dividend+2,w,c
  2296  0019AC  5017               	movf	___aomod@divisor+3,w,c
  2297  0019AE  580F               	subwfb	___aomod@dividend+3,w,c
  2298  0019B0  5018               	movf	___aomod@divisor+4,w,c
  2299  0019B2  5810               	subwfb	___aomod@dividend+4,w,c
  2300  0019B4  5019               	movf	___aomod@divisor+5,w,c
  2301  0019B6  5811               	subwfb	___aomod@dividend+5,w,c
  2302  0019B8  501A               	movf	___aomod@divisor+6,w,c
  2303  0019BA  5812               	subwfb	___aomod@dividend+6,w,c
  2304  0019BC  501B               	movf	___aomod@divisor+7,w,c
  2305  0019BE  5813               	subwfb	___aomod@dividend+7,w,c
  2306  0019C0  A0D8               	btfss	status,0,c
  2307  0019C2  D010               	goto	l2068
  2308  0019C4  5014               	movf	___aomod@divisor,w,c
  2309  0019C6  5E0C               	subwf	___aomod@dividend,f,c
  2310  0019C8  5015               	movf	___aomod@divisor+1,w,c
  2311  0019CA  5A0D               	subwfb	___aomod@dividend+1,f,c
  2312  0019CC  5016               	movf	___aomod@divisor+2,w,c
  2313  0019CE  5A0E               	subwfb	___aomod@dividend+2,f,c
  2314  0019D0  5017               	movf	___aomod@divisor+3,w,c
  2315  0019D2  5A0F               	subwfb	___aomod@dividend+3,f,c
  2316  0019D4  5018               	movf	___aomod@divisor+4,w,c
  2317  0019D6  5A10               	subwfb	___aomod@dividend+4,f,c
  2318  0019D8  5019               	movf	___aomod@divisor+5,w,c
  2319  0019DA  5A11               	subwfb	___aomod@dividend+5,f,c
  2320  0019DC  501A               	movf	___aomod@divisor+6,w,c
  2321  0019DE  5A12               	subwfb	___aomod@dividend+6,f,c
  2322  0019E0  501B               	movf	___aomod@divisor+7,w,c
  2323  0019E2  5A13               	subwfb	___aomod@dividend+7,f,c
  2324  0019E4                     l2068:
  2325  0019E4  90D8               	bcf	status,0,c
  2326  0019E6  321B               	rrcf	___aomod@divisor+7,f,c
  2327  0019E8  321A               	rrcf	___aomod@divisor+6,f,c
  2328  0019EA  3219               	rrcf	___aomod@divisor+5,f,c
  2329  0019EC  3218               	rrcf	___aomod@divisor+4,f,c
  2330  0019EE  3217               	rrcf	___aomod@divisor+3,f,c
  2331  0019F0  3216               	rrcf	___aomod@divisor+2,f,c
  2332  0019F2  3215               	rrcf	___aomod@divisor+1,f,c
  2333  0019F4  3214               	rrcf	___aomod@divisor,f,c
  2334  0019F6  2E1C               	decfsz	___aomod@counter,f,c
  2335  0019F8  D7D3               	goto	u1510
  2336  0019FA                     l2072:
  2337  0019FA  501D               	movf	___aomod@sign,w,c
  2338  0019FC  B4D8               	btfsc	status,2,c
  2339  0019FE  D010               	goto	l2076
  2340  001A00  1E13               	comf	___aomod@dividend+7,f,c
  2341  001A02  1E12               	comf	___aomod@dividend+6,f,c
  2342  001A04  1E11               	comf	___aomod@dividend+5,f,c
  2343  001A06  1E10               	comf	___aomod@dividend+4,f,c
  2344  001A08  1E0F               	comf	___aomod@dividend+3,f,c
  2345  001A0A  1E0E               	comf	___aomod@dividend+2,f,c
  2346  001A0C  1E0D               	comf	___aomod@dividend+1,f,c
  2347  001A0E  6C0C               	negf	___aomod@dividend,c
  2348  001A10  0E00               	movlw	0
  2349  001A12  220D               	addwfc	___aomod@dividend+1,f,c
  2350  001A14  220E               	addwfc	___aomod@dividend+2,f,c
  2351  001A16  220F               	addwfc	___aomod@dividend+3,f,c
  2352  001A18  2210               	addwfc	___aomod@dividend+4,f,c
  2353  001A1A  2211               	addwfc	___aomod@dividend+5,f,c
  2354  001A1C  2212               	addwfc	___aomod@dividend+6,f,c
  2355  001A1E  2213               	addwfc	___aomod@dividend+7,f,c
  2356  001A20                     l2076:
  2357  001A20  C00C  F00C         	movff	___aomod@dividend,?___aomod
  2358  001A24  C00D  F00D         	movff	___aomod@dividend+1,?___aomod+1
  2359  001A28  C00E  F00E         	movff	___aomod@dividend+2,?___aomod+2
  2360  001A2C  C00F  F00F         	movff	___aomod@dividend+3,?___aomod+3
  2361  001A30  C010  F010         	movff	___aomod@dividend+4,?___aomod+4
  2362  001A34  C011  F011         	movff	___aomod@dividend+5,?___aomod+5
  2363  001A38  C012  F012         	movff	___aomod@dividend+6,?___aomod+6
  2364  001A3C  C013  F013         	movff	___aomod@dividend+7,?___aomod+7
  2365  001A40  0012               	return		;funcret
  2366  001A42                     __end_of___aomod:
  2367                           	opt callstack 0
  2368                           
  2369 ;; *************** function ___aodiv *****************
  2370 ;; Defined at:
  2371 ;;		line 9 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/aodiv.c"
  2372 ;; Parameters:    Size  Location     Type
  2373 ;;  dividend        8   11[COMRAM] long long 
  2374 ;;  divisor         8   19[COMRAM] long long 
  2375 ;; Auto vars:     Size  Location     Type
  2376 ;;  quotient        8   29[COMRAM] long long 
  2377 ;;  sign            1   28[COMRAM] unsigned char 
  2378 ;;  counter         1   27[COMRAM] unsigned char 
  2379 ;; Return value:  Size  Location     Type
  2380 ;;                  8   11[COMRAM] long long 
  2381 ;; Registers used:
  2382 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2383 ;; Tracked objects:
  2384 ;;		On entry : 0/0
  2385 ;;		On exit  : 0/0
  2386 ;;		Unchanged: 0/0
  2387 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2388 ;;      Params:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2389 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2390 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2391 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2392 ;;Total ram usage:       26 bytes
  2393 ;; Hardware stack levels used:    1
  2394 ;; Hardware stack levels required when called:    1
  2395 ;; This function calls:
  2396 ;;		Nothing
  2397 ;; This function is called by:
  2398 ;;		_dtoa
  2399 ;; This function uses a non-reentrant model
  2400 ;;
  2401                           
  2402                           	psect	text7
  2403  0017D6                     __ptext7:
  2404                           	opt callstack 0
  2405  0017D6                     ___aodiv:
  2406                           	opt callstack 25
  2407                           
  2408                           ;incstack = 0
  2409  0017D6  0E00               	movlw	0
  2410  0017D8  6E1D               	movwf	___aodiv@sign,c
  2411  0017DA  AE1B               	btfss	___aodiv@divisor+7,7,c
  2412  0017DC  D012               	goto	l2008
  2413  0017DE  1E1B               	comf	___aodiv@divisor+7,f,c
  2414  0017E0  1E1A               	comf	___aodiv@divisor+6,f,c
  2415  0017E2  1E19               	comf	___aodiv@divisor+5,f,c
  2416  0017E4  1E18               	comf	___aodiv@divisor+4,f,c
  2417  0017E6  1E17               	comf	___aodiv@divisor+3,f,c
  2418  0017E8  1E16               	comf	___aodiv@divisor+2,f,c
  2419  0017EA  1E15               	comf	___aodiv@divisor+1,f,c
  2420  0017EC  6C14               	negf	___aodiv@divisor,c
  2421  0017EE  0E00               	movlw	0
  2422  0017F0  2215               	addwfc	___aodiv@divisor+1,f,c
  2423  0017F2  2216               	addwfc	___aodiv@divisor+2,f,c
  2424  0017F4  2217               	addwfc	___aodiv@divisor+3,f,c
  2425  0017F6  2218               	addwfc	___aodiv@divisor+4,f,c
  2426  0017F8  2219               	addwfc	___aodiv@divisor+5,f,c
  2427  0017FA  221A               	addwfc	___aodiv@divisor+6,f,c
  2428  0017FC  221B               	addwfc	___aodiv@divisor+7,f,c
  2429  0017FE  0E01               	movlw	1
  2430  001800  6E1D               	movwf	___aodiv@sign,c
  2431  001802                     l2008:
  2432  001802  AE13               	btfss	___aodiv@dividend+7,7,c
  2433  001804  D012               	goto	l2014
  2434  001806  1E13               	comf	___aodiv@dividend+7,f,c
  2435  001808  1E12               	comf	___aodiv@dividend+6,f,c
  2436  00180A  1E11               	comf	___aodiv@dividend+5,f,c
  2437  00180C  1E10               	comf	___aodiv@dividend+4,f,c
  2438  00180E  1E0F               	comf	___aodiv@dividend+3,f,c
  2439  001810  1E0E               	comf	___aodiv@dividend+2,f,c
  2440  001812  1E0D               	comf	___aodiv@dividend+1,f,c
  2441  001814  6C0C               	negf	___aodiv@dividend,c
  2442  001816  0E00               	movlw	0
  2443  001818  220D               	addwfc	___aodiv@dividend+1,f,c
  2444  00181A  220E               	addwfc	___aodiv@dividend+2,f,c
  2445  00181C  220F               	addwfc	___aodiv@dividend+3,f,c
  2446  00181E  2210               	addwfc	___aodiv@dividend+4,f,c
  2447  001820  2211               	addwfc	___aodiv@dividend+5,f,c
  2448  001822  2212               	addwfc	___aodiv@dividend+6,f,c
  2449  001824  2213               	addwfc	___aodiv@dividend+7,f,c
  2450  001826  0E01               	movlw	1
  2451  001828  1A1D               	xorwf	___aodiv@sign,f,c
  2452  00182A                     l2014:
  2453  00182A  EE20  F01E         	lfsr	2,___aodiv@quotient
  2454  00182E  0E07               	movlw	7
  2455  001830                     u1431:
  2456  001830  6ADE               	clrf	postinc2,c
  2457  001832  06E8               	decf	wreg,f,c
  2458  001834  E2FD               	bc	u1431
  2459  001836  5014               	movf	___aodiv@divisor,w,c
  2460  001838  1015               	iorwf	___aodiv@divisor+1,w,c
  2461  00183A  1016               	iorwf	___aodiv@divisor+2,w,c
  2462  00183C  1017               	iorwf	___aodiv@divisor+3,w,c
  2463  00183E  1018               	iorwf	___aodiv@divisor+4,w,c
  2464  001840  1019               	iorwf	___aodiv@divisor+5,w,c
  2465  001842  101A               	iorwf	___aodiv@divisor+6,w,c
  2466  001844  101B               	iorwf	___aodiv@divisor+7,w,c
  2467  001846  B4D8               	btfsc	status,2,c
  2468  001848  D046               	goto	l2036
  2469  00184A  0E01               	movlw	1
  2470  00184C  6E1C               	movwf	___aodiv@counter,c
  2471  00184E  D00A               	goto	l2022
  2472  001850                     l2020:
  2473  001850  90D8               	bcf	status,0,c
  2474  001852  3614               	rlcf	___aodiv@divisor,f,c
  2475  001854  3615               	rlcf	___aodiv@divisor+1,f,c
  2476  001856  3616               	rlcf	___aodiv@divisor+2,f,c
  2477  001858  3617               	rlcf	___aodiv@divisor+3,f,c
  2478  00185A  3618               	rlcf	___aodiv@divisor+4,f,c
  2479  00185C  3619               	rlcf	___aodiv@divisor+5,f,c
  2480  00185E  361A               	rlcf	___aodiv@divisor+6,f,c
  2481  001860  361B               	rlcf	___aodiv@divisor+7,f,c
  2482  001862  2A1C               	incf	___aodiv@counter,f,c
  2483  001864                     l2022:
  2484  001864  AE1B               	btfss	___aodiv@divisor+7,7,c
  2485  001866  D7F4               	goto	l2020
  2486  001868                     u1450:
  2487  001868  90D8               	bcf	status,0,c
  2488  00186A  361E               	rlcf	___aodiv@quotient,f,c
  2489  00186C  361F               	rlcf	___aodiv@quotient+1,f,c
  2490  00186E  3620               	rlcf	___aodiv@quotient+2,f,c
  2491  001870  3621               	rlcf	___aodiv@quotient+3,f,c
  2492  001872  3622               	rlcf	___aodiv@quotient+4,f,c
  2493  001874  3623               	rlcf	___aodiv@quotient+5,f,c
  2494  001876  3624               	rlcf	___aodiv@quotient+6,f,c
  2495  001878  3625               	rlcf	___aodiv@quotient+7,f,c
  2496  00187A  5014               	movf	___aodiv@divisor,w,c
  2497  00187C  5C0C               	subwf	___aodiv@dividend,w,c
  2498  00187E  5015               	movf	___aodiv@divisor+1,w,c
  2499  001880  580D               	subwfb	___aodiv@dividend+1,w,c
  2500  001882  5016               	movf	___aodiv@divisor+2,w,c
  2501  001884  580E               	subwfb	___aodiv@dividend+2,w,c
  2502  001886  5017               	movf	___aodiv@divisor+3,w,c
  2503  001888  580F               	subwfb	___aodiv@dividend+3,w,c
  2504  00188A  5018               	movf	___aodiv@divisor+4,w,c
  2505  00188C  5810               	subwfb	___aodiv@dividend+4,w,c
  2506  00188E  5019               	movf	___aodiv@divisor+5,w,c
  2507  001890  5811               	subwfb	___aodiv@dividend+5,w,c
  2508  001892  501A               	movf	___aodiv@divisor+6,w,c
  2509  001894  5812               	subwfb	___aodiv@dividend+6,w,c
  2510  001896  501B               	movf	___aodiv@divisor+7,w,c
  2511  001898  5813               	subwfb	___aodiv@dividend+7,w,c
  2512  00189A  A0D8               	btfss	status,0,c
  2513  00189C  D011               	goto	l2032
  2514  00189E  5014               	movf	___aodiv@divisor,w,c
  2515  0018A0  5E0C               	subwf	___aodiv@dividend,f,c
  2516  0018A2  5015               	movf	___aodiv@divisor+1,w,c
  2517  0018A4  5A0D               	subwfb	___aodiv@dividend+1,f,c
  2518  0018A6  5016               	movf	___aodiv@divisor+2,w,c
  2519  0018A8  5A0E               	subwfb	___aodiv@dividend+2,f,c
  2520  0018AA  5017               	movf	___aodiv@divisor+3,w,c
  2521  0018AC  5A0F               	subwfb	___aodiv@dividend+3,f,c
  2522  0018AE  5018               	movf	___aodiv@divisor+4,w,c
  2523  0018B0  5A10               	subwfb	___aodiv@dividend+4,f,c
  2524  0018B2  5019               	movf	___aodiv@divisor+5,w,c
  2525  0018B4  5A11               	subwfb	___aodiv@dividend+5,f,c
  2526  0018B6  501A               	movf	___aodiv@divisor+6,w,c
  2527  0018B8  5A12               	subwfb	___aodiv@dividend+6,f,c
  2528  0018BA  501B               	movf	___aodiv@divisor+7,w,c
  2529  0018BC  5A13               	subwfb	___aodiv@dividend+7,f,c
  2530  0018BE  801E               	bsf	___aodiv@quotient,0,c
  2531  0018C0                     l2032:
  2532  0018C0  90D8               	bcf	status,0,c
  2533  0018C2  321B               	rrcf	___aodiv@divisor+7,f,c
  2534  0018C4  321A               	rrcf	___aodiv@divisor+6,f,c
  2535  0018C6  3219               	rrcf	___aodiv@divisor+5,f,c
  2536  0018C8  3218               	rrcf	___aodiv@divisor+4,f,c
  2537  0018CA  3217               	rrcf	___aodiv@divisor+3,f,c
  2538  0018CC  3216               	rrcf	___aodiv@divisor+2,f,c
  2539  0018CE  3215               	rrcf	___aodiv@divisor+1,f,c
  2540  0018D0  3214               	rrcf	___aodiv@divisor,f,c
  2541  0018D2  2E1C               	decfsz	___aodiv@counter,f,c
  2542  0018D4  D7C9               	goto	u1450
  2543  0018D6                     l2036:
  2544  0018D6  501D               	movf	___aodiv@sign,w,c
  2545  0018D8  B4D8               	btfsc	status,2,c
  2546  0018DA  D010               	goto	l2040
  2547  0018DC  1E25               	comf	___aodiv@quotient+7,f,c
  2548  0018DE  1E24               	comf	___aodiv@quotient+6,f,c
  2549  0018E0  1E23               	comf	___aodiv@quotient+5,f,c
  2550  0018E2  1E22               	comf	___aodiv@quotient+4,f,c
  2551  0018E4  1E21               	comf	___aodiv@quotient+3,f,c
  2552  0018E6  1E20               	comf	___aodiv@quotient+2,f,c
  2553  0018E8  1E1F               	comf	___aodiv@quotient+1,f,c
  2554  0018EA  6C1E               	negf	___aodiv@quotient,c
  2555  0018EC  0E00               	movlw	0
  2556  0018EE  221F               	addwfc	___aodiv@quotient+1,f,c
  2557  0018F0  2220               	addwfc	___aodiv@quotient+2,f,c
  2558  0018F2  2221               	addwfc	___aodiv@quotient+3,f,c
  2559  0018F4  2222               	addwfc	___aodiv@quotient+4,f,c
  2560  0018F6  2223               	addwfc	___aodiv@quotient+5,f,c
  2561  0018F8  2224               	addwfc	___aodiv@quotient+6,f,c
  2562  0018FA  2225               	addwfc	___aodiv@quotient+7,f,c
  2563  0018FC                     l2040:
  2564  0018FC  C01E  F00C         	movff	___aodiv@quotient,?___aodiv
  2565  001900  C01F  F00D         	movff	___aodiv@quotient+1,?___aodiv+1
  2566  001904  C020  F00E         	movff	___aodiv@quotient+2,?___aodiv+2
  2567  001908  C021  F00F         	movff	___aodiv@quotient+3,?___aodiv+3
  2568  00190C  C022  F010         	movff	___aodiv@quotient+4,?___aodiv+4
  2569  001910  C023  F011         	movff	___aodiv@quotient+5,?___aodiv+5
  2570  001914  C024  F012         	movff	___aodiv@quotient+6,?___aodiv+6
  2571  001918  C025  F013         	movff	___aodiv@quotient+7,?___aodiv+7
  2572  00191C  0012               	return		;funcret
  2573  00191E                     __end_of___aodiv:
  2574                           	opt callstack 0
  2575                           
  2576 ;; *************** function _ctoa *****************
  2577 ;; Defined at:
  2578 ;;		line 259 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;  fp              2   42[COMRAM] PTR struct _IO_FILE
  2581 ;;		 -> NULL(0), 
  2582 ;;  c               1   44[COMRAM] unsigned char 
  2583 ;; Auto vars:     Size  Location     Type
  2584 ;;  w               2   45[COMRAM] int 
  2585 ;;  l               2    0        int 
  2586 ;; Return value:  Size  Location     Type
  2587 ;;                  2   42[COMRAM] int 
  2588 ;; Registers used:
  2589 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2590 ;; Tracked objects:
  2591 ;;		On entry : 0/0
  2592 ;;		On exit  : 0/0
  2593 ;;		Unchanged: 0/0
  2594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2595 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2596 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2598 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2599 ;;Total ram usage:        5 bytes
  2600 ;; Hardware stack levels used:    1
  2601 ;; Hardware stack levels required when called:    8
  2602 ;; This function calls:
  2603 ;;		_pad
  2604 ;; This function is called by:
  2605 ;;		_vfpfcnvrt
  2606 ;; This function uses a non-reentrant model
  2607 ;;
  2608                           
  2609                           	psect	text8
  2610  001D02                     __ptext8:
  2611                           	opt callstack 0
  2612  001D02                     _ctoa:
  2613                           	opt callstack 19
  2614                           
  2615                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 259: static int ctoa
      +                          (FILE *fp, char c);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 26
      +                          0: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 261:     int l, 
      +                          w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 264:     w = width
      +                           ? width - 1 : width;
  2616                           
  2617                           ;incstack = 0
  2618  001D02  506E               	movf	_width,w,c
  2619  001D04  106F               	iorwf	_width+1,w,c
  2620  001D06  A4D8               	btfss	status,2,c
  2621  001D08  D005               	goto	l2084
  2622  001D0A  C06E  F02E         	movff	_width,ctoa@w
  2623  001D0E  C06F  F02F         	movff	_width+1,ctoa@w+1
  2624  001D12  D006               	goto	l2086
  2625  001D14                     l2084:
  2626  001D14  0EFF               	movlw	255
  2627  001D16  246E               	addwf	_width,w,c
  2628  001D18  6E2E               	movwf	ctoa@w,c
  2629  001D1A  0EFF               	movlw	255
  2630  001D1C  206F               	addwfc	_width+1,w,c
  2631  001D1E  6E2F               	movwf	ctoa@w+1,c
  2632  001D20                     l2086:
  2633                           
  2634                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 267:     dbuf[0] = c
      +                          ;
  2635  001D20  C02D  F0D8         	movff	ctoa@c,_dbuf
  2636                           
  2637                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 268:     dbuf[1] = '
      +                          \0';
  2638  001D24  0E00               	movlw	0
  2639  001D26  0100               	movlb	0	; () banked
  2640  001D28  6FD9               	movwf	(_dbuf+1)& (0+255),b
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 269:     return pad(
      +                          fp, &dbuf[0], w);
  2644  001D2A  C02B  F020         	movff	ctoa@fp,pad@fp
  2645  001D2E  C02C  F021         	movff	ctoa@fp+1,pad@fp+1
  2646  001D32  0ED8               	movlw	low _dbuf
  2647  001D34  6E22               	movwf	pad@buf,c
  2648  001D36  0E00               	movlw	high _dbuf
  2649  001D38  6E23               	movwf	pad@buf+1,c
  2650  001D3A  C02E  F024         	movff	ctoa@w,pad@p
  2651  001D3E  C02F  F025         	movff	ctoa@w+1,pad@p+1
  2652  001D42  EC77  F00D         	call	_pad	;wreg free
  2653  001D46  C020  F02B         	movff	?_pad,?_ctoa
  2654  001D4A  C021  F02C         	movff	?_pad+1,?_ctoa+1
  2655  001D4E  0012               	return		;funcret
  2656  001D50                     __end_of_ctoa:
  2657                           	opt callstack 0
  2658                           
  2659 ;; *************** function _pad *****************
  2660 ;; Defined at:
  2661 ;;		line 72 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c"
  2662 ;; Parameters:    Size  Location     Type
  2663 ;;  fp              2   31[COMRAM] PTR struct _IO_FILE
  2664 ;;		 -> NULL(0), 
  2665 ;;  buf             2   33[COMRAM] PTR unsigned char 
  2666 ;;		 -> dbuf(32), 
  2667 ;;  p               2   35[COMRAM] int 
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;  w               2   40[COMRAM] int 
  2670 ;;  i               2   38[COMRAM] int 
  2671 ;; Return value:  Size  Location     Type
  2672 ;;                  2   31[COMRAM] int 
  2673 ;; Registers used:
  2674 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2675 ;; Tracked objects:
  2676 ;;		On entry : 0/0
  2677 ;;		On exit  : 0/0
  2678 ;;		Unchanged: 0/0
  2679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2680 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2681 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2682 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2683 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2684 ;;Total ram usage:       11 bytes
  2685 ;; Hardware stack levels used:    1
  2686 ;; Hardware stack levels required when called:    7
  2687 ;; This function calls:
  2688 ;;		_fputc
  2689 ;;		_fputs
  2690 ;;		_strlen
  2691 ;; This function is called by:
  2692 ;;		_ctoa
  2693 ;;		_dtoa
  2694 ;; This function uses a non-reentrant model
  2695 ;;
  2696                           
  2697                           	psect	text9
  2698  001AEE                     __ptext9:
  2699                           	opt callstack 0
  2700  001AEE                     _pad:
  2701                           	opt callstack 19
  2702                           
  2703                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 72: static int pad(F
      +                          ILE *fp, char *buf, int p);/Applications/microchip/xc8/v2.05/pic/sources/c99/common/dopr
      +                          nt.c: 73: {;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 74:     i
      +                          nt i, w;;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 77:     if (
      +                          flags & (1 << 0)) {
  2704                           
  2705                           ;incstack = 0
  2706  001AEE  A072               	btfss	_flags,0,c
  2707  001AF0  D00A               	goto	l1978
  2708                           
  2709                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 78:         fputs((c
      +                          onst char *)buf, fp);
  2710  001AF2  C022  F019         	movff	pad@buf,fputs@s
  2711  001AF6  C023  F01A         	movff	pad@buf+1,fputs@s+1
  2712  001AFA  C020  F01B         	movff	pad@fp,fputs@fp
  2713  001AFE  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  2714  001B02  ECCD  F00E         	call	_fputs	;wreg free
  2715  001B06                     l1978:
  2716                           
  2717                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 82:     w = (p < 0) 
      +                          ? 0 : p;
  2718  001B06  BE25               	btfsc	pad@p+1,7,c
  2719  001B08  D005               	goto	l1982
  2720  001B0A  C024  F029         	movff	pad@p,pad@w
  2721  001B0E  C025  F02A         	movff	pad@p+1,pad@w+1
  2722  001B12  D004               	goto	l153
  2723  001B14                     l1982:
  2724  001B14  0E00               	movlw	0
  2725  001B16  6E2A               	movwf	pad@w+1,c
  2726  001B18  0E00               	movlw	0
  2727  001B1A  6E29               	movwf	pad@w,c
  2728  001B1C                     l153:
  2729                           
  2730                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 83:     i = 0;
  2731  001B1C  0E00               	movlw	0
  2732  001B1E  6E28               	movwf	pad@i+1,c
  2733  001B20  0E00               	movlw	0
  2734  001B22  6E27               	movwf	pad@i,c
  2735                           
  2736                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  2737  001B24  D00C               	goto	l1988
  2738  001B26                     l1984:
  2739                           
  2740                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 85:         fputc(' 
      +                          ', fp);
  2741  001B26  0E00               	movlw	0
  2742  001B28  6E11               	movwf	fputc@c+1,c
  2743  001B2A  0E20               	movlw	32
  2744  001B2C  6E10               	movwf	fputc@c,c
  2745  001B2E  C020  F012         	movff	pad@fp,fputc@fp
  2746  001B32  C021  F013         	movff	pad@fp+1,fputc@fp+1
  2747  001B36  ECC2  F00D         	call	_fputc	;wreg free
  2748                           
  2749                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 86:         ++i;
  2750  001B3A  4A27               	infsnz	pad@i,f,c
  2751  001B3C  2A28               	incf	pad@i+1,f,c
  2752  001B3E                     l1988:
  2753                           
  2754                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 84:     while (i < w
      +                          ) {
  2755  001B3E  5029               	movf	pad@w,w,c
  2756  001B40  5C27               	subwf	pad@i,w,c
  2757  001B42  5028               	movf	pad@i+1,w,c
  2758  001B44  0A80               	xorlw	128
  2759  001B46  6E26               	movwf	??_pad& (0+255),c
  2760  001B48  502A               	movf	pad@w+1,w,c
  2761  001B4A  0A80               	xorlw	128
  2762  001B4C  5826               	subwfb	??_pad& (0+255),w,c
  2763  001B4E  A0D8               	btfss	status,0,c
  2764  001B50  D7EA               	goto	l1984
  2765                           
  2766                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 90:     if (!(flags 
      +                          & (1 << 0))) {
  2767  001B52  B072               	btfsc	_flags,0,c
  2768  001B54  D00A               	goto	l1992
  2769                           
  2770                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 91:         fputs((c
      +                          onst char *)buf, fp);
  2771  001B56  C022  F019         	movff	pad@buf,fputs@s
  2772  001B5A  C023  F01A         	movff	pad@buf+1,fputs@s+1
  2773  001B5E  C020  F01B         	movff	pad@fp,fputs@fp
  2774  001B62  C021  F01C         	movff	pad@fp+1,fputs@fp+1
  2775  001B66  ECCD  F00E         	call	_fputs	;wreg free
  2776  001B6A                     l1992:
  2777                           
  2778                           ;/Applications/microchip/xc8/v2.05/pic/sources/c99/common/doprnt.c: 94:     return strle
      +                          n(buf) + w;
  2779  001B6A  C022  F00C         	movff	pad@buf,strlen@s
  2780  001B6E  C023  F00D         	movff	pad@buf+1,strlen@s+1
  2781  001B72  EC02  F00F         	call	_strlen	;wreg free
  2782  001B76  5029               	movf	pad@w,w,c
  2783  001B78  240C               	addwf	?_strlen,w,c
  2784  001B7A  6E20               	movwf	?_pad,c
  2785  001B7C  502A               	movf	pad@w+1,w,c
  2786  001B7E  200D               	addwfc	?_strlen+1,w,c
  2787  001B80  6E21               	movwf	?_pad+1,c
  2788  001B82  0012               	return		;funcret
  2789  001B84                     __end_of_pad:
  2790                           	opt callstack 0
  2791                           
  2792 ;; *************** function _strlen *****************
  2793 ;; Defined at:
  2794 ;;		line 12 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/strlen.c"
  2795 ;; Parameters:    Size  Location     Type
  2796 ;;  s               2   11[COMRAM] PTR const unsigned char 
  2797 ;;		 -> dbuf(32), 
  2798 ;; Auto vars:     Size  Location     Type
  2799 ;;  a               2   13[COMRAM] PTR const unsigned char 
  2800 ;;		 -> dbuf(32), 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  2   11[COMRAM] unsigned int 
  2803 ;; Registers used:
  2804 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2810 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2811 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2813 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2814 ;;Total ram usage:        4 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    1
  2817 ;; This function calls:
  2818 ;;		Nothing
  2819 ;; This function is called by:
  2820 ;;		_pad
  2821 ;; This function uses a non-reentrant model
  2822 ;;
  2823                           
  2824                           	psect	text10
  2825  001E04                     __ptext10:
  2826                           	opt callstack 0
  2827  001E04                     _strlen:
  2828                           	opt callstack 24
  2829                           
  2830                           ;incstack = 0
  2831  001E04  C00C  F00E         	movff	strlen@s,strlen@a
  2832  001E08  C00D  F00F         	movff	strlen@s+1,strlen@a+1
  2833  001E0C  D002               	goto	l1968
  2834  001E0E                     l1966:
  2835  001E0E  4A0C               	infsnz	strlen@s,f,c
  2836  001E10  2A0D               	incf	strlen@s+1,f,c
  2837  001E12                     l1968:
  2838  001E12  C00C  FFD9         	movff	strlen@s,fsr2l
  2839  001E16  C00D  FFDA         	movff	strlen@s+1,fsr2h
  2840  001E1A  50DF               	movf	indf2,w,c
  2841  001E1C  A4D8               	btfss	status,2,c
  2842  001E1E  D7F7               	goto	l1966
  2843  001E20  500E               	movf	strlen@a,w,c
  2844  001E22  5C0C               	subwf	strlen@s,w,c
  2845  001E24  6E0C               	movwf	?_strlen,c
  2846  001E26  500F               	movf	strlen@a+1,w,c
  2847  001E28  580D               	subwfb	strlen@s+1,w,c
  2848  001E2A  6E0D               	movwf	?_strlen+1,c
  2849  001E2C  0012               	return		;funcret
  2850  001E2E                     __end_of_strlen:
  2851                           	opt callstack 0
  2852                           
  2853 ;; *************** function _fputs *****************
  2854 ;; Defined at:
  2855 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputs.c"
  2856 ;; Parameters:    Size  Location     Type
  2857 ;;  s               2   24[COMRAM] PTR const unsigned char 
  2858 ;;		 -> dbuf(32), 
  2859 ;;  fp              2   26[COMRAM] PTR struct _IO_FILE
  2860 ;;		 -> NULL(0), 
  2861 ;; Auto vars:     Size  Location     Type
  2862 ;;  i               2   29[COMRAM] int 
  2863 ;;  c               1   28[COMRAM] unsigned char 
  2864 ;; Return value:  Size  Location     Type
  2865 ;;                  2   24[COMRAM] int 
  2866 ;; Registers used:
  2867 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2868 ;; Tracked objects:
  2869 ;;		On entry : 0/0
  2870 ;;		On exit  : 0/0
  2871 ;;		Unchanged: 0/0
  2872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2873 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2874 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2876 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2877 ;;Total ram usage:        7 bytes
  2878 ;; Hardware stack levels used:    1
  2879 ;; Hardware stack levels required when called:    6
  2880 ;; This function calls:
  2881 ;;		_fputc
  2882 ;; This function is called by:
  2883 ;;		_pad
  2884 ;; This function uses a non-reentrant model
  2885 ;;
  2886                           
  2887                           	psect	text11
  2888  001D9A                     __ptext11:
  2889                           	opt callstack 0
  2890  001D9A                     _fputs:
  2891                           	opt callstack 19
  2892                           
  2893                           ;incstack = 0
  2894  001D9A  0E00               	movlw	0
  2895  001D9C  6E1F               	movwf	fputs@i+1,c
  2896  001D9E  0E00               	movlw	0
  2897  001DA0  6E1E               	movwf	fputs@i,c
  2898  001DA2  D00B               	goto	l1962
  2899  001DA4                     l1958:
  2900  001DA4  C01D  F010         	movff	fputs@c,fputc@c
  2901  001DA8  6A11               	clrf	fputc@c+1,c
  2902  001DAA  C01B  F012         	movff	fputs@fp,fputc@fp
  2903  001DAE  C01C  F013         	movff	fputs@fp+1,fputc@fp+1
  2904  001DB2  ECC2  F00D         	call	_fputc	;wreg free
  2905  001DB6  4A1E               	infsnz	fputs@i,f,c
  2906  001DB8  2A1F               	incf	fputs@i+1,f,c
  2907  001DBA                     l1962:
  2908  001DBA  501E               	movf	fputs@i,w,c
  2909  001DBC  2419               	addwf	fputs@s,w,c
  2910  001DBE  6ED9               	movwf	fsr2l,c
  2911  001DC0  501F               	movf	fputs@i+1,w,c
  2912  001DC2  201A               	addwfc	fputs@s+1,w,c
  2913  001DC4  6EDA               	movwf	fsr2h,c
  2914  001DC6  50DF               	movf	indf2,w,c
  2915  001DC8  6E1D               	movwf	fputs@c,c
  2916  001DCA  501D               	movf	fputs@c,w,c
  2917  001DCC  B4D8               	btfsc	status,2,c
  2918  001DCE  0012               	return	
  2919  001DD0  D7E9               	goto	l1958
  2920  001DD2                     __end_of_fputs:
  2921                           	opt callstack 0
  2922                           
  2923 ;; *************** function _fputc *****************
  2924 ;; Defined at:
  2925 ;;		line 8 in file "/Applications/microchip/xc8/v2.05/pic/sources/c99/common/nf_fputc.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;  c               2   15[COMRAM] int 
  2928 ;;  fp              2   17[COMRAM] PTR struct _IO_FILE
  2929 ;;		 -> NULL(0), 
  2930 ;; Auto vars:     Size  Location     Type
  2931 ;;		None
  2932 ;; Return value:  Size  Location     Type
  2933 ;;                  2   15[COMRAM] int 
  2934 ;; Registers used:
  2935 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2936 ;; Tracked objects:
  2937 ;;		On entry : 0/0
  2938 ;;		On exit  : 0/0
  2939 ;;		Unchanged: 0/0
  2940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2941 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2943 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;Total ram usage:        9 bytes
  2946 ;; Hardware stack levels used:    1
  2947 ;; Hardware stack levels required when called:    5
  2948 ;; This function calls:
  2949 ;;		_putch
  2950 ;; This function is called by:
  2951 ;;		_pad
  2952 ;;		_vfpfcnvrt
  2953 ;;		_fputs
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           	psect	text12
  2958  001B84                     __ptext12:
  2959                           	opt callstack 0
  2960  001B84                     _fputc:
  2961                           	opt callstack 22
  2962                           
  2963                           ;incstack = 0
  2964  001B84  5012               	movf	fputc@fp,w,c
  2965  001B86  1013               	iorwf	fputc@fp+1,w,c
  2966  001B88  B4D8               	btfsc	status,2,c
  2967  001B8A  D004               	goto	u1310
  2968  001B8C  5012               	movf	fputc@fp,w,c
  2969  001B8E  1013               	iorwf	fputc@fp+1,w,c
  2970  001B90  A4D8               	btfss	status,2,c
  2971  001B92  D004               	goto	l1948
  2972  001B94                     u1310:
  2973  001B94  5010               	movf	fputc@c,w,c
  2974  001B96  EC54  F00F         	call	_putch
  2975  001B9A  0012               	return	
  2976  001B9C                     l1948:
  2977  001B9C  EE20 F004          	lfsr	2,4
  2978  001BA0  5012               	movf	fputc@fp,w,c
  2979  001BA2  26D9               	addwf	fsr2l,f,c
  2980  001BA4  5013               	movf	fputc@fp+1,w,c
  2981  001BA6  22DA               	addwfc	fsr2h,f,c
  2982  001BA8  50DE               	movf	postinc2,w,c
  2983  001BAA  10DE               	iorwf	postinc2,w,c
  2984  001BAC  B4D8               	btfsc	status,2,c
  2985  001BAE  D016               	goto	u1330
  2986  001BB0  EE20 F004          	lfsr	2,4
  2987  001BB4  5012               	movf	fputc@fp,w,c
  2988  001BB6  26D9               	addwf	fsr2l,f,c
  2989  001BB8  5013               	movf	fputc@fp+1,w,c
  2990  001BBA  22DA               	addwfc	fsr2h,f,c
  2991  001BBC  EE10 F002          	lfsr	1,2
  2992  001BC0  5012               	movf	fputc@fp,w,c
  2993  001BC2  26E1               	addwf	fsr1l,f,c
  2994  001BC4  5013               	movf	fputc@fp+1,w,c
  2995  001BC6  22E2               	addwfc	fsr1h,f,c
  2996  001BC8  50DE               	movf	postinc2,w,c
  2997  001BCA  5CE6               	subwf	postinc1,w,c
  2998  001BCC  50E6               	movf	postinc1,w,c
  2999  001BCE  0A80               	xorlw	128
  3000  001BD0  6E18               	movwf	(??_fputc+4)& (0+255),c
  3001  001BD2  50DE               	movf	postinc2,w,c
  3002  001BD4  0A80               	xorlw	128
  3003  001BD6  5818               	subwfb	(??_fputc+4)& (0+255),w,c
  3004  001BD8  B0D8               	btfsc	status,0,c
  3005  001BDA  0012               	return	
  3006  001BDC                     u1330:
  3007  001BDC  EE20 F002          	lfsr	2,2
  3008  001BE0  5012               	movf	fputc@fp,w,c
  3009  001BE2  26D9               	addwf	fsr2l,f,c
  3010  001BE4  5013               	movf	fputc@fp+1,w,c
  3011  001BE6  22DA               	addwfc	fsr2h,f,c
  3012  001BE8  2ADE               	incf	postinc2,f,c
  3013  001BEA  0E00               	movlw	0
  3014  001BEC  22DD               	addwfc	postdec2,f,c
  3015  001BEE  0012               	return		;funcret
  3016  001BF0                     __end_of_fputc:
  3017                           	opt callstack 0
  3018                           
  3019 ;; *************** function _putch *****************
  3020 ;; Defined at:
  3021 ;;		line 102 in file "lcd.c"
  3022 ;; Parameters:    Size  Location     Type
  3023 ;;  data            1    wreg     unsigned char 
  3024 ;; Auto vars:     Size  Location     Type
  3025 ;;  data            1   14[COMRAM] unsigned char 
  3026 ;; Return value:  Size  Location     Type
  3027 ;;                  1    wreg      void 
  3028 ;; Registers used:
  3029 ;;		wreg, status,2, status,0, cstack
  3030 ;; Tracked objects:
  3031 ;;		On entry : 0/0
  3032 ;;		On exit  : 0/0
  3033 ;;		Unchanged: 0/0
  3034 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3035 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3036 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3037 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3038 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3039 ;;Total ram usage:        1 bytes
  3040 ;; Hardware stack levels used:    1
  3041 ;; Hardware stack levels required when called:    4
  3042 ;; This function calls:
  3043 ;;		_send_byte
  3044 ;; This function is called by:
  3045 ;;		_fputc
  3046 ;; This function uses a non-reentrant model
  3047 ;;
  3048                           
  3049                           	psect	text13
  3050  001EA8                     __ptext13:
  3051                           	opt callstack 0
  3052  001EA8                     _putch:
  3053                           	opt callstack 22
  3054                           
  3055                           ;incstack = 0
  3056                           ;putch@data stored from wreg
  3057  001EA8  6E0F               	movwf	putch@data,c
  3058                           
  3059                           ;lcd.c: 103:     LATDbits.LATD2 = 1;
  3060  001EAA  848C               	bsf	3980,2,c	;volatile
  3061                           
  3062                           ;lcd.c: 104:     send_byte((unsigned char)data);
  3063  001EAC  500F               	movf	putch@data,w,c
  3064  001EAE  EC4B  F00F         	call	_send_byte
  3065  001EB2  0012               	return		;funcret
  3066  001EB4                     __end_of_putch:
  3067                           	opt callstack 0
  3068                           
  3069 ;; *************** function _initLCD *****************
  3070 ;; Defined at:
  3071 ;;		line 69 in file "lcd.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;		None
  3074 ;; Auto vars:     Size  Location     Type
  3075 ;;		None
  3076 ;; Return value:  Size  Location     Type
  3077 ;;                  1    wreg      void 
  3078 ;; Registers used:
  3079 ;;		wreg, status,2, status,0, cstack
  3080 ;; Tracked objects:
  3081 ;;		On entry : 0/0
  3082 ;;		On exit  : 0/0
  3083 ;;		Unchanged: 0/0
  3084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3087 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3088 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3089 ;;Total ram usage:        1 bytes
  3090 ;; Hardware stack levels used:    1
  3091 ;; Hardware stack levels required when called:    5
  3092 ;; This function calls:
  3093 ;;		_lcdInst
  3094 ;;		_send_byte
  3095 ;;		_send_nibble
  3096 ;; This function is called by:
  3097 ;;		_main
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           	psect	text14
  3102  001BF0                     __ptext14:
  3103                           	opt callstack 0
  3104  001BF0                     _initLCD:
  3105                           	opt callstack 25
  3106                           
  3107                           ;lcd.c: 70:     _delay((unsigned long)((15)*(10000000/4000.0)));
  3108                           
  3109                           ;incstack = 0
  3110  001BF0  0E31               	movlw	49
  3111  001BF2  6E10               	movwf	??_initLCD& (0+255),c
  3112  001BF4  0EB2               	movlw	178
  3113  001BF6                     u1977:
  3114  001BF6  2EE8               	decfsz	wreg,f,c
  3115  001BF8  D7FE               	bra	u1977
  3116  001BFA  2E10               	decfsz	??_initLCD& (0+255),f,c
  3117  001BFC  D7FC               	bra	u1977
  3118  001BFE  D000               	nop2	
  3119                           
  3120                           ;lcd.c: 72:     LATDbits.LATD2 = 0;
  3121  001C00  948C               	bcf	3980,2,c	;volatile
  3122                           
  3123                           ;lcd.c: 74:     send_nibble(0b0011);
  3124  001C02  0E03               	movlw	3
  3125  001C04  EC40  F00F         	call	_send_nibble
  3126                           
  3127                           ;lcd.c: 75:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3128  001C08  0E11               	movlw	17
  3129  001C0A  6E10               	movwf	??_initLCD& (0+255),c
  3130  001C0C  0E3A               	movlw	58
  3131  001C0E                     u1987:
  3132  001C0E  2EE8               	decfsz	wreg,f,c
  3133  001C10  D7FE               	bra	u1987
  3134  001C12  2E10               	decfsz	??_initLCD& (0+255),f,c
  3135  001C14  D7FC               	bra	u1987
  3136  001C16  D000               	nop2	
  3137                           
  3138                           ;lcd.c: 76:     send_nibble(0b0011);
  3139  001C18  0E03               	movlw	3
  3140  001C1A  EC40  F00F         	call	_send_nibble
  3141                           
  3142                           ;lcd.c: 77:     _delay((unsigned long)((150)*(10000000/4000000.0)));
  3143  001C1E  0E7D               	movlw	125
  3144  001C20                     u1997:
  3145  001C20  2EE8               	decfsz	wreg,f,c
  3146  001C22  D7FE               	bra	u1997
  3147                           
  3148                           ;lcd.c: 78:     send_byte(0b00110010);
  3149  001C24  0E32               	movlw	50
  3150  001C26  EC4B  F00F         	call	_send_byte
  3151                           
  3152                           ;lcd.c: 80:     send_byte(0b00101000);
  3153  001C2A  0E28               	movlw	40
  3154  001C2C  EC4B  F00F         	call	_send_byte
  3155                           
  3156                           ;lcd.c: 81:     send_byte(0b00001000);
  3157  001C30  0E08               	movlw	8
  3158  001C32  EC4B  F00F         	call	_send_byte
  3159                           
  3160                           ;lcd.c: 82:     send_byte(0b00000001);
  3161  001C36  0E01               	movlw	1
  3162  001C38  EC4B  F00F         	call	_send_byte
  3163                           
  3164                           ;lcd.c: 83:     _delay((unsigned long)((5)*(10000000/4000.0)));
  3165  001C3C  0E11               	movlw	17
  3166  001C3E  6E10               	movwf	??_initLCD& (0+255),c
  3167  001C40  0E3A               	movlw	58
  3168  001C42                     u2007:
  3169  001C42  2EE8               	decfsz	wreg,f,c
  3170  001C44  D7FE               	bra	u2007
  3171  001C46  2E10               	decfsz	??_initLCD& (0+255),f,c
  3172  001C48  D7FC               	bra	u2007
  3173  001C4A  D000               	nop2	
  3174                           
  3175                           ;lcd.c: 84:     send_byte(0b00000110);
  3176  001C4C  0E06               	movlw	6
  3177  001C4E  EC4B  F00F         	call	_send_byte
  3178                           
  3179                           ;lcd.c: 87:     { lcdInst( (unsigned char)(8 | (1 << 2) | (1 << 1) | 1) );};
  3180  001C52  0E0F               	movlw	15
  3181  001C54  EC5A  F00F         	call	_lcdInst
  3182  001C58  0012               	return		;funcret
  3183  001C5A                     __end_of_initLCD:
  3184                           	opt callstack 0
  3185                           
  3186 ;; *************** function _lcdInst *****************
  3187 ;; Defined at:
  3188 ;;		line 64 in file "lcd.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  data            1    wreg     unsigned char 
  3191 ;; Auto vars:     Size  Location     Type
  3192 ;;  data            1   14[COMRAM] unsigned char 
  3193 ;; Return value:  Size  Location     Type
  3194 ;;                  1    wreg      void 
  3195 ;; Registers used:
  3196 ;;		wreg, status,2, status,0, cstack
  3197 ;; Tracked objects:
  3198 ;;		On entry : 0/0
  3199 ;;		On exit  : 0/0
  3200 ;;		Unchanged: 0/0
  3201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3203 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3205 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3206 ;;Total ram usage:        1 bytes
  3207 ;; Hardware stack levels used:    1
  3208 ;; Hardware stack levels required when called:    4
  3209 ;; This function calls:
  3210 ;;		_send_byte
  3211 ;; This function is called by:
  3212 ;;		_initLCD
  3213 ;;		_main
  3214 ;;		_lcd_shift_cursor
  3215 ;;		_lcd_shift_display
  3216 ;; This function uses a non-reentrant model
  3217 ;;
  3218                           
  3219                           	psect	text15
  3220  001EB4                     __ptext15:
  3221                           	opt callstack 0
  3222  001EB4                     _lcdInst:
  3223                           	opt callstack 26
  3224                           
  3225                           ;incstack = 0
  3226                           ;lcdInst@data stored from wreg
  3227  001EB4  6E0F               	movwf	lcdInst@data,c
  3228                           
  3229                           ;lcd.c: 65:     LATDbits.LATD2 = 0;
  3230  001EB6  948C               	bcf	3980,2,c	;volatile
  3231                           
  3232                           ;lcd.c: 66:     send_byte(data);
  3233  001EB8  500F               	movf	lcdInst@data,w,c
  3234  001EBA  EC4B  F00F         	call	_send_byte
  3235  001EBE  0012               	return		;funcret
  3236  001EC0                     __end_of_lcdInst:
  3237                           	opt callstack 0
  3238                           
  3239 ;; *************** function _send_byte *****************
  3240 ;; Defined at:
  3241 ;;		line 55 in file "lcd.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  data            1    wreg     unsigned char 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  data            1   13[COMRAM] unsigned char 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      void 
  3248 ;; Registers used:
  3249 ;;		wreg, status,2, status,0, cstack
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;Total ram usage:        1 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    3
  3262 ;; This function calls:
  3263 ;;		_send_nibble
  3264 ;; This function is called by:
  3265 ;;		_lcdInst
  3266 ;;		_initLCD
  3267 ;;		_putch
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text16
  3272  001E96                     __ptext16:
  3273                           	opt callstack 0
  3274  001E96                     _send_byte:
  3275                           	opt callstack 22
  3276                           
  3277                           ;incstack = 0
  3278                           ;send_byte@data stored from wreg
  3279  001E96  6E0E               	movwf	send_byte@data,c
  3280                           
  3281                           ;lcd.c: 57:     send_nibble(data >> 4);
  3282  001E98  380E               	swapf	send_byte@data,w,c
  3283  001E9A  0B0F               	andlw	15
  3284  001E9C  EC40  F00F         	call	_send_nibble
  3285                           
  3286                           ;lcd.c: 60:     send_nibble(data);
  3287  001EA0  500E               	movf	send_byte@data,w,c
  3288  001EA2  EC40  F00F         	call	_send_nibble
  3289  001EA6  0012               	return		;funcret
  3290  001EA8                     __end_of_send_byte:
  3291                           	opt callstack 0
  3292                           
  3293 ;; *************** function _send_nibble *****************
  3294 ;; Defined at:
  3295 ;;		line 44 in file "lcd.c"
  3296 ;; Parameters:    Size  Location     Type
  3297 ;;  data            1    wreg     unsigned char 
  3298 ;; Auto vars:     Size  Location     Type
  3299 ;;  data            1   12[COMRAM] unsigned char 
  3300 ;; Return value:  Size  Location     Type
  3301 ;;                  1    wreg      void 
  3302 ;; Registers used:
  3303 ;;		wreg, status,2, status,0, cstack
  3304 ;; Tracked objects:
  3305 ;;		On entry : 0/0
  3306 ;;		On exit  : 0/0
  3307 ;;		Unchanged: 0/0
  3308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3312 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3313 ;;Total ram usage:        1 bytes
  3314 ;; Hardware stack levels used:    1
  3315 ;; Hardware stack levels required when called:    2
  3316 ;; This function calls:
  3317 ;;		_pulse_e
  3318 ;; This function is called by:
  3319 ;;		_send_byte
  3320 ;;		_initLCD
  3321 ;; This function uses a non-reentrant model
  3322 ;;
  3323                           
  3324                           	psect	text17
  3325  001E80                     __ptext17:
  3326                           	opt callstack 0
  3327  001E80                     _send_nibble:
  3328                           	opt callstack 22
  3329                           
  3330                           ;incstack = 0
  3331                           ;send_nibble@data stored from wreg
  3332  001E80  6E0D               	movwf	send_nibble@data,c
  3333                           
  3334                           ;lcd.c: 46:     LATD = (unsigned char)(LATD & 0x0F);
  3335  001E82  508C               	movf	3980,w,c	;volatile
  3336  001E84  0B0F               	andlw	15
  3337  001E86  6E8C               	movwf	3980,c	;volatile
  3338                           
  3339                           ;lcd.c: 47:     LATD = (unsigned char)((data << 4) | LATD);
  3340  001E88  380D               	swapf	send_nibble@data,w,c
  3341  001E8A  0BF0               	andlw	240
  3342  001E8C  108C               	iorwf	3980,w,c	;volatile
  3343  001E8E  6E8C               	movwf	3980,c	;volatile
  3344                           
  3345                           ;lcd.c: 48:     pulse_e();
  3346  001E90  EC17  F00F         	call	_pulse_e	;wreg free
  3347  001E94  0012               	return		;funcret
  3348  001E96                     __end_of_send_nibble:
  3349                           	opt callstack 0
  3350                           
  3351 ;; *************** function _pulse_e *****************
  3352 ;; Defined at:
  3353 ;;		line 28 in file "lcd.c"
  3354 ;; Parameters:    Size  Location     Type
  3355 ;;		None
  3356 ;; Auto vars:     Size  Location     Type
  3357 ;;  interruptSta    1   11[COMRAM] unsigned char 
  3358 ;; Return value:  Size  Location     Type
  3359 ;;                  1    wreg      void 
  3360 ;; Registers used:
  3361 ;;		wreg
  3362 ;; Tracked objects:
  3363 ;;		On entry : 0/0
  3364 ;;		On exit  : 0/0
  3365 ;;		Unchanged: 0/0
  3366 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3367 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3368 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3369 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;Total ram usage:        1 bytes
  3372 ;; Hardware stack levels used:    1
  3373 ;; Hardware stack levels required when called:    1
  3374 ;; This function calls:
  3375 ;;		Nothing
  3376 ;; This function is called by:
  3377 ;;		_send_nibble
  3378 ;; This function uses a non-reentrant model
  3379 ;;
  3380                           
  3381                           	psect	text18
  3382  001E2E                     __ptext18:
  3383                           	opt callstack 0
  3384  001E2E                     _pulse_e:
  3385                           	opt callstack 22
  3386                           
  3387                           ;lcd.c: 29:     unsigned char interruptState = INTCONbits.GIE;
  3388                           
  3389                           ;incstack = 0
  3390  001E2E  0E00               	movlw	0
  3391  001E30  BEF2               	btfsc	4082,7,c	;volatile
  3392  001E32  0E01               	movlw	1
  3393  001E34  6E0C               	movwf	pulse_e@interruptState,c
  3394                           
  3395                           ;lcd.c: 30:     (INTCONbits.GIE = 0);
  3396  001E36  9EF2               	bcf	4082,7,c	;volatile
  3397                           
  3398                           ;lcd.c: 31:     LATDbits.LATD3 = 1;
  3399  001E38  868C               	bsf	3980,3,c	;volatile
  3400                           
  3401                           ;lcd.c: 34:     _delay((unsigned long)((25)*(10000000/4000000.0)));
  3402  001E3A  0E14               	movlw	20
  3403  001E3C                     u2017:
  3404  001E3C  2EE8               	decfsz	wreg,f,c
  3405  001E3E  D7FE               	bra	u2017
  3406  001E40  D000               	nop2	
  3407                           
  3408                           ;lcd.c: 35:     LATDbits.LATD3 = 0;
  3409  001E42  968C               	bcf	3980,3,c	;volatile
  3410                           
  3411                           ;lcd.c: 36:     _delay((unsigned long)((100)*(10000000/4000000.0)));
  3412  001E44  0E53               	movlw	83
  3413  001E46                     u2027:
  3414  001E46  2EE8               	decfsz	wreg,f,c
  3415  001E48  D7FE               	bra	u2027
  3416  001E4A  F000               	nop	
  3417                           
  3418                           ;lcd.c: 37:     INTCONbits.GIE = interruptState;
  3419  001E4C  B00C               	btfsc	pulse_e@interruptState,0,c
  3420  001E4E  D002               	bra	u1295
  3421  001E50  9EF2               	bcf	4082,7,c	;volatile
  3422  001E52  D001               	bra	u1296
  3423  001E54                     u1295:
  3424  001E54  8EF2               	bsf	4082,7,c	;volatile
  3425  001E56                     u1296:
  3426  001E56  0012               	return		;funcret
  3427  001E58                     __end_of_pulse_e:
  3428                           	opt callstack 0
  3429                           
  3430 ;; *************** function _interruptHandler *****************
  3431 ;; Defined at:
  3432 ;;		line 146 in file "main.c"
  3433 ;; Parameters:    Size  Location     Type
  3434 ;;		None
  3435 ;; Auto vars:     Size  Location     Type
  3436 ;;  i               2    8[COMRAM] int 
  3437 ;;  keypress        1   10[COMRAM] unsigned char 
  3438 ;; Return value:  Size  Location     Type
  3439 ;;                  1    wreg      void 
  3440 ;; Registers used:
  3441 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
  3442 ;; Tracked objects:
  3443 ;;		On entry : 0/0
  3444 ;;		On exit  : 0/0
  3445 ;;		Unchanged: 0/0
  3446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3448 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3449 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3450 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3451 ;;Total ram usage:       11 bytes
  3452 ;; Hardware stack levels used:    1
  3453 ;; This function calls:
  3454 ;;		Nothing
  3455 ;; This function is called by:
  3456 ;;		Interrupt level 2
  3457 ;; This function uses a non-reentrant model
  3458 ;;
  3459                           
  3460                           	psect	intcode
  3461  000008                     __pintcode:
  3462                           	opt callstack 0
  3463  000008                     _interruptHandler:
  3464                           	opt callstack 19
  3465                           
  3466                           ;incstack = 0
  3467  000008  8274               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  3468  00000A  ED21  F00D         	call	int_func,f	;refresh shadow registers
  3469                           
  3470                           	psect	intcode_body
  3471  001A42                     __pintcode_body:
  3472                           	opt callstack 19
  3473  001A42                     int_func:
  3474                           	opt callstack 19
  3475  001A42  0006               	pop		; remove dummy address from shadow register refresh
  3476  001A44  CFF6 F005          	movff	tblptrl,??_interruptHandler+4
  3477  001A48  CFF7 F006          	movff	tblptrh,??_interruptHandler+5
  3478  001A4C  CFF8 F007          	movff	tblptru,??_interruptHandler+6
  3479  001A50  CFF5 F008          	movff	tablat,??_interruptHandler+7
  3480                           
  3481                           ;main.c: 148:     if(INT1IF){
  3482  001A54  A0F0               	btfss	4080,0,c	;volatile
  3483  001A56  D041               	goto	i2u128_40
  3484                           
  3485                           ;main.c: 152:         INT1IF = 0;
  3486  001A58  90F0               	bcf	4080,0,c	;volatile
  3487                           
  3488                           ;main.c: 154:         unsigned char keypress = (PORTB & 0xF0) >> 4;
  3489  001A5A  3881               	swapf	3969,w,c	;volatile
  3490  001A5C  0B0F               	andlw	15
  3491  001A5E  0B0F               	andlw	15
  3492  001A60  6E0B               	movwf	interruptHandler@keypress,c
  3493                           
  3494                           ;main.c: 156:         if (keys[keypress] == '*') {
  3495  001A62  0E01               	movlw	low _keys
  3496  001A64  240B               	addwf	interruptHandler@keypress,w,c
  3497  001A66  6EF6               	movwf	tblptrl,c
  3498  001A68  6AF7               	clrf	tblptrh,c
  3499  001A6A  0E10               	movlw	high _keys
  3500  001A6C  22F7               	addwfc	tblptrh,f,c
  3501  001A6E                     	if	0	;There are less than 3 active tblptr bytes
  3502  001A6E                     	endif
  3503  001A6E  0008               	tblrd		*
  3504  001A70  50F5               	movf	tablat,w,c
  3505  001A72  0A2A               	xorlw	42
  3506  001A74  A4D8               	btfss	status,2,c
  3507  001A76  D004               	goto	i2l1910
  3508                           
  3509                           ;main.c: 158:             exit_key = 1;
  3510  001A78  0E01               	movlw	1
  3511  001A7A  0100               	movlb	0	; () banked
  3512  001A7C  6FD6               	movwf	_exit_key& (0+255),b	;volatile
  3513  001A7E  D02D               	goto	i2u128_40
  3514  001A80                     i2l1910:
  3515                           
  3516                           ;main.c: 162:         for ( int i = 0; i < Canister; i++ ) {
  3517  001A80  0E00               	movlw	0
  3518  001A82  6E0A               	movwf	interruptHandler@i+1,c
  3519  001A84  0E00               	movlw	0
  3520  001A86  6E09               	movwf	interruptHandler@i,c
  3521  001A88  D01D               	goto	i2l1920
  3522  001A8A                     i2l1912:
  3523                           
  3524                           ; BSR set to: 0
  3525                           ;main.c: 164:             if ((char)i + '0' == keys[keypress]) {
  3526  001A8A  0E01               	movlw	low _keys
  3527  001A8C  240B               	addwf	interruptHandler@keypress,w,c
  3528  001A8E  6EF6               	movwf	tblptrl,c
  3529  001A90  6AF7               	clrf	tblptrh,c
  3530  001A92  0E10               	movlw	high _keys
  3531  001A94  22F7               	addwfc	tblptrh,f,c
  3532  001A96                     	if	0	;There are less than 3 active tblptr bytes
  3533  001A96                     	endif
  3534  001A96  0008               	tblrd		*
  3535  001A98  50F5               	movf	tablat,w,c
  3536  001A9A  6E01               	movwf	??_interruptHandler& (0+255),c
  3537  001A9C  6A02               	clrf	(??_interruptHandler+1)& (0+255),c
  3538  001A9E  5009               	movf	interruptHandler@i,w,c
  3539  001AA0  6E03               	movwf	(??_interruptHandler+2)& (0+255),c
  3540  001AA2  6A04               	clrf	(??_interruptHandler+3)& (0+255),c
  3541  001AA4  0E30               	movlw	48
  3542  001AA6  2603               	addwf	??_interruptHandler+2,f,c
  3543  001AA8  0E00               	movlw	0
  3544  001AAA  2204               	addwfc	??_interruptHandler+3,f,c
  3545  001AAC  5001               	movf	??_interruptHandler,w,c
  3546  001AAE  1803               	xorwf	??_interruptHandler+2,w,c
  3547  001AB0  E107               	bnz	i2l1918
  3548  001AB2  5002               	movf	??_interruptHandler+1,w,c
  3549  001AB4  1804               	xorwf	??_interruptHandler+3,w,c
  3550  001AB6  A4D8               	btfss	status,2,c
  3551  001AB8  D003               	goto	i2l1918
  3552                           
  3553                           ; BSR set to: 0
  3554                           ;main.c: 165:                 key_was_pressed = 1;
  3555  001ABA  0E01               	movlw	1
  3556  001ABC  6FD7               	movwf	_key_was_pressed& (0+255),b	;volatile
  3557  001ABE  D00D               	goto	i2u128_40
  3558  001AC0                     i2l1918:
  3559                           
  3560                           ; BSR set to: 0
  3561                           ;main.c: 169:         }
  3562  001AC0  4A09               	infsnz	interruptHandler@i,f,c
  3563  001AC2  2A0A               	incf	interruptHandler@i+1,f,c
  3564  001AC4                     i2l1920:
  3565  001AC4  0100               	movlb	0	; () banked
  3566  001AC6  51D2               	movf	_Canister& (0+255),w,b
  3567  001AC8  5C09               	subwf	interruptHandler@i,w,c
  3568  001ACA  500A               	movf	interruptHandler@i+1,w,c
  3569  001ACC  0A80               	xorlw	128
  3570  001ACE  6E01               	movwf	??_interruptHandler& (0+255),c
  3571  001AD0  51D3               	movf	(_Canister+1)& (0+255),w,b
  3572  001AD2  0A80               	xorlw	128
  3573  001AD4  5801               	subwfb	??_interruptHandler& (0+255),w,c
  3574  001AD6  A0D8               	btfss	status,0,c
  3575  001AD8  D7D8               	goto	i2l1912
  3576  001ADA                     i2u128_40:
  3577  001ADA  C008  FFF5         	movff	??_interruptHandler+7,tablat
  3578  001ADE  C007  FFF8         	movff	??_interruptHandler+6,tblptru
  3579  001AE2  C006  FFF7         	movff	??_interruptHandler+5,tblptrh
  3580  001AE6  C005  FFF6         	movff	??_interruptHandler+4,tblptrl
  3581  001AEA  9274               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  3582  001AEC  0011               	retfie		f
  3583  001AEE                     __end_of_interruptHandler:
  3584                           	opt callstack 0
  3585                           
  3586                           	psect	rparam
  3587  0000                     
  3588                           	psect	temp
  3589  000074                     btemp:
  3590                           	opt callstack 0
  3591  000074                     	ds	1
  3592  0000                     int$flags	set	btemp
  3593  0000                     wtemp8	set	btemp+1
  3594  0000                     ttemp5	set	btemp+1
  3595  0000                     ttemp6	set	btemp+4
  3596  0000                     ttemp7	set	btemp+8
  3597                           tosu	equ	0xFFF
  3598                           tosh	equ	0xFFE
  3599                           tosl	equ	0xFFD
  3600                           stkptr	equ	0xFFC
  3601                           pclatu	equ	0xFFB
  3602                           pclath	equ	0xFFA
  3603                           pcl	equ	0xFF9
  3604                           tblptru	equ	0xFF8
  3605                           tblptrh	equ	0xFF7
  3606                           tblptrl	equ	0xFF6
  3607                           tablat	equ	0xFF5
  3608                           prodh	equ	0xFF4
  3609                           prodl	equ	0xFF3
  3610                           indf0	equ	0xFEF
  3611                           postinc0	equ	0xFEE
  3612                           postdec0	equ	0xFED
  3613                           preinc0	equ	0xFEC
  3614                           plusw0	equ	0xFEB
  3615                           fsr0h	equ	0xFEA
  3616                           fsr0l	equ	0xFE9
  3617                           wreg	equ	0xFE8
  3618                           indf1	equ	0xFE7
  3619                           postinc1	equ	0xFE6
  3620                           postdec1	equ	0xFE5
  3621                           preinc1	equ	0xFE4
  3622                           plusw1	equ	0xFE3
  3623                           fsr1h	equ	0xFE2
  3624                           fsr1l	equ	0xFE1
  3625                           bsr	equ	0xFE0
  3626                           indf2	equ	0xFDF
  3627                           postinc2	equ	0xFDE
  3628                           postdec2	equ	0xFDD
  3629                           preinc2	equ	0xFDC
  3630                           plusw2	equ	0xFDB
  3631                           fsr2h	equ	0xFDA
  3632                           fsr2l	equ	0xFD9
  3633                           status	equ	0xFD8


Data Sizes:
    Strings     170
    Constant    23
    Data        86
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    107     115
    BANK0           128      6     126
    BANK1           256      7       7
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    strlen@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    printf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_13(CODE[15]), STR_12(CODE[12]), STR_11(CODE[15]), STR_10(CODE[12]), 
		 -> STR_9(CODE[16]), STR_8(CODE[9]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[13]), STR_4(CODE[15]), STR_3(CODE[11]), STR_2(CODE[15]), 
		 -> STR_1(CODE[17]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    fputs@s	PTR const unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 

    fputs@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    S769_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_13(CODE[15]), STR_12(CODE[12]), STR_11(CODE[15]), STR_10(CODE[12]), 
		 -> STR_9(CODE[16]), STR_8(CODE[9]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[13]), STR_4(CODE[15]), STR_3(CODE[11]), STR_2(CODE[15]), 
		 -> STR_1(CODE[17]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 17
		 -> STR_13(CODE[15]), STR_12(CODE[12]), STR_11(CODE[15]), STR_10(CODE[12]), 
		 -> STR_9(CODE[16]), STR_8(CODE[9]), STR_7(CODE[9]), STR_6(CODE[11]), 
		 -> STR_5(CODE[13]), STR_4(CODE[15]), STR_3(CODE[11]), STR_2(CODE[15]), 
		 -> STR_1(CODE[17]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    vfpfcnvrt@ap	PTR PTR void  size(2) Largest target is 2
		 -> printf@ap(BANK0[2]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(2) Largest target is 2
		 -> vfprintf@cfmt(COMRAM[2]), 

    dtoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    ctoa@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@fp	PTR struct _IO_FILE size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    pad@buf	PTR unsigned char  size(2) Largest target is 32
		 -> dbuf(BANK0[32]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_dtoa
    _dtoa->_pad
    _abs->___aomod
    _ctoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _fputc->_putch
    _putch->_send_byte
    _initLCD->_lcdInst
    _lcdInst->_send_byte
    _send_byte->_send_nibble
    _send_nibble->_pulse_e

Critical Paths under _interruptHandler in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->_printf

Critical Paths under _interruptHandler in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _interruptHandler in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _interruptHandler in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _interruptHandler in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _interruptHandler in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _interruptHandler in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _interruptHandler in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _interruptHandler in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _interruptHandler in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _interruptHandler in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _interruptHandler in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _interruptHandler in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _interruptHandler in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _interruptHandler in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _interruptHandler in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _interruptHandler in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 9     9      0   14835
                                              4 BANK0      2     2      0
                                              0 BANK1      7     7      0
                            _initLCD
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                               8     4      4   13916
                                            103 COMRAM     4     0      4
                                              0 BANK0      4     4      0
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             8     2      6   12659
                                             95 COMRAM     8     2      6
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           42    36      6   12177
                                             78 COMRAM    17    11      6
                               _ctoa
                               _dtoa
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _dtoa                                                36    26     10    6083
                                             42 COMRAM    36    26     10
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (5) _abs                                                  4     2      2     183
                                             29 COMRAM     4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (5) ___aomod                                             18     2     16     613
                                             11 COMRAM    18     2     16
 ---------------------------------------------------------------------------------
 (5) ___aodiv                                             26    10     16     625
                                             11 COMRAM    26    10     16
 ---------------------------------------------------------------------------------
 (4) _ctoa                                                 7     4      3    4096
                                             42 COMRAM     5     2      3
                                _pad
 ---------------------------------------------------------------------------------
 (5) _pad                                                 11     5      6    3817
                                             31 COMRAM    11     5      6
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _strlen                                               4     2      2     220
                                             11 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (6) _fputs                                                7     3      4    1602
                                             24 COMRAM     7     3      4
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                                9     5      4    1102
                                             15 COMRAM     9     5      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     350
                                             15 COMRAM     1     1      0
                            _lcdInst
                          _send_byte
                        _send_nibble
 ---------------------------------------------------------------------------------
 (1) _lcdInst                                              1     1      0     158
                                             14 COMRAM     1     1      0
                          _send_byte
 ---------------------------------------------------------------------------------
 (6) _send_byte                                            1     1      0     127
                                             13 COMRAM     1     1      0
                        _send_nibble
 ---------------------------------------------------------------------------------
 (7) _send_nibble                                          1     1      0      65
                                             12 COMRAM     1     1      0
                            _pulse_e
 ---------------------------------------------------------------------------------
 (8) _pulse_e                                              1     1      0      34
                                             11 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _interruptHandler                                   11    11      0      91
                                              0 COMRAM    11    11      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _initLCD
     _lcdInst
       _send_byte
         _send_nibble
           _pulse_e
     _send_byte
       _send_nibble
         _pulse_e
     _send_nibble
       _pulse_e
   _lcdInst
     _send_byte
       _send_nibble
         _pulse_e
   _printf
     _vfprintf
       _vfpfcnvrt
         _ctoa
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _dtoa
           ___aodiv
           ___aomod
           _abs
             ___aomod (ARG)
           _pad
             _fputc
               _putch
                 _send_byte
                   _send_nibble
                     _pulse_e
             _fputs
               _fputc
                 _putch
                   _send_byte
                     _send_nibble
                       _pulse_e
             _strlen
         _fputc
           _putch
             _send_byte
               _send_nibble
                 _pulse_e

 _interruptHandler (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      7       7       7        2.7%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      6      7E       5       98.4%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     6B      73       1       91.3%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      F8      34        0.0%
DATA                 0      0      F8       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Feb  1 16:53:53 2019

              __CFG_CPD$ON 000000                __CFG_BORV$3 000000               __CFG_CP0$OFF 000000  
             __CFG_CP1$OFF 000000               __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000  
              __CFG_OSC$HS 000000                        l153 1B1C                        l171 1420  
                      l173 1428                        l884 1DFA               __CFG_CPB$OFF 000000  
                      _abs 1DD2                        _pad 1AEE                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       ?_abs 001E  
                     l2020 1850                       l2100 1404                       l2022 1864  
                     l2014 182A                       l2040 18FC                       l2032 18C0  
                     l2008 1802                       l2114 1442                       l2036 18D6  
                     l2060 1988                       l2052 194A                       l2062 199C  
                     l2118 1452                       l2214 1CC2                       l2072 19FA  
                     l2056 196E                       l2152 15C6                       l2128 154A  
                     l2216 1CE6                       l2084 1D14                       l2076 1A20  
                     l2068 19E4                       l2148 15AE                       l2172 1692  
                     l2308 1190                       l2086 1D20                       l2182 1744  
                     l2326 11EE                       l2192 178A                       l2346 125A  
                     l2290 1130                       l2188 1780                       l2380 135A  
                     l2198 17A2                       l2366 12CC                       l2384 136A  
                     l2394 1396                       l1962 1DBA                       l1948 1B9C  
                     l1958 1DA4                       l1966 1E0E                       l1982 1B14  
                     ?_pad 0020                       l1968 1E12                       l1992 1B6A  
                     l1984 1B26                       l1978 1B06                       l1988 1B3E  
                     STR_1 1018                       STR_2 1048                       STR_3 109A  
                     STR_4 1066                       STR_5 1075                       STR_6 10A5  
                     STR_7 10B0                       STR_8 10B9                       STR_9 1029  
                     u1310 1B94                       u2007 1C42                       u1400 1DE0  
                     u2017 1E3C                       u1330 1BDC                       u2027 1E46  
                     u1510 19A0                       u1431 1830                       _LATD 000F8C  
                     u1450 1868                       u1610 143C                       u1620 1558  
                     u1550 13D6                       u1295 1E54                       u1296 1E56  
                     u1640 157A                       u1560 13D8                       u1641 1578  
                     u1650 1588                       u1730 16C6                       u1660 158C  
                     u1590 1416                       u1680 1598                       u1907 1126  
                     u1917 1150                       u1927 11AE                       u1937 120E  
                     u1947 127A                       u1957 12E2                       u1967 13A2  
                     u1977 1BF6                       u1897 110A                       u1987 1C0E  
                     u1997 1C20                       abs@a 001E                       _dbuf 00D8  
                     _ctoa 1D02                       _main 10C4                       _dtoa 13AE  
 __end_of_interruptHandler 1AEE                       _keys 1001                       _prec 0070  
                     _time 00D4                       _nout 006C                       pad@i 0027  
                     pad@p 0024                       fsr1h 000FE2                       fsr2h 000FDA  
                     indf2 000FDF                       fsr1l 000FE1                       pad@w 0029  
                     fsr2l 000FD9                       btemp 0074                       start 000E  
            __CFG_IESO$OFF 000000              __CFG_MCLRE$ON 000000               ___param_bank 000000  
                    ??_abs 0020                      ??_pad 0026            __end_of___aodiv 191E  
                    ?_ctoa 002B                      ?_main 0001                      ?_dtoa 002B  
          __end_of___aomod 1A42                      STR_10 108E                      STR_11 1039  
                    STR_12 1082                      STR_13 1057                 _FinalState 00A8  
             vfpfcnvrt@fmt 0051                      _PORTB 000F81                      _TRISD 000F95  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 1EC0  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000               main@keypress 0102             __CFG_EBTR3$OFF 000000  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
                    _balls 00D0            __end_of_initLCD 1C5A             __CFG_EBTRB$OFF 000000  
                    _flags 0072              _BallDispensed 0080                      _fputc 1B84  
                    _fputs 1D9A                      pad@fp 0020                      _width 006E  
                    ctoa@c 002D                      _putch 1EA8                      ctoa@w 002E  
                    dtoa@d 002D                      dtoa@i 004D                      dtoa@n 0045  
                    dtoa@p 003F                      dtoa@s 0043                      dtoa@w 0041  
                    tablat 000FF5            send_nibble@data 000D            __end_of_pulse_e 1E58  
                    ttemp5 0075                      ttemp6 0078                      ttemp7 007C  
                    status 000FD8                      wtemp8 0075             __CFG_PBADEN$ON 000000  
          __initialization 1D50               __end_of_ctoa 1D50               __end_of_main 13AE  
             __end_of_dtoa 15F0               __end_of_keys 1012                     ??_ctoa 002E  
                   ??_main 00FC                     ??_dtoa 0035              __activetblptr 000001  
                   _ADCON1 000FC1               ?_send_nibble 0001                     ?_fputc 0010  
                   ?_fputs 0019                     ?_putch 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     i2l1910 1A80                     i2l1912 1A8A  
                   i2l1920 1AC4                     i2l1918 1AC0             __CFG_XINST$OFF 000000  
             vfprintf@cfmt 0066                  ??___aodiv 001C                  ??___aomod 001C  
           __CFG_STVREN$ON 000000                     clear_0 1D76                     clear_1 1D82  
                ??_lcdInst 000F                     _printf 1E58                     pad@buf 0022  
                   ctoa@fp 002B                     dtoa@fp 002B                     _strlen 1E04  
                ??_initLCD 0010                     fputc@c 0010                     fputs@c 001D  
                   fputs@i 001E                     fputs@s 0019               __mediumconst 0000  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
         __end_of_vfprintf 1D02                  ??_pulse_e 000C      pulse_e@interruptState 000C  
               __accesstop 0080    __end_of__initialization 1D88              ___rparam_used 000001  
           __pcstackCOMRAM 0001               __pidataBANK0 1C5A              __end_of_fputc 1BF0  
            __end_of_fputs 1DD2              __end_of_putch 1EB4            _key_was_pressed 00D7  
                  ??_fputc 0014                    ??_fputs 001D                    ??_putch 000F  
               __pbssBANK0 00D6          ?_interruptHandler 0001         ??_interruptHandler 0001  
       __size_of_send_byte 0012                    ?_printf 0068                    ?_strlen 000C  
       __size_of_vfpfcnvrt 01E6       __size_of_send_nibble 0016           _DistanceCanister 0094  
                  __Hparam 0000                    __Lparam 0000                    ___aodiv 17D6  
                  ___aomod 191E                  ?_vfprintf 0060               __psmallconst 1000  
 interruptHandler@keypress 000B                    __pcinit 1D50                    __ramtop 1000  
                  _lcdInst 1EB4                    __ptext0 10C4                    __ptext1 1E58  
                  __ptext2 1CB0                    __ptext3 15F0                    __ptext4 13AE  
                  __ptext5 1DD2                    __ptext6 191E                    __ptext7 17D6  
                  __ptext8 1D02                    __ptext9 1AEE            __size_of_printf 0028  
          __size_of_strlen 002A                    _initLCD 1BF0               __size_of_abs 0032  
             __size_of_pad 0096                    _pulse_e 1E2E             __pintcode_body 1A42  
     end_of_initialization 1D88      __end_of_LCD_SIZE_HORZ 1018          __end_of_send_byte 1EA8  
    __end_of_LCD_SIZE_VERT 1017                    fputc@fp 0012                    int_func 1A42  
                  fputs@fp 001B          __end_of_vfpfcnvrt 17D6                    postdec1 000FE5  
                  postdec2 000FDD                    postinc0 000FEE                    postinc1 000FE6  
                  postinc2 000FDE                 ??_vfprintf 0066                    strlen@a 000E  
                  strlen@s 000C              send_byte@data 000E                vfpfcnvrt@ap 0053  
              vfpfcnvrt@fp 004F                vfpfcnvrt@ll 0057             __end_of_printf 1E80  
           __end_of_strlen 1E2E        start_initialization 1D50                __end_of_abs 1E04  
              __end_of_pad 1B84               _InitialState 00BC          interruptHandler@i 0009  
              vfprintf@fmt 0062                __pdataBANK0 0080           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 006C  __size_of_interruptHandler 1AE6                   ??_strlen 000E  
              __pbssCOMRAM 006C              __pcstackBANK0 00F8              __pcstackBANK1 0100  
         ___aodiv@dividend 000C          __CFG_CCP2MX$PORTC 000000                  __pintcode 0008  
                 ?___aodiv 000C                   ?___aomod 000C           ___aodiv@quotient 001E  
                 ?_lcdInst 0001          __size_of_vfprintf 0052                   ?_initLCD 0001  
              __smallconst 1000              ??_send_nibble 000D                   ?_pulse_e 0001  
           __size_of_fputc 006C             __size_of_fputs 0038             __size_of_putch 000C  
                 _LATDbits 000F8C                  _send_byte 1E96             _LCD_LINE1_ADDR 1015  
           _LCD_LINE2_ADDR 1014             _LCD_LINE3_ADDR 1013             _LCD_LINE4_ADDR 1012  
                 i2u128_40 1ADA           __CFG_WDTPS$32768 000000                  _vfpfcnvrt 15F0  
                main@clear 0103                   _Canister 00D2                  main@state 0105  
               vfpfcnvrt@c 005F                  copy_data0 1D64     __end_of_LCD_LINE1_ADDR 1016  
   __end_of_LCD_LINE2_ADDR 1015     __end_of_LCD_LINE3_ADDR 1014     __end_of_LCD_LINE4_ADDR 1013  
      __end_of_send_nibble 1E96                 ?_send_byte 0001                   __Hrparam 0000  
               vfprintf@ap 0064                   __Lrparam 0000                 vfprintf@fp 0060  
             __Lsmallconst 1000         __CFG_BOREN$SBORDIS 000000           __size_of___aodiv 0148  
         __size_of___aomod 0124                 ?_vfpfcnvrt 004F            ___aodiv@divisor 0014  
         _interruptHandler 0008            ___aodiv@counter 001C           __size_of_lcdInst 000C  
         __size_of_initLCD 006A                   _dtoa$308 003D                   __ptext10 1E04  
                 __ptext11 1D9A                   __ptext12 1B84                   __ptext13 1EA8  
                 __ptext14 1BF0                   __ptext15 1EB4                   __ptext16 1E96  
                 __ptext17 1E80                   __ptext18 1E2E           __size_of_pulse_e 002A  
            __size_of_ctoa 004E              __size_of_main 02EA              __size_of_dtoa 0242  
                 _exit_key 00D6                   int$flags 0074                   _vfprintf 1CB0  
                printf@fmt 0068                   main@tick 0100           ___aomod@dividend 000C  
                putch@data 000F                 _INTCONbits 000FF2                _send_nibble 1E80  
                 intlevel2 0000              _LCD_SIZE_HORZ 1017              _LCD_SIZE_VERT 1016  
              ??_send_byte 000E                   printf@ap 00FA            ___aomod@divisor 0014  
              ??_vfpfcnvrt 0055                lcdInst@data 000F            ___aomod@counter 001C  
             ___aodiv@sign 001D               ___aomod@sign 001D  
